
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7ac  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a984  0800a984  0000b984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9dc  0800a9dc  0000c23c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9dc  0800a9dc  0000b9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e4  0800a9e4  0000c23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e4  0800a9e4  0000b9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9e8  0800a9e8  0000b9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  0800a9ec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f94  20000240  0800ac28  0000c240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011d4  0800ac28  0000d1d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c23c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef0e  00000000  00000000  0000c26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b35  00000000  00000000  0002b17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0002ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ba  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a152  00000000  00000000  0003153a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d362  00000000  00000000  0005b68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001153f4  00000000  00000000  000789ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018dde2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ac  00000000  00000000  0018de28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001941d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000240 	.word	0x20000240
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a96c 	.word	0x0800a96c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000244 	.word	0x20000244
 8000214:	0800a96c 	.word	0x0800a96c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_uldivmod>:
 8000e10:	b953      	cbnz	r3, 8000e28 <__aeabi_uldivmod+0x18>
 8000e12:	b94a      	cbnz	r2, 8000e28 <__aeabi_uldivmod+0x18>
 8000e14:	2900      	cmp	r1, #0
 8000e16:	bf08      	it	eq
 8000e18:	2800      	cmpeq	r0, #0
 8000e1a:	bf1c      	itt	ne
 8000e1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e20:	f04f 30ff 	movne.w	r0, #4294967295
 8000e24:	f000 b96a 	b.w	80010fc <__aeabi_idiv0>
 8000e28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e30:	f000 f806 	bl	8000e40 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4770      	bx	lr

08000e40 <__udivmoddi4>:
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	9d08      	ldr	r5, [sp, #32]
 8000e46:	460c      	mov	r4, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d14e      	bne.n	8000eea <__udivmoddi4+0xaa>
 8000e4c:	4694      	mov	ip, r2
 8000e4e:	458c      	cmp	ip, r1
 8000e50:	4686      	mov	lr, r0
 8000e52:	fab2 f282 	clz	r2, r2
 8000e56:	d962      	bls.n	8000f1e <__udivmoddi4+0xde>
 8000e58:	b14a      	cbz	r2, 8000e6e <__udivmoddi4+0x2e>
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	fa20 f303 	lsr.w	r3, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f f68c 	uxth.w	r6, ip
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb04 f106 	mul.w	r1, r4, r6
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x64>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e96:	f080 8112 	bcs.w	80010be <__udivmoddi4+0x27e>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 810f 	bls.w	80010be <__udivmoddi4+0x27e>
 8000ea0:	3c02      	subs	r4, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a59      	subs	r1, r3, r1
 8000ea6:	fa1f f38e 	uxth.w	r3, lr
 8000eaa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eae:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f606 	mul.w	r6, r0, r6
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d90a      	bls.n	8000ed4 <__udivmoddi4+0x94>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec6:	f080 80fc 	bcs.w	80010c2 <__udivmoddi4+0x282>
 8000eca:	429e      	cmp	r6, r3
 8000ecc:	f240 80f9 	bls.w	80010c2 <__udivmoddi4+0x282>
 8000ed0:	4463      	add	r3, ip
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	1b9b      	subs	r3, r3, r6
 8000ed6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eda:	2100      	movs	r1, #0
 8000edc:	b11d      	cbz	r5, 8000ee6 <__udivmoddi4+0xa6>
 8000ede:	40d3      	lsrs	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d905      	bls.n	8000efa <__udivmoddi4+0xba>
 8000eee:	b10d      	cbz	r5, 8000ef4 <__udivmoddi4+0xb4>
 8000ef0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e7f5      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000efa:	fab3 f183 	clz	r1, r3
 8000efe:	2900      	cmp	r1, #0
 8000f00:	d146      	bne.n	8000f90 <__udivmoddi4+0x150>
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	d302      	bcc.n	8000f0c <__udivmoddi4+0xcc>
 8000f06:	4290      	cmp	r0, r2
 8000f08:	f0c0 80f0 	bcc.w	80010ec <__udivmoddi4+0x2ac>
 8000f0c:	1a86      	subs	r6, r0, r2
 8000f0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d0e6      	beq.n	8000ee6 <__udivmoddi4+0xa6>
 8000f18:	e9c5 6300 	strd	r6, r3, [r5]
 8000f1c:	e7e3      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	f040 8090 	bne.w	8001044 <__udivmoddi4+0x204>
 8000f24:	eba1 040c 	sub.w	r4, r1, ip
 8000f28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f2c:	fa1f f78c 	uxth.w	r7, ip
 8000f30:	2101      	movs	r1, #1
 8000f32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f42:	fb07 f006 	mul.w	r0, r7, r6
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d908      	bls.n	8000f5c <__udivmoddi4+0x11c>
 8000f4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f52:	d202      	bcs.n	8000f5a <__udivmoddi4+0x11a>
 8000f54:	4298      	cmp	r0, r3
 8000f56:	f200 80cd 	bhi.w	80010f4 <__udivmoddi4+0x2b4>
 8000f5a:	4626      	mov	r6, r4
 8000f5c:	1a1c      	subs	r4, r3, r0
 8000f5e:	fa1f f38e 	uxth.w	r3, lr
 8000f62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f66:	fb08 4410 	mls	r4, r8, r0, r4
 8000f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6e:	fb00 f707 	mul.w	r7, r0, r7
 8000f72:	429f      	cmp	r7, r3
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x148>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7e:	d202      	bcs.n	8000f86 <__udivmoddi4+0x146>
 8000f80:	429f      	cmp	r7, r3
 8000f82:	f200 80b0 	bhi.w	80010e6 <__udivmoddi4+0x2a6>
 8000f86:	4620      	mov	r0, r4
 8000f88:	1bdb      	subs	r3, r3, r7
 8000f8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8e:	e7a5      	b.n	8000edc <__udivmoddi4+0x9c>
 8000f90:	f1c1 0620 	rsb	r6, r1, #32
 8000f94:	408b      	lsls	r3, r1
 8000f96:	fa22 f706 	lsr.w	r7, r2, r6
 8000f9a:	431f      	orrs	r7, r3
 8000f9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa0:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa4:	ea43 030c 	orr.w	r3, r3, ip
 8000fa8:	40f4      	lsrs	r4, r6
 8000faa:	fa00 f801 	lsl.w	r8, r0, r1
 8000fae:	0c38      	lsrs	r0, r7, #16
 8000fb0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb4:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb8:	fa1f fc87 	uxth.w	ip, r7
 8000fbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc8:	45a1      	cmp	r9, r4
 8000fca:	fa02 f201 	lsl.w	r2, r2, r1
 8000fce:	d90a      	bls.n	8000fe6 <__udivmoddi4+0x1a6>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd6:	f080 8084 	bcs.w	80010e2 <__udivmoddi4+0x2a2>
 8000fda:	45a1      	cmp	r9, r4
 8000fdc:	f240 8081 	bls.w	80010e2 <__udivmoddi4+0x2a2>
 8000fe0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe4:	443c      	add	r4, r7
 8000fe6:	eba4 0409 	sub.w	r4, r4, r9
 8000fea:	fa1f f983 	uxth.w	r9, r3
 8000fee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ff2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffe:	45a4      	cmp	ip, r4
 8001000:	d907      	bls.n	8001012 <__udivmoddi4+0x1d2>
 8001002:	193c      	adds	r4, r7, r4
 8001004:	f103 30ff 	add.w	r0, r3, #4294967295
 8001008:	d267      	bcs.n	80010da <__udivmoddi4+0x29a>
 800100a:	45a4      	cmp	ip, r4
 800100c:	d965      	bls.n	80010da <__udivmoddi4+0x29a>
 800100e:	3b02      	subs	r3, #2
 8001010:	443c      	add	r4, r7
 8001012:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001016:	fba0 9302 	umull	r9, r3, r0, r2
 800101a:	eba4 040c 	sub.w	r4, r4, ip
 800101e:	429c      	cmp	r4, r3
 8001020:	46ce      	mov	lr, r9
 8001022:	469c      	mov	ip, r3
 8001024:	d351      	bcc.n	80010ca <__udivmoddi4+0x28a>
 8001026:	d04e      	beq.n	80010c6 <__udivmoddi4+0x286>
 8001028:	b155      	cbz	r5, 8001040 <__udivmoddi4+0x200>
 800102a:	ebb8 030e 	subs.w	r3, r8, lr
 800102e:	eb64 040c 	sbc.w	r4, r4, ip
 8001032:	fa04 f606 	lsl.w	r6, r4, r6
 8001036:	40cb      	lsrs	r3, r1
 8001038:	431e      	orrs	r6, r3
 800103a:	40cc      	lsrs	r4, r1
 800103c:	e9c5 6400 	strd	r6, r4, [r5]
 8001040:	2100      	movs	r1, #0
 8001042:	e750      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8001044:	f1c2 0320 	rsb	r3, r2, #32
 8001048:	fa20 f103 	lsr.w	r1, r0, r3
 800104c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001050:	fa24 f303 	lsr.w	r3, r4, r3
 8001054:	4094      	lsls	r4, r2
 8001056:	430c      	orrs	r4, r1
 8001058:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800105c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	fbb3 f0f8 	udiv	r0, r3, r8
 8001068:	fb08 3110 	mls	r1, r8, r0, r3
 800106c:	0c23      	lsrs	r3, r4, #16
 800106e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001072:	fb00 f107 	mul.w	r1, r0, r7
 8001076:	4299      	cmp	r1, r3
 8001078:	d908      	bls.n	800108c <__udivmoddi4+0x24c>
 800107a:	eb1c 0303 	adds.w	r3, ip, r3
 800107e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001082:	d22c      	bcs.n	80010de <__udivmoddi4+0x29e>
 8001084:	4299      	cmp	r1, r3
 8001086:	d92a      	bls.n	80010de <__udivmoddi4+0x29e>
 8001088:	3802      	subs	r0, #2
 800108a:	4463      	add	r3, ip
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb3 f1f8 	udiv	r1, r3, r8
 8001094:	fb08 3311 	mls	r3, r8, r1, r3
 8001098:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800109c:	fb01 f307 	mul.w	r3, r1, r7
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0x276>
 80010a4:	eb1c 0404 	adds.w	r4, ip, r4
 80010a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80010ac:	d213      	bcs.n	80010d6 <__udivmoddi4+0x296>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d911      	bls.n	80010d6 <__udivmoddi4+0x296>
 80010b2:	3902      	subs	r1, #2
 80010b4:	4464      	add	r4, ip
 80010b6:	1ae4      	subs	r4, r4, r3
 80010b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010bc:	e739      	b.n	8000f32 <__udivmoddi4+0xf2>
 80010be:	4604      	mov	r4, r0
 80010c0:	e6f0      	b.n	8000ea4 <__udivmoddi4+0x64>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e706      	b.n	8000ed4 <__udivmoddi4+0x94>
 80010c6:	45c8      	cmp	r8, r9
 80010c8:	d2ae      	bcs.n	8001028 <__udivmoddi4+0x1e8>
 80010ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80010d2:	3801      	subs	r0, #1
 80010d4:	e7a8      	b.n	8001028 <__udivmoddi4+0x1e8>
 80010d6:	4631      	mov	r1, r6
 80010d8:	e7ed      	b.n	80010b6 <__udivmoddi4+0x276>
 80010da:	4603      	mov	r3, r0
 80010dc:	e799      	b.n	8001012 <__udivmoddi4+0x1d2>
 80010de:	4630      	mov	r0, r6
 80010e0:	e7d4      	b.n	800108c <__udivmoddi4+0x24c>
 80010e2:	46d6      	mov	lr, sl
 80010e4:	e77f      	b.n	8000fe6 <__udivmoddi4+0x1a6>
 80010e6:	4463      	add	r3, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e74d      	b.n	8000f88 <__udivmoddi4+0x148>
 80010ec:	4606      	mov	r6, r0
 80010ee:	4623      	mov	r3, r4
 80010f0:	4608      	mov	r0, r1
 80010f2:	e70f      	b.n	8000f14 <__udivmoddi4+0xd4>
 80010f4:	3e02      	subs	r6, #2
 80010f6:	4463      	add	r3, ip
 80010f8:	e730      	b.n	8000f5c <__udivmoddi4+0x11c>
 80010fa:	bf00      	nop

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <easyCase>:
void Reset(){
	registerFrame[0x01].U16 = 0;
	registerFrame[0x10].U16 = 0;
}

void easyCase(){
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	base.Base_case = registerFrame[0x01].U16;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <easyCase+0x28>)
 8001106:	885a      	ldrh	r2, [r3, #2]
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <easyCase+0x2c>)
 800110a:	86da      	strh	r2, [r3, #54]	@ 0x36
	base.Vacuum_case = registerFrame[0x02].U16;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <easyCase+0x28>)
 800110e:	889a      	ldrh	r2, [r3, #4]
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <easyCase+0x2c>)
 8001112:	871a      	strh	r2, [r3, #56]	@ 0x38
	base.Gripper_case = registerFrame[0x03].U16;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <easyCase+0x28>)
 8001116:	88da      	ldrh	r2, [r3, #6]
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <easyCase+0x2c>)
 800111a:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20001030 	.word	0x20001030
 800112c:	20000284 	.word	0x20000284

08001130 <Heartbeat>:

void Heartbeat(){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <Heartbeat+0x18>)
 8001136:	f645 1261 	movw	r2, #22881	@ 0x5961
 800113a:	801a      	strh	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20001030 	.word	0x20001030

0800114c <Routine>:

void Routine(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <Routine+0xa8>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001158:	4293      	cmp	r3, r2
 800115a:	d149      	bne.n	80011f0 <Routine+0xa4>
	{
		//Gripper 0x04 not sure!?!?
		registerFrame[0x04].U16 = base.ReedStatus;   					//Gripper status 0b0010 = 0000 0000 0000 0010
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <Routine+0xac>)
 800115e:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <Routine+0xa8>)
 8001162:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = base.BaseStatus;							//Z-axis status 0010 = 1
 8001164:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <Routine+0xac>)
 8001166:	881a      	ldrh	r2, [r3, #0]
 8001168:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <Routine+0xa8>)
 800116a:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = AMT.Linear_Position			*10;	//Z-axis position
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Routine+0xb0>)
 800116e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001172:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117e:	ee17 3a90 	vmov	r3, s15
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <Routine+0xa8>)
 8001186:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = fabs(AMT.Linear_Velocity)		*10;	//Z-axis speed
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <Routine+0xb0>)
 800118a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800118e:	eef0 7ae7 	vabs.f32	s15, s15
 8001192:	ee17 0a90 	vmov	r0, s15
 8001196:	f7ff f9a3 	bl	80004e0 <__aeabi_f2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <Routine+0xb4>)
 80011a0:	f7ff f9f6 	bl	8000590 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fcb2 	bl	8000b14 <__aeabi_d2uiz>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <Routine+0xa8>)
 80011b6:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = fabs(AMT.Linear_Acceleration)	*10;	//Z-axis acceleration
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <Routine+0xb0>)
 80011ba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80011be:	eef0 7ae7 	vabs.f32	s15, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f98b 	bl	80004e0 <__aeabi_f2d>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <Routine+0xb4>)
 80011d0:	f7ff f9de 	bl	8000590 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fc9a 	bl	8000b14 <__aeabi_d2uiz>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <Routine+0xa8>)
 80011e6:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = 4								*10;	//X-axis position
 80011e8:	4b02      	ldr	r3, [pc, #8]	@ (80011f4 <Routine+0xa8>)
 80011ea:	2228      	movs	r2, #40	@ 0x28
 80011ec:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20001030 	.word	0x20001030
 80011f8:	20000284 	.word	0x20000284
 80011fc:	20000a78 	.word	0x20000a78
 8001200:	40240000 	.word	0x40240000

08001204 <Vacuum>:

void Vacuum(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <Vacuum+0x3c>)
 800120a:	889b      	ldrh	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d108      	bne.n	8001222 <Vacuum+0x1e>
		base.Vacuum = 0;			//Vacuum status: Off
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <Vacuum+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	829a      	strh	r2, [r3, #20]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);			// Vacuum off
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <Vacuum+0x44>)
 800121c:	f004 fa98 	bl	8005750 <HAL_GPIO_WritePin>
	else if(registerFrame[0x02].U16 == 0b0001){
		base.Vacuum = 1;			//Vacuum status: On
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on

	}
}
 8001220:	e00b      	b.n	800123a <Vacuum+0x36>
	else if(registerFrame[0x02].U16 == 0b0001){
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <Vacuum+0x3c>)
 8001224:	889b      	ldrh	r3, [r3, #4]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d107      	bne.n	800123a <Vacuum+0x36>
		base.Vacuum = 1;			//Vacuum status: On
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <Vacuum+0x40>)
 800122c:	2201      	movs	r2, #1
 800122e:	829a      	strh	r2, [r3, #20]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on
 8001230:	2201      	movs	r2, #1
 8001232:	2120      	movs	r1, #32
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <Vacuum+0x44>)
 8001236:	f004 fa8b 	bl	8005750 <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20001030 	.word	0x20001030
 8001244:	20000284 	.word	0x20000284
 8001248:	48000800 	.word	0x48000800

0800124c <GripperMovement>:

void GripperMovement(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <GripperMovement+0x58>)
 8001252:	88db      	ldrh	r3, [r3, #6]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10f      	bne.n	8001278 <GripperMovement+0x2c>
		base.Gripper = 0;			//Gripper Movement: Backward
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <GripperMovement+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 800125e:	2201      	movs	r2, #1
 8001260:	2110      	movs	r1, #16
 8001262:	4812      	ldr	r0, [pc, #72]	@ (80012ac <GripperMovement+0x60>)
 8001264:	f004 fa74 	bl	8005750 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001272:	f004 fa6d 	bl	8005750 <HAL_GPIO_WritePin>
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
	}
}
 8001276:	e012      	b.n	800129e <GripperMovement+0x52>
	else if(registerFrame[0x03].U16 == 0b0001){
 8001278:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <GripperMovement+0x58>)
 800127a:	88db      	ldrh	r3, [r3, #6]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d10e      	bne.n	800129e <GripperMovement+0x52>
		base.Gripper = 1;			//Gripper Movement: Forward
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <GripperMovement+0x5c>)
 8001282:	2201      	movs	r2, #1
 8001284:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
 8001286:	2200      	movs	r2, #0
 8001288:	2110      	movs	r1, #16
 800128a:	4808      	ldr	r0, [pc, #32]	@ (80012ac <GripperMovement+0x60>)
 800128c:	f004 fa60 	bl	8005750 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129a:	f004 fa59 	bl	8005750 <HAL_GPIO_WritePin>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20001030 	.word	0x20001030
 80012a8:	20000284 	.word	0x20000284
 80012ac:	48000800 	.word	0x48000800

080012b0 <SetShelves>:



void SetShelves(){
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 1; 		//Z-axis update z-xis moving status to "Set Shelves"
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <SetShelves+0xa4>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	841a      	strh	r2, [r3, #32]
	base.ShelveMode = 1;
 80012ba:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <SetShelves+0xa8>)
 80012bc:	2201      	movs	r2, #1
 80012be:	831a      	strh	r2, [r3, #24]
	if (base.ShelveMode == 0)
 80012c0:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <SetShelves+0xa8>)
 80012c2:	8b1b      	ldrh	r3, [r3, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d140      	bne.n	800134a <SetShelves+0x9a>
	{
		registerFrame[0x23].U16 = base.Shelve[0] *10; 	//Position Shelve 1
 80012c8:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <SetShelves+0xa8>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <SetShelves+0xa4>)
 80012da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = base.Shelve[1] *10;
 80012de:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <SetShelves+0xa8>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <SetShelves+0xa4>)
 80012f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = base.Shelve[2] *10;
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <SetShelves+0xa8>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	4413      	add	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <SetShelves+0xa4>)
 8001306:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = base.Shelve[3] *10;
 800130a:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <SetShelves+0xa8>)
 800130c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130e:	b29b      	uxth	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4413      	add	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <SetShelves+0xa4>)
 800131c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = base.Shelve[4] *10;
 8001320:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <SetShelves+0xa8>)
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	b29b      	uxth	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4413      	add	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <SetShelves+0xa4>)
 8001332:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		//finish
		base.BaseStatus = 0;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <SetShelves+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.BaseStatus;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <SetShelves+0xa8>)
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <SetShelves+0xa4>)
 8001342:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8001344:	4b03      	ldr	r3, [pc, #12]	@ (8001354 <SetShelves+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	841a      	strh	r2, [r3, #32]
	}
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20001030 	.word	0x20001030
 8001358:	20000284 	.word	0x20000284

0800135c <RunPoint>:

void RunPoint(){
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <RunPoint+0x50>)
 8001362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8001366:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <RunPoint+0x54>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <RunPoint+0x58>)
 8001372:	861a      	strh	r2, [r3, #48]	@ 0x30
	registerFrame[0x10].U16 = 16;
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <RunPoint+0x50>)
 8001376:	2210      	movs	r2, #16
 8001378:	841a      	strh	r2, [r3, #32]
//	Traject(j);
	//finish
	if(base.swp == 1){
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <RunPoint+0x58>)
 800137c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10d      	bne.n	80013a0 <RunPoint+0x44>
		base.BaseStatus = 0;
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <RunPoint+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.BaseStatus;
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <RunPoint+0x58>)
 800138c:	881a      	ldrh	r2, [r3, #0]
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <RunPoint+0x50>)
 8001390:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <RunPoint+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	841a      	strh	r2, [r3, #32]
		base.swp = 0;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <RunPoint+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	}
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20001030 	.word	0x20001030
 80013b0:	cccccccd 	.word	0xcccccccd
 80013b4:	20000284 	.word	0x20000284

080013b8 <SetHome>:

void SetHome(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 2;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <SetHome+0x4c>)
 80013be:	2202      	movs	r2, #2
 80013c0:	841a      	strh	r2, [r3, #32]
	base.MotorHome = 300;		// Set duty cycle to go upward at slowest speed
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <SetHome+0x50>)
 80013c4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)		// Top photo limit was triggered
 80013cc:	2140      	movs	r1, #64	@ 0x40
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d2:	f004 f9a5 	bl	8005720 <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d110      	bne.n	80013fe <SetHome+0x46>
		{
			base.BaseStatus = 0;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <SetHome+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	801a      	strh	r2, [r3, #0]
			base.MotorHome = 150;		// Set duty cycle to hold position gripper
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <SetHome+0x50>)
 80013e4:	2296      	movs	r2, #150	@ 0x96
 80013e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			AMT_encoder_reset(&AMT);	// Set linear position to ...
 80013ea:	4808      	ldr	r0, [pc, #32]	@ (800140c <SetHome+0x54>)
 80013ec:	f000 f94e 	bl	800168c <AMT_encoder_reset>
			registerFrame[0x01].U16 = base.BaseStatus;
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <SetHome+0x50>)
 80013f2:	881a      	ldrh	r2, [r3, #0]
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <SetHome+0x4c>)
 80013f6:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0;
 80013f8:	4b02      	ldr	r3, [pc, #8]	@ (8001404 <SetHome+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	841a      	strh	r2, [r3, #32]

		}
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20001030 	.word	0x20001030
 8001408:	20000284 	.word	0x20000284
 800140c:	20000a78 	.word	0x20000a78

08001410 <RunJog>:

void RunJog(){
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	base.Pick = registerFrame[0x21].U16 ; 	//Get Pick from BaseSystem
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <RunJog+0x54>)
 8001416:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800141a:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <RunJog+0x58>)
 800141c:	865a      	strh	r2, [r3, #50]	@ 0x32
	base.Place = registerFrame[0x22].U16 ;	//Get Place from BaseSystem
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <RunJog+0x54>)
 8001420:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <RunJog+0x58>)
 8001426:	869a      	strh	r2, [r3, #52]	@ 0x34
	registerFrame[0x10].U16 = 4;
 8001428:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <RunJog+0x54>)
 800142a:	2204      	movs	r2, #4
 800142c:	841a      	strh	r2, [r3, #32]
	registerFrame[0x10].U16 = 8;
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <RunJog+0x54>)
 8001430:	2208      	movs	r2, #8
 8001432:	841a      	strh	r2, [r3, #32]
	//pick place 5 time
	if(base.sp == 1){
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <RunJog+0x58>)
 8001436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10d      	bne.n	800145a <RunJog+0x4a>
		base.BaseStatus = 0;
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <RunJog+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.BaseStatus;
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <RunJog+0x58>)
 8001446:	881a      	ldrh	r2, [r3, #0]
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <RunJog+0x54>)
 800144a:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <RunJog+0x54>)
 800144e:	2200      	movs	r2, #0
 8001450:	841a      	strh	r2, [r3, #32]
		base.sp = 0;
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <RunJog+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	20001030 	.word	0x20001030
 8001468:	20000284 	.word	0x20000284

0800146c <AMT_encoder_init>:
float ALPHA = 0.3f;									// smoothing param

//-------------------------------------------Function Code-------------------------------------------------------//

void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001480:	213c      	movs	r1, #60	@ 0x3c
 8001482:	4618      	mov	r0, r3
 8001484:	f005 fe94 	bl	80071b0 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 0.0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 0.0;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0000      	movs	r0, r0
	...

080014a0 <AMT_encoder_update>:

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 80014a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	e9c7 2300 	strd	r2, r3, [r7]
	//collect data
	AMT_data->TimeStamp[QEI_NOW] = current_time;
 80014b0:	68f9      	ldr	r1, [r7, #12]
 80014b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	601a      	str	r2, [r3, #0]

	//Postion 1 turn calculation
	AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a69      	ldr	r2, [pc, #420]	@ (8001670 <AMT_encoder_update+0x1d0>)
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80014d0:	fb01 f202 	mul.w	r2, r1, r2
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	621a      	str	r2, [r3, #32]

	//calculate dx
	diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b62      	ldr	r3, [pc, #392]	@ (8001674 <AMT_encoder_update+0x1d4>)
 80014ea:	601a      	str	r2, [r3, #0]

	//Handle Warp around
	if(diffPosition > 32767)
 80014ec:	4b61      	ldr	r3, [pc, #388]	@ (8001674 <AMT_encoder_update+0x1d4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014f4:	db06      	blt.n	8001504 <AMT_encoder_update+0x64>
		diffPosition -= 65535;
 80014f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001674 <AMT_encoder_update+0x1d4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 80014fe:	3bff      	subs	r3, #255	@ 0xff
 8001500:	4a5c      	ldr	r2, [pc, #368]	@ (8001674 <AMT_encoder_update+0x1d4>)
 8001502:	6013      	str	r3, [r2, #0]
	if(diffPosition < -32767)
 8001504:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <AMT_encoder_update+0x1d4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800150c:	dc06      	bgt.n	800151c <AMT_encoder_update+0x7c>
		diffPosition += 65535;
 800150e:	4b59      	ldr	r3, [pc, #356]	@ (8001674 <AMT_encoder_update+0x1d4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001516:	33ff      	adds	r3, #255	@ 0xff
 8001518:	4a56      	ldr	r2, [pc, #344]	@ (8001674 <AMT_encoder_update+0x1d4>)
 800151a:	6013      	str	r3, [r2, #0]

	//calculate dt
	diffTime = (AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV] );
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001528:	1a84      	subs	r4, r0, r2
 800152a:	eb61 0503 	sbc.w	r5, r1, r3
 800152e:	4620      	mov	r0, r4
 8001530:	4629      	mov	r1, r5
 8001532:	f7ff fc27 	bl	8000d84 <__aeabi_ul2f>
 8001536:	4603      	mov	r3, r0
 8001538:	4a4f      	ldr	r2, [pc, #316]	@ (8001678 <AMT_encoder_update+0x1d8>)
 800153a:	6013      	str	r3, [r2, #0]

	//calculate anglar velocity
	float Vin = (PID_velo.out/1000)*24;
 800153c:	4b4f      	ldr	r3, [pc, #316]	@ (800167c <AMT_encoder_update+0x1dc>)
 800153e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001542:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001680 <AMT_encoder_update+0x1e0>
 8001546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 800154e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001552:	edc7 7a05 	vstr	s15, [r7, #20]
//	AMT_data->Angular_Velocity = lowPassFilter(SteadyStateKalmanFilter(&Vel_filtered,Vin, (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6))));	//RPM
	AMT_data->Angular_Velocity = (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6));	//RPM
 8001556:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <AMT_encoder_update+0x1d4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffae 	bl	80004bc <__aeabi_i2d>
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b47      	ldr	r3, [pc, #284]	@ (8001684 <AMT_encoder_update+0x1e4>)
 8001566:	f7ff f813 	bl	8000590 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4690      	mov	r8, r2
 8001570:	4699      	mov	r9, r3
 8001572:	4b3f      	ldr	r3, [pc, #252]	@ (8001670 <AMT_encoder_update+0x1d0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff90 	bl	800049c <__aeabi_ui2d>
 800157c:	4604      	mov	r4, r0
 800157e:	460d      	mov	r5, r1
 8001580:	4b3d      	ldr	r3, [pc, #244]	@ (8001678 <AMT_encoder_update+0x1d8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffab 	bl	80004e0 <__aeabi_f2d>
 800158a:	a337      	add	r3, pc, #220	@ (adr r3, 8001668 <AMT_encoder_update+0x1c8>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff f928 	bl	80007e4 <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fff8 	bl	8000590 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4640      	mov	r0, r8
 80015a6:	4649      	mov	r1, r9
 80015a8:	f7ff f91c 	bl	80007e4 <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff face 	bl	8000b54 <__aeabi_d2f>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	@ 0x24

	// Calculate Linear
	AMT_data->Linear_Position += (diffPosition*pulley_cir)/cnt_per_rev;			//mm
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80015c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <AMT_encoder_update+0x1d4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <AMT_encoder_update+0x1e8>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80015da:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <AMT_encoder_update+0x1d0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015e6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	AMT_data->Linear_Velocity = (AMT_data->Angular_Velocity / 60.0) * pulley_cir;		//mm/s
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff71 	bl	80004e0 <__aeabi_f2d>
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <AMT_encoder_update+0x1e4>)
 8001604:	f7ff f8ee 	bl	80007e4 <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4614      	mov	r4, r2
 800160e:	461d      	mov	r5, r3
 8001610:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <AMT_encoder_update+0x1e8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff63 	bl	80004e0 <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4620      	mov	r0, r4
 8001620:	4629      	mov	r1, r5
 8001622:	f7fe ffb5 	bl	8000590 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fa91 	bl	8000b54 <__aeabi_d2f>
 8001632:	4602      	mov	r2, r0
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	62da      	str	r2, [r3, #44]	@ 0x2c
	AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity;					//Uodate Velo
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	619a      	str	r2, [r3, #24]
//	AMT_data->Linear_Acceleration = ((AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) *  1e6) / (diffTime);		//mm/s^2

	//store value for next loop
	AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	605a      	str	r2, [r3, #4]
	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800164e:	68f9      	ldr	r1, [r7, #12]
 8001650:	e9c1 2304 	strd	r2, r3, [r1, #16]
	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	699a      	ldr	r2, [r3, #24]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	61da      	str	r2, [r3, #28]
}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001666:	bf00      	nop
 8001668:	00000000 	.word	0x00000000
 800166c:	412e8480 	.word	0x412e8480
 8001670:	20000000 	.word	0x20000000
 8001674:	2000025c 	.word	0x2000025c
 8001678:	20000260 	.word	0x20000260
 800167c:	20000b30 	.word	0x20000b30
 8001680:	447a0000 	.word	0x447a0000
 8001684:	404e0000 	.word	0x404e0000
 8001688:	20000004 	.word	0x20000004

0800168c <AMT_encoder_reset>:

void AMT_encoder_reset(AMT_Encoder *AMT_data)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	AMT_data->Linear_Position = 600;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <AMT_encoder_reset+0x1c>)
 8001698:	631a      	str	r2, [r3, #48]	@ 0x30
//	AMT_data->Position[QEI_NOW] = 0;

}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	44160000 	.word	0x44160000

080016ac <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <modbus_1t5_Timeout+0x3c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <modbus_1t5_Timeout+0x3c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <modbus_1t5_Timeout+0x3c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <modbus_1t5_Timeout+0x3c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000264 	.word	0x20000264

080016ec <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <modbus_3t5_Timeout+0x1c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	755a      	strb	r2, [r3, #21]

}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000264 	.word	0x20000264

0800170c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f007 ffc7 	bl	80096a8 <HAL_UART_GetError>
 800171a:	4603      	mov	r3, r0
 800171c:	2b20      	cmp	r3, #32
 800171e:	d101      	bne.n	8001724 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001720:	f7ff ffc4 	bl	80016ac <modbus_1t5_Timeout>

	}
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001736:	4a25      	ldr	r2, [pc, #148]	@ (80017cc <Modbus_init+0xa0>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800173c:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <Modbus_init+0xa0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	4a21      	ldr	r2, [pc, #132]	@ (80017d0 <Modbus_init+0xa4>)
 800174a:	210e      	movs	r1, #14
 800174c:	4618      	mov	r0, r3
 800174e:	f006 f9bb 	bl	8007ac8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2110      	movs	r1, #16
 8001758:	4618      	mov	r0, r3
 800175a:	f007 ff4f 	bl	80095fc <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	4618      	mov	r0, r3
 8001764:	f007 ff66 	bl	8009634 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4a19      	ldr	r2, [pc, #100]	@ (80017d4 <Modbus_init+0xa8>)
 800176e:	2104      	movs	r1, #4
 8001770:	4618      	mov	r0, r3
 8001772:	f007 f965 	bl	8008a40 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <Modbus_init+0xa0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <Modbus_init+0xa0>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <Modbus_init+0xa0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001788:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800178c:	4413      	add	r3, r2
 800178e:	3302      	adds	r3, #2
 8001790:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001794:	4619      	mov	r1, r3
 8001796:	f007 fb55 	bl	8008e44 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <Modbus_init+0xa0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d10c      	bne.n	80017c4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <Modbus_init+0xa0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 f90d 	bl	80069d0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <Modbus_init+0xa0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fbb4 	bl	8006f2c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000264 	.word	0x20000264
 80017d0:	080016ed 	.word	0x080016ed
 80017d4:	0800170d 	.word	0x0800170d

080017d8 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80017e4:	23ff      	movs	r3, #255	@ 0xff
 80017e6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80017e8:	23ff      	movs	r3, #255	@ 0xff
 80017ea:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80017ec:	e013      	b.n	8001816 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	4053      	eors	r3, r2
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80017fe:	4a0f      	ldr	r2, [pc, #60]	@ (800183c <CRC16+0x64>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4413      	add	r3, r2
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	4053      	eors	r3, r2
 800180a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800180c:	4a0c      	ldr	r2, [pc, #48]	@ (8001840 <CRC16+0x68>)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4413      	add	r3, r2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001816:	883b      	ldrh	r3, [r7, #0]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	803a      	strh	r2, [r7, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e6      	bne.n	80017ee <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	b21a      	sxth	r2, r3
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	b21b      	sxth	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b21b      	sxth	r3, r3
 800182e:	b29b      	uxth	r3, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	20000108 	.word	0x20000108
 8001840:	20000008 	.word	0x20000008

08001844 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800184a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	7ddb      	ldrb	r3, [r3, #23]
 8001850:	3b01      	subs	r3, #1
 8001852:	2b03      	cmp	r3, #3
 8001854:	d80a      	bhi.n	800186c <Modbus_Protocal_Worker+0x28>
 8001856:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <Modbus_Protocal_Worker+0x18>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	08001877 	.word	0x08001877
 8001860:	08001a0b 	.word	0x08001a0b
 8001864:	08001903 	.word	0x08001903
 8001868:	08001947 	.word	0x08001947
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800186c:	4b75      	ldr	r3, [pc, #468]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	75da      	strb	r2, [r3, #23]
		break;
 8001874:	e0e1      	b.n	8001a3a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001876:	4b73      	ldr	r3, [pc, #460]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800187e:	2b00      	cmp	r3, #0
 8001880:	d006      	beq.n	8001890 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001882:	4b70      	ldr	r3, [pc, #448]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2202      	movs	r2, #2
 8001888:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800188a:	f000 f9cd 	bl	8001c28 <Modbus_Emission>
 800188e:	e018      	b.n	80018c2 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001890:	4b6c      	ldr	r3, [pc, #432]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800189a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d00b      	beq.n	80018c2 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80018aa:	4b66      	ldr	r3, [pc, #408]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2200      	movs	r2, #0
 80018b0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80018b2:	4b64      	ldr	r3, [pc, #400]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2200      	movs	r2, #0
 80018b8:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80018ba:	4b62      	ldr	r3, [pc, #392]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2203      	movs	r2, #3
 80018c0:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80018c2:	4b60      	ldr	r3, [pc, #384]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	f040 80ad 	bne.w	8001a2c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80018d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80018dc:	4b59      	ldr	r3, [pc, #356]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80018e2:	4b58      	ldr	r3, [pc, #352]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b57      	ldr	r3, [pc, #348]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80018ee:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80018f2:	4413      	add	r3, r2
 80018f4:	3302      	adds	r3, #2
 80018f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018fa:	4619      	mov	r1, r3
 80018fc:	f007 faa2 	bl	8008e44 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001900:	e094      	b.n	8001a2c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001902:	4b50      	ldr	r3, [pc, #320]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	7d1b      	ldrb	r3, [r3, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8091 	beq.w	8001a30 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800190e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	22fe      	movs	r2, #254	@ 0xfe
 8001914:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001916:	4b4b      	ldr	r3, [pc, #300]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001920:	4b48      	ldr	r3, [pc, #288]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001930:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001932:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001934:	1a8a      	subs	r2, r1, r2
 8001936:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001938:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800193c:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2204      	movs	r2, #4
 8001942:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001944:	e074      	b.n	8001a30 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001946:	4b3f      	ldr	r3, [pc, #252]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800194e:	f113 0f02 	cmn.w	r3, #2
 8001952:	d150      	bne.n	80019f6 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001954:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800195c:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001964:	4b37      	ldr	r3, [pc, #220]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800196c:	3b02      	subs	r3, #2
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f7ff ff31 	bl	80017d8 <CRC16>
 8001976:	4603      	mov	r3, r0
 8001978:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800197a:	793a      	ldrb	r2, [r7, #4]
 800197c:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001988:	3b02      	subs	r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001990:	429a      	cmp	r2, r3
 8001992:	d10c      	bne.n	80019ae <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001994:	797a      	ldrb	r2, [r7, #5]
 8001996:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001998:	6819      	ldr	r1, [r3, #0]
 800199a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80019a2:	3b01      	subs	r3, #1
 80019a4:	440b      	add	r3, r1
 80019a6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d004      	beq.n	80019b8 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80019ae:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	22ff      	movs	r2, #255	@ 0xff
 80019b4:	759a      	strb	r2, [r3, #22]
				break;
 80019b6:	e040      	b.n	8001a3a <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80019c0:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d113      	bne.n	80019f2 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80019ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80019da:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80019e4:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80019e6:	461a      	mov	r2, r3
 80019e8:	f008 ffb2 	bl	800a950 <memcpy>

			//execute command
			Modbus_frame_response();
 80019ec:	f000 f904 	bl	8001bf8 <Modbus_frame_response>
 80019f0:	e001      	b.n	80019f6 <Modbus_Protocal_Worker+0x1b2>
				break;
 80019f2:	bf00      	nop
					}
		break;


	}
}
 80019f4:	e021      	b.n	8001a3a <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80019f6:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	7d5b      	ldrb	r3, [r3, #21]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d019      	beq.n	8001a34 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001a00:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	75da      	strb	r2, [r3, #23]
		break;
 8001a08:	e014      	b.n	8001a34 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a14:	2b20      	cmp	r3, #32
 8001a16:	d10f      	bne.n	8001a38 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001a22:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <Modbus_Protocal_Worker+0x200>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	75da      	strb	r2, [r3, #23]
		break;
 8001a2a:	e005      	b.n	8001a38 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001a2c:	bf00      	nop
 8001a2e:	e004      	b.n	8001a3a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001a30:	bf00      	nop
 8001a32:	e002      	b.n	8001a3a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001a34:	bf00      	nop
 8001a36:	e000      	b.n	8001a3a <Modbus_Protocal_Worker+0x1f6>
		break;
 8001a38:	bf00      	nop
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000264 	.word	0x20000264

08001a48 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	7e5b      	ldrb	r3, [r3, #25]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	7e92      	ldrb	r2, [r2, #26]
 8001a5e:	4413      	add	r3, r2
 8001a60:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d903      	bls.n	8001a76 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f000 f8a0 	bl	8001bb4 <ModbusErrorReply>
			 return;
 8001a74:	e023      	b.n	8001abe <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001a76:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	440b      	add	r3, r1
 8001a86:	7ed2      	ldrb	r2, [r2, #27]
 8001a88:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	440b      	add	r3, r1
 8001a9a:	7f12      	ldrb	r2, [r2, #28]
 8001a9c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001aac:	2208      	movs	r2, #8
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f008 ff4e 	bl	800a950 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <modbusWrite1Register+0x7c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2205      	movs	r2, #5
 8001aba:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000264 	.word	0x20000264

08001ac8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001ace:	4b38      	ldr	r3, [pc, #224]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	7edb      	ldrb	r3, [r3, #27]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4a35      	ldr	r2, [pc, #212]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	7f12      	ldrb	r2, [r2, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001ae2:	4b33      	ldr	r3, [pc, #204]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	7e5b      	ldrb	r3, [r3, #25]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4a30      	ldr	r2, [pc, #192]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	7e92      	ldrb	r2, [r2, #26]
 8001af2:	4413      	add	r3, r2
 8001af4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <modbusRead1Register+0x3a>
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	2b7d      	cmp	r3, #125	@ 0x7d
 8001b00:	d903      	bls.n	8001b0a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001b02:	2003      	movs	r0, #3
 8001b04:	f000 f856 	bl	8001bb4 <ModbusErrorReply>
		 return;
 8001b08:	e04e      	b.n	8001ba8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001b0a:	88ba      	ldrh	r2, [r7, #4]
 8001b0c:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d808      	bhi.n	8001b28 <modbusRead1Register+0x60>
 8001b16:	88ba      	ldrh	r2, [r7, #4]
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d903      	bls.n	8001b30 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f000 f843 	bl	8001bb4 <ModbusErrorReply>
		 return;
 8001b2e:	e03b      	b.n	8001ba8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001b30:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2203      	movs	r2, #3
 8001b36:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0052      	lsls	r2, r2, #1
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001b4a:	2400      	movs	r4, #0
 8001b4c:	e020      	b.n	8001b90 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	4423      	add	r3, r4
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	18d1      	adds	r1, r2, r3
 8001b5c:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	1c63      	adds	r3, r4, #1
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	7849      	ldrb	r1, [r1, #1]
 8001b66:	4413      	add	r3, r2
 8001b68:	460a      	mov	r2, r1
 8001b6a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	4423      	add	r3, r4
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	18d1      	adds	r1, r2, r3
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	0063      	lsls	r3, r4, #1
 8001b82:	3303      	adds	r3, #3
 8001b84:	7809      	ldrb	r1, [r1, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	460a      	mov	r2, r1
 8001b8a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001b8e:	3401      	adds	r4, #1
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	429c      	cmp	r4, r3
 8001b94:	dbdb      	blt.n	8001b4e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <modbusRead1Register+0xe8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0052      	lsls	r2, r2, #1
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000264 	.word	0x20000264

08001bb4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <ModbusErrorReply+0x40>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	7e1a      	ldrb	r2, [r3, #24]
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <ModbusErrorReply+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <ModbusErrorReply+0x40>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	79fa      	ldrb	r2, [r7, #7]
 8001bd8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <ModbusErrorReply+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2202      	movs	r2, #2
 8001be2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000264 	.word	0x20000264

08001bf8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <Modbus_frame_response+0x2c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	7e1b      	ldrb	r3, [r3, #24]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d004      	beq.n	8001c10 <Modbus_frame_response+0x18>
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d105      	bne.n	8001c16 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001c0a:	f7ff ff1d 	bl	8001a48 <modbusWrite1Register>
		break;
 8001c0e:	e006      	b.n	8001c1e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001c10:	f7ff ff5a 	bl	8001ac8 <modbusRead1Register>
		break;
 8001c14:	e003      	b.n	8001c1e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff ffcc 	bl	8001bb4 <ModbusErrorReply>
		break;
 8001c1c:	bf00      	nop

	}
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000264 	.word	0x20000264

08001c28 <Modbus_Emission>:

void Modbus_Emission()
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001c2e:	4b38      	ldr	r3, [pc, #224]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d15d      	bne.n	8001cf8 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001c3c:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b33      	ldr	r3, [pc, #204]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	7812      	ldrb	r2, [r2, #0]
 8001c46:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001c4a:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001c52:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001c54:	4b2e      	ldr	r3, [pc, #184]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001c64:	461a      	mov	r2, r3
 8001c66:	f008 fe73 	bl	800a950 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3203      	adds	r2, #3
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001c80:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001c88:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001c90:	3b02      	subs	r3, #2
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f7ff fd9f 	bl	80017d8 <CRC16>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001caa:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001cac:	7939      	ldrb	r1, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001cc2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001cc4:	7979      	ldrb	r1, [r7, #5]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	460a      	mov	r2, r1
 8001cca:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d10d      	bne.n	8001cf8 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001cee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f007 f826 	bl	8008d44 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <Modbus_Emission+0xe8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	755a      	strb	r2, [r3, #21]

}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000264 	.word	0x20000264

08001d14 <MOTOR_init>:
#include "Motor.h"

//-------------------------------------------Function Code-------------------------------------------------------//

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	460b      	mov	r3, r1
 8001d24:	80fb      	strh	r3, [r7, #6]
 8001d26:	4613      	mov	r3, r2
 8001d28:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	88ba      	ldrh	r2, [r7, #4]
 8001d3a:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 8001d3c:	88bb      	ldrh	r3, [r7, #4]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	68b8      	ldr	r0, [r7, #8]
 8001d42:	f004 ff2b 	bl	8006b9c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	68b8      	ldr	r0, [r7, #8]
 8001d4c:	f004 ff26 	bl	8006b9c <HAL_TIM_PWM_Start_IT>

}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 8001d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d5c:	b089      	sub	sp, #36	@ 0x24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	61f8      	str	r0, [r7, #28]
 8001d62:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8263 	beq.w	8002234 <MOTOR_set_duty+0x4dc>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 825e 	beq.w	8002234 <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 8001d78:	69b8      	ldr	r0, [r7, #24]
 8001d7a:	f7fe fbb1 	bl	80004e0 <__aeabi_f2d>
 8001d7e:	a394      	add	r3, pc, #592	@ (adr r3, 8001fd0 <MOTOR_set_duty+0x278>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fc04 	bl	8000590 <__aeabi_dmul>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	a395      	add	r3, pc, #596	@ (adr r3, 8001fe8 <MOTOR_set_duty+0x290>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f7fe fe81 	bl	8000a9c <__aeabi_dcmpge>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MOTOR_set_duty+0x4c>
 8001da0:	4b8f      	ldr	r3, [pc, #572]	@ (8001fe0 <MOTOR_set_duty+0x288>)
 8001da2:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 8001da4:	69b8      	ldr	r0, [r7, #24]
 8001da6:	f7fe fb9b 	bl	80004e0 <__aeabi_f2d>
 8001daa:	a389      	add	r3, pc, #548	@ (adr r3, 8001fd0 <MOTOR_set_duty+0x278>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fbee 	bl	8000590 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	a386      	add	r3, pc, #536	@ (adr r3, 8001fd8 <MOTOR_set_duty+0x280>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fe61 	bl	8000a88 <__aeabi_dcmple>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MOTOR_set_duty+0x78>
 8001dcc:	4b85      	ldr	r3, [pc, #532]	@ (8001fe4 <MOTOR_set_duty+0x28c>)
 8001dce:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 8001dd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	d16e      	bne.n	8001ebc <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	889b      	ldrh	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <MOTOR_set_duty+0x9a>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	635a      	str	r2, [r3, #52]	@ 0x34
 8001df0:	e02c      	b.n	8001e4c <MOTOR_set_duty+0xf4>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	889b      	ldrh	r3, [r3, #4]
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d105      	bne.n	8001e06 <MOTOR_set_duty+0xae>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2300      	movs	r3, #0
 8001e02:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e04:	e022      	b.n	8001e4c <MOTOR_set_duty+0xf4>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	889b      	ldrh	r3, [r3, #4]
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d105      	bne.n	8001e1a <MOTOR_set_duty+0xc2>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2300      	movs	r3, #0
 8001e16:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e18:	e018      	b.n	8001e4c <MOTOR_set_duty+0xf4>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	889b      	ldrh	r3, [r3, #4]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d105      	bne.n	8001e2e <MOTOR_set_duty+0xd6>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2c:	e00e      	b.n	8001e4c <MOTOR_set_duty+0xf4>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	889b      	ldrh	r3, [r3, #4]
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d105      	bne.n	8001e42 <MOTOR_set_duty+0xea>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e40:	e004      	b.n	8001e4c <MOTOR_set_duty+0xf4>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	88db      	ldrh	r3, [r3, #6]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <MOTOR_set_duty+0x108>
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e5e:	e1ea      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	88db      	ldrh	r3, [r3, #6]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d105      	bne.n	8001e74 <MOTOR_set_duty+0x11c>
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e72:	e1e0      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	88db      	ldrh	r3, [r3, #6]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d105      	bne.n	8001e88 <MOTOR_set_duty+0x130>
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e86:	e1d6      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	88db      	ldrh	r3, [r3, #6]
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d105      	bne.n	8001e9c <MOTOR_set_duty+0x144>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	e1cc      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	88db      	ldrh	r3, [r3, #6]
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	d105      	bne.n	8001eb0 <MOTOR_set_duty+0x158>
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	6493      	str	r3, [r2, #72]	@ 0x48
 8001eae:	e1c2      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eba:	e1bc      	b.n	8002236 <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 8001ebc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ec0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	f340 80d6 	ble.w	8002078 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	889b      	ldrh	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <MOTOR_set_duty+0x188>
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ede:	e02c      	b.n	8001f3a <MOTOR_set_duty+0x1e2>
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	889b      	ldrh	r3, [r3, #4]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d105      	bne.n	8001ef4 <MOTOR_set_duty+0x19c>
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ef2:	e022      	b.n	8001f3a <MOTOR_set_duty+0x1e2>
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	889b      	ldrh	r3, [r3, #4]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d105      	bne.n	8001f08 <MOTOR_set_duty+0x1b0>
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2300      	movs	r3, #0
 8001f04:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001f06:	e018      	b.n	8001f3a <MOTOR_set_duty+0x1e2>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	889b      	ldrh	r3, [r3, #4]
 8001f0c:	2b0c      	cmp	r3, #12
 8001f0e:	d105      	bne.n	8001f1c <MOTOR_set_duty+0x1c4>
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1a:	e00e      	b.n	8001f3a <MOTOR_set_duty+0x1e2>
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	889b      	ldrh	r3, [r3, #4]
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d105      	bne.n	8001f30 <MOTOR_set_duty+0x1d8>
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f2e:	e004      	b.n	8001f3a <MOTOR_set_duty+0x1e2>
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2300      	movs	r3, #0
 8001f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	88db      	ldrh	r3, [r3, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d113      	bne.n	8001f6a <MOTOR_set_duty+0x212>
 8001f42:	69b8      	ldr	r0, [r7, #24]
 8001f44:	f7fe facc 	bl	80004e0 <__aeabi_f2d>
 8001f48:	a321      	add	r3, pc, #132	@ (adr r3, 8001fd0 <MOTOR_set_duty+0x278>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	f7fe fb1f 	bl	8000590 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681c      	ldr	r4, [r3, #0]
 8001f60:	f7fe fdd8 	bl	8000b14 <__aeabi_d2uiz>
 8001f64:	4603      	mov	r3, r0
 8001f66:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f68:	e165      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	88db      	ldrh	r3, [r3, #6]
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d113      	bne.n	8001f9a <MOTOR_set_duty+0x242>
 8001f72:	69b8      	ldr	r0, [r7, #24]
 8001f74:	f7fe fab4 	bl	80004e0 <__aeabi_f2d>
 8001f78:	a315      	add	r3, pc, #84	@ (adr r3, 8001fd0 <MOTOR_set_duty+0x278>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe fb07 	bl	8000590 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681c      	ldr	r4, [r3, #0]
 8001f90:	f7fe fdc0 	bl	8000b14 <__aeabi_d2uiz>
 8001f94:	4603      	mov	r3, r0
 8001f96:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001f98:	e14d      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	88db      	ldrh	r3, [r3, #6]
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d126      	bne.n	8001ff0 <MOTOR_set_duty+0x298>
 8001fa2:	69b8      	ldr	r0, [r7, #24]
 8001fa4:	f7fe fa9c 	bl	80004e0 <__aeabi_f2d>
 8001fa8:	a309      	add	r3, pc, #36	@ (adr r3, 8001fd0 <MOTOR_set_duty+0x278>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe faef 	bl	8000590 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681c      	ldr	r4, [r3, #0]
 8001fc0:	f7fe fda8 	bl	8000b14 <__aeabi_d2uiz>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001fc8:	e135      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8001fca:	bf00      	nop
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	3b645a1d 	.word	0x3b645a1d
 8001fd4:	40453fdf 	.word	0x40453fdf
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	c0e4c060 	.word	0xc0e4c060
 8001fe0:	47260300 	.word	0x47260300
 8001fe4:	c7260300 	.word	0xc7260300
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	40e4c060 	.word	0x40e4c060
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	88db      	ldrh	r3, [r3, #6]
 8001ff4:	2b0c      	cmp	r3, #12
 8001ff6:	d113      	bne.n	8002020 <MOTOR_set_duty+0x2c8>
 8001ff8:	69b8      	ldr	r0, [r7, #24]
 8001ffa:	f7fe fa71 	bl	80004e0 <__aeabi_f2d>
 8001ffe:	a390      	add	r3, pc, #576	@ (adr r3, 8002240 <MOTOR_set_duty+0x4e8>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fac4 	bl	8000590 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681c      	ldr	r4, [r3, #0]
 8002016:	f7fe fd7d 	bl	8000b14 <__aeabi_d2uiz>
 800201a:	4603      	mov	r3, r0
 800201c:	6423      	str	r3, [r4, #64]	@ 0x40
 800201e:	e10a      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	88db      	ldrh	r3, [r3, #6]
 8002024:	2b10      	cmp	r3, #16
 8002026:	d113      	bne.n	8002050 <MOTOR_set_duty+0x2f8>
 8002028:	69b8      	ldr	r0, [r7, #24]
 800202a:	f7fe fa59 	bl	80004e0 <__aeabi_f2d>
 800202e:	a384      	add	r3, pc, #528	@ (adr r3, 8002240 <MOTOR_set_duty+0x4e8>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe faac 	bl	8000590 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681c      	ldr	r4, [r3, #0]
 8002046:	f7fe fd65 	bl	8000b14 <__aeabi_d2uiz>
 800204a:	4603      	mov	r3, r0
 800204c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800204e:	e0f2      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8002050:	69b8      	ldr	r0, [r7, #24]
 8002052:	f7fe fa45 	bl	80004e0 <__aeabi_f2d>
 8002056:	a37a      	add	r3, pc, #488	@ (adr r3, 8002240 <MOTOR_set_duty+0x4e8>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe fa98 	bl	8000590 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681c      	ldr	r4, [r3, #0]
 800206e:	f7fe fd51 	bl	8000b14 <__aeabi_d2uiz>
 8002072:	4603      	mov	r3, r0
 8002074:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8002076:	e0de      	b.n	8002236 <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	889b      	ldrh	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d106      	bne.n	800208e <MOTOR_set_duty+0x336>
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f24a 6203 	movw	r2, #42499	@ 0xa603
 800208a:	635a      	str	r2, [r3, #52]	@ 0x34
 800208c:	e031      	b.n	80020f2 <MOTOR_set_duty+0x39a>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	889b      	ldrh	r3, [r3, #4]
 8002092:	2b04      	cmp	r3, #4
 8002094:	d106      	bne.n	80020a4 <MOTOR_set_duty+0x34c>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80020a0:	6393      	str	r3, [r2, #56]	@ 0x38
 80020a2:	e026      	b.n	80020f2 <MOTOR_set_duty+0x39a>
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	889b      	ldrh	r3, [r3, #4]
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d106      	bne.n	80020ba <MOTOR_set_duty+0x362>
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80020b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80020b8:	e01b      	b.n	80020f2 <MOTOR_set_duty+0x39a>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	889b      	ldrh	r3, [r3, #4]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d106      	bne.n	80020d0 <MOTOR_set_duty+0x378>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80020cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ce:	e010      	b.n	80020f2 <MOTOR_set_duty+0x39a>
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	889b      	ldrh	r3, [r3, #4]
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d106      	bne.n	80020e6 <MOTOR_set_duty+0x38e>
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80020e2:	6493      	str	r3, [r2, #72]	@ 0x48
 80020e4:	e005      	b.n	80020f2 <MOTOR_set_duty+0x39a>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80020f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	88db      	ldrh	r3, [r3, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d117      	bne.n	800212a <MOTOR_set_duty+0x3d2>
 80020fa:	69b8      	ldr	r0, [r7, #24]
 80020fc:	f7fe f9f0 	bl	80004e0 <__aeabi_f2d>
 8002100:	a34f      	add	r3, pc, #316	@ (adr r3, 8002240 <MOTOR_set_duty+0x4e8>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe fa43 	bl	8000590 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	613a      	str	r2, [r7, #16]
 8002110:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681c      	ldr	r4, [r3, #0]
 800211c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002120:	f7fe fcf8 	bl	8000b14 <__aeabi_d2uiz>
 8002124:	4603      	mov	r3, r0
 8002126:	6363      	str	r3, [r4, #52]	@ 0x34
 8002128:	e085      	b.n	8002236 <MOTOR_set_duty+0x4de>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	88db      	ldrh	r3, [r3, #6]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d117      	bne.n	8002162 <MOTOR_set_duty+0x40a>
 8002132:	69b8      	ldr	r0, [r7, #24]
 8002134:	f7fe f9d4 	bl	80004e0 <__aeabi_f2d>
 8002138:	a341      	add	r3, pc, #260	@ (adr r3, 8002240 <MOTOR_set_duty+0x4e8>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fa27 	bl	8000590 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	60ba      	str	r2, [r7, #8]
 8002148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681c      	ldr	r4, [r3, #0]
 8002154:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002158:	f7fe fcdc 	bl	8000b14 <__aeabi_d2uiz>
 800215c:	4603      	mov	r3, r0
 800215e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002160:	e069      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	88db      	ldrh	r3, [r3, #6]
 8002166:	2b08      	cmp	r3, #8
 8002168:	d117      	bne.n	800219a <MOTOR_set_duty+0x442>
 800216a:	69b8      	ldr	r0, [r7, #24]
 800216c:	f7fe f9b8 	bl	80004e0 <__aeabi_f2d>
 8002170:	a333      	add	r3, pc, #204	@ (adr r3, 8002240 <MOTOR_set_duty+0x4e8>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe fa0b 	bl	8000590 <__aeabi_dmul>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	603a      	str	r2, [r7, #0]
 8002180:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681c      	ldr	r4, [r3, #0]
 800218c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002190:	f7fe fcc0 	bl	8000b14 <__aeabi_d2uiz>
 8002194:	4603      	mov	r3, r0
 8002196:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002198:	e04d      	b.n	8002236 <MOTOR_set_duty+0x4de>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	88db      	ldrh	r3, [r3, #6]
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d116      	bne.n	80021d0 <MOTOR_set_duty+0x478>
 80021a2:	69b8      	ldr	r0, [r7, #24]
 80021a4:	f7fe f99c 	bl	80004e0 <__aeabi_f2d>
 80021a8:	a325      	add	r3, pc, #148	@ (adr r3, 8002240 <MOTOR_set_duty+0x4e8>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f9ef 	bl	8000590 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4615      	mov	r5, r2
 80021b8:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681c      	ldr	r4, [r3, #0]
 80021c2:	4628      	mov	r0, r5
 80021c4:	4631      	mov	r1, r6
 80021c6:	f7fe fca5 	bl	8000b14 <__aeabi_d2uiz>
 80021ca:	4603      	mov	r3, r0
 80021cc:	6423      	str	r3, [r4, #64]	@ 0x40
 80021ce:	e032      	b.n	8002236 <MOTOR_set_duty+0x4de>
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	88db      	ldrh	r3, [r3, #6]
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d116      	bne.n	8002206 <MOTOR_set_duty+0x4ae>
 80021d8:	69b8      	ldr	r0, [r7, #24]
 80021da:	f7fe f981 	bl	80004e0 <__aeabi_f2d>
 80021de:	a318      	add	r3, pc, #96	@ (adr r3, 8002240 <MOTOR_set_duty+0x4e8>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe f9d4 	bl	8000590 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4692      	mov	sl, r2
 80021ee:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681c      	ldr	r4, [r3, #0]
 80021f8:	4650      	mov	r0, sl
 80021fa:	4659      	mov	r1, fp
 80021fc:	f7fe fc8a 	bl	8000b14 <__aeabi_d2uiz>
 8002200:	4603      	mov	r3, r0
 8002202:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002204:	e017      	b.n	8002236 <MOTOR_set_duty+0x4de>
 8002206:	69b8      	ldr	r0, [r7, #24]
 8002208:	f7fe f96a 	bl	80004e0 <__aeabi_f2d>
 800220c:	a30c      	add	r3, pc, #48	@ (adr r3, 8002240 <MOTOR_set_duty+0x4e8>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe f9bd 	bl	8000590 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4690      	mov	r8, r2
 800221c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681c      	ldr	r4, [r3, #0]
 8002226:	4640      	mov	r0, r8
 8002228:	4649      	mov	r1, r9
 800222a:	f7fe fc73 	bl	8000b14 <__aeabi_d2uiz>
 800222e:	4603      	mov	r3, r0
 8002230:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8002232:	e000      	b.n	8002236 <MOTOR_set_duty+0x4de>
        return;
 8002234:	bf00      	nop
    }
}
 8002236:	3724      	adds	r7, #36	@ 0x24
 8002238:	46bd      	mov	sp, r7
 800223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800223e:	bf00      	nop
 8002240:	3b645a1d 	.word	0x3b645a1d
 8002244:	40453fdf 	.word	0x40453fdf

08002248 <PID_controller_init>:
float boundary = 0.05;

//-------------------------------------------Function Code-------------------------------------------------------//

void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	ed87 0a02 	vstr	s0, [r7, #8]
 8002254:	edc7 0a01 	vstr	s1, [r7, #4]
 8002258:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	0000      	movs	r0, r0
 800229c:	0000      	movs	r0, r0
	...

080022a0 <PS2X_Reader>:
    PS2->on = 0;
}
extern PS2_typedef ps2;

void PS2X_Reader()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
//	ps2.ps2Y = 0;
//	ps2.ps2X = 0;
	if (ps2.ps2RX[0] == 69) 		//Press L4 to switch to use Joy stick
 80022a6:	4b94      	ldr	r3, [pc, #592]	@ (80024f8 <PS2X_Reader+0x258>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b45      	cmp	r3, #69	@ 0x45
 80022ac:	d105      	bne.n	80022ba <PS2X_Reader+0x1a>
	{
		ps2.mode = 1;
 80022ae:	4b92      	ldr	r3, [pc, #584]	@ (80024f8 <PS2X_Reader+0x258>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on = 0;
 80022b4:	4b90      	ldr	r3, [pc, #576]	@ (80024f8 <PS2X_Reader+0x258>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	67da      	str	r2, [r3, #124]	@ 0x7c
//		ps2.ps2YPos = 132;
	}
	if (ps2.ps2RX[0] == 70)		//Press L5 to switch to use Button
 80022ba:	4b8f      	ldr	r3, [pc, #572]	@ (80024f8 <PS2X_Reader+0x258>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b46      	cmp	r3, #70	@ 0x46
 80022c0:	d10d      	bne.n	80022de <PS2X_Reader+0x3e>
	{
		ps2.mode = 2;
 80022c2:	4b8d      	ldr	r3, [pc, #564]	@ (80024f8 <PS2X_Reader+0x258>)
 80022c4:	2202      	movs	r2, #2
 80022c6:	66da      	str	r2, [r3, #108]	@ 0x6c
		PID_velo.out = 0;
 80022c8:	4b8c      	ldr	r3, [pc, #560]	@ (80024fc <PS2X_Reader+0x25c>)
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
		ps2.on =1;
 80022d0:	4b89      	ldr	r3, [pc, #548]	@ (80024f8 <PS2X_Reader+0x258>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.PIDPos = AMT.Linear_Position;
 80022d6:	4b8a      	ldr	r3, [pc, #552]	@ (8002500 <PS2X_Reader+0x260>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a87      	ldr	r2, [pc, #540]	@ (80024f8 <PS2X_Reader+0x258>)
 80022dc:	6793      	str	r3, [r2, #120]	@ 0x78


	}
	//Mode Joy stick
	if (ps2.mode == 1)
 80022de:	4b86      	ldr	r3, [pc, #536]	@ (80024f8 <PS2X_Reader+0x258>)
 80022e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	f040 80ac 	bne.w	8002440 <PS2X_Reader+0x1a0>
	{
		//Read Ps2 Joy stick in VERTICAL
		if(ps2.ps2RX[0] == 81){
 80022e8:	4b83      	ldr	r3, [pc, #524]	@ (80024f8 <PS2X_Reader+0x258>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b51      	cmp	r3, #81	@ 0x51
 80022ee:	d169      	bne.n	80023c4 <PS2X_Reader+0x124>
			if (ps2.ps2RX[2] == 83){
 80022f0:	4b81      	ldr	r3, [pc, #516]	@ (80024f8 <PS2X_Reader+0x258>)
 80022f2:	789b      	ldrb	r3, [r3, #2]
 80022f4:	2b53      	cmp	r3, #83	@ 0x53
 80022f6:	d103      	bne.n	8002300 <PS2X_Reader+0x60>
				ps2.digit = 1;
 80022f8:	4b7f      	ldr	r3, [pc, #508]	@ (80024f8 <PS2X_Reader+0x258>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	e00e      	b.n	800231e <PS2X_Reader+0x7e>
			}
			else if (ps2.ps2RX[3] == 83){
 8002300:	4b7d      	ldr	r3, [pc, #500]	@ (80024f8 <PS2X_Reader+0x258>)
 8002302:	78db      	ldrb	r3, [r3, #3]
 8002304:	2b53      	cmp	r3, #83	@ 0x53
 8002306:	d103      	bne.n	8002310 <PS2X_Reader+0x70>
				ps2.digit = 2;
 8002308:	4b7b      	ldr	r3, [pc, #492]	@ (80024f8 <PS2X_Reader+0x258>)
 800230a:	2202      	movs	r2, #2
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	e006      	b.n	800231e <PS2X_Reader+0x7e>
			}
			else if (ps2.ps2RX[4] == 83){
 8002310:	4b79      	ldr	r3, [pc, #484]	@ (80024f8 <PS2X_Reader+0x258>)
 8002312:	791b      	ldrb	r3, [r3, #4]
 8002314:	2b53      	cmp	r3, #83	@ 0x53
 8002316:	d102      	bne.n	800231e <PS2X_Reader+0x7e>
				ps2.digit = 3;
 8002318:	4b77      	ldr	r3, [pc, #476]	@ (80024f8 <PS2X_Reader+0x258>)
 800231a:	2203      	movs	r2, #3
 800231c:	60da      	str	r2, [r3, #12]
			}
			for(int k=1 ; k<5 ; k++){
 800231e:	2301      	movs	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e01d      	b.n	8002360 <PS2X_Reader+0xc0>
				for (int l=0; l<10 ; l++){
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	e014      	b.n	8002354 <PS2X_Reader+0xb4>
					if (ps2.ps2RX[k] == num[l]){
 800232a:	4a73      	ldr	r2, [pc, #460]	@ (80024f8 <PS2X_Reader+0x258>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	4a73      	ldr	r2, [pc, #460]	@ (8002504 <PS2X_Reader+0x264>)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	4299      	cmp	r1, r3
 800233e:	d106      	bne.n	800234e <PS2X_Reader+0xae>
						ps2.gain[k-1] = l;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3b01      	subs	r3, #1
 8002344:	496c      	ldr	r1, [pc, #432]	@ (80024f8 <PS2X_Reader+0x258>)
 8002346:	3304      	adds	r3, #4
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int l=0; l<10 ; l++){
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3301      	adds	r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b09      	cmp	r3, #9
 8002358:	dde7      	ble.n	800232a <PS2X_Reader+0x8a>
			for(int k=1 ; k<5 ; k++){
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3301      	adds	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b04      	cmp	r3, #4
 8002364:	ddde      	ble.n	8002324 <PS2X_Reader+0x84>
					}
				}
			}
			if (ps2.digit == 1){
 8002366:	4b64      	ldr	r3, [pc, #400]	@ (80024f8 <PS2X_Reader+0x258>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d104      	bne.n	8002378 <PS2X_Reader+0xd8>
				ps2.ps2YPos = ps2.gain[0];
 800236e:	4b62      	ldr	r3, [pc, #392]	@ (80024f8 <PS2X_Reader+0x258>)
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	4a61      	ldr	r2, [pc, #388]	@ (80024f8 <PS2X_Reader+0x258>)
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	e025      	b.n	80023c4 <PS2X_Reader+0x124>
			}
			else if (ps2.digit == 2){
 8002378:	4b5f      	ldr	r3, [pc, #380]	@ (80024f8 <PS2X_Reader+0x258>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d10c      	bne.n	800239a <PS2X_Reader+0xfa>
				ps2.ps2YPos = (ps2.gain[0]*10)+ps2.gain[1];
 8002380:	4b5d      	ldr	r3, [pc, #372]	@ (80024f8 <PS2X_Reader+0x258>)
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	461a      	mov	r2, r3
 800238e:	4b5a      	ldr	r3, [pc, #360]	@ (80024f8 <PS2X_Reader+0x258>)
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	4413      	add	r3, r2
 8002394:	4a58      	ldr	r2, [pc, #352]	@ (80024f8 <PS2X_Reader+0x258>)
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e014      	b.n	80023c4 <PS2X_Reader+0x124>
			}
			else if (ps2.digit == 3){
 800239a:	4b57      	ldr	r3, [pc, #348]	@ (80024f8 <PS2X_Reader+0x258>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d110      	bne.n	80023c4 <PS2X_Reader+0x124>
				ps2.ps2YPos = (ps2.gain[0]*100)+(ps2.gain[1]*10)+ps2.gain[2];
 80023a2:	4b55      	ldr	r3, [pc, #340]	@ (80024f8 <PS2X_Reader+0x258>)
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2264      	movs	r2, #100	@ 0x64
 80023a8:	fb02 f103 	mul.w	r1, r2, r3
 80023ac:	4b52      	ldr	r3, [pc, #328]	@ (80024f8 <PS2X_Reader+0x258>)
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	18ca      	adds	r2, r1, r3
 80023ba:	4b4f      	ldr	r3, [pc, #316]	@ (80024f8 <PS2X_Reader+0x258>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	4413      	add	r3, r2
 80023c0:	4a4d      	ldr	r2, [pc, #308]	@ (80024f8 <PS2X_Reader+0x258>)
 80023c2:	6213      	str	r3, [r2, #32]
		//Convert from 0 - 255 to -128 - 128
//		ps2.ps2Y = (ps2.ps2YPos - 132);
//		ps2.ps2X = ps2.ps2XPos - 132;

		//Generate PWM
		ps2.pwmOut = ((ps2.ps2Y/ 132.0)*300) + 150;
 80023c4:	4b4c      	ldr	r3, [pc, #304]	@ (80024f8 <PS2X_Reader+0x258>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f877 	bl	80004bc <__aeabi_i2d>
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002508 <PS2X_Reader+0x268>)
 80023d4:	f7fe fa06 	bl	80007e4 <__aeabi_ddiv>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	a341      	add	r3, pc, #260	@ (adr r3, 80024e8 <PS2X_Reader+0x248>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fe f8d3 	bl	8000590 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	a33f      	add	r3, pc, #252	@ (adr r3, 80024f0 <PS2X_Reader+0x250>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fd ff14 	bl	8000224 <__adddf3>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fb5e 	bl	8000ac4 <__aeabi_d2iz>
 8002408:	4603      	mov	r3, r0
 800240a:	4a3b      	ldr	r2, [pc, #236]	@ (80024f8 <PS2X_Reader+0x258>)
 800240c:	6693      	str	r3, [r2, #104]	@ 0x68
		ps2.pwmOut = 320 - ps2.ps2YPos;
 800240e:	4b3a      	ldr	r3, [pc, #232]	@ (80024f8 <PS2X_Reader+0x258>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002416:	4a38      	ldr	r2, [pc, #224]	@ (80024f8 <PS2X_Reader+0x258>)
 8002418:	6693      	str	r3, [r2, #104]	@ 0x68
		if (ps2.pwmOut > 300)
 800241a:	4b37      	ldr	r3, [pc, #220]	@ (80024f8 <PS2X_Reader+0x258>)
 800241c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800241e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002422:	dd03      	ble.n	800242c <PS2X_Reader+0x18c>
		{
			ps2.pwmOut = 300;
 8002424:	4b34      	ldr	r3, [pc, #208]	@ (80024f8 <PS2X_Reader+0x258>)
 8002426:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800242a:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < -300)
 800242c:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <PS2X_Reader+0x258>)
 800242e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002430:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002434:	f280 80bf 	bge.w	80025b6 <PS2X_Reader+0x316>
		{
			ps2.pwmOut = 0;
 8002438:	4b2f      	ldr	r3, [pc, #188]	@ (80024f8 <PS2X_Reader+0x258>)
 800243a:	2200      	movs	r2, #0
 800243c:	669a      	str	r2, [r3, #104]	@ 0x68
 800243e:	e0ba      	b.n	80025b6 <PS2X_Reader+0x316>
//			MOTOR_set_duty(&MT, ps2.pwmOut);
//		}
	}

	//--- Mode Button ---//
	else if (ps2.mode == 2)
 8002440:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <PS2X_Reader+0x258>)
 8002442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002444:	2b02      	cmp	r3, #2
 8002446:	f040 80b6 	bne.w	80025b6 <PS2X_Reader+0x316>
	{
//		ps2.PIDPos = AMT.Linear_Position;
		ps2.on = 1;
 800244a:	4b2b      	ldr	r3, [pc, #172]	@ (80024f8 <PS2X_Reader+0x258>)
 800244c:	2201      	movs	r2, #1
 800244e:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.ps2Y = 0;
 8002450:	4b29      	ldr	r3, [pc, #164]	@ (80024f8 <PS2X_Reader+0x258>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
//		ps2.ps2X = 0;
		//Keys Map
		static uint32_t timestamp =0;
		if(timestamp < HAL_GetTick())
 8002456:	f001 fa93 	bl	8003980 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	4b2b      	ldr	r3, [pc, #172]	@ (800250c <PS2X_Reader+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d908      	bls.n	8002476 <PS2X_Reader+0x1d6>
		{
			timestamp = HAL_GetTick()+100;
 8002464:	f001 fa8c 	bl	8003980 <HAL_GetTick>
 8002468:	4603      	mov	r3, r0
 800246a:	3364      	adds	r3, #100	@ 0x64
 800246c:	4a27      	ldr	r2, [pc, #156]	@ (800250c <PS2X_Reader+0x26c>)
 800246e:	6013      	str	r3, [r2, #0]
			ps2.ps2RX[0] = 0;
 8002470:	4b21      	ldr	r3, [pc, #132]	@ (80024f8 <PS2X_Reader+0x258>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
		}
		for (int i =0;i<6;i++)
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	e058      	b.n	800252e <PS2X_Reader+0x28e>
		{
			if (ps2.ps2RX[0] == 0)
 800247c:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <PS2X_Reader+0x258>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d123      	bne.n	80024cc <PS2X_Reader+0x22c>
			{
				//Left
				ps2.l[0] = 0; //w
 8002484:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <PS2X_Reader+0x258>)
 8002486:	2200      	movs	r2, #0
 8002488:	651a      	str	r2, [r3, #80]	@ 0x50
				ps2.l[1] = 0;	//a
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <PS2X_Reader+0x258>)
 800248c:	2200      	movs	r2, #0
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54
				ps2.l[2] = 0;	//s
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <PS2X_Reader+0x258>)
 8002492:	2200      	movs	r2, #0
 8002494:	659a      	str	r2, [r3, #88]	@ 0x58
				ps2.l[3] = 0;	//d
 8002496:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <PS2X_Reader+0x258>)
 8002498:	2200      	movs	r2, #0
 800249a:	65da      	str	r2, [r3, #92]	@ 0x5c
				ps2.l[4] = 0;	//l1
 800249c:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <PS2X_Reader+0x258>)
 800249e:	2200      	movs	r2, #0
 80024a0:	661a      	str	r2, [r3, #96]	@ 0x60
				ps2.l[5] = 0;	//l2
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <PS2X_Reader+0x258>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	665a      	str	r2, [r3, #100]	@ 0x64
				//Right
				ps2.r[0] = 0;	//w
 80024a8:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <PS2X_Reader+0x258>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	639a      	str	r2, [r3, #56]	@ 0x38
				ps2.r[1] = 0;	//a
 80024ae:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <PS2X_Reader+0x258>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	63da      	str	r2, [r3, #60]	@ 0x3c
				ps2.r[2] = 0;	//s
 80024b4:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <PS2X_Reader+0x258>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
				ps2.r[3] = 0;	//d
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <PS2X_Reader+0x258>)
 80024bc:	2200      	movs	r2, #0
 80024be:	645a      	str	r2, [r3, #68]	@ 0x44
				ps2.r[4] = 0;	//r1
 80024c0:	4b0d      	ldr	r3, [pc, #52]	@ (80024f8 <PS2X_Reader+0x258>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	649a      	str	r2, [r3, #72]	@ 0x48
				ps2.r[5] = 0;	//r2
 80024c6:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <PS2X_Reader+0x258>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	64da      	str	r2, [r3, #76]	@ 0x4c
			}

			if (ps2.ps2RX[0] - 65 == i)
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <PS2X_Reader+0x258>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	3b41      	subs	r3, #65	@ 0x41
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d11b      	bne.n	8002510 <PS2X_Reader+0x270>
			{
				ps2.l[i] = 1;
 80024d8:	4a07      	ldr	r2, [pc, #28]	@ (80024f8 <PS2X_Reader+0x258>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3314      	adds	r3, #20
 80024de:	2101      	movs	r1, #1
 80024e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80024e4:	e020      	b.n	8002528 <PS2X_Reader+0x288>
 80024e6:	bf00      	nop
 80024e8:	00000000 	.word	0x00000000
 80024ec:	4072c000 	.word	0x4072c000
 80024f0:	00000000 	.word	0x00000000
 80024f4:	4062c000 	.word	0x4062c000
 80024f8:	20000ab0 	.word	0x20000ab0
 80024fc:	20000b30 	.word	0x20000b30
 8002500:	20000a78 	.word	0x20000a78
 8002504:	20000208 	.word	0x20000208
 8002508:	40608000 	.word	0x40608000
 800250c:	200002cc 	.word	0x200002cc
			}

			else if (ps2.ps2RX[0] - 73 == i)
 8002510:	4b4b      	ldr	r3, [pc, #300]	@ (8002640 <PS2X_Reader+0x3a0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	3b49      	subs	r3, #73	@ 0x49
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	429a      	cmp	r2, r3
 800251a:	d105      	bne.n	8002528 <PS2X_Reader+0x288>
			{
				ps2.r[i] = 1;
 800251c:	4a48      	ldr	r2, [pc, #288]	@ (8002640 <PS2X_Reader+0x3a0>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	330e      	adds	r3, #14
 8002522:	2101      	movs	r1, #1
 8002524:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i =0;i<6;i++)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3301      	adds	r3, #1
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b05      	cmp	r3, #5
 8002532:	dda3      	ble.n	800247c <PS2X_Reader+0x1dc>
			}
		}

		//Generate PWM
		if (ps2.l[2] == 1)
 8002534:	4b42      	ldr	r3, [pc, #264]	@ (8002640 <PS2X_Reader+0x3a0>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002538:	2b01      	cmp	r3, #1
 800253a:	d113      	bne.n	8002564 <PS2X_Reader+0x2c4>
		{
			//Adjust How to decrease(-) Linear position
			ps2.PIDPos -= 0.1;
 800253c:	4b40      	ldr	r3, [pc, #256]	@ (8002640 <PS2X_Reader+0x3a0>)
 800253e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002540:	4618      	mov	r0, r3
 8002542:	f7fd ffcd 	bl	80004e0 <__aeabi_f2d>
 8002546:	a33c      	add	r3, pc, #240	@ (adr r3, 8002638 <PS2X_Reader+0x398>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fd fe68 	bl	8000220 <__aeabi_dsub>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe fafc 	bl	8000b54 <__aeabi_d2f>
 800255c:	4603      	mov	r3, r0
 800255e:	4a38      	ldr	r2, [pc, #224]	@ (8002640 <PS2X_Reader+0x3a0>)
 8002560:	6793      	str	r3, [r2, #120]	@ 0x78
 8002562:	e028      	b.n	80025b6 <PS2X_Reader+0x316>
//			if (ps2.pwmOut < 0)
//			{
//				ps2.pwmOut = 0;		// to make pwm1 >= 0
//			}
		}
		else if (ps2.l[3] == 1)
 8002564:	4b36      	ldr	r3, [pc, #216]	@ (8002640 <PS2X_Reader+0x3a0>)
 8002566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d113      	bne.n	8002594 <PS2X_Reader+0x2f4>
		{
			//Adjust How to increase(+) Linear position
			ps2.PIDPos += 0.1;
 800256c:	4b34      	ldr	r3, [pc, #208]	@ (8002640 <PS2X_Reader+0x3a0>)
 800256e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd ffb5 	bl	80004e0 <__aeabi_f2d>
 8002576:	a330      	add	r3, pc, #192	@ (adr r3, 8002638 <PS2X_Reader+0x398>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f7fd fe52 	bl	8000224 <__adddf3>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f7fe fae4 	bl	8000b54 <__aeabi_d2f>
 800258c:	4603      	mov	r3, r0
 800258e:	4a2c      	ldr	r2, [pc, #176]	@ (8002640 <PS2X_Reader+0x3a0>)
 8002590:	6793      	str	r3, [r2, #120]	@ 0x78
 8002592:	e010      	b.n	80025b6 <PS2X_Reader+0x316>
//			ps2.pwmOut = ps2.pwmOut + count;	// + PWM with count
		}
		else if (ps2.l[0] == 1)		//Press down button(l1) to PWM out forward
 8002594:	4b2a      	ldr	r3, [pc, #168]	@ (8002640 <PS2X_Reader+0x3a0>)
 8002596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002598:	2b01      	cmp	r3, #1
 800259a:	d00c      	beq.n	80025b6 <PS2X_Reader+0x316>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else if (ps2.l[1] == 1)		//Press down button(l1) to PWM out backward
 800259c:	4b28      	ldr	r3, [pc, #160]	@ (8002640 <PS2X_Reader+0x3a0>)
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d008      	beq.n	80025b6 <PS2X_Reader+0x316>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
		}
		else if (ps2.r[1] == 1)		//Press X(r1) to stop
 80025a4:	4b26      	ldr	r3, [pc, #152]	@ (8002640 <PS2X_Reader+0x3a0>)
 80025a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d004      	beq.n	80025b6 <PS2X_Reader+0x316>
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
			MOTOR_set_duty(&MT, 150);
 80025ac:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8002644 <PS2X_Reader+0x3a4>
 80025b0:	4825      	ldr	r0, [pc, #148]	@ (8002648 <PS2X_Reader+0x3a8>)
 80025b2:	f7ff fbd1 	bl	8001d58 <MOTOR_set_duty>
		}
	}
	// Floor Selection
	if(base.ShelveMode == 1){									//In Shelve mode
 80025b6:	4b25      	ldr	r3, [pc, #148]	@ (800264c <PS2X_Reader+0x3ac>)
 80025b8:	8b1b      	ldrh	r3, [r3, #24]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d136      	bne.n	800262c <PS2X_Reader+0x38c>
		if (ps2.ps2RX[0] == 71){								//Press Select to save shelve
 80025be:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <PS2X_Reader+0x3a0>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b47      	cmp	r3, #71	@ 0x47
 80025c4:	d112      	bne.n	80025ec <PS2X_Reader+0x34c>
			base.Shelve[ps2.counts-1] = AMT.Linear_Position;	//Set shelve in to array base.Shelve
 80025c6:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <PS2X_Reader+0x3b0>)
 80025c8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80025cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <PS2X_Reader+0x3a0>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d0:	3b01      	subs	r3, #1
 80025d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d6:	ee17 1a90 	vmov	r1, s15
 80025da:	4a1c      	ldr	r2, [pc, #112]	@ (800264c <PS2X_Reader+0x3ac>)
 80025dc:	3306      	adds	r3, #6
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	6059      	str	r1, [r3, #4]
			ps2.counts=  +1;
 80025e4:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <PS2X_Reader+0x3a0>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80025ea:	e011      	b.n	8002610 <PS2X_Reader+0x370>
		}
		else if (ps2.ps2RX[0] == 73){							//Press Triangle to delete old array
 80025ec:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <PS2X_Reader+0x3a0>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b49      	cmp	r3, #73	@ 0x49
 80025f2:	d10d      	bne.n	8002610 <PS2X_Reader+0x370>
			base.Shelve[ps2.counts-1] = 0;
 80025f4:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <PS2X_Reader+0x3a0>)
 80025f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f8:	3b01      	subs	r3, #1
 80025fa:	4a14      	ldr	r2, [pc, #80]	@ (800264c <PS2X_Reader+0x3ac>)
 80025fc:	3306      	adds	r3, #6
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	2200      	movs	r2, #0
 8002604:	605a      	str	r2, [r3, #4]
			ps2.counts = ps2.counts -1;
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <PS2X_Reader+0x3a0>)
 8002608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260a:	3b01      	subs	r3, #1
 800260c:	4a0c      	ldr	r2, [pc, #48]	@ (8002640 <PS2X_Reader+0x3a0>)
 800260e:	6753      	str	r3, [r2, #116]	@ 0x74
		}

		if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1){		//Press Start to finish set shelves and send data to basesystem
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <PS2X_Reader+0x3a0>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b48      	cmp	r3, #72	@ 0x48
 8002616:	d109      	bne.n	800262c <PS2X_Reader+0x38c>
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <PS2X_Reader+0x3ac>)
 800261a:	8b1b      	ldrh	r3, [r3, #24]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <PS2X_Reader+0x38c>
			base.ShelveMode = 0;
 8002620:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <PS2X_Reader+0x3ac>)
 8002622:	2200      	movs	r2, #0
 8002624:	831a      	strh	r2, [r3, #24]
			registerFrame[0x10].U16 = 0b0000;
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <PS2X_Reader+0x3b4>)
 8002628:	2200      	movs	r2, #0
 800262a:	841a      	strh	r2, [r3, #32]
		}
	}
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	f3af 8000 	nop.w
 8002638:	9999999a 	.word	0x9999999a
 800263c:	3fb99999 	.word	0x3fb99999
 8002640:	20000ab0 	.word	0x20000ab0
 8002644:	43160000 	.word	0x43160000
 8002648:	20000a5c 	.word	0x20000a5c
 800264c:	20000284 	.word	0x20000284
 8002650:	20000a78 	.word	0x20000a78
 8002654:	20001030 	.word	0x20001030

08002658 <Traject_init>:
float Time_dec;

//-------------------------------------------Function Code-------------------------------------------------------//

void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	ed87 0a02 	vstr	s0, [r7, #8]
 8002664:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800269c:	b08d      	sub	sp, #52	@ 0x34
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026a0:	f001 f909 	bl	80038b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026a4:	f000 f970 	bl	8002988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026a8:	f000 fcda 	bl	8003060 <MX_GPIO_Init>
  MX_DMA_Init();
 80026ac:	f000 fca6 	bl	8002ffc <MX_DMA_Init>
  MX_TIM2_Init();
 80026b0:	f000 fa2e 	bl	8002b10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026b4:	f000 fa80 	bl	8002bb8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80026b8:	f000 fb50 	bl	8002d5c <MX_TIM5_Init>
  MX_UART4_Init();
 80026bc:	f000 fc02 	bl	8002ec4 <MX_UART4_Init>
  MX_TIM4_Init();
 80026c0:	f000 fafc 	bl	8002cbc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80026c4:	f000 fc4c 	bl	8002f60 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80026c8:	f000 fbcc 	bl	8002e64 <MX_TIM16_Init>
  MX_TIM6_Init();
 80026cc:	f000 fb94 	bl	8002df8 <MX_TIM6_Init>
  MX_ADC1_Init();
 80026d0:	f000 f9a6 	bl	8002a20 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 80026d4:	4894      	ldr	r0, [pc, #592]	@ (8002928 <main+0x290>)
 80026d6:	f004 f90b 	bl	80068f0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);					// Output compare
 80026da:	4894      	ldr	r0, [pc, #592]	@ (800292c <main+0x294>)
 80026dc:	f004 f908 	bl	80068f0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);					// Trajectory trigger
 80026e0:	4893      	ldr	r0, [pc, #588]	@ (8002930 <main+0x298>)
 80026e2:	f004 f905 	bl	80068f0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);        // PWM
 80026e6:	2100      	movs	r1, #0
 80026e8:	4890      	ldr	r0, [pc, #576]	@ (800292c <main+0x294>)
 80026ea:	f004 fa57 	bl	8006b9c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);        // Direction
 80026ee:	2104      	movs	r1, #4
 80026f0:	488e      	ldr	r0, [pc, #568]	@ (800292c <main+0x294>)
 80026f2:	f004 fa53 	bl	8006b9c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80026f6:	488f      	ldr	r0, [pc, #572]	@ (8002934 <main+0x29c>)
 80026f8:	f004 f96a 	bl	80069d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80026fc:	488e      	ldr	r0, [pc, #568]	@ (8002938 <main+0x2a0>)
 80026fe:	f004 f967 	bl	80069d0 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 8002702:	4b8e      	ldr	r3, [pc, #568]	@ (800293c <main+0x2a4>)
 8002704:	4a8e      	ldr	r2, [pc, #568]	@ (8002940 <main+0x2a8>)
 8002706:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8002708:	4b8c      	ldr	r3, [pc, #560]	@ (800293c <main+0x2a4>)
 800270a:	4a8e      	ldr	r2, [pc, #568]	@ (8002944 <main+0x2ac>)
 800270c:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800270e:	4b8b      	ldr	r3, [pc, #556]	@ (800293c <main+0x2a4>)
 8002710:	2215      	movs	r2, #21
 8002712:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8002714:	4b89      	ldr	r3, [pc, #548]	@ (800293c <main+0x2a4>)
 8002716:	22c8      	movs	r2, #200	@ 0xc8
 8002718:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800271a:	498b      	ldr	r1, [pc, #556]	@ (8002948 <main+0x2b0>)
 800271c:	4887      	ldr	r0, [pc, #540]	@ (800293c <main+0x2a4>)
 800271e:	f7ff f805 	bl	800172c <Modbus_init>

  //float PID_pos_K[3] = {0.01 ,0.0, 0};
  float PID_pos_K[3] = {4.5 ,0.00000000495, 0};
 8002722:	4a8a      	ldr	r2, [pc, #552]	@ (800294c <main+0x2b4>)
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	ca07      	ldmia	r2, {r0, r1, r2}
 800272a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  //float PID_velo_K[3] = {3.35 ,0.050, 0.001};
  float PID_velo_K[3] = {3.35 ,0.050, 0.001};
 800272e:	4a88      	ldr	r2, [pc, #544]	@ (8002950 <main+0x2b8>)
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	ca07      	ldmia	r2, {r0, r1, r2}
 8002736:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // Initialize ASRS
  Traject_init(&Traj,450, 500);				// V_max, A_max
 800273a:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8002954 <main+0x2bc>
 800273e:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8002958 <main+0x2c0>
 8002742:	4886      	ldr	r0, [pc, #536]	@ (800295c <main+0x2c4>)
 8002744:	f7ff ff88 	bl	8002658 <Traject_init>
//  Kalman_Start(&Vel_filtered);
  AMT_encoder_init(&AMT, &htim2);
 8002748:	4977      	ldr	r1, [pc, #476]	@ (8002928 <main+0x290>)
 800274a:	4885      	ldr	r0, [pc, #532]	@ (8002960 <main+0x2c8>)
 800274c:	f7fe fe8e 	bl	800146c <AMT_encoder_init>
  MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 8002750:	2300      	movs	r3, #0
 8002752:	2204      	movs	r2, #4
 8002754:	4975      	ldr	r1, [pc, #468]	@ (800292c <main+0x294>)
 8002756:	4883      	ldr	r0, [pc, #524]	@ (8002964 <main+0x2cc>)
 8002758:	f7ff fadc 	bl	8001d14 <MOTOR_init>
  PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 800275c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002760:	ed97 7a07 	vldr	s14, [r7, #28]
 8002764:	edd7 6a08 	vldr	s13, [r7, #32]
 8002768:	eeb0 1a66 	vmov.f32	s2, s13
 800276c:	eef0 0a47 	vmov.f32	s1, s14
 8002770:	eeb0 0a67 	vmov.f32	s0, s15
 8002774:	487c      	ldr	r0, [pc, #496]	@ (8002968 <main+0x2d0>)
 8002776:	f7ff fd67 	bl	8002248 <PID_controller_init>
  PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 800277a:	edd7 7a03 	vldr	s15, [r7, #12]
 800277e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002782:	edd7 6a06 	vldr	s13, [r7, #24]
 8002786:	eeb0 1a66 	vmov.f32	s2, s13
 800278a:	eef0 0a47 	vmov.f32	s1, s14
 800278e:	eeb0 0a67 	vmov.f32	s0, s15
 8002792:	4876      	ldr	r0, [pc, #472]	@ (800296c <main+0x2d4>)
 8002794:	f7ff fd58 	bl	8002248 <PID_controller_init>

    /* USER CODE BEGIN 3 */

	  // Feedback to base system 5 Hz
	  static uint64_t timestamps =0;
	  if(HAL_GetTick() > timestamps)
 8002798:	f001 f8f2 	bl	8003980 <HAL_GetTick>
 800279c:	4603      	mov	r3, r0
 800279e:	2200      	movs	r2, #0
 80027a0:	461c      	mov	r4, r3
 80027a2:	4615      	mov	r5, r2
 80027a4:	4b72      	ldr	r3, [pc, #456]	@ (8002970 <main+0x2d8>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	42a2      	cmp	r2, r4
 80027ac:	41ab      	sbcs	r3, r5
 80027ae:	d20b      	bcs.n	80027c8 <main+0x130>
	  {
		  timestamps =HAL_GetTick() + 100;		//ms
 80027b0:	f001 f8e6 	bl	8003980 <HAL_GetTick>
 80027b4:	4603      	mov	r3, r0
 80027b6:	3364      	adds	r3, #100	@ 0x64
 80027b8:	2200      	movs	r2, #0
 80027ba:	469a      	mov	sl, r3
 80027bc:	4693      	mov	fp, r2
 80027be:	4b6c      	ldr	r3, [pc, #432]	@ (8002970 <main+0x2d8>)
 80027c0:	e9c3 ab00 	strd	sl, fp, [r3]
	  	  Heartbeat();
 80027c4:	f7fe fcb4 	bl	8001130 <Heartbeat>
	  }


	  // Read AMT encoder 1000 Hz
	  static uint64_t timestamp =0;
	  int64_t currentTime = HAL_GetTick();
 80027c8:	f001 f8da 	bl	8003980 <HAL_GetTick>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2200      	movs	r2, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  if(currentTime > timestamp)
 80027dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027e0:	4964      	ldr	r1, [pc, #400]	@ (8002974 <main+0x2dc>)
 80027e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027e6:	4290      	cmp	r0, r2
 80027e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80027ec:	d212      	bcs.n	8002814 <main+0x17c>
	  {
	  timestamp =currentTime + 1;				//ms
 80027ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027f2:	f112 0801 	adds.w	r8, r2, #1
 80027f6:	f143 0900 	adc.w	r9, r3, #0
 80027fa:	4642      	mov	r2, r8
 80027fc:	464b      	mov	r3, r9
 80027fe:	495d      	ldr	r1, [pc, #372]	@ (8002974 <main+0x2dc>)
 8002800:	e9c1 2300 	strd	r2, r3, [r1]
	  AMT_encoder_update(&AMT, &htim2, micros());
 8002804:	f000 fd16 	bl	8003234 <micros>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4946      	ldr	r1, [pc, #280]	@ (8002928 <main+0x290>)
 800280e:	4854      	ldr	r0, [pc, #336]	@ (8002960 <main+0x2c8>)
 8002810:	f7fe fe46 	bl	80014a0 <AMT_encoder_update>
	  }

	  //Modbus
	  easyCase();
 8002814:	f7fe fc74 	bl	8001100 <easyCase>
	  switch(base.Base_case){
 8002818:	4b57      	ldr	r3, [pc, #348]	@ (8002978 <main+0x2e0>)
 800281a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800281c:	3b01      	subs	r3, #1
 800281e:	2b07      	cmp	r3, #7
 8002820:	d82a      	bhi.n	8002878 <main+0x1e0>
 8002822:	a201      	add	r2, pc, #4	@ (adr r2, 8002828 <main+0x190>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	08002849 	.word	0x08002849
 800282c:	08002855 	.word	0x08002855
 8002830:	08002879 	.word	0x08002879
 8002834:	08002861 	.word	0x08002861
 8002838:	08002879 	.word	0x08002879
 800283c:	08002879 	.word	0x08002879
 8002840:	08002879 	.word	0x08002879
 8002844:	0800286d 	.word	0x0800286d
	  case 1:
		  base.BaseStatus = 1;
 8002848:	4b4b      	ldr	r3, [pc, #300]	@ (8002978 <main+0x2e0>)
 800284a:	2201      	movs	r2, #1
 800284c:	801a      	strh	r2, [r3, #0]
		  SetShelves();
 800284e:	f7fe fd2f 	bl	80012b0 <SetShelves>
		  break;
 8002852:	e014      	b.n	800287e <main+0x1e6>
	  case 2:
		  base.BaseStatus = 2;
 8002854:	4b48      	ldr	r3, [pc, #288]	@ (8002978 <main+0x2e0>)
 8002856:	2202      	movs	r2, #2
 8002858:	801a      	strh	r2, [r3, #0]
		  SetHome();
 800285a:	f7fe fdad 	bl	80013b8 <SetHome>
		  break;
 800285e:	e00e      	b.n	800287e <main+0x1e6>
	  case 4:
		  base.BaseStatus = 4;
 8002860:	4b45      	ldr	r3, [pc, #276]	@ (8002978 <main+0x2e0>)
 8002862:	2204      	movs	r2, #4
 8002864:	801a      	strh	r2, [r3, #0]
		  RunJog();
 8002866:	f7fe fdd3 	bl	8001410 <RunJog>
		  break;
 800286a:	e008      	b.n	800287e <main+0x1e6>
	  case 8:
		  base.BaseStatus = 8;
 800286c:	4b42      	ldr	r3, [pc, #264]	@ (8002978 <main+0x2e0>)
 800286e:	2208      	movs	r2, #8
 8002870:	801a      	strh	r2, [r3, #0]
		  RunPoint();
 8002872:	f7fe fd73 	bl	800135c <RunPoint>
		  break;
 8002876:	e002      	b.n	800287e <main+0x1e6>
	  default :
		  base.BaseStatus = 0;
 8002878:	4b3f      	ldr	r3, [pc, #252]	@ (8002978 <main+0x2e0>)
 800287a:	2200      	movs	r2, #0
 800287c:	801a      	strh	r2, [r3, #0]
	  }

	  // Reed Switch Status
	  int pinCombination = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) | HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 800287e:	2140      	movs	r1, #64	@ 0x40
 8002880:	483e      	ldr	r0, [pc, #248]	@ (800297c <main+0x2e4>)
 8002882:	f002 ff4d 	bl	8005720 <HAL_GPIO_ReadPin>
 8002886:	4603      	mov	r3, r0
 8002888:	005e      	lsls	r6, r3, #1
 800288a:	2180      	movs	r1, #128	@ 0x80
 800288c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002890:	f002 ff46 	bl	8005720 <HAL_GPIO_ReadPin>
 8002894:	4603      	mov	r3, r0
 8002896:	4333      	orrs	r3, r6
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
	  switch(pinCombination) {
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	2b01      	cmp	r3, #1
 800289e:	d006      	beq.n	80028ae <main+0x216>
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d107      	bne.n	80028b6 <main+0x21e>
		  case 2: // Binary 10: B is SET, A is RESET
			  base.ReedStatus = 0b0001;
 80028a6:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <main+0x2e0>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
			  break;
 80028ac:	e006      	b.n	80028bc <main+0x224>
		  case 1: // Binary 01: B is RESET, A is SET
			  base.ReedStatus = 0b0010;
 80028ae:	4b32      	ldr	r3, [pc, #200]	@ (8002978 <main+0x2e0>)
 80028b0:	2202      	movs	r2, #2
 80028b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
			  break;
 80028b4:	e002      	b.n	80028bc <main+0x224>
		  default:
			  base.ReedStatus = 0b0000;
 80028b6:	4b30      	ldr	r3, [pc, #192]	@ (8002978 <main+0x2e0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
	  }

	  Vacuum();
 80028bc:	f7fe fca2 	bl	8001204 <Vacuum>
	  GripperMovement();
 80028c0:	f7fe fcc4 	bl	800124c <GripperMovement>
	  Modbus_Protocal_Worker();
 80028c4:	f7fe ffbe 	bl	8001844 <Modbus_Protocal_Worker>
	  Routine();
 80028c8:	f7fe fc40 	bl	800114c <Routine>

//	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 80028cc:	230a      	movs	r3, #10
 80028ce:	220a      	movs	r2, #10
 80028d0:	492b      	ldr	r1, [pc, #172]	@ (8002980 <main+0x2e8>)
 80028d2:	482c      	ldr	r0, [pc, #176]	@ (8002984 <main+0x2ec>)
 80028d4:	f006 f96e 	bl	8008bb4 <HAL_UART_Receive>
	  if(ps2.ps2RX[0] == 74){
 80028d8:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <main+0x2e8>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b4a      	cmp	r3, #74	@ 0x4a
 80028de:	d102      	bne.n	80028e6 <main+0x24e>
		  ps2.stop = 1;
 80028e0:	4b27      	ldr	r3, [pc, #156]	@ (8002980 <main+0x2e8>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	671a      	str	r2, [r3, #112]	@ 0x70
	  }
	  if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 80028e6:	4b26      	ldr	r3, [pc, #152]	@ (8002980 <main+0x2e8>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d113      	bne.n	8002916 <main+0x27e>
 80028ee:	4b24      	ldr	r3, [pc, #144]	@ (8002980 <main+0x2e8>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b4b      	cmp	r3, #75	@ 0x4b
 80028f4:	d10f      	bne.n	8002916 <main+0x27e>
		  ps2.stop = 0;
 80028f6:	4b22      	ldr	r3, [pc, #136]	@ (8002980 <main+0x2e8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	671a      	str	r2, [r3, #112]	@ 0x70
		  ps2.pwmOut = 150;
 80028fc:	4b20      	ldr	r3, [pc, #128]	@ (8002980 <main+0x2e8>)
 80028fe:	2296      	movs	r2, #150	@ 0x96
 8002900:	669a      	str	r2, [r3, #104]	@ 0x68
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);		//Stop and Holf Position
 8002902:	4b1f      	ldr	r3, [pc, #124]	@ (8002980 <main+0x2e8>)
 8002904:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <main+0x294>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <main+0x294>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	639a      	str	r2, [r3, #56]	@ 0x38
 8002914:	e006      	b.n	8002924 <main+0x28c>
	  }
	  else if(ps2.stop == 0){
 8002916:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <main+0x2e8>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f af3c 	bne.w	8002798 <main+0x100>
		  PS2X_Reader();
 8002920:	f7ff fcbe 	bl	80022a0 <PS2X_Reader>
  {
 8002924:	e738      	b.n	8002798 <main+0x100>
 8002926:	bf00      	nop
 8002928:	2000033c 	.word	0x2000033c
 800292c:	20000408 	.word	0x20000408
 8002930:	2000066c 	.word	0x2000066c
 8002934:	200004d4 	.word	0x200004d4
 8002938:	200005a0 	.word	0x200005a0
 800293c:	20000b4c 	.word	0x20000b4c
 8002940:	200008d0 	.word	0x200008d0
 8002944:	20000738 	.word	0x20000738
 8002948:	20001030 	.word	0x20001030
 800294c:	0800a984 	.word	0x0800a984
 8002950:	0800a990 	.word	0x0800a990
 8002954:	43fa0000 	.word	0x43fa0000
 8002958:	43e10000 	.word	0x43e10000
 800295c:	20000a64 	.word	0x20000a64
 8002960:	20000a78 	.word	0x20000a78
 8002964:	20000a5c 	.word	0x20000a5c
 8002968:	20000268 	.word	0x20000268
 800296c:	20000b30 	.word	0x20000b30
 8002970:	200011c0 	.word	0x200011c0
 8002974:	200011c8 	.word	0x200011c8
 8002978:	20000284 	.word	0x20000284
 800297c:	48000400 	.word	0x48000400
 8002980:	20000ab0 	.word	0x20000ab0
 8002984:	20000804 	.word	0x20000804

08002988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b094      	sub	sp, #80	@ 0x50
 800298c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800298e:	f107 0318 	add.w	r3, r7, #24
 8002992:	2238      	movs	r2, #56	@ 0x38
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f007 ffae 	bl	800a8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f002 ff0c 	bl	80057c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ba:	2340      	movs	r3, #64	@ 0x40
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029be:	2302      	movs	r3, #2
 80029c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029c2:	2302      	movs	r3, #2
 80029c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80029c6:	2304      	movs	r3, #4
 80029c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80029ca:	2355      	movs	r3, #85	@ 0x55
 80029cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029ce:	2302      	movs	r3, #2
 80029d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029d2:	2302      	movs	r3, #2
 80029d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029d6:	2302      	movs	r3, #2
 80029d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029da:	f107 0318 	add.w	r3, r7, #24
 80029de:	4618      	mov	r0, r3
 80029e0:	f002 ffa6 	bl	8005930 <HAL_RCC_OscConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80029ea:	f000 fc3d 	bl	8003268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ee:	230f      	movs	r3, #15
 80029f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f2:	2303      	movs	r3, #3
 80029f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2104      	movs	r1, #4
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 faa4 	bl	8005f54 <HAL_RCC_ClockConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002a12:	f000 fc29 	bl	8003268 <Error_Handler>
  }
}
 8002a16:	bf00      	nop
 8002a18:	3750      	adds	r7, #80	@ 0x50
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	@ 0x30
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	2220      	movs	r2, #32
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f007 ff5d 	bl	800a8f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a3e:	4b32      	ldr	r3, [pc, #200]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002a44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a46:	4b30      	ldr	r3, [pc, #192]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a48:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002a4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a54:	4b2c      	ldr	r3, [pc, #176]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a60:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a66:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a68:	2204      	movs	r2, #4
 8002a6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a6c:	4b26      	ldr	r3, [pc, #152]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a72:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002a78:	4b23      	ldr	r3, [pc, #140]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a7e:	4b22      	ldr	r3, [pc, #136]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a92:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aa8:	4817      	ldr	r0, [pc, #92]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002aaa:	f001 f94b 	bl	8003d44 <HAL_ADC_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002ab4:	f000 fbd8 	bl	8003268 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4811      	ldr	r0, [pc, #68]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002ac4:	f001 ff60 	bl	8004988 <HAL_ADCEx_MultiModeConfigChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002ace:	f000 fbcb 	bl	8003268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <MX_ADC1_Init+0xec>)
 8002ad4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ad6:	2306      	movs	r3, #6
 8002ad8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ade:	237f      	movs	r3, #127	@ 0x7f
 8002ae0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	4619      	mov	r1, r3
 8002aee:	4806      	ldr	r0, [pc, #24]	@ (8002b08 <MX_ADC1_Init+0xe8>)
 8002af0:	f001 fae4 	bl	80040bc <HAL_ADC_ConfigChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002afa:	f000 fbb5 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002afe:	bf00      	nop
 8002b00:	3730      	adds	r7, #48	@ 0x30
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200002d0 	.word	0x200002d0
 8002b0c:	19200040 	.word	0x19200040

08002b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	@ 0x30
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	2224      	movs	r2, #36	@ 0x24
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f007 feea 	bl	800a8f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	463b      	mov	r3, r7
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b2e:	4b21      	ldr	r3, [pc, #132]	@ (8002bb4 <MX_TIM2_Init+0xa4>)
 8002b30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b36:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <MX_TIM2_Init+0xa4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <MX_TIM2_Init+0xa4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002b42:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <MX_TIM2_Init+0xa4>)
 8002b44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <MX_TIM2_Init+0xa4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b50:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <MX_TIM2_Init+0xa4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b56:	2303      	movs	r3, #3
 8002b58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	4619      	mov	r1, r3
 8002b80:	480c      	ldr	r0, [pc, #48]	@ (8002bb4 <MX_TIM2_Init+0xa4>)
 8002b82:	f004 fa61 	bl	8007048 <HAL_TIM_Encoder_Init>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002b8c:	f000 fb6c 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b98:	463b      	mov	r3, r7
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4805      	ldr	r0, [pc, #20]	@ (8002bb4 <MX_TIM2_Init+0xa4>)
 8002b9e:	f005 fe09 	bl	80087b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002ba8:	f000 fb5e 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bac:	bf00      	nop
 8002bae:	3730      	adds	r7, #48	@ 0x30
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	2000033c 	.word	0x2000033c

08002bb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08e      	sub	sp, #56	@ 0x38
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bcc:	f107 031c 	add.w	r3, r7, #28
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd8:	463b      	mov	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	611a      	str	r2, [r3, #16]
 8002be6:	615a      	str	r2, [r3, #20]
 8002be8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bea:	4b32      	ldr	r3, [pc, #200]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002bec:	4a32      	ldr	r2, [pc, #200]	@ (8002cb8 <MX_TIM3_Init+0x100>)
 8002bee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002bf0:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002bfe:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8002c02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c04:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c10:	4828      	ldr	r0, [pc, #160]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002c12:	f003 fe09 	bl	8006828 <HAL_TIM_Base_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002c1c:	f000 fb24 	bl	8003268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4821      	ldr	r0, [pc, #132]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002c2e:	f004 fddb 	bl	80077e8 <HAL_TIM_ConfigClockSource>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002c38:	f000 fb16 	bl	8003268 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c3c:	481d      	ldr	r0, [pc, #116]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002c3e:	f003 ff3f 	bl	8006ac0 <HAL_TIM_PWM_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002c48:	f000 fb0e 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c54:	f107 031c 	add.w	r3, r7, #28
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4816      	ldr	r0, [pc, #88]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002c5c:	f005 fdaa 	bl	80087b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002c66:	f000 faff 	bl	8003268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c6a:	2360      	movs	r3, #96	@ 0x60
 8002c6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480c      	ldr	r0, [pc, #48]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002c82:	f004 fc9d 	bl	80075c0 <HAL_TIM_PWM_ConfigChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002c8c:	f000 faec 	bl	8003268 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c90:	463b      	mov	r3, r7
 8002c92:	2204      	movs	r2, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4807      	ldr	r0, [pc, #28]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002c98:	f004 fc92 	bl	80075c0 <HAL_TIM_PWM_ConfigChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002ca2:	f000 fae1 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ca6:	4803      	ldr	r0, [pc, #12]	@ (8002cb4 <MX_TIM3_Init+0xfc>)
 8002ca8:	f000 fc22 	bl	80034f0 <HAL_TIM_MspPostInit>

}
 8002cac:	bf00      	nop
 8002cae:	3738      	adds	r7, #56	@ 0x38
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000408 	.word	0x20000408
 8002cb8:	40000400 	.word	0x40000400

08002cbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc2:	f107 0310 	add.w	r3, r7, #16
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cda:	4b1e      	ldr	r3, [pc, #120]	@ (8002d54 <MX_TIM4_Init+0x98>)
 8002cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d58 <MX_TIM4_Init+0x9c>)
 8002cde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 8002ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d54 <MX_TIM4_Init+0x98>)
 8002ce2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002ce6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <MX_TIM4_Init+0x98>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <MX_TIM4_Init+0x98>)
 8002cf0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002cf4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf6:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <MX_TIM4_Init+0x98>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfc:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <MX_TIM4_Init+0x98>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d02:	4814      	ldr	r0, [pc, #80]	@ (8002d54 <MX_TIM4_Init+0x98>)
 8002d04:	f003 fd90 	bl	8006828 <HAL_TIM_Base_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002d0e:	f000 faab 	bl	8003268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	480d      	ldr	r0, [pc, #52]	@ (8002d54 <MX_TIM4_Init+0x98>)
 8002d20:	f004 fd62 	bl	80077e8 <HAL_TIM_ConfigClockSource>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002d2a:	f000 fa9d 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4806      	ldr	r0, [pc, #24]	@ (8002d54 <MX_TIM4_Init+0x98>)
 8002d3c:	f005 fd3a 	bl	80087b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002d46:	f000 fa8f 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200004d4 	.word	0x200004d4
 8002d58:	40000800 	.word	0x40000800

08002d5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d62:	f107 0310 	add.w	r3, r7, #16
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <MX_TIM5_Init+0x94>)
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002df4 <MX_TIM5_Init+0x98>)
 8002d7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <MX_TIM5_Init+0x94>)
 8002d82:	22a9      	movs	r2, #169	@ 0xa9
 8002d84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <MX_TIM5_Init+0x94>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <MX_TIM5_Init+0x94>)
 8002d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d94:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <MX_TIM5_Init+0x94>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9a:	4b15      	ldr	r3, [pc, #84]	@ (8002df0 <MX_TIM5_Init+0x94>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002da0:	4813      	ldr	r0, [pc, #76]	@ (8002df0 <MX_TIM5_Init+0x94>)
 8002da2:	f003 fd41 	bl	8006828 <HAL_TIM_Base_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002dac:	f000 fa5c 	bl	8003268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002db6:	f107 0310 	add.w	r3, r7, #16
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480c      	ldr	r0, [pc, #48]	@ (8002df0 <MX_TIM5_Init+0x94>)
 8002dbe:	f004 fd13 	bl	80077e8 <HAL_TIM_ConfigClockSource>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002dc8:	f000 fa4e 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4805      	ldr	r0, [pc, #20]	@ (8002df0 <MX_TIM5_Init+0x94>)
 8002dda:	f005 fceb 	bl	80087b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002de4:	f000 fa40 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200005a0 	.word	0x200005a0
 8002df4:	40000c00 	.word	0x40000c00

08002df8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e08:	4b14      	ldr	r3, [pc, #80]	@ (8002e5c <MX_TIM6_Init+0x64>)
 8002e0a:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <MX_TIM6_Init+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8002e0e:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <MX_TIM6_Init+0x64>)
 8002e10:	22a9      	movs	r2, #169	@ 0xa9
 8002e12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e14:	4b11      	ldr	r3, [pc, #68]	@ (8002e5c <MX_TIM6_Init+0x64>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <MX_TIM6_Init+0x64>)
 8002e1c:	220a      	movs	r2, #10
 8002e1e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <MX_TIM6_Init+0x64>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e26:	480d      	ldr	r0, [pc, #52]	@ (8002e5c <MX_TIM6_Init+0x64>)
 8002e28:	f003 fcfe 	bl	8006828 <HAL_TIM_Base_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002e32:	f000 fa19 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	4619      	mov	r1, r3
 8002e42:	4806      	ldr	r0, [pc, #24]	@ (8002e5c <MX_TIM6_Init+0x64>)
 8002e44:	f005 fcb6 	bl	80087b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002e4e:	f000 fa0b 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000066c 	.word	0x2000066c
 8002e60:	40001000 	.word	0x40001000

08002e64 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002e68:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <MX_TIM16_Init+0x58>)
 8002e6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <MX_TIM16_Init+0x5c>)
 8002e6c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <MX_TIM16_Init+0x58>)
 8002e70:	22a9      	movs	r2, #169	@ 0xa9
 8002e72:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e74:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <MX_TIM16_Init+0x58>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <MX_TIM16_Init+0x58>)
 8002e7c:	f240 4279 	movw	r2, #1145	@ 0x479
 8002e80:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <MX_TIM16_Init+0x58>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <MX_TIM16_Init+0x58>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <MX_TIM16_Init+0x58>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002e94:	4809      	ldr	r0, [pc, #36]	@ (8002ebc <MX_TIM16_Init+0x58>)
 8002e96:	f003 fcc7 	bl	8006828 <HAL_TIM_Base_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002ea0:	f000 f9e2 	bl	8003268 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002ea4:	2108      	movs	r1, #8
 8002ea6:	4805      	ldr	r0, [pc, #20]	@ (8002ebc <MX_TIM16_Init+0x58>)
 8002ea8:	f003 ffd8 	bl	8006e5c <HAL_TIM_OnePulse_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002eb2:	f000 f9d9 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000738 	.word	0x20000738
 8002ec0:	40014400 	.word	0x40014400

08002ec4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002eca:	4a24      	ldr	r2, [pc, #144]	@ (8002f5c <MX_UART4_Init+0x98>)
 8002ecc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9700;
 8002ece:	4b22      	ldr	r3, [pc, #136]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002ed0:	f242 52e4 	movw	r2, #9700	@ 0x25e4
 8002ed4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed6:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002edc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002eea:	220c      	movs	r2, #12
 8002eec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef4:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002efa:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f00:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f06:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f0c:	4812      	ldr	r0, [pc, #72]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002f0e:	f005 fd37 	bl	8008980 <HAL_UART_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002f18:	f000 f9a6 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	480e      	ldr	r0, [pc, #56]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002f20:	f007 fc1f 	bl	800a762 <HAL_UARTEx_SetTxFifoThreshold>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002f2a:	f000 f99d 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002f2e:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8002f32:	4809      	ldr	r0, [pc, #36]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002f34:	f007 fc53 	bl	800a7de <HAL_UARTEx_SetRxFifoThreshold>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8002f3e:	f000 f993 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002f42:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <MX_UART4_Init+0x94>)
 8002f44:	f007 fbd4 	bl	800a6f0 <HAL_UARTEx_DisableFifoMode>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8002f4e:	f000 f98b 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000804 	.word	0x20000804
 8002f5c:	40004c00 	.word	0x40004c00

08002f60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f64:	4b23      	ldr	r3, [pc, #140]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002f66:	4a24      	ldr	r2, [pc, #144]	@ (8002ff8 <MX_USART2_UART_Init+0x98>)
 8002f68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002f6a:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002f6c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002f70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002f72:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002f74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f78:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002f80:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002f82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8e:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f94:	4b17      	ldr	r3, [pc, #92]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fa0:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa6:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fac:	4811      	ldr	r0, [pc, #68]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002fae:	f005 fce7 	bl	8008980 <HAL_UART_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002fb8:	f000 f956 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	480d      	ldr	r0, [pc, #52]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002fc0:	f007 fbcf 	bl	800a762 <HAL_UARTEx_SetTxFifoThreshold>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002fca:	f000 f94d 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4808      	ldr	r0, [pc, #32]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002fd2:	f007 fc04 	bl	800a7de <HAL_UARTEx_SetRxFifoThreshold>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002fdc:	f000 f944 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002fe0:	4804      	ldr	r0, [pc, #16]	@ (8002ff4 <MX_USART2_UART_Init+0x94>)
 8002fe2:	f007 fb85 	bl	800a6f0 <HAL_UARTEx_DisableFifoMode>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002fec:	f000 f93c 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	200008d0 	.word	0x200008d0
 8002ff8:	40004400 	.word	0x40004400

08002ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003002:	4b16      	ldr	r3, [pc, #88]	@ (800305c <MX_DMA_Init+0x60>)
 8003004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003006:	4a15      	ldr	r2, [pc, #84]	@ (800305c <MX_DMA_Init+0x60>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6493      	str	r3, [r2, #72]	@ 0x48
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <MX_DMA_Init+0x60>)
 8003010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800301a:	4b10      	ldr	r3, [pc, #64]	@ (800305c <MX_DMA_Init+0x60>)
 800301c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301e:	4a0f      	ldr	r2, [pc, #60]	@ (800305c <MX_DMA_Init+0x60>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6493      	str	r3, [r2, #72]	@ 0x48
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <MX_DMA_Init+0x60>)
 8003028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	2100      	movs	r1, #0
 8003036:	200b      	movs	r0, #11
 8003038:	f001 fe89 	bl	8004d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800303c:	200b      	movs	r0, #11
 800303e:	f001 fea0 	bl	8004d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	200c      	movs	r0, #12
 8003048:	f001 fe81 	bl	8004d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800304c:	200c      	movs	r0, #12
 800304e:	f001 fe98 	bl	8004d82 <HAL_NVIC_EnableIRQ>

}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000

08003060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003076:	4b4c      	ldr	r3, [pc, #304]	@ (80031a8 <MX_GPIO_Init+0x148>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307a:	4a4b      	ldr	r2, [pc, #300]	@ (80031a8 <MX_GPIO_Init+0x148>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003082:	4b49      	ldr	r3, [pc, #292]	@ (80031a8 <MX_GPIO_Init+0x148>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800308e:	4b46      	ldr	r3, [pc, #280]	@ (80031a8 <MX_GPIO_Init+0x148>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003092:	4a45      	ldr	r2, [pc, #276]	@ (80031a8 <MX_GPIO_Init+0x148>)
 8003094:	f043 0320 	orr.w	r3, r3, #32
 8003098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800309a:	4b43      	ldr	r3, [pc, #268]	@ (80031a8 <MX_GPIO_Init+0x148>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a6:	4b40      	ldr	r3, [pc, #256]	@ (80031a8 <MX_GPIO_Init+0x148>)
 80030a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030aa:	4a3f      	ldr	r2, [pc, #252]	@ (80031a8 <MX_GPIO_Init+0x148>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030b2:	4b3d      	ldr	r3, [pc, #244]	@ (80031a8 <MX_GPIO_Init+0x148>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	4b3a      	ldr	r3, [pc, #232]	@ (80031a8 <MX_GPIO_Init+0x148>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	4a39      	ldr	r2, [pc, #228]	@ (80031a8 <MX_GPIO_Init+0x148>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ca:	4b37      	ldr	r3, [pc, #220]	@ (80031a8 <MX_GPIO_Init+0x148>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Push_solenoid_Pin, GPIO_PIN_RESET);
 80030d6:	2200      	movs	r2, #0
 80030d8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80030dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e0:	f002 fb36 	bl	8005750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pull_solenoid_Pin|Suck_solenoid_Pin, GPIO_PIN_RESET);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2130      	movs	r1, #48	@ 0x30
 80030e8:	4830      	ldr	r0, [pc, #192]	@ (80031ac <MX_GPIO_Init+0x14c>)
 80030ea:	f002 fb31 	bl	8005750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80030ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	4619      	mov	r1, r3
 8003104:	4829      	ldr	r0, [pc, #164]	@ (80031ac <MX_GPIO_Init+0x14c>)
 8003106:	f002 f989 	bl	800541c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Base_Pin Limit_Top_Pin Reed_pull_Pin */
  GPIO_InitStruct.Pin = Limit_Base_Pin|Limit_Top_Pin|Reed_pull_Pin;
 800310a:	23d0      	movs	r3, #208	@ 0xd0
 800310c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003112:	2302      	movs	r3, #2
 8003114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003116:	f107 0314 	add.w	r3, r7, #20
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003120:	f002 f97c 	bl	800541c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Push_solenoid_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Push_solenoid_Pin;
 8003124:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8003128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003140:	f002 f96c 	bl	800541c <HAL_GPIO_Init>

  /*Configure GPIO pins : Pull_solenoid_Pin Suck_solenoid_Pin */
  GPIO_InitStruct.Pin = Pull_solenoid_Pin|Suck_solenoid_Pin;
 8003144:	2330      	movs	r3, #48	@ 0x30
 8003146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	2301      	movs	r3, #1
 800314a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2300      	movs	r3, #0
 8003152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4814      	ldr	r0, [pc, #80]	@ (80031ac <MX_GPIO_Init+0x14c>)
 800315c:	f002 f95e 	bl	800541c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Signal_Pin;
 8003160:	2380      	movs	r3, #128	@ 0x80
 8003162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003168:	2302      	movs	r3, #2
 800316a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Signal_GPIO_Port, &GPIO_InitStruct);
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4619      	mov	r1, r3
 8003172:	480e      	ldr	r0, [pc, #56]	@ (80031ac <MX_GPIO_Init+0x14c>)
 8003174:	f002 f952 	bl	800541c <HAL_GPIO_Init>

  /*Configure GPIO pin : Reed_push_Pin */
  GPIO_InitStruct.Pin = Reed_push_Pin;
 8003178:	2340      	movs	r3, #64	@ 0x40
 800317a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003180:	2302      	movs	r3, #2
 8003182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reed_push_GPIO_Port, &GPIO_InitStruct);
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4619      	mov	r1, r3
 800318a:	4809      	ldr	r0, [pc, #36]	@ (80031b0 <MX_GPIO_Init+0x150>)
 800318c:	f002 f946 	bl	800541c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003190:	2200      	movs	r2, #0
 8003192:	2100      	movs	r1, #0
 8003194:	2028      	movs	r0, #40	@ 0x28
 8003196:	f001 fdda 	bl	8004d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800319a:	2028      	movs	r0, #40	@ 0x28
 800319c:	f001 fdf1 	bl	8004d82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031a0:	bf00      	nop
 80031a2:	3728      	adds	r7, #40	@ 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	48000800 	.word	0x48000800
 80031b0:	48000400 	.word	0x48000400

080031b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
		if(htim == &htim5)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a18      	ldr	r2, [pc, #96]	@ (8003220 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d108      	bne.n	80031d6 <HAL_TIM_PeriodElapsedCallback+0x22>
			{
			_micros += UINT32_MAX;
 80031c4:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	1e54      	subs	r4, r2, #1
 80031cc:	f143 0500 	adc.w	r5, r3, #0
 80031d0:	4b14      	ldr	r3, [pc, #80]	@ (8003224 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80031d2:	e9c3 4500 	strd	r4, r5, [r3]
			}
		if(htim == &htim4)								// 2000 Hz
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a13      	ldr	r2, [pc, #76]	@ (8003228 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d11c      	bne.n	8003218 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			if (base.BaseStatus == 2){
 80031de:	4b13      	ldr	r3, [pc, #76]	@ (800322c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d10c      	bne.n	8003200 <HAL_TIM_PeriodElapsedCallback+0x4c>
				MOTOR_set_duty(&MT, base.MotorHome);
 80031e6:	4b11      	ldr	r3, [pc, #68]	@ (800322c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80031e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f4:	eeb0 0a67 	vmov.f32	s0, s15
 80031f8:	480d      	ldr	r0, [pc, #52]	@ (8003230 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80031fa:	f7fe fdad 	bl	8001d58 <MOTOR_set_duty>
//			if (ps2.mode == 2){
//				PID_controller_cascade(&PID_pos, &PID_velo, &AMT, ps2.PIDPos);
//				MOTOR_set_duty(&MT, PID_velo.out);
//			}
		}
	}
 80031fe:	e00b      	b.n	8003218 <HAL_TIM_PeriodElapsedCallback+0x64>
				MOTOR_set_duty(&MT, base.MotorHome);
 8003200:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320e:	eeb0 0a67 	vmov.f32	s0, s15
 8003212:	4807      	ldr	r0, [pc, #28]	@ (8003230 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003214:	f7fe fda0 	bl	8001d58 <MOTOR_set_duty>
	}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bdb0      	pop	{r4, r5, r7, pc}
 8003220:	200005a0 	.word	0x200005a0
 8003224:	20001028 	.word	0x20001028
 8003228:	200004d4 	.word	0x200004d4
 800322c:	20000284 	.word	0x20000284
 8003230:	20000a5c 	.word	0x20000a5c

08003234 <micros>:

uint64_t micros()
	{
 8003234:	b4b0      	push	{r4, r5, r7}
 8003236:	af00      	add	r7, sp, #0
		return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <micros+0x2c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	2200      	movs	r2, #0
 8003240:	4618      	mov	r0, r3
 8003242:	4611      	mov	r1, r2
 8003244:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <micros+0x30>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	1884      	adds	r4, r0, r2
 800324c:	eb41 0503 	adc.w	r5, r1, r3
 8003250:	4622      	mov	r2, r4
 8003252:	462b      	mov	r3, r5
	}
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	bcb0      	pop	{r4, r5, r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	200005a0 	.word	0x200005a0
 8003264:	20001028 	.word	0x20001028

08003268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800326c:	b672      	cpsid	i
}
 800326e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <Error_Handler+0x8>

08003274 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <HAL_MspInit+0x44>)
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	4a0e      	ldr	r2, [pc, #56]	@ (80032b8 <HAL_MspInit+0x44>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6613      	str	r3, [r2, #96]	@ 0x60
 8003286:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <HAL_MspInit+0x44>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_MspInit+0x44>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	4a08      	ldr	r2, [pc, #32]	@ (80032b8 <HAL_MspInit+0x44>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	@ 0x58
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_MspInit+0x44>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032aa:	f002 fb31 	bl	8005910 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b09e      	sub	sp, #120	@ 0x78
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	2254      	movs	r2, #84	@ 0x54
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f007 fb0b 	bl	800a8f8 <memset>
  if(hadc->Instance==ADC1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032ea:	d133      	bne.n	8003354 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80032ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80032f2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80032f6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f8:	f107 0310 	add.w	r3, r7, #16
 80032fc:	4618      	mov	r0, r3
 80032fe:	f003 f845 	bl	800638c <HAL_RCCEx_PeriphCLKConfig>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003308:	f7ff ffae 	bl	8003268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800330c:	4b13      	ldr	r3, [pc, #76]	@ (800335c <HAL_ADC_MspInit+0xa0>)
 800330e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003310:	4a12      	ldr	r2, [pc, #72]	@ (800335c <HAL_ADC_MspInit+0xa0>)
 8003312:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003318:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_ADC_MspInit+0xa0>)
 800331a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003324:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <HAL_ADC_MspInit+0xa0>)
 8003326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003328:	4a0c      	ldr	r2, [pc, #48]	@ (800335c <HAL_ADC_MspInit+0xa0>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003330:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <HAL_ADC_MspInit+0xa0>)
 8003332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 800333c:	2301      	movs	r3, #1
 800333e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003340:	2303      	movs	r3, #3
 8003342:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8003348:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800334c:	4619      	mov	r1, r3
 800334e:	4804      	ldr	r0, [pc, #16]	@ (8003360 <HAL_ADC_MspInit+0xa4>)
 8003350:	f002 f864 	bl	800541c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003354:	bf00      	nop
 8003356:	3778      	adds	r7, #120	@ 0x78
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	48000800 	.word	0x48000800

08003364 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	@ 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003384:	d128      	bne.n	80033d8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003386:	4b16      	ldr	r3, [pc, #88]	@ (80033e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6593      	str	r3, [r2, #88]	@ 0x58
 8003392:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	4b10      	ldr	r3, [pc, #64]	@ (80033e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	4a0f      	ldr	r2, [pc, #60]	@ (80033e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033aa:	4b0d      	ldr	r3, [pc, #52]	@ (80033e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033b6:	2303      	movs	r3, #3
 80033b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033c6:	2301      	movs	r3, #1
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	4619      	mov	r1, r3
 80033d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033d4:	f002 f822 	bl	800541c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033d8:	bf00      	nop
 80033da:	3728      	adds	r7, #40	@ 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000

080033e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a39      	ldr	r2, [pc, #228]	@ (80034d8 <HAL_TIM_Base_MspInit+0xf4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10c      	bne.n	8003410 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033f6:	4b39      	ldr	r3, [pc, #228]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fa:	4a38      	ldr	r2, [pc, #224]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	6593      	str	r3, [r2, #88]	@ 0x58
 8003402:	4b36      	ldr	r3, [pc, #216]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800340e:	e05e      	b.n	80034ce <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a32      	ldr	r2, [pc, #200]	@ (80034e0 <HAL_TIM_Base_MspInit+0xfc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d114      	bne.n	8003444 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800341a:	4b30      	ldr	r3, [pc, #192]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	4a2f      	ldr	r2, [pc, #188]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	6593      	str	r3, [r2, #88]	@ 0x58
 8003426:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2100      	movs	r1, #0
 8003436:	201e      	movs	r0, #30
 8003438:	f001 fc89 	bl	8004d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800343c:	201e      	movs	r0, #30
 800343e:	f001 fca0 	bl	8004d82 <HAL_NVIC_EnableIRQ>
}
 8003442:	e044      	b.n	80034ce <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a26      	ldr	r2, [pc, #152]	@ (80034e4 <HAL_TIM_Base_MspInit+0x100>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d114      	bne.n	8003478 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800344e:	4b23      	ldr	r3, [pc, #140]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	4a22      	ldr	r2, [pc, #136]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 8003454:	f043 0308 	orr.w	r3, r3, #8
 8003458:	6593      	str	r3, [r2, #88]	@ 0x58
 800345a:	4b20      	ldr	r3, [pc, #128]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	2032      	movs	r0, #50	@ 0x32
 800346c:	f001 fc6f 	bl	8004d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003470:	2032      	movs	r0, #50	@ 0x32
 8003472:	f001 fc86 	bl	8004d82 <HAL_NVIC_EnableIRQ>
}
 8003476:	e02a      	b.n	80034ce <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1a      	ldr	r2, [pc, #104]	@ (80034e8 <HAL_TIM_Base_MspInit+0x104>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10c      	bne.n	800349c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003482:	4b16      	ldr	r3, [pc, #88]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	4a15      	ldr	r2, [pc, #84]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 8003488:	f043 0310 	orr.w	r3, r3, #16
 800348c:	6593      	str	r3, [r2, #88]	@ 0x58
 800348e:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
}
 800349a:	e018      	b.n	80034ce <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a12      	ldr	r2, [pc, #72]	@ (80034ec <HAL_TIM_Base_MspInit+0x108>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d113      	bne.n	80034ce <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 80034a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034aa:	4a0c      	ldr	r2, [pc, #48]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 80034ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80034b2:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <HAL_TIM_Base_MspInit+0xf8>)
 80034b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2100      	movs	r1, #0
 80034c2:	2019      	movs	r0, #25
 80034c4:	f001 fc43 	bl	8004d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80034c8:	2019      	movs	r0, #25
 80034ca:	f001 fc5a 	bl	8004d82 <HAL_NVIC_EnableIRQ>
}
 80034ce:	bf00      	nop
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40000800 	.word	0x40000800
 80034e4:	40000c00 	.word	0x40000c00
 80034e8:	40001000 	.word	0x40001000
 80034ec:	40014400 	.word	0x40014400

080034f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a11      	ldr	r2, [pc, #68]	@ (8003554 <HAL_TIM_MspPostInit+0x64>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d11b      	bne.n	800354a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003512:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_TIM_MspPostInit+0x68>)
 8003514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003516:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <HAL_TIM_MspPostInit+0x68>)
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800351e:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <HAL_TIM_MspPostInit+0x68>)
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800352a:	2330      	movs	r3, #48	@ 0x30
 800352c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800353a:	2302      	movs	r3, #2
 800353c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800353e:	f107 030c 	add.w	r3, r7, #12
 8003542:	4619      	mov	r1, r3
 8003544:	4805      	ldr	r0, [pc, #20]	@ (800355c <HAL_TIM_MspPostInit+0x6c>)
 8003546:	f001 ff69 	bl	800541c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800354a:	bf00      	nop
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40000400 	.word	0x40000400
 8003558:	40021000 	.word	0x40021000
 800355c:	48000400 	.word	0x48000400

08003560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b0a0      	sub	sp, #128	@ 0x80
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003578:	f107 0318 	add.w	r3, r7, #24
 800357c:	2254      	movs	r2, #84	@ 0x54
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f007 f9b9 	bl	800a8f8 <memset>
  if(huart->Instance==UART4)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6b      	ldr	r2, [pc, #428]	@ (8003738 <HAL_UART_MspInit+0x1d8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d137      	bne.n	8003600 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003590:	2308      	movs	r3, #8
 8003592:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003594:	2300      	movs	r3, #0
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003598:	f107 0318 	add.w	r3, r7, #24
 800359c:	4618      	mov	r0, r3
 800359e:	f002 fef5 	bl	800638c <HAL_RCCEx_PeriphCLKConfig>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035a8:	f7ff fe5e 	bl	8003268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80035ac:	4b63      	ldr	r3, [pc, #396]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	4a62      	ldr	r2, [pc, #392]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 80035b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035b8:	4b60      	ldr	r3, [pc, #384]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c4:	4b5d      	ldr	r3, [pc, #372]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 80035c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c8:	4a5c      	ldr	r2, [pc, #368]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d0:	4b5a      	ldr	r3, [pc, #360]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 80035d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80035e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80035ee:	2305      	movs	r3, #5
 80035f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035f6:	4619      	mov	r1, r3
 80035f8:	4851      	ldr	r0, [pc, #324]	@ (8003740 <HAL_UART_MspInit+0x1e0>)
 80035fa:	f001 ff0f 	bl	800541c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035fe:	e097      	b.n	8003730 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a4f      	ldr	r2, [pc, #316]	@ (8003744 <HAL_UART_MspInit+0x1e4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	f040 8092 	bne.w	8003730 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800360c:	2302      	movs	r3, #2
 800360e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003610:	2300      	movs	r3, #0
 8003612:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003614:	f107 0318 	add.w	r3, r7, #24
 8003618:	4618      	mov	r0, r3
 800361a:	f002 feb7 	bl	800638c <HAL_RCCEx_PeriphCLKConfig>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8003624:	f7ff fe20 	bl	8003268 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003628:	4b44      	ldr	r3, [pc, #272]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362c:	4a43      	ldr	r2, [pc, #268]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003632:	6593      	str	r3, [r2, #88]	@ 0x58
 8003634:	4b41      	ldr	r3, [pc, #260]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	4b3e      	ldr	r3, [pc, #248]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 8003642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003644:	4a3d      	ldr	r2, [pc, #244]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800364c:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <HAL_UART_MspInit+0x1dc>)
 800364e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003658:	230c      	movs	r3, #12
 800365a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003664:	2300      	movs	r3, #0
 8003666:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003668:	2307      	movs	r3, #7
 800366a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003670:	4619      	mov	r1, r3
 8003672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003676:	f001 fed1 	bl	800541c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800367a:	4b33      	ldr	r3, [pc, #204]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 800367c:	4a33      	ldr	r2, [pc, #204]	@ (800374c <HAL_UART_MspInit+0x1ec>)
 800367e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003680:	4b31      	ldr	r3, [pc, #196]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 8003682:	221b      	movs	r2, #27
 8003684:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003686:	4b30      	ldr	r3, [pc, #192]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 8003688:	2210      	movs	r2, #16
 800368a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800368c:	4b2e      	ldr	r3, [pc, #184]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003692:	4b2d      	ldr	r3, [pc, #180]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 8003694:	2280      	movs	r2, #128	@ 0x80
 8003696:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003698:	4b2b      	ldr	r3, [pc, #172]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 800369a:	2200      	movs	r2, #0
 800369c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800369e:	4b2a      	ldr	r3, [pc, #168]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80036a4:	4b28      	ldr	r3, [pc, #160]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036aa:	4b27      	ldr	r3, [pc, #156]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036b0:	4825      	ldr	r0, [pc, #148]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 80036b2:	f001 fb81 	bl	8004db8 <HAL_DMA_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_UART_MspInit+0x160>
      Error_Handler();
 80036bc:	f7ff fdd4 	bl	8003268 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a21      	ldr	r2, [pc, #132]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 80036c4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036c6:	4a20      	ldr	r2, [pc, #128]	@ (8003748 <HAL_UART_MspInit+0x1e8>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80036cc:	4b20      	ldr	r3, [pc, #128]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 80036ce:	4a21      	ldr	r2, [pc, #132]	@ (8003754 <HAL_UART_MspInit+0x1f4>)
 80036d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80036d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 80036d4:	221a      	movs	r2, #26
 80036d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036de:	4b1c      	ldr	r3, [pc, #112]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 80036e6:	2280      	movs	r2, #128	@ 0x80
 80036e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ea:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036f0:	4b17      	ldr	r3, [pc, #92]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80036f6:	4b16      	ldr	r3, [pc, #88]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036fc:	4b14      	ldr	r3, [pc, #80]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 80036fe:	2200      	movs	r2, #0
 8003700:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003702:	4813      	ldr	r0, [pc, #76]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 8003704:	f001 fb58 	bl	8004db8 <HAL_DMA_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 800370e:	f7ff fdab 	bl	8003268 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a0e      	ldr	r2, [pc, #56]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 8003716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800371a:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <HAL_UART_MspInit+0x1f0>)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003720:	2200      	movs	r2, #0
 8003722:	2100      	movs	r1, #0
 8003724:	2026      	movs	r0, #38	@ 0x26
 8003726:	f001 fb12 	bl	8004d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800372a:	2026      	movs	r0, #38	@ 0x26
 800372c:	f001 fb29 	bl	8004d82 <HAL_NVIC_EnableIRQ>
}
 8003730:	bf00      	nop
 8003732:	3780      	adds	r7, #128	@ 0x80
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40004c00 	.word	0x40004c00
 800373c:	40021000 	.word	0x40021000
 8003740:	48000800 	.word	0x48000800
 8003744:	40004400 	.word	0x40004400
 8003748:	2000099c 	.word	0x2000099c
 800374c:	40020008 	.word	0x40020008
 8003750:	200009fc 	.word	0x200009fc
 8003754:	4002001c 	.word	0x4002001c

08003758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <NMI_Handler+0x4>

08003760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <HardFault_Handler+0x4>

08003768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <MemManage_Handler+0x4>

08003770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003774:	bf00      	nop
 8003776:	e7fd      	b.n	8003774 <BusFault_Handler+0x4>

08003778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800377c:	bf00      	nop
 800377e:	e7fd      	b.n	800377c <UsageFault_Handler+0x4>

08003780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ae:	f000 f8d5 	bl	800395c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80037bc:	4802      	ldr	r0, [pc, #8]	@ (80037c8 <DMA1_Channel1_IRQHandler+0x10>)
 80037be:	f001 fcde 	bl	800517e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2000099c 	.word	0x2000099c

080037cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80037d0:	4802      	ldr	r0, [pc, #8]	@ (80037dc <DMA1_Channel2_IRQHandler+0x10>)
 80037d2:	f001 fcd4 	bl	800517e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200009fc 	.word	0x200009fc

080037e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80037e4:	4802      	ldr	r0, [pc, #8]	@ (80037f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80037e6:	f003 fd71 	bl	80072cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000738 	.word	0x20000738

080037f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037f8:	4802      	ldr	r0, [pc, #8]	@ (8003804 <TIM4_IRQHandler+0x10>)
 80037fa:	f003 fd67 	bl	80072cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200004d4 	.word	0x200004d4

08003808 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800380c:	4802      	ldr	r0, [pc, #8]	@ (8003818 <USART2_IRQHandler+0x10>)
 800380e:	f005 fb65 	bl	8008edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200008d0 	.word	0x200008d0

0800381c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003820:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003824:	f001 ffac 	bl	8005780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}

0800382c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003830:	4802      	ldr	r0, [pc, #8]	@ (800383c <TIM5_IRQHandler+0x10>)
 8003832:	f003 fd4b 	bl	80072cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200005a0 	.word	0x200005a0

08003840 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <SystemInit+0x20>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384a:	4a05      	ldr	r2, [pc, #20]	@ (8003860 <SystemInit+0x20>)
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003864:	480d      	ldr	r0, [pc, #52]	@ (800389c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003866:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003868:	f7ff ffea 	bl	8003840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800386c:	480c      	ldr	r0, [pc, #48]	@ (80038a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800386e:	490d      	ldr	r1, [pc, #52]	@ (80038a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003870:	4a0d      	ldr	r2, [pc, #52]	@ (80038a8 <LoopForever+0xe>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003874:	e002      	b.n	800387c <LoopCopyDataInit>

08003876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800387a:	3304      	adds	r3, #4

0800387c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800387c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800387e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003880:	d3f9      	bcc.n	8003876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003882:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003884:	4c0a      	ldr	r4, [pc, #40]	@ (80038b0 <LoopForever+0x16>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003888:	e001      	b.n	800388e <LoopFillZerobss>

0800388a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800388a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800388c:	3204      	adds	r2, #4

0800388e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800388e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003890:	d3fb      	bcc.n	800388a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003892:	f007 f839 	bl	800a908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003896:	f7fe feff 	bl	8002698 <main>

0800389a <LoopForever>:

LoopForever:
    b LoopForever
 800389a:	e7fe      	b.n	800389a <LoopForever>
  ldr   r0, =_estack
 800389c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038a4:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 80038a8:	0800a9ec 	.word	0x0800a9ec
  ldr r2, =_sbss
 80038ac:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80038b0:	200011d4 	.word	0x200011d4

080038b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038b4:	e7fe      	b.n	80038b4 <ADC1_2_IRQHandler>

080038b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038c0:	2003      	movs	r0, #3
 80038c2:	f001 fa39 	bl	8004d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038c6:	2000      	movs	r0, #0
 80038c8:	f000 f80e 	bl	80038e8 <HAL_InitTick>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	71fb      	strb	r3, [r7, #7]
 80038d6:	e001      	b.n	80038dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038d8:	f7ff fccc 	bl	8003274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038dc:	79fb      	ldrb	r3, [r7, #7]

}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80038f4:	4b16      	ldr	r3, [pc, #88]	@ (8003950 <HAL_InitTick+0x68>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d022      	beq.n	8003942 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80038fc:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_InitTick+0x6c>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b13      	ldr	r3, [pc, #76]	@ (8003950 <HAL_InitTick+0x68>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003908:	fbb1 f3f3 	udiv	r3, r1, r3
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	4618      	mov	r0, r3
 8003912:	f001 fa44 	bl	8004d9e <HAL_SYSTICK_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10f      	bne.n	800393c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b0f      	cmp	r3, #15
 8003920:	d809      	bhi.n	8003936 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003922:	2200      	movs	r2, #0
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	f04f 30ff 	mov.w	r0, #4294967295
 800392a:	f001 fa10 	bl	8004d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800392e:	4a0a      	ldr	r2, [pc, #40]	@ (8003958 <HAL_InitTick+0x70>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	e007      	b.n	8003946 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
 800393a:	e004      	b.n	8003946 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e001      	b.n	8003946 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000238 	.word	0x20000238
 8003954:	20000230 	.word	0x20000230
 8003958:	20000234 	.word	0x20000234

0800395c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_IncTick+0x1c>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_IncTick+0x20>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4413      	add	r3, r2
 800396a:	4a03      	ldr	r2, [pc, #12]	@ (8003978 <HAL_IncTick+0x1c>)
 800396c:	6013      	str	r3, [r2, #0]
}
 800396e:	bf00      	nop
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	200011d0 	.word	0x200011d0
 800397c:	20000238 	.word	0x20000238

08003980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return uwTick;
 8003984:	4b03      	ldr	r3, [pc, #12]	@ (8003994 <HAL_GetTick+0x14>)
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	200011d0 	.word	0x200011d0

08003998 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3360      	adds	r3, #96	@ 0x60
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <LL_ADC_SetOffset+0x44>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	03fff000 	.word	0x03fff000

08003a48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3360      	adds	r3, #96	@ 0x60
 8003a56:	461a      	mov	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3360      	adds	r3, #96	@ 0x60
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3360      	adds	r3, #96	@ 0x60
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3360      	adds	r3, #96	@ 0x60
 8003af0:	461a      	mov	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	615a      	str	r2, [r3, #20]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3330      	adds	r3, #48	@ 0x30
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	4413      	add	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	211f      	movs	r1, #31
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	401a      	ands	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	0e9b      	lsrs	r3, r3, #26
 8003b74:	f003 011f 	and.w	r1, r3, #31
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	431a      	orrs	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3314      	adds	r3, #20
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	0e5b      	lsrs	r3, r3, #25
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	4413      	add	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	0d1b      	lsrs	r3, r3, #20
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2107      	movs	r1, #7
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	401a      	ands	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	0d1b      	lsrs	r3, r3, #20
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c04:	43db      	mvns	r3, r3
 8003c06:	401a      	ands	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0318 	and.w	r3, r3, #24
 8003c0e:	4908      	ldr	r1, [pc, #32]	@ (8003c30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c10:	40d9      	lsrs	r1, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	400b      	ands	r3, r1
 8003c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	0007ffff 	.word	0x0007ffff

08003c34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003c44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6093      	str	r3, [r2, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c6c:	d101      	bne.n	8003c72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003c90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cbc:	d101      	bne.n	8003cc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <LL_ADC_IsEnabled+0x18>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <LL_ADC_IsEnabled+0x1a>
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d101      	bne.n	8003d0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d101      	bne.n	8003d34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b089      	sub	sp, #36	@ 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e1a9      	b.n	80040b2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff faa5 	bl	80032bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff67 	bl	8003c58 <LL_ADC_IsDeepPowerDownEnabled>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff ff4d 	bl	8003c34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff82 	bl	8003ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d115      	bne.n	8003dd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff ff66 	bl	8003c80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db4:	4b9c      	ldr	r3, [pc, #624]	@ (8004028 <HAL_ADC_Init+0x2e4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	099b      	lsrs	r3, r3, #6
 8003dba:	4a9c      	ldr	r2, [pc, #624]	@ (800402c <HAL_ADC_Init+0x2e8>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	099b      	lsrs	r3, r3, #6
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dc8:	e002      	b.n	8003dd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f9      	bne.n	8003dca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff64 	bl	8003ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10d      	bne.n	8003e02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dea:	f043 0210 	orr.w	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df6:	f043 0201 	orr.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff ff75 	bl	8003cf6 <LL_ADC_REG_IsConversionOngoing>
 8003e0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 8142 	bne.w	80040a0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f040 813e 	bne.w	80040a0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e2c:	f043 0202 	orr.w	r2, r3, #2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff49 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d141      	bne.n	8003ec8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADC_Init+0x114>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a77      	ldr	r2, [pc, #476]	@ (8004030 <HAL_ADC_Init+0x2ec>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10f      	bne.n	8003e78 <HAL_ADC_Init+0x134>
 8003e58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e5c:	f7ff ff38 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e60:	4604      	mov	r4, r0
 8003e62:	4873      	ldr	r0, [pc, #460]	@ (8004030 <HAL_ADC_Init+0x2ec>)
 8003e64:	f7ff ff34 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4323      	orrs	r3, r4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e012      	b.n	8003e9e <HAL_ADC_Init+0x15a>
 8003e78:	486e      	ldr	r0, [pc, #440]	@ (8004034 <HAL_ADC_Init+0x2f0>)
 8003e7a:	f7ff ff29 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	486d      	ldr	r0, [pc, #436]	@ (8004038 <HAL_ADC_Init+0x2f4>)
 8003e82:	f7ff ff25 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e86:	4603      	mov	r3, r0
 8003e88:	431c      	orrs	r4, r3
 8003e8a:	486c      	ldr	r0, [pc, #432]	@ (800403c <HAL_ADC_Init+0x2f8>)
 8003e8c:	f7ff ff20 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e90:	4603      	mov	r3, r0
 8003e92:	4323      	orrs	r3, r4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d012      	beq.n	8003ec8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eaa:	d004      	beq.n	8003eb6 <HAL_ADC_Init+0x172>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5f      	ldr	r2, [pc, #380]	@ (8004030 <HAL_ADC_Init+0x2ec>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_Init+0x176>
 8003eb6:	4a62      	ldr	r2, [pc, #392]	@ (8004040 <HAL_ADC_Init+0x2fc>)
 8003eb8:	e000      	b.n	8003ebc <HAL_ADC_Init+0x178>
 8003eba:	4a62      	ldr	r2, [pc, #392]	@ (8004044 <HAL_ADC_Init+0x300>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f7ff fd68 	bl	8003998 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	7f5b      	ldrb	r3, [r3, #29]
 8003ecc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ed2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ed8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003ede:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ee6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d106      	bne.n	8003f04 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	045b      	lsls	r3, r3, #17
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d009      	beq.n	8003f20 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	4b48      	ldr	r3, [pc, #288]	@ (8004048 <HAL_ADC_Init+0x304>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	69b9      	ldr	r1, [r7, #24]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fee4 	bl	8003d1c <LL_ADC_INJ_IsConversionOngoing>
 8003f54:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d17f      	bne.n	800405c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d17c      	bne.n	800405c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f66:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f7e:	f023 0302 	bic.w	r3, r3, #2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	69b9      	ldr	r1, [r7, #24]
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d017      	beq.n	8003fc4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003fa2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003fac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6911      	ldr	r1, [r2, #16]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003fc2:	e013      	b.n	8003fec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003fd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fe4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fe8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d12a      	bne.n	800404c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004000:	f023 0304 	bic.w	r3, r3, #4
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800400c:	4311      	orrs	r1, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004012:	4311      	orrs	r1, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004018:	430a      	orrs	r2, r1
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	611a      	str	r2, [r3, #16]
 8004026:	e019      	b.n	800405c <HAL_ADC_Init+0x318>
 8004028:	20000230 	.word	0x20000230
 800402c:	053e2d63 	.word	0x053e2d63
 8004030:	50000100 	.word	0x50000100
 8004034:	50000400 	.word	0x50000400
 8004038:	50000500 	.word	0x50000500
 800403c:	50000600 	.word	0x50000600
 8004040:	50000300 	.word	0x50000300
 8004044:	50000700 	.word	0x50000700
 8004048:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10c      	bne.n	800407e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f023 010f 	bic.w	r1, r3, #15
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	1e5a      	subs	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30
 800407c:	e007      	b.n	800408e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 020f 	bic.w	r2, r2, #15
 800408c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	f043 0201 	orr.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800409e:	e007      	b.n	80040b0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	f043 0210 	orr.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3724      	adds	r7, #36	@ 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd90      	pop	{r4, r7, pc}
 80040ba:	bf00      	nop

080040bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b0b6      	sub	sp, #216	@ 0xd8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x24>
 80040da:	2302      	movs	r3, #2
 80040dc:	f000 bc13 	b.w	8004906 <HAL_ADC_ConfigChannel+0x84a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fe02 	bl	8003cf6 <LL_ADC_REG_IsConversionOngoing>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f040 83f3 	bne.w	80048e0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	f7ff fd18 	bl	8003b3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fdf0 	bl	8003cf6 <LL_ADC_REG_IsConversionOngoing>
 8004116:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fdfc 	bl	8003d1c <LL_ADC_INJ_IsConversionOngoing>
 8004124:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004128:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800412c:	2b00      	cmp	r3, #0
 800412e:	f040 81d9 	bne.w	80044e4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004132:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004136:	2b00      	cmp	r3, #0
 8004138:	f040 81d4 	bne.w	80044e4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004144:	d10f      	bne.n	8004166 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	4619      	mov	r1, r3
 8004152:	f7ff fd1f 	bl	8003b94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fcd9 	bl	8003b16 <LL_ADC_SetSamplingTimeCommonConfig>
 8004164:	e00e      	b.n	8004184 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	461a      	mov	r2, r3
 8004174:	f7ff fd0e 	bl	8003b94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fcc9 	bl	8003b16 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	08db      	lsrs	r3, r3, #3
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d022      	beq.n	80041ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6919      	ldr	r1, [r3, #16]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041b6:	f7ff fc23 	bl	8003a00 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6919      	ldr	r1, [r3, #16]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f7ff fc6f 	bl	8003aaa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d102      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x126>
 80041dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041e0:	e000      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x128>
 80041e2:	2300      	movs	r3, #0
 80041e4:	461a      	mov	r2, r3
 80041e6:	f7ff fc7b 	bl	8003ae0 <LL_ADC_SetOffsetSaturation>
 80041ea:	e17b      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fc28 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x15c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fc1d 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 800420e:	4603      	mov	r3, r0
 8004210:	0e9b      	lsrs	r3, r3, #26
 8004212:	f003 021f 	and.w	r2, r3, #31
 8004216:	e01e      	b.n	8004256 <HAL_ADC_ConfigChannel+0x19a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fc12 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800423a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800423e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004246:	2320      	movs	r3, #32
 8004248:	e004      	b.n	8004254 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800424a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425e:	2b00      	cmp	r3, #0
 8004260:	d105      	bne.n	800426e <HAL_ADC_ConfigChannel+0x1b2>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	0e9b      	lsrs	r3, r3, #26
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	e018      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x1e4>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800428a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004292:	2320      	movs	r3, #32
 8004294:	e004      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d106      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fbe1 	bl	8003a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fbc5 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80042be:	4603      	mov	r3, r0
 80042c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <HAL_ADC_ConfigChannel+0x222>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2101      	movs	r1, #1
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fbba 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80042d4:	4603      	mov	r3, r0
 80042d6:	0e9b      	lsrs	r3, r3, #26
 80042d8:	f003 021f 	and.w	r2, r3, #31
 80042dc:	e01e      	b.n	800431c <HAL_ADC_ConfigChannel+0x260>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2101      	movs	r1, #1
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fbaf 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80042fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e004      	b.n	800431a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x278>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0e9b      	lsrs	r3, r3, #26
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	e018      	b.n	8004366 <HAL_ADC_ConfigChannel+0x2aa>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800434c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004350:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004358:	2320      	movs	r3, #32
 800435a:	e004      	b.n	8004366 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800435c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004366:	429a      	cmp	r2, r3
 8004368:	d106      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fb7e 	bl	8003a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2102      	movs	r1, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fb62 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004384:	4603      	mov	r3, r0
 8004386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x2e8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2102      	movs	r1, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fb57 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 800439a:	4603      	mov	r3, r0
 800439c:	0e9b      	lsrs	r3, r3, #26
 800439e:	f003 021f 	and.w	r2, r3, #31
 80043a2:	e01e      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x326>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2102      	movs	r1, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fb4c 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80043c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80043ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80043d2:	2320      	movs	r3, #32
 80043d4:	e004      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80043d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d105      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x33e>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	0e9b      	lsrs	r3, r3, #26
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	e016      	b.n	8004428 <HAL_ADC_ConfigChannel+0x36c>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800440c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800440e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004412:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800441a:	2320      	movs	r3, #32
 800441c:	e004      	b.n	8004428 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800441e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004428:	429a      	cmp	r2, r3
 800442a:	d106      	bne.n	800443a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2200      	movs	r2, #0
 8004432:	2102      	movs	r1, #2
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fb1d 	bl	8003a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2103      	movs	r1, #3
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fb01 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004446:	4603      	mov	r3, r0
 8004448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x3aa>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2103      	movs	r1, #3
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff faf6 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 800445c:	4603      	mov	r3, r0
 800445e:	0e9b      	lsrs	r3, r3, #26
 8004460:	f003 021f 	and.w	r2, r3, #31
 8004464:	e017      	b.n	8004496 <HAL_ADC_ConfigChannel+0x3da>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2103      	movs	r1, #3
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff faeb 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004472:	4603      	mov	r3, r0
 8004474:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800447e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004480:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004488:	2320      	movs	r3, #32
 800448a:	e003      	b.n	8004494 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800448c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448e:	fab3 f383 	clz	r3, r3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x3f2>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	0e9b      	lsrs	r3, r3, #26
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	e011      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x416>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80044bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80044c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80044c6:	2320      	movs	r3, #32
 80044c8:	e003      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80044ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044cc:	fab3 f383 	clz	r3, r3
 80044d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d106      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2200      	movs	r2, #0
 80044dc:	2103      	movs	r1, #3
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fac8 	bl	8003a74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fbf1 	bl	8003cd0 <LL_ADC_IsEnabled>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 813d 	bne.w	8004770 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	461a      	mov	r2, r3
 8004504:	f7ff fb72 	bl	8003bec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4aa2      	ldr	r2, [pc, #648]	@ (8004798 <HAL_ADC_ConfigChannel+0x6dc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	f040 812e 	bne.w	8004770 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <HAL_ADC_ConfigChannel+0x480>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0e9b      	lsrs	r3, r3, #26
 800452a:	3301      	adds	r3, #1
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	2b09      	cmp	r3, #9
 8004532:	bf94      	ite	ls
 8004534:	2301      	movls	r3, #1
 8004536:	2300      	movhi	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e019      	b.n	8004570 <HAL_ADC_ConfigChannel+0x4b4>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800454a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800454c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800454e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004554:	2320      	movs	r3, #32
 8004556:	e003      	b.n	8004560 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	3301      	adds	r3, #1
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2b09      	cmp	r3, #9
 8004568:	bf94      	ite	ls
 800456a:	2301      	movls	r3, #1
 800456c:	2300      	movhi	r3, #0
 800456e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004570:	2b00      	cmp	r3, #0
 8004572:	d079      	beq.n	8004668 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x4d4>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0e9b      	lsrs	r3, r3, #26
 8004586:	3301      	adds	r3, #1
 8004588:	069b      	lsls	r3, r3, #26
 800458a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800458e:	e015      	b.n	80045bc <HAL_ADC_ConfigChannel+0x500>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004598:	fa93 f3a3 	rbit	r3, r3
 800459c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800459e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80045a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80045a8:	2320      	movs	r3, #32
 80045aa:	e003      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80045ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	069b      	lsls	r3, r3, #26
 80045b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x520>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0e9b      	lsrs	r3, r3, #26
 80045ce:	3301      	adds	r3, #1
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2101      	movs	r1, #1
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	e017      	b.n	800460c <HAL_ADC_ConfigChannel+0x550>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80045ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80045ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80045f4:	2320      	movs	r3, #32
 80045f6:	e003      	b.n	8004600 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80045f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	3301      	adds	r3, #1
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	2101      	movs	r1, #1
 8004608:	fa01 f303 	lsl.w	r3, r1, r3
 800460c:	ea42 0103 	orr.w	r1, r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x576>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0e9b      	lsrs	r3, r3, #26
 8004622:	3301      	adds	r3, #1
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	4613      	mov	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4413      	add	r3, r2
 800462e:	051b      	lsls	r3, r3, #20
 8004630:	e018      	b.n	8004664 <HAL_ADC_ConfigChannel+0x5a8>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800464a:	2320      	movs	r3, #32
 800464c:	e003      	b.n	8004656 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800464e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f003 021f 	and.w	r2, r3, #31
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004664:	430b      	orrs	r3, r1
 8004666:	e07e      	b.n	8004766 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x5c8>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	0e9b      	lsrs	r3, r3, #26
 800467a:	3301      	adds	r3, #1
 800467c:	069b      	lsls	r3, r3, #26
 800467e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004682:	e015      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x5f4>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800469c:	2320      	movs	r3, #32
 800469e:	e003      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	3301      	adds	r3, #1
 80046aa:	069b      	lsls	r3, r3, #26
 80046ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d109      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x614>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	0e9b      	lsrs	r3, r3, #26
 80046c2:	3301      	adds	r3, #1
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2101      	movs	r1, #1
 80046ca:	fa01 f303 	lsl.w	r3, r1, r3
 80046ce:	e017      	b.n	8004700 <HAL_ADC_ConfigChannel+0x644>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	61fb      	str	r3, [r7, #28]
  return result;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80046e8:	2320      	movs	r3, #32
 80046ea:	e003      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3301      	adds	r3, #1
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	2101      	movs	r1, #1
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	ea42 0103 	orr.w	r1, r2, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_ADC_ConfigChannel+0x670>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	0e9b      	lsrs	r3, r3, #26
 8004716:	3301      	adds	r3, #1
 8004718:	f003 021f 	and.w	r2, r3, #31
 800471c:	4613      	mov	r3, r2
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	4413      	add	r3, r2
 8004722:	3b1e      	subs	r3, #30
 8004724:	051b      	lsls	r3, r3, #20
 8004726:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800472a:	e01b      	b.n	8004764 <HAL_ADC_ConfigChannel+0x6a8>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fa93 f3a3 	rbit	r3, r3
 8004738:	613b      	str	r3, [r7, #16]
  return result;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004744:	2320      	movs	r3, #32
 8004746:	e003      	b.n	8004750 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	3301      	adds	r3, #1
 8004752:	f003 021f 	and.w	r2, r3, #31
 8004756:	4613      	mov	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4413      	add	r3, r2
 800475c:	3b1e      	subs	r3, #30
 800475e:	051b      	lsls	r3, r3, #20
 8004760:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004764:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800476a:	4619      	mov	r1, r3
 800476c:	f7ff fa12 	bl	8003b94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4b09      	ldr	r3, [pc, #36]	@ (800479c <HAL_ADC_ConfigChannel+0x6e0>)
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80be 	beq.w	80048fa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004786:	d004      	beq.n	8004792 <HAL_ADC_ConfigChannel+0x6d6>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a04      	ldr	r2, [pc, #16]	@ (80047a0 <HAL_ADC_ConfigChannel+0x6e4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d10a      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x6ec>
 8004792:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <HAL_ADC_ConfigChannel+0x6e8>)
 8004794:	e009      	b.n	80047aa <HAL_ADC_ConfigChannel+0x6ee>
 8004796:	bf00      	nop
 8004798:	407f0000 	.word	0x407f0000
 800479c:	80080000 	.word	0x80080000
 80047a0:	50000100 	.word	0x50000100
 80047a4:	50000300 	.word	0x50000300
 80047a8:	4b59      	ldr	r3, [pc, #356]	@ (8004910 <HAL_ADC_ConfigChannel+0x854>)
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff f91a 	bl	80039e4 <LL_ADC_GetCommonPathInternalCh>
 80047b0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a56      	ldr	r2, [pc, #344]	@ (8004914 <HAL_ADC_ConfigChannel+0x858>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_ADC_ConfigChannel+0x70c>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a55      	ldr	r2, [pc, #340]	@ (8004918 <HAL_ADC_ConfigChannel+0x85c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d13a      	bne.n	800483e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d134      	bne.n	800483e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047dc:	d005      	beq.n	80047ea <HAL_ADC_ConfigChannel+0x72e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a4e      	ldr	r2, [pc, #312]	@ (800491c <HAL_ADC_ConfigChannel+0x860>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	f040 8085 	bne.w	80048f4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047f2:	d004      	beq.n	80047fe <HAL_ADC_ConfigChannel+0x742>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a49      	ldr	r2, [pc, #292]	@ (8004920 <HAL_ADC_ConfigChannel+0x864>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d101      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x746>
 80047fe:	4a49      	ldr	r2, [pc, #292]	@ (8004924 <HAL_ADC_ConfigChannel+0x868>)
 8004800:	e000      	b.n	8004804 <HAL_ADC_ConfigChannel+0x748>
 8004802:	4a43      	ldr	r2, [pc, #268]	@ (8004910 <HAL_ADC_ConfigChannel+0x854>)
 8004804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004808:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f7ff f8d5 	bl	80039be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004814:	4b44      	ldr	r3, [pc, #272]	@ (8004928 <HAL_ADC_ConfigChannel+0x86c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	4a44      	ldr	r2, [pc, #272]	@ (800492c <HAL_ADC_ConfigChannel+0x870>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	4613      	mov	r3, r2
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800482e:	e002      	b.n	8004836 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3b01      	subs	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f9      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800483c:	e05a      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a3b      	ldr	r2, [pc, #236]	@ (8004930 <HAL_ADC_ConfigChannel+0x874>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d125      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800484c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11f      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a31      	ldr	r2, [pc, #196]	@ (8004920 <HAL_ADC_ConfigChannel+0x864>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d104      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x7ac>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a34      	ldr	r2, [pc, #208]	@ (8004934 <HAL_ADC_ConfigChannel+0x878>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d047      	beq.n	80048f8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004870:	d004      	beq.n	800487c <HAL_ADC_ConfigChannel+0x7c0>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2a      	ldr	r2, [pc, #168]	@ (8004920 <HAL_ADC_ConfigChannel+0x864>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d101      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x7c4>
 800487c:	4a29      	ldr	r2, [pc, #164]	@ (8004924 <HAL_ADC_ConfigChannel+0x868>)
 800487e:	e000      	b.n	8004882 <HAL_ADC_ConfigChannel+0x7c6>
 8004880:	4a23      	ldr	r2, [pc, #140]	@ (8004910 <HAL_ADC_ConfigChannel+0x854>)
 8004882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7ff f896 	bl	80039be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004892:	e031      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a27      	ldr	r2, [pc, #156]	@ (8004938 <HAL_ADC_ConfigChannel+0x87c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d12d      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800489e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d127      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004920 <HAL_ADC_ConfigChannel+0x864>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048bc:	d004      	beq.n	80048c8 <HAL_ADC_ConfigChannel+0x80c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a17      	ldr	r2, [pc, #92]	@ (8004920 <HAL_ADC_ConfigChannel+0x864>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d101      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x810>
 80048c8:	4a16      	ldr	r2, [pc, #88]	@ (8004924 <HAL_ADC_ConfigChannel+0x868>)
 80048ca:	e000      	b.n	80048ce <HAL_ADC_ConfigChannel+0x812>
 80048cc:	4a10      	ldr	r2, [pc, #64]	@ (8004910 <HAL_ADC_ConfigChannel+0x854>)
 80048ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f7ff f870 	bl	80039be <LL_ADC_SetCommonPathInternalCh>
 80048de:	e00c      	b.n	80048fa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80048f2:	e002      	b.n	80048fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048f4:	bf00      	nop
 80048f6:	e000      	b.n	80048fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004902:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004906:	4618      	mov	r0, r3
 8004908:	37d8      	adds	r7, #216	@ 0xd8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	50000700 	.word	0x50000700
 8004914:	c3210000 	.word	0xc3210000
 8004918:	90c00010 	.word	0x90c00010
 800491c:	50000600 	.word	0x50000600
 8004920:	50000100 	.word	0x50000100
 8004924:	50000300 	.word	0x50000300
 8004928:	20000230 	.word	0x20000230
 800492c:	053e2d63 	.word	0x053e2d63
 8004930:	c7520000 	.word	0xc7520000
 8004934:	50000500 	.word	0x50000500
 8004938:	cb840000 	.word	0xcb840000

0800493c <LL_ADC_IsEnabled>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <LL_ADC_IsEnabled+0x18>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <LL_ADC_IsEnabled+0x1a>
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <LL_ADC_REG_IsConversionOngoing>:
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b04      	cmp	r3, #4
 8004974:	d101      	bne.n	800497a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b0a1      	sub	sp, #132	@ 0x84
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e0e7      	b.n	8004b76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80049ae:	2300      	movs	r3, #0
 80049b0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80049b2:	2300      	movs	r3, #0
 80049b4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049be:	d102      	bne.n	80049c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	e009      	b.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a6e      	ldr	r2, [pc, #440]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d102      	bne.n	80049d6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80049d0:	4b6d      	ldr	r3, [pc, #436]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	e001      	b.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0be      	b.n	8004b76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff ffb1 	bl	8004962 <LL_ADC_REG_IsConversionOngoing>
 8004a00:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ffab 	bl	8004962 <LL_ADC_REG_IsConversionOngoing>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 80a0 	bne.w	8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 809c 	bne.w	8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a24:	d004      	beq.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a55      	ldr	r2, [pc, #340]	@ (8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004a30:	4b56      	ldr	r3, [pc, #344]	@ (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004a32:	e000      	b.n	8004a36 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004a34:	4b56      	ldr	r3, [pc, #344]	@ (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004a36:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d04b      	beq.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a52:	035b      	lsls	r3, r3, #13
 8004a54:	430b      	orrs	r3, r1
 8004a56:	431a      	orrs	r2, r3
 8004a58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a64:	d004      	beq.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a45      	ldr	r2, [pc, #276]	@ (8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10f      	bne.n	8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004a74:	f7ff ff62 	bl	800493c <LL_ADC_IsEnabled>
 8004a78:	4604      	mov	r4, r0
 8004a7a:	4841      	ldr	r0, [pc, #260]	@ (8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a7c:	f7ff ff5e 	bl	800493c <LL_ADC_IsEnabled>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4323      	orrs	r3, r4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e012      	b.n	8004ab6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a90:	483c      	ldr	r0, [pc, #240]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a92:	f7ff ff53 	bl	800493c <LL_ADC_IsEnabled>
 8004a96:	4604      	mov	r4, r0
 8004a98:	483b      	ldr	r0, [pc, #236]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a9a:	f7ff ff4f 	bl	800493c <LL_ADC_IsEnabled>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	431c      	orrs	r4, r3
 8004aa2:	483c      	ldr	r0, [pc, #240]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004aa4:	f7ff ff4a 	bl	800493c <LL_ADC_IsEnabled>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	4323      	orrs	r3, r4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d056      	beq.n	8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ac2:	f023 030f 	bic.w	r3, r3, #15
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	6811      	ldr	r1, [r2, #0]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	6892      	ldr	r2, [r2, #8]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ad4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ad6:	e047      	b.n	8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ad8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aec:	d004      	beq.n	8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a23      	ldr	r2, [pc, #140]	@ (8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10f      	bne.n	8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004af8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004afc:	f7ff ff1e 	bl	800493c <LL_ADC_IsEnabled>
 8004b00:	4604      	mov	r4, r0
 8004b02:	481f      	ldr	r0, [pc, #124]	@ (8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b04:	f7ff ff1a 	bl	800493c <LL_ADC_IsEnabled>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4323      	orrs	r3, r4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e012      	b.n	8004b3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004b18:	481a      	ldr	r0, [pc, #104]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b1a:	f7ff ff0f 	bl	800493c <LL_ADC_IsEnabled>
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4819      	ldr	r0, [pc, #100]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b22:	f7ff ff0b 	bl	800493c <LL_ADC_IsEnabled>
 8004b26:	4603      	mov	r3, r0
 8004b28:	431c      	orrs	r4, r3
 8004b2a:	481a      	ldr	r0, [pc, #104]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b2c:	f7ff ff06 	bl	800493c <LL_ADC_IsEnabled>
 8004b30:	4603      	mov	r3, r0
 8004b32:	4323      	orrs	r3, r4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d012      	beq.n	8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b4a:	f023 030f 	bic.w	r3, r3, #15
 8004b4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b50:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b52:	e009      	b.n	8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004b66:	e000      	b.n	8004b6a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3784      	adds	r7, #132	@ 0x84
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd90      	pop	{r4, r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	50000100 	.word	0x50000100
 8004b84:	50000400 	.word	0x50000400
 8004b88:	50000500 	.word	0x50000500
 8004b8c:	50000300 	.word	0x50000300
 8004b90:	50000700 	.word	0x50000700
 8004b94:	50000600 	.word	0x50000600

08004b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bdc <__NVIC_SetPriorityGrouping+0x44>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bca:	4a04      	ldr	r2, [pc, #16]	@ (8004bdc <__NVIC_SetPriorityGrouping+0x44>)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	60d3      	str	r3, [r2, #12]
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004be4:	4b04      	ldr	r3, [pc, #16]	@ (8004bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	f003 0307 	and.w	r3, r3, #7
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	db0b      	blt.n	8004c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	f003 021f 	and.w	r2, r3, #31
 8004c14:	4907      	ldr	r1, [pc, #28]	@ (8004c34 <__NVIC_EnableIRQ+0x38>)
 8004c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	e000e100 	.word	0xe000e100

08004c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	6039      	str	r1, [r7, #0]
 8004c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db0a      	blt.n	8004c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	490c      	ldr	r1, [pc, #48]	@ (8004c84 <__NVIC_SetPriority+0x4c>)
 8004c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c56:	0112      	lsls	r2, r2, #4
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c60:	e00a      	b.n	8004c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4908      	ldr	r1, [pc, #32]	@ (8004c88 <__NVIC_SetPriority+0x50>)
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	0112      	lsls	r2, r2, #4
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	440b      	add	r3, r1
 8004c76:	761a      	strb	r2, [r3, #24]
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	e000e100 	.word	0xe000e100
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	@ 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f1c3 0307 	rsb	r3, r3, #7
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	bf28      	it	cs
 8004caa:	2304      	movcs	r3, #4
 8004cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	2b06      	cmp	r3, #6
 8004cb4:	d902      	bls.n	8004cbc <NVIC_EncodePriority+0x30>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3b03      	subs	r3, #3
 8004cba:	e000      	b.n	8004cbe <NVIC_EncodePriority+0x32>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	401a      	ands	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	43d9      	mvns	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce4:	4313      	orrs	r3, r2
         );
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3724      	adds	r7, #36	@ 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d04:	d301      	bcc.n	8004d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d06:	2301      	movs	r3, #1
 8004d08:	e00f      	b.n	8004d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d34 <SysTick_Config+0x40>)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d12:	210f      	movs	r1, #15
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	f7ff ff8e 	bl	8004c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <SysTick_Config+0x40>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d22:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <SysTick_Config+0x40>)
 8004d24:	2207      	movs	r2, #7
 8004d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	e000e010 	.word	0xe000e010

08004d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff ff29 	bl	8004b98 <__NVIC_SetPriorityGrouping>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b086      	sub	sp, #24
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	4603      	mov	r3, r0
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d5c:	f7ff ff40 	bl	8004be0 <__NVIC_GetPriorityGrouping>
 8004d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	6978      	ldr	r0, [r7, #20]
 8004d68:	f7ff ff90 	bl	8004c8c <NVIC_EncodePriority>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff5f 	bl	8004c38 <__NVIC_SetPriority>
}
 8004d7a:	bf00      	nop
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	4603      	mov	r3, r0
 8004d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff33 	bl	8004bfc <__NVIC_EnableIRQ>
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff ffa4 	bl	8004cf4 <SysTick_Config>
 8004dac:	4603      	mov	r3, r0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e08d      	b.n	8004ee6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4b47      	ldr	r3, [pc, #284]	@ (8004ef0 <HAL_DMA_Init+0x138>)
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d80f      	bhi.n	8004df6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b45      	ldr	r3, [pc, #276]	@ (8004ef4 <HAL_DMA_Init+0x13c>)
 8004dde:	4413      	add	r3, r2
 8004de0:	4a45      	ldr	r2, [pc, #276]	@ (8004ef8 <HAL_DMA_Init+0x140>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	009a      	lsls	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a42      	ldr	r2, [pc, #264]	@ (8004efc <HAL_DMA_Init+0x144>)
 8004df2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004df4:	e00e      	b.n	8004e14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4b40      	ldr	r3, [pc, #256]	@ (8004f00 <HAL_DMA_Init+0x148>)
 8004dfe:	4413      	add	r3, r2
 8004e00:	4a3d      	ldr	r2, [pc, #244]	@ (8004ef8 <HAL_DMA_Init+0x140>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	009a      	lsls	r2, r3, #2
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a3c      	ldr	r2, [pc, #240]	@ (8004f04 <HAL_DMA_Init+0x14c>)
 8004e12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa76 	bl	8005358 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e74:	d102      	bne.n	8004e7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d010      	beq.n	8004ebc <HAL_DMA_Init+0x104>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d80c      	bhi.n	8004ebc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa96 	bl	80053d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	e008      	b.n	8004ece <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40020407 	.word	0x40020407
 8004ef4:	bffdfff8 	.word	0xbffdfff8
 8004ef8:	cccccccd 	.word	0xcccccccd
 8004efc:	40020000 	.word	0x40020000
 8004f00:	bffdfbf8 	.word	0xbffdfbf8
 8004f04:	40020400 	.word	0x40020400

08004f08 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_DMA_Start_IT+0x20>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e066      	b.n	8004ff6 <HAL_DMA_Start_IT+0xee>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d155      	bne.n	8004fe8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f9bb 	bl	80052dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 020e 	orr.w	r2, r2, #14
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e00f      	b.n	8004fa0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0204 	bic.w	r2, r2, #4
 8004f8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 020a 	orr.w	r2, r2, #10
 8004f9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e005      	b.n	8004ff4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d005      	beq.n	8005022 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2204      	movs	r2, #4
 800501a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	e037      	b.n	8005092 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 020e 	bic.w	r2, r2, #14
 8005030:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800503c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005040:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005056:	f003 021f 	and.w	r2, r3, #31
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	2101      	movs	r1, #1
 8005060:	fa01 f202 	lsl.w	r2, r1, r2
 8005064:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800506e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00c      	beq.n	8005092 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005082:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005086:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005090:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d00d      	beq.n	80050e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2204      	movs	r2, #4
 80050cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
 80050e2:	e047      	b.n	8005174 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 020e 	bic.w	r2, r2, #14
 80050f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800510e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005118:	f003 021f 	and.w	r2, r3, #31
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	2101      	movs	r1, #1
 8005122:	fa01 f202 	lsl.w	r2, r1, r2
 8005126:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005130:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00c      	beq.n	8005154 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005144:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005148:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005152:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
    }
  }
  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	2204      	movs	r2, #4
 80051a0:	409a      	lsls	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d026      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x7a>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d021      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d107      	bne.n	80051d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0204 	bic.w	r2, r2, #4
 80051d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	f003 021f 	and.w	r2, r3, #31
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	2104      	movs	r1, #4
 80051e0:	fa01 f202 	lsl.w	r2, r1, r2
 80051e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d071      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051f6:	e06c      	b.n	80052d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2202      	movs	r2, #2
 8005202:	409a      	lsls	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02e      	beq.n	800526a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d029      	beq.n	800526a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 020a 	bic.w	r2, r2, #10
 8005232:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005240:	f003 021f 	and.w	r2, r3, #31
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005248:	2102      	movs	r1, #2
 800524a:	fa01 f202 	lsl.w	r2, r1, r2
 800524e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d038      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005268:	e033      	b.n	80052d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2208      	movs	r2, #8
 8005274:	409a      	lsls	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d02a      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d025      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 020e 	bic.w	r2, r2, #14
 8005296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529c:	f003 021f 	and.w	r2, r3, #31
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	2101      	movs	r1, #1
 80052a6:	fa01 f202 	lsl.w	r2, r1, r2
 80052aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d004      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
}
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f003 021f 	and.w	r2, r3, #31
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005312:	2101      	movs	r1, #1
 8005314:	fa01 f202 	lsl.w	r2, r1, r2
 8005318:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b10      	cmp	r3, #16
 8005328:	d108      	bne.n	800533c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800533a:	e007      	b.n	800534c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	4b16      	ldr	r3, [pc, #88]	@ (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005368:	429a      	cmp	r2, r3
 800536a:	d802      	bhi.n	8005372 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800536c:	4b15      	ldr	r3, [pc, #84]	@ (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e001      	b.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005372:	4b15      	ldr	r3, [pc, #84]	@ (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005374:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	3b08      	subs	r3, #8
 8005382:	4a12      	ldr	r2, [pc, #72]	@ (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005390:	089b      	lsrs	r3, r3, #2
 8005392:	009a      	lsls	r2, r3, #2
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a0b      	ldr	r2, [pc, #44]	@ (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80053a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	2201      	movs	r2, #1
 80053ac:	409a      	lsls	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40020407 	.word	0x40020407
 80053c4:	40020800 	.word	0x40020800
 80053c8:	40020820 	.word	0x40020820
 80053cc:	cccccccd 	.word	0xcccccccd
 80053d0:	40020880 	.word	0x40020880

080053d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a08      	ldr	r2, [pc, #32]	@ (8005418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	2201      	movs	r2, #1
 8005402:	409a      	lsls	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	1000823f 	.word	0x1000823f
 8005418:	40020940 	.word	0x40020940

0800541c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800542a:	e15a      	b.n	80056e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	2101      	movs	r1, #1
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 814c 	beq.w	80056dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d005      	beq.n	800545c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005458:	2b02      	cmp	r3, #2
 800545a:	d130      	bne.n	80054be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	2203      	movs	r2, #3
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	43db      	mvns	r3, r3
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4013      	ands	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005492:	2201      	movs	r2, #1
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4013      	ands	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	f003 0201 	and.w	r2, r3, #1
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d017      	beq.n	80054fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	2203      	movs	r2, #3
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d123      	bne.n	800554e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	08da      	lsrs	r2, r3, #3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3208      	adds	r2, #8
 800550e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	220f      	movs	r2, #15
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4013      	ands	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	08da      	lsrs	r2, r3, #3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3208      	adds	r2, #8
 8005548:	6939      	ldr	r1, [r7, #16]
 800554a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	2203      	movs	r2, #3
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43db      	mvns	r3, r3
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4013      	ands	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 0203 	and.w	r2, r3, #3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80a6 	beq.w	80056dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005590:	4b5b      	ldr	r3, [pc, #364]	@ (8005700 <HAL_GPIO_Init+0x2e4>)
 8005592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005594:	4a5a      	ldr	r2, [pc, #360]	@ (8005700 <HAL_GPIO_Init+0x2e4>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6613      	str	r3, [r2, #96]	@ 0x60
 800559c:	4b58      	ldr	r3, [pc, #352]	@ (8005700 <HAL_GPIO_Init+0x2e4>)
 800559e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055a8:	4a56      	ldr	r2, [pc, #344]	@ (8005704 <HAL_GPIO_Init+0x2e8>)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	3302      	adds	r3, #2
 80055b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	220f      	movs	r2, #15
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4013      	ands	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80055d2:	d01f      	beq.n	8005614 <HAL_GPIO_Init+0x1f8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005708 <HAL_GPIO_Init+0x2ec>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d019      	beq.n	8005610 <HAL_GPIO_Init+0x1f4>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a4b      	ldr	r2, [pc, #300]	@ (800570c <HAL_GPIO_Init+0x2f0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_GPIO_Init+0x1f0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005710 <HAL_GPIO_Init+0x2f4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00d      	beq.n	8005608 <HAL_GPIO_Init+0x1ec>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a49      	ldr	r2, [pc, #292]	@ (8005714 <HAL_GPIO_Init+0x2f8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <HAL_GPIO_Init+0x1e8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a48      	ldr	r2, [pc, #288]	@ (8005718 <HAL_GPIO_Init+0x2fc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d101      	bne.n	8005600 <HAL_GPIO_Init+0x1e4>
 80055fc:	2305      	movs	r3, #5
 80055fe:	e00a      	b.n	8005616 <HAL_GPIO_Init+0x1fa>
 8005600:	2306      	movs	r3, #6
 8005602:	e008      	b.n	8005616 <HAL_GPIO_Init+0x1fa>
 8005604:	2304      	movs	r3, #4
 8005606:	e006      	b.n	8005616 <HAL_GPIO_Init+0x1fa>
 8005608:	2303      	movs	r3, #3
 800560a:	e004      	b.n	8005616 <HAL_GPIO_Init+0x1fa>
 800560c:	2302      	movs	r3, #2
 800560e:	e002      	b.n	8005616 <HAL_GPIO_Init+0x1fa>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <HAL_GPIO_Init+0x1fa>
 8005614:	2300      	movs	r3, #0
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	f002 0203 	and.w	r2, r2, #3
 800561c:	0092      	lsls	r2, r2, #2
 800561e:	4093      	lsls	r3, r2
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005626:	4937      	ldr	r1, [pc, #220]	@ (8005704 <HAL_GPIO_Init+0x2e8>)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	3302      	adds	r3, #2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005634:	4b39      	ldr	r3, [pc, #228]	@ (800571c <HAL_GPIO_Init+0x300>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	43db      	mvns	r3, r3
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4013      	ands	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005658:	4a30      	ldr	r2, [pc, #192]	@ (800571c <HAL_GPIO_Init+0x300>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800565e:	4b2f      	ldr	r3, [pc, #188]	@ (800571c <HAL_GPIO_Init+0x300>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	43db      	mvns	r3, r3
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4013      	ands	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005682:	4a26      	ldr	r2, [pc, #152]	@ (800571c <HAL_GPIO_Init+0x300>)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005688:	4b24      	ldr	r3, [pc, #144]	@ (800571c <HAL_GPIO_Init+0x300>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	43db      	mvns	r3, r3
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4013      	ands	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056ac:	4a1b      	ldr	r2, [pc, #108]	@ (800571c <HAL_GPIO_Init+0x300>)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056b2:	4b1a      	ldr	r3, [pc, #104]	@ (800571c <HAL_GPIO_Init+0x300>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	43db      	mvns	r3, r3
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056d6:	4a11      	ldr	r2, [pc, #68]	@ (800571c <HAL_GPIO_Init+0x300>)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3301      	adds	r3, #1
 80056e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f47f ae9d 	bne.w	800542c <HAL_GPIO_Init+0x10>
  }
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40021000 	.word	0x40021000
 8005704:	40010000 	.word	0x40010000
 8005708:	48000400 	.word	0x48000400
 800570c:	48000800 	.word	0x48000800
 8005710:	48000c00 	.word	0x48000c00
 8005714:	48001000 	.word	0x48001000
 8005718:	48001400 	.word	0x48001400
 800571c:	40010400 	.word	0x40010400

08005720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
 800573c:	e001      	b.n	8005742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	807b      	strh	r3, [r7, #2]
 800575c:	4613      	mov	r3, r2
 800575e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005760:	787b      	ldrb	r3, [r7, #1]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005766:	887a      	ldrh	r2, [r7, #2]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800576c:	e002      	b.n	8005774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800576e:	887a      	ldrh	r2, [r7, #2]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800578a:	4b08      	ldr	r3, [pc, #32]	@ (80057ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005796:	4a05      	ldr	r2, [pc, #20]	@ (80057ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f806 	bl	80057b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40010400 	.word	0x40010400

080057b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d141      	bne.n	800585a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e2:	d131      	bne.n	8005848 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057e4:	4b47      	ldr	r3, [pc, #284]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ea:	4a46      	ldr	r2, [pc, #280]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057f4:	4b43      	ldr	r3, [pc, #268]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057fc:	4a41      	ldr	r2, [pc, #260]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005804:	4b40      	ldr	r3, [pc, #256]	@ (8005908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2232      	movs	r2, #50	@ 0x32
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	4a3f      	ldr	r2, [pc, #252]	@ (800590c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	0c9b      	lsrs	r3, r3, #18
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800581a:	e002      	b.n	8005822 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b01      	subs	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005822:	4b38      	ldr	r3, [pc, #224]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582e:	d102      	bne.n	8005836 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f2      	bne.n	800581c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005836:	4b33      	ldr	r3, [pc, #204]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005842:	d158      	bne.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e057      	b.n	80058f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005848:	4b2e      	ldr	r3, [pc, #184]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800584e:	4a2d      	ldr	r2, [pc, #180]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005858:	e04d      	b.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005860:	d141      	bne.n	80058e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005862:	4b28      	ldr	r3, [pc, #160]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800586e:	d131      	bne.n	80058d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005870:	4b24      	ldr	r3, [pc, #144]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005876:	4a23      	ldr	r2, [pc, #140]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800587c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005880:	4b20      	ldr	r3, [pc, #128]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005888:	4a1e      	ldr	r2, [pc, #120]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800588e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005890:	4b1d      	ldr	r3, [pc, #116]	@ (8005908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2232      	movs	r2, #50	@ 0x32
 8005896:	fb02 f303 	mul.w	r3, r2, r3
 800589a:	4a1c      	ldr	r2, [pc, #112]	@ (800590c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	0c9b      	lsrs	r3, r3, #18
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058a6:	e002      	b.n	80058ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ae:	4b15      	ldr	r3, [pc, #84]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ba:	d102      	bne.n	80058c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f2      	bne.n	80058a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058c2:	4b10      	ldr	r3, [pc, #64]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ce:	d112      	bne.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e011      	b.n	80058f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058da:	4a0a      	ldr	r2, [pc, #40]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058e4:	e007      	b.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058e6:	4b07      	ldr	r3, [pc, #28]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058ee:	4a05      	ldr	r2, [pc, #20]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40007000 	.word	0x40007000
 8005908:	20000230 	.word	0x20000230
 800590c:	431bde83 	.word	0x431bde83

08005910 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005914:	4b05      	ldr	r3, [pc, #20]	@ (800592c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4a04      	ldr	r2, [pc, #16]	@ (800592c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800591a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800591e:	6093      	str	r3, [r2, #8]
}
 8005920:	bf00      	nop
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40007000 	.word	0x40007000

08005930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e2fe      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d075      	beq.n	8005a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594e:	4b97      	ldr	r3, [pc, #604]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005958:	4b94      	ldr	r3, [pc, #592]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b0c      	cmp	r3, #12
 8005966:	d102      	bne.n	800596e <HAL_RCC_OscConfig+0x3e>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d002      	beq.n	8005974 <HAL_RCC_OscConfig+0x44>
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b08      	cmp	r3, #8
 8005972:	d10b      	bne.n	800598c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	4b8d      	ldr	r3, [pc, #564]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d05b      	beq.n	8005a38 <HAL_RCC_OscConfig+0x108>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d157      	bne.n	8005a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e2d9      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005994:	d106      	bne.n	80059a4 <HAL_RCC_OscConfig+0x74>
 8005996:	4b85      	ldr	r3, [pc, #532]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a84      	ldr	r2, [pc, #528]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e01d      	b.n	80059e0 <HAL_RCC_OscConfig+0xb0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x98>
 80059ae:	4b7f      	ldr	r3, [pc, #508]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a7e      	ldr	r2, [pc, #504]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 80059b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b7c      	ldr	r3, [pc, #496]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a7b      	ldr	r2, [pc, #492]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e00b      	b.n	80059e0 <HAL_RCC_OscConfig+0xb0>
 80059c8:	4b78      	ldr	r3, [pc, #480]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a77      	ldr	r2, [pc, #476]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4b75      	ldr	r3, [pc, #468]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a74      	ldr	r2, [pc, #464]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 80059da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d013      	beq.n	8005a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fd ffca 	bl	8003980 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fd ffc6 	bl	8003980 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	@ 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e29e      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a02:	4b6a      	ldr	r3, [pc, #424]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0f0      	beq.n	80059f0 <HAL_RCC_OscConfig+0xc0>
 8005a0e:	e014      	b.n	8005a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a10:	f7fd ffb6 	bl	8003980 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a18:	f7fd ffb2 	bl	8003980 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b64      	cmp	r3, #100	@ 0x64
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e28a      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a2a:	4b60      	ldr	r3, [pc, #384]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0xe8>
 8005a36:	e000      	b.n	8005a3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d075      	beq.n	8005b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a46:	4b59      	ldr	r3, [pc, #356]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a50:	4b56      	ldr	r3, [pc, #344]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b0c      	cmp	r3, #12
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCC_OscConfig+0x136>
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d002      	beq.n	8005a6c <HAL_RCC_OscConfig+0x13c>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d11f      	bne.n	8005aac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_RCC_OscConfig+0x154>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e25d      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a84:	4b49      	ldr	r3, [pc, #292]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	061b      	lsls	r3, r3, #24
 8005a92:	4946      	ldr	r1, [pc, #280]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a98:	4b45      	ldr	r3, [pc, #276]	@ (8005bb0 <HAL_RCC_OscConfig+0x280>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fd ff23 	bl	80038e8 <HAL_InitTick>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d043      	beq.n	8005b30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e249      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d023      	beq.n	8005afc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fd ff5e 	bl	8003980 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac8:	f7fd ff5a 	bl	8003980 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e232      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ada:	4b34      	ldr	r3, [pc, #208]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0f0      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae6:	4b31      	ldr	r3, [pc, #196]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	492d      	ldr	r1, [pc, #180]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	604b      	str	r3, [r1, #4]
 8005afa:	e01a      	b.n	8005b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005afc:	4b2b      	ldr	r3, [pc, #172]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a2a      	ldr	r2, [pc, #168]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005b02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fd ff3a 	bl	8003980 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b10:	f7fd ff36 	bl	8003980 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e20e      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b22:	4b22      	ldr	r3, [pc, #136]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x1e0>
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d041      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d01c      	beq.n	8005b80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b46:	4b19      	ldr	r3, [pc, #100]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b4c:	4a17      	ldr	r2, [pc, #92]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b56:	f7fd ff13 	bl	8003980 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5e:	f7fd ff0f 	bl	8003980 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e1e7      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b70:	4b0e      	ldr	r3, [pc, #56]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0ef      	beq.n	8005b5e <HAL_RCC_OscConfig+0x22e>
 8005b7e:	e020      	b.n	8005bc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b80:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b86:	4a09      	ldr	r2, [pc, #36]	@ (8005bac <HAL_RCC_OscConfig+0x27c>)
 8005b88:	f023 0301 	bic.w	r3, r3, #1
 8005b8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b90:	f7fd fef6 	bl	8003980 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b96:	e00d      	b.n	8005bb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b98:	f7fd fef2 	bl	8003980 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d906      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e1ca      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	20000234 	.word	0x20000234
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1ea      	bne.n	8005b98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80a6 	beq.w	8005d1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bd4:	4b84      	ldr	r3, [pc, #528]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_RCC_OscConfig+0x2b4>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_RCC_OscConfig+0x2b6>
 8005be4:	2300      	movs	r3, #0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00d      	beq.n	8005c06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bea:	4b7f      	ldr	r3, [pc, #508]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bee:	4a7e      	ldr	r2, [pc, #504]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c02:	2301      	movs	r3, #1
 8005c04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c06:	4b79      	ldr	r3, [pc, #484]	@ (8005dec <HAL_RCC_OscConfig+0x4bc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d118      	bne.n	8005c44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c12:	4b76      	ldr	r3, [pc, #472]	@ (8005dec <HAL_RCC_OscConfig+0x4bc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a75      	ldr	r2, [pc, #468]	@ (8005dec <HAL_RCC_OscConfig+0x4bc>)
 8005c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1e:	f7fd feaf 	bl	8003980 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c26:	f7fd feab 	bl	8003980 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e183      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c38:	4b6c      	ldr	r3, [pc, #432]	@ (8005dec <HAL_RCC_OscConfig+0x4bc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0f0      	beq.n	8005c26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d108      	bne.n	8005c5e <HAL_RCC_OscConfig+0x32e>
 8005c4c:	4b66      	ldr	r3, [pc, #408]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c52:	4a65      	ldr	r2, [pc, #404]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c5c:	e024      	b.n	8005ca8 <HAL_RCC_OscConfig+0x378>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	d110      	bne.n	8005c88 <HAL_RCC_OscConfig+0x358>
 8005c66:	4b60      	ldr	r3, [pc, #384]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005c6e:	f043 0304 	orr.w	r3, r3, #4
 8005c72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c76:	4b5c      	ldr	r3, [pc, #368]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c86:	e00f      	b.n	8005ca8 <HAL_RCC_OscConfig+0x378>
 8005c88:	4b57      	ldr	r3, [pc, #348]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8e:	4a56      	ldr	r2, [pc, #344]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c98:	4b53      	ldr	r3, [pc, #332]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9e:	4a52      	ldr	r2, [pc, #328]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005ca0:	f023 0304 	bic.w	r3, r3, #4
 8005ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d016      	beq.n	8005cde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb0:	f7fd fe66 	bl	8003980 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fd fe62 	bl	8003980 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e138      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cce:	4b46      	ldr	r3, [pc, #280]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ed      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x388>
 8005cdc:	e015      	b.n	8005d0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cde:	f7fd fe4f 	bl	8003980 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ce4:	e00a      	b.n	8005cfc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce6:	f7fd fe4b 	bl	8003980 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e121      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1ed      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d0a:	7ffb      	ldrb	r3, [r7, #31]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d105      	bne.n	8005d1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d10:	4b35      	ldr	r3, [pc, #212]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d14:	4a34      	ldr	r2, [pc, #208]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d1a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d03c      	beq.n	8005da2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01c      	beq.n	8005d6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d30:	4b2d      	ldr	r3, [pc, #180]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d36:	4a2c      	ldr	r2, [pc, #176]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fd fe1e 	bl	8003980 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d48:	f7fd fe1a 	bl	8003980 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e0f2      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d5a:	4b23      	ldr	r3, [pc, #140]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0ef      	beq.n	8005d48 <HAL_RCC_OscConfig+0x418>
 8005d68:	e01b      	b.n	8005da2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d70:	4a1d      	ldr	r2, [pc, #116]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005d72:	f023 0301 	bic.w	r3, r3, #1
 8005d76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7a:	f7fd fe01 	bl	8003980 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d82:	f7fd fdfd 	bl	8003980 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e0d5      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d94:	4b14      	ldr	r3, [pc, #80]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1ef      	bne.n	8005d82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80c9 	beq.w	8005f3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dac:	4b0e      	ldr	r3, [pc, #56]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 030c 	and.w	r3, r3, #12
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	f000 8083 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d15e      	bne.n	8005e80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc2:	4b09      	ldr	r3, [pc, #36]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a08      	ldr	r2, [pc, #32]	@ (8005de8 <HAL_RCC_OscConfig+0x4b8>)
 8005dc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dce:	f7fd fdd7 	bl	8003980 <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd4:	e00c      	b.n	8005df0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd6:	f7fd fdd3 	bl	8003980 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d905      	bls.n	8005df0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e0ab      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
 8005de8:	40021000 	.word	0x40021000
 8005dec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005df0:	4b55      	ldr	r3, [pc, #340]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1ec      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dfc:	4b52      	ldr	r3, [pc, #328]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	4b52      	ldr	r3, [pc, #328]	@ (8005f4c <HAL_RCC_OscConfig+0x61c>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6a11      	ldr	r1, [r2, #32]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e0c:	3a01      	subs	r2, #1
 8005e0e:	0112      	lsls	r2, r2, #4
 8005e10:	4311      	orrs	r1, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e16:	0212      	lsls	r2, r2, #8
 8005e18:	4311      	orrs	r1, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e1e:	0852      	lsrs	r2, r2, #1
 8005e20:	3a01      	subs	r2, #1
 8005e22:	0552      	lsls	r2, r2, #21
 8005e24:	4311      	orrs	r1, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e2a:	0852      	lsrs	r2, r2, #1
 8005e2c:	3a01      	subs	r2, #1
 8005e2e:	0652      	lsls	r2, r2, #25
 8005e30:	4311      	orrs	r1, r2
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e36:	06d2      	lsls	r2, r2, #27
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	4943      	ldr	r1, [pc, #268]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e40:	4b41      	ldr	r3, [pc, #260]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a40      	ldr	r2, [pc, #256]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a3d      	ldr	r2, [pc, #244]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fd fd92 	bl	8003980 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fd fd8e 	bl	8003980 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e066      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e72:	4b35      	ldr	r3, [pc, #212]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x530>
 8005e7e:	e05e      	b.n	8005f3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e80:	4b31      	ldr	r3, [pc, #196]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a30      	ldr	r2, [pc, #192]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8c:	f7fd fd78 	bl	8003980 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e94:	f7fd fd74 	bl	8003980 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e04c      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea6:	4b28      	ldr	r3, [pc, #160]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005eb2:	4b25      	ldr	r3, [pc, #148]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	4924      	ldr	r1, [pc, #144]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005eb8:	4b25      	ldr	r3, [pc, #148]	@ (8005f50 <HAL_RCC_OscConfig+0x620>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	60cb      	str	r3, [r1, #12]
 8005ebe:	e03e      	b.n	8005f3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e039      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8005f48 <HAL_RCC_OscConfig+0x618>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0203 	and.w	r2, r3, #3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d12c      	bne.n	8005f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	3b01      	subs	r3, #1
 8005eec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d123      	bne.n	8005f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d11b      	bne.n	8005f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d113      	bne.n	8005f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d109      	bne.n	8005f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	3b01      	subs	r3, #1
 8005f34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d001      	beq.n	8005f3e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	019f800c 	.word	0x019f800c
 8005f50:	feeefffc 	.word	0xfeeefffc

08005f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e11e      	b.n	80061aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f6c:	4b91      	ldr	r3, [pc, #580]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d910      	bls.n	8005f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7a:	4b8e      	ldr	r3, [pc, #568]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f023 020f 	bic.w	r2, r3, #15
 8005f82:	498c      	ldr	r1, [pc, #560]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d001      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e106      	b.n	80061aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d073      	beq.n	8006090 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d129      	bne.n	8006004 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fb0:	4b81      	ldr	r3, [pc, #516]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0f4      	b.n	80061aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005fc0:	f000 f99e 	bl	8006300 <RCC_GetSysClockFreqFromPLLSource>
 8005fc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4a7c      	ldr	r2, [pc, #496]	@ (80061bc <HAL_RCC_ClockConfig+0x268>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d93f      	bls.n	800604e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fce:	4b7a      	ldr	r3, [pc, #488]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d033      	beq.n	800604e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d12f      	bne.n	800604e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fee:	4b72      	ldr	r3, [pc, #456]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ff6:	4a70      	ldr	r2, [pc, #448]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ffe:	2380      	movs	r3, #128	@ 0x80
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e024      	b.n	800604e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d107      	bne.n	800601c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800600c:	4b6a      	ldr	r3, [pc, #424]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0c6      	b.n	80061aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800601c:	4b66      	ldr	r3, [pc, #408]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0be      	b.n	80061aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800602c:	f000 f8ce 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 8006030:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4a61      	ldr	r2, [pc, #388]	@ (80061bc <HAL_RCC_ClockConfig+0x268>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d909      	bls.n	800604e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800603a:	4b5f      	ldr	r3, [pc, #380]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006042:	4a5d      	ldr	r2, [pc, #372]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8006044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006048:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800604a:	2380      	movs	r3, #128	@ 0x80
 800604c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800604e:	4b5a      	ldr	r3, [pc, #360]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f023 0203 	bic.w	r2, r3, #3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	4957      	ldr	r1, [pc, #348]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 800605c:	4313      	orrs	r3, r2
 800605e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006060:	f7fd fc8e 	bl	8003980 <HAL_GetTick>
 8006064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006066:	e00a      	b.n	800607e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006068:	f7fd fc8a 	bl	8003980 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e095      	b.n	80061aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607e:	4b4e      	ldr	r3, [pc, #312]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 020c 	and.w	r2, r3, #12
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	429a      	cmp	r2, r3
 800608e:	d1eb      	bne.n	8006068 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d023      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060a8:	4b43      	ldr	r3, [pc, #268]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	4a42      	ldr	r2, [pc, #264]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 80060ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80060b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80060c0:	4b3d      	ldr	r3, [pc, #244]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80060c8:	4a3b      	ldr	r2, [pc, #236]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 80060ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80060ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d0:	4b39      	ldr	r3, [pc, #228]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4936      	ldr	r1, [pc, #216]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	608b      	str	r3, [r1, #8]
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b80      	cmp	r3, #128	@ 0x80
 80060e8:	d105      	bne.n	80060f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060ea:	4b33      	ldr	r3, [pc, #204]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	4a32      	ldr	r2, [pc, #200]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 80060f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060f6:	4b2f      	ldr	r3, [pc, #188]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d21d      	bcs.n	8006140 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006104:	4b2b      	ldr	r3, [pc, #172]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f023 020f 	bic.w	r2, r3, #15
 800610c:	4929      	ldr	r1, [pc, #164]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	4313      	orrs	r3, r2
 8006112:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006114:	f7fd fc34 	bl	8003980 <HAL_GetTick>
 8006118:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800611a:	e00a      	b.n	8006132 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800611c:	f7fd fc30 	bl	8003980 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e03b      	b.n	80061aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006132:	4b20      	ldr	r3, [pc, #128]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d1ed      	bne.n	800611c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800614c:	4b1a      	ldr	r3, [pc, #104]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4917      	ldr	r1, [pc, #92]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 800615a:	4313      	orrs	r3, r2
 800615c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800616a:	4b13      	ldr	r3, [pc, #76]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	490f      	ldr	r1, [pc, #60]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 800617a:	4313      	orrs	r3, r2
 800617c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800617e:	f000 f825 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 8006182:	4602      	mov	r2, r0
 8006184:	4b0c      	ldr	r3, [pc, #48]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	490c      	ldr	r1, [pc, #48]	@ (80061c0 <HAL_RCC_ClockConfig+0x26c>)
 8006190:	5ccb      	ldrb	r3, [r1, r3]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	fa22 f303 	lsr.w	r3, r2, r3
 800619a:	4a0a      	ldr	r2, [pc, #40]	@ (80061c4 <HAL_RCC_ClockConfig+0x270>)
 800619c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800619e:	4b0a      	ldr	r3, [pc, #40]	@ (80061c8 <HAL_RCC_ClockConfig+0x274>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fd fba0 	bl	80038e8 <HAL_InitTick>
 80061a8:	4603      	mov	r3, r0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40022000 	.word	0x40022000
 80061b8:	40021000 	.word	0x40021000
 80061bc:	04c4b400 	.word	0x04c4b400
 80061c0:	0800a99c 	.word	0x0800a99c
 80061c4:	20000230 	.word	0x20000230
 80061c8:	20000234 	.word	0x20000234

080061cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80061d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 030c 	and.w	r3, r3, #12
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d102      	bne.n	80061e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061de:	4b2a      	ldr	r3, [pc, #168]	@ (8006288 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e047      	b.n	8006274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061e4:	4b27      	ldr	r3, [pc, #156]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 030c 	and.w	r3, r3, #12
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d102      	bne.n	80061f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061f0:	4b26      	ldr	r3, [pc, #152]	@ (800628c <HAL_RCC_GetSysClockFreq+0xc0>)
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	e03e      	b.n	8006274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061f6:	4b23      	ldr	r3, [pc, #140]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b0c      	cmp	r3, #12
 8006200:	d136      	bne.n	8006270 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006202:	4b20      	ldr	r3, [pc, #128]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800620c:	4b1d      	ldr	r3, [pc, #116]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	3301      	adds	r3, #1
 8006218:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d10c      	bne.n	800623a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006220:	4a1a      	ldr	r2, [pc, #104]	@ (800628c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	4a16      	ldr	r2, [pc, #88]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800622a:	68d2      	ldr	r2, [r2, #12]
 800622c:	0a12      	lsrs	r2, r2, #8
 800622e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	617b      	str	r3, [r7, #20]
      break;
 8006238:	e00c      	b.n	8006254 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800623a:	4a13      	ldr	r2, [pc, #76]	@ (8006288 <HAL_RCC_GetSysClockFreq+0xbc>)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006242:	4a10      	ldr	r2, [pc, #64]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006244:	68d2      	ldr	r2, [r2, #12]
 8006246:	0a12      	lsrs	r2, r2, #8
 8006248:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800624c:	fb02 f303 	mul.w	r3, r2, r3
 8006250:	617b      	str	r3, [r7, #20]
      break;
 8006252:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006254:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	0e5b      	lsrs	r3, r3, #25
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	3301      	adds	r3, #1
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	fbb2 f3f3 	udiv	r3, r2, r3
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	e001      	b.n	8006274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006274:	693b      	ldr	r3, [r7, #16]
}
 8006276:	4618      	mov	r0, r3
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40021000 	.word	0x40021000
 8006288:	00f42400 	.word	0x00f42400
 800628c:	016e3600 	.word	0x016e3600

08006290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006294:	4b03      	ldr	r3, [pc, #12]	@ (80062a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006296:	681b      	ldr	r3, [r3, #0]
}
 8006298:	4618      	mov	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000230 	.word	0x20000230

080062a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062ac:	f7ff fff0 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b06      	ldr	r3, [pc, #24]	@ (80062cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	4904      	ldr	r1, [pc, #16]	@ (80062d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062be:	5ccb      	ldrb	r3, [r1, r3]
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40021000 	.word	0x40021000
 80062d0:	0800a9ac 	.word	0x0800a9ac

080062d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062d8:	f7ff ffda 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062dc:	4602      	mov	r2, r0
 80062de:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	0adb      	lsrs	r3, r3, #11
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	4904      	ldr	r1, [pc, #16]	@ (80062fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80062ea:	5ccb      	ldrb	r3, [r1, r3]
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40021000 	.word	0x40021000
 80062fc:	0800a9ac 	.word	0x0800a9ac

08006300 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006306:	4b1e      	ldr	r3, [pc, #120]	@ (8006380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006310:	4b1b      	ldr	r3, [pc, #108]	@ (8006380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d10c      	bne.n	800633e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006324:	4a17      	ldr	r2, [pc, #92]	@ (8006384 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	4a14      	ldr	r2, [pc, #80]	@ (8006380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800632e:	68d2      	ldr	r2, [r2, #12]
 8006330:	0a12      	lsrs	r2, r2, #8
 8006332:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	617b      	str	r3, [r7, #20]
    break;
 800633c:	e00c      	b.n	8006358 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800633e:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	fbb2 f3f3 	udiv	r3, r2, r3
 8006346:	4a0e      	ldr	r2, [pc, #56]	@ (8006380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006348:	68d2      	ldr	r2, [r2, #12]
 800634a:	0a12      	lsrs	r2, r2, #8
 800634c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006350:	fb02 f303 	mul.w	r3, r2, r3
 8006354:	617b      	str	r3, [r7, #20]
    break;
 8006356:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006358:	4b09      	ldr	r3, [pc, #36]	@ (8006380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	0e5b      	lsrs	r3, r3, #25
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	3301      	adds	r3, #1
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006372:	687b      	ldr	r3, [r7, #4]
}
 8006374:	4618      	mov	r0, r3
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	40021000 	.word	0x40021000
 8006384:	016e3600 	.word	0x016e3600
 8006388:	00f42400 	.word	0x00f42400

0800638c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006394:	2300      	movs	r3, #0
 8006396:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006398:	2300      	movs	r3, #0
 800639a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8098 	beq.w	80064da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063aa:	2300      	movs	r3, #0
 80063ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ae:	4b43      	ldr	r3, [pc, #268]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10d      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ba:	4b40      	ldr	r3, [pc, #256]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063be:	4a3f      	ldr	r2, [pc, #252]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c6:	4b3d      	ldr	r3, [pc, #244]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ce:	60bb      	str	r3, [r7, #8]
 80063d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063d2:	2301      	movs	r3, #1
 80063d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063d6:	4b3a      	ldr	r3, [pc, #232]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a39      	ldr	r2, [pc, #228]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063e2:	f7fd facd 	bl	8003980 <HAL_GetTick>
 80063e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063e8:	e009      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ea:	f7fd fac9 	bl	8003980 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d902      	bls.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	74fb      	strb	r3, [r7, #19]
        break;
 80063fc:	e005      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063fe:	4b30      	ldr	r3, [pc, #192]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0ef      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800640a:	7cfb      	ldrb	r3, [r7, #19]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d159      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006410:	4b2a      	ldr	r3, [pc, #168]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800641a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01e      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	429a      	cmp	r2, r3
 800642a:	d019      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800642c:	4b23      	ldr	r3, [pc, #140]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006438:	4b20      	ldr	r3, [pc, #128]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643e:	4a1f      	ldr	r2, [pc, #124]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006448:	4b1c      	ldr	r3, [pc, #112]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644e:	4a1b      	ldr	r2, [pc, #108]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006458:	4a18      	ldr	r2, [pc, #96]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fd fa89 	bl	8003980 <HAL_GetTick>
 800646e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006470:	e00b      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006472:	f7fd fa85 	bl	8003980 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006480:	4293      	cmp	r3, r2
 8006482:	d902      	bls.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	74fb      	strb	r3, [r7, #19]
            break;
 8006488:	e006      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800648a:	4b0c      	ldr	r3, [pc, #48]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0ec      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006498:	7cfb      	ldrb	r3, [r7, #19]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800649e:	4b07      	ldr	r3, [pc, #28]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ac:	4903      	ldr	r1, [pc, #12]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80064b4:	e008      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064b6:	7cfb      	ldrb	r3, [r7, #19]
 80064b8:	74bb      	strb	r3, [r7, #18]
 80064ba:	e005      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064bc:	40021000 	.word	0x40021000
 80064c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064c8:	7c7b      	ldrb	r3, [r7, #17]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d105      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ce:	4ba7      	ldr	r3, [pc, #668]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d2:	4aa6      	ldr	r2, [pc, #664]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064e6:	4ba1      	ldr	r3, [pc, #644]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ec:	f023 0203 	bic.w	r2, r3, #3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	499d      	ldr	r1, [pc, #628]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006508:	4b98      	ldr	r3, [pc, #608]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650e:	f023 020c 	bic.w	r2, r3, #12
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	4995      	ldr	r1, [pc, #596]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800652a:	4b90      	ldr	r3, [pc, #576]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006530:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	498c      	ldr	r1, [pc, #560]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800654c:	4b87      	ldr	r3, [pc, #540]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006552:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	4984      	ldr	r1, [pc, #528]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800656e:	4b7f      	ldr	r3, [pc, #508]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	497b      	ldr	r1, [pc, #492]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006590:	4b76      	ldr	r3, [pc, #472]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006596:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	4973      	ldr	r1, [pc, #460]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065b2:	4b6e      	ldr	r3, [pc, #440]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	496a      	ldr	r1, [pc, #424]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065d4:	4b65      	ldr	r3, [pc, #404]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	4962      	ldr	r1, [pc, #392]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065f6:	4b5d      	ldr	r3, [pc, #372]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	4959      	ldr	r1, [pc, #356]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006618:	4b54      	ldr	r3, [pc, #336]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800661e:	f023 0203 	bic.w	r2, r3, #3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	4951      	ldr	r1, [pc, #324]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800663a:	4b4c      	ldr	r3, [pc, #304]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006640:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	4948      	ldr	r1, [pc, #288]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006658:	2b00      	cmp	r3, #0
 800665a:	d015      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800665c:	4b43      	ldr	r3, [pc, #268]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006662:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666a:	4940      	ldr	r1, [pc, #256]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800667a:	d105      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800667c:	4b3b      	ldr	r3, [pc, #236]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	4a3a      	ldr	r2, [pc, #232]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006686:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006690:	2b00      	cmp	r3, #0
 8006692:	d015      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006694:	4b35      	ldr	r3, [pc, #212]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a2:	4932      	ldr	r1, [pc, #200]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066b2:	d105      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b4:	4b2d      	ldr	r3, [pc, #180]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4a2c      	ldr	r2, [pc, #176]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d015      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066cc:	4b27      	ldr	r3, [pc, #156]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066da:	4924      	ldr	r1, [pc, #144]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066ea:	d105      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066ec:	4b1f      	ldr	r3, [pc, #124]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4a1e      	ldr	r2, [pc, #120]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d015      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006704:	4b19      	ldr	r3, [pc, #100]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006712:	4916      	ldr	r1, [pc, #88]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006722:	d105      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006724:	4b11      	ldr	r3, [pc, #68]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4a10      	ldr	r2, [pc, #64]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800672e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d019      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800673c:	4b0b      	ldr	r3, [pc, #44]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006742:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674a:	4908      	ldr	r1, [pc, #32]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800675a:	d109      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800675c:	4b03      	ldr	r3, [pc, #12]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4a02      	ldr	r2, [pc, #8]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006762:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006766:	60d3      	str	r3, [r2, #12]
 8006768:	e002      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800676a:	bf00      	nop
 800676c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d015      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800677c:	4b29      	ldr	r3, [pc, #164]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006782:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678a:	4926      	ldr	r1, [pc, #152]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800679a:	d105      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800679c:	4b21      	ldr	r3, [pc, #132]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4a20      	ldr	r2, [pc, #128]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d015      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80067b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067c2:	4918      	ldr	r1, [pc, #96]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d2:	d105      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067d4:	4b13      	ldr	r3, [pc, #76]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4a12      	ldr	r2, [pc, #72]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d015      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067fa:	490a      	ldr	r1, [pc, #40]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800680a:	d105      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800680c:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	4a04      	ldr	r2, [pc, #16]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006816:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006818:	7cbb      	ldrb	r3, [r7, #18]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40021000 	.word	0x40021000

08006828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e054      	b.n	80068e4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d111      	bne.n	800686a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 ff3a 	bl	80086c8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a23      	ldr	r2, [pc, #140]	@ (80068ec <HAL_TIM_Base_Init+0xc4>)
 8006860:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f001 fa83 	bl	8007d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	080033e5 	.word	0x080033e5

080068f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	d001      	beq.n	8006908 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e04c      	b.n	80069a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a26      	ldr	r2, [pc, #152]	@ (80069b0 <HAL_TIM_Base_Start+0xc0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d022      	beq.n	8006960 <HAL_TIM_Base_Start+0x70>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006922:	d01d      	beq.n	8006960 <HAL_TIM_Base_Start+0x70>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a22      	ldr	r2, [pc, #136]	@ (80069b4 <HAL_TIM_Base_Start+0xc4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d018      	beq.n	8006960 <HAL_TIM_Base_Start+0x70>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a21      	ldr	r2, [pc, #132]	@ (80069b8 <HAL_TIM_Base_Start+0xc8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d013      	beq.n	8006960 <HAL_TIM_Base_Start+0x70>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1f      	ldr	r2, [pc, #124]	@ (80069bc <HAL_TIM_Base_Start+0xcc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00e      	beq.n	8006960 <HAL_TIM_Base_Start+0x70>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1e      	ldr	r2, [pc, #120]	@ (80069c0 <HAL_TIM_Base_Start+0xd0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d009      	beq.n	8006960 <HAL_TIM_Base_Start+0x70>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1c      	ldr	r2, [pc, #112]	@ (80069c4 <HAL_TIM_Base_Start+0xd4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <HAL_TIM_Base_Start+0x70>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1b      	ldr	r2, [pc, #108]	@ (80069c8 <HAL_TIM_Base_Start+0xd8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d115      	bne.n	800698c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	4b19      	ldr	r3, [pc, #100]	@ (80069cc <HAL_TIM_Base_Start+0xdc>)
 8006968:	4013      	ands	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b06      	cmp	r3, #6
 8006970:	d015      	beq.n	800699e <HAL_TIM_Base_Start+0xae>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006978:	d011      	beq.n	800699e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0201 	orr.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698a:	e008      	b.n	800699e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	e000      	b.n	80069a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40013400 	.word	0x40013400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40015000 	.word	0x40015000
 80069cc:	00010007 	.word	0x00010007

080069d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d001      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e054      	b.n	8006a92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a26      	ldr	r2, [pc, #152]	@ (8006aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d022      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a12:	d01d      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a22      	ldr	r2, [pc, #136]	@ (8006aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d018      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a21      	ldr	r2, [pc, #132]	@ (8006aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006aac <HAL_TIM_Base_Start_IT+0xdc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d115      	bne.n	8006a7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	4b19      	ldr	r3, [pc, #100]	@ (8006abc <HAL_TIM_Base_Start_IT+0xec>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d015      	beq.n	8006a8e <HAL_TIM_Base_Start_IT+0xbe>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a68:	d011      	beq.n	8006a8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7a:	e008      	b.n	8006a8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	e000      	b.n	8006a90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40015000 	.word	0x40015000
 8006abc:	00010007 	.word	0x00010007

08006ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e054      	b.n	8006b7c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d111      	bne.n	8006b02 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fdee 	bl	80086c8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a23      	ldr	r2, [pc, #140]	@ (8006b84 <HAL_TIM_PWM_Init+0xc4>)
 8006af8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f001 f937 	bl	8007d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	08006b89 	.word	0x08006b89

08006b88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d109      	bne.n	8006bc4 <HAL_TIM_PWM_Start_IT+0x28>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	bf14      	ite	ne
 8006bbc:	2301      	movne	r3, #1
 8006bbe:	2300      	moveq	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	e03c      	b.n	8006c3e <HAL_TIM_PWM_Start_IT+0xa2>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d109      	bne.n	8006bde <HAL_TIM_PWM_Start_IT+0x42>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	bf14      	ite	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	2300      	moveq	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	e02f      	b.n	8006c3e <HAL_TIM_PWM_Start_IT+0xa2>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d109      	bne.n	8006bf8 <HAL_TIM_PWM_Start_IT+0x5c>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	bf14      	ite	ne
 8006bf0:	2301      	movne	r3, #1
 8006bf2:	2300      	moveq	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	e022      	b.n	8006c3e <HAL_TIM_PWM_Start_IT+0xa2>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b0c      	cmp	r3, #12
 8006bfc:	d109      	bne.n	8006c12 <HAL_TIM_PWM_Start_IT+0x76>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	bf14      	ite	ne
 8006c0a:	2301      	movne	r3, #1
 8006c0c:	2300      	moveq	r3, #0
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	e015      	b.n	8006c3e <HAL_TIM_PWM_Start_IT+0xa2>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d109      	bne.n	8006c2c <HAL_TIM_PWM_Start_IT+0x90>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	e008      	b.n	8006c3e <HAL_TIM_PWM_Start_IT+0xa2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	bf14      	ite	ne
 8006c38:	2301      	movne	r3, #1
 8006c3a:	2300      	moveq	r3, #0
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e0f1      	b.n	8006e2a <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_PWM_Start_IT+0xba>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c54:	e023      	b.n	8006c9e <HAL_TIM_PWM_Start_IT+0x102>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_PWM_Start_IT+0xca>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c64:	e01b      	b.n	8006c9e <HAL_TIM_PWM_Start_IT+0x102>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_PWM_Start_IT+0xda>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c74:	e013      	b.n	8006c9e <HAL_TIM_PWM_Start_IT+0x102>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b0c      	cmp	r3, #12
 8006c7a:	d104      	bne.n	8006c86 <HAL_TIM_PWM_Start_IT+0xea>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c84:	e00b      	b.n	8006c9e <HAL_TIM_PWM_Start_IT+0x102>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b10      	cmp	r3, #16
 8006c8a:	d104      	bne.n	8006c96 <HAL_TIM_PWM_Start_IT+0xfa>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c94:	e003      	b.n	8006c9e <HAL_TIM_PWM_Start_IT+0x102>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b0c      	cmp	r3, #12
 8006ca2:	d841      	bhi.n	8006d28 <HAL_TIM_PWM_Start_IT+0x18c>
 8006ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <HAL_TIM_PWM_Start_IT+0x110>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006ce1 	.word	0x08006ce1
 8006cb0:	08006d29 	.word	0x08006d29
 8006cb4:	08006d29 	.word	0x08006d29
 8006cb8:	08006d29 	.word	0x08006d29
 8006cbc:	08006cf3 	.word	0x08006cf3
 8006cc0:	08006d29 	.word	0x08006d29
 8006cc4:	08006d29 	.word	0x08006d29
 8006cc8:	08006d29 	.word	0x08006d29
 8006ccc:	08006d05 	.word	0x08006d05
 8006cd0:	08006d29 	.word	0x08006d29
 8006cd4:	08006d29 	.word	0x08006d29
 8006cd8:	08006d29 	.word	0x08006d29
 8006cdc:	08006d17 	.word	0x08006d17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0202 	orr.w	r2, r2, #2
 8006cee:	60da      	str	r2, [r3, #12]
      break;
 8006cf0:	e01d      	b.n	8006d2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0204 	orr.w	r2, r2, #4
 8006d00:	60da      	str	r2, [r3, #12]
      break;
 8006d02:	e014      	b.n	8006d2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0208 	orr.w	r2, r2, #8
 8006d12:	60da      	str	r2, [r3, #12]
      break;
 8006d14:	e00b      	b.n	8006d2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0210 	orr.w	r2, r2, #16
 8006d24:	60da      	str	r2, [r3, #12]
      break;
 8006d26:	e002      	b.n	8006d2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d179      	bne.n	8006e28 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f001 fc9d 	bl	800867c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a3b      	ldr	r2, [pc, #236]	@ (8006e34 <HAL_TIM_PWM_Start_IT+0x298>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d018      	beq.n	8006d7e <HAL_TIM_PWM_Start_IT+0x1e2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a39      	ldr	r2, [pc, #228]	@ (8006e38 <HAL_TIM_PWM_Start_IT+0x29c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <HAL_TIM_PWM_Start_IT+0x1e2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a38      	ldr	r2, [pc, #224]	@ (8006e3c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00e      	beq.n	8006d7e <HAL_TIM_PWM_Start_IT+0x1e2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a36      	ldr	r2, [pc, #216]	@ (8006e40 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d009      	beq.n	8006d7e <HAL_TIM_PWM_Start_IT+0x1e2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a35      	ldr	r2, [pc, #212]	@ (8006e44 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_TIM_PWM_Start_IT+0x1e2>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a33      	ldr	r2, [pc, #204]	@ (8006e48 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIM_PWM_Start_IT+0x1e6>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <HAL_TIM_PWM_Start_IT+0x1e8>
 8006d82:	2300      	movs	r3, #0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d007      	beq.n	8006d98 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d96:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a25      	ldr	r2, [pc, #148]	@ (8006e34 <HAL_TIM_PWM_Start_IT+0x298>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d022      	beq.n	8006de8 <HAL_TIM_PWM_Start_IT+0x24c>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006daa:	d01d      	beq.n	8006de8 <HAL_TIM_PWM_Start_IT+0x24c>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a26      	ldr	r2, [pc, #152]	@ (8006e4c <HAL_TIM_PWM_Start_IT+0x2b0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d018      	beq.n	8006de8 <HAL_TIM_PWM_Start_IT+0x24c>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a25      	ldr	r2, [pc, #148]	@ (8006e50 <HAL_TIM_PWM_Start_IT+0x2b4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <HAL_TIM_PWM_Start_IT+0x24c>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a23      	ldr	r2, [pc, #140]	@ (8006e54 <HAL_TIM_PWM_Start_IT+0x2b8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00e      	beq.n	8006de8 <HAL_TIM_PWM_Start_IT+0x24c>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1a      	ldr	r2, [pc, #104]	@ (8006e38 <HAL_TIM_PWM_Start_IT+0x29c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d009      	beq.n	8006de8 <HAL_TIM_PWM_Start_IT+0x24c>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a18      	ldr	r2, [pc, #96]	@ (8006e3c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d004      	beq.n	8006de8 <HAL_TIM_PWM_Start_IT+0x24c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a19      	ldr	r2, [pc, #100]	@ (8006e48 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d115      	bne.n	8006e14 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	4b1a      	ldr	r3, [pc, #104]	@ (8006e58 <HAL_TIM_PWM_Start_IT+0x2bc>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b06      	cmp	r3, #6
 8006df8:	d015      	beq.n	8006e26 <HAL_TIM_PWM_Start_IT+0x28a>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e00:	d011      	beq.n	8006e26 <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 0201 	orr.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e12:	e008      	b.n	8006e26 <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	e000      	b.n	8006e28 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e26:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40013400 	.word	0x40013400
 8006e3c:	40014000 	.word	0x40014000
 8006e40:	40014400 	.word	0x40014400
 8006e44:	40014800 	.word	0x40014800
 8006e48:	40015000 	.word	0x40015000
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40000c00 	.word	0x40000c00
 8006e58:	00010007 	.word	0x00010007

08006e5c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e04c      	b.n	8006f0a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d111      	bne.n	8006ea0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fc1f 	bl	80086c8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a1f      	ldr	r2, [pc, #124]	@ (8006f14 <HAL_TIM_OnePulse_Init+0xb8>)
 8006e96:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f000 ff68 	bl	8007d88 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0208 	bic.w	r2, r2, #8
 8006ec6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	08006f19 	.word	0x08006f19

08006f18 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f54:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d108      	bne.n	8006f6e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d105      	bne.n	8006f6e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f62:	7b7b      	ldrb	r3, [r7, #13]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d102      	bne.n	8006f6e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f68:	7b3b      	ldrb	r3, [r7, #12]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d001      	beq.n	8006f72 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e059      	b.n	8007026 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0202 	orr.w	r2, r2, #2
 8006fa0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0204 	orr.w	r2, r2, #4
 8006fb0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fb5e 	bl	800867c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	2104      	movs	r1, #4
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fb57 	bl	800867c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	@ (8007030 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d018      	beq.n	800700a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a15      	ldr	r2, [pc, #84]	@ (8007034 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d013      	beq.n	800700a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a14      	ldr	r2, [pc, #80]	@ (8007038 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00e      	beq.n	800700a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a12      	ldr	r2, [pc, #72]	@ (800703c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d009      	beq.n	800700a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a11      	ldr	r2, [pc, #68]	@ (8007040 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d004      	beq.n	800700a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a0f      	ldr	r2, [pc, #60]	@ (8007044 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d101      	bne.n	800700e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800700e:	2300      	movs	r3, #0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007022:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40012c00 	.word	0x40012c00
 8007034:	40013400 	.word	0x40013400
 8007038:	40014000 	.word	0x40014000
 800703c:	40014400 	.word	0x40014400
 8007040:	40014800 	.word	0x40014800
 8007044:	40015000 	.word	0x40015000

08007048 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e0a2      	b.n	80071a2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d111      	bne.n	800708c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fb29 	bl	80086c8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a4a      	ldr	r2, [pc, #296]	@ (80071ac <HAL_TIM_Encoder_Init+0x164>)
 8007082:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6812      	ldr	r2, [r2, #0]
 800709e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80070a2:	f023 0307 	bic.w	r3, r3, #7
 80070a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f000 fe68 	bl	8007d88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070e0:	f023 0303 	bic.w	r3, r3, #3
 80070e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	4313      	orrs	r3, r2
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80070fe:	f023 030c 	bic.w	r3, r3, #12
 8007102:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800710a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800710e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	4313      	orrs	r3, r2
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	011a      	lsls	r2, r3, #4
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	031b      	lsls	r3, r3, #12
 800712e:	4313      	orrs	r3, r2
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800713c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007144:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	4313      	orrs	r3, r2
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	08003365 	.word	0x08003365

080071b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d110      	bne.n	8007202 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d102      	bne.n	80071ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80071e6:	7b7b      	ldrb	r3, [r7, #13]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d001      	beq.n	80071f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e069      	b.n	80072c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007200:	e031      	b.n	8007266 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b04      	cmp	r3, #4
 8007206:	d110      	bne.n	800722a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d102      	bne.n	8007214 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800720e:	7b3b      	ldrb	r3, [r7, #12]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d001      	beq.n	8007218 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e055      	b.n	80072c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007228:	e01d      	b.n	8007266 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d108      	bne.n	8007242 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d105      	bne.n	8007242 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007236:	7b7b      	ldrb	r3, [r7, #13]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d102      	bne.n	8007242 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800723c:	7b3b      	ldrb	r3, [r7, #12]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d001      	beq.n	8007246 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e03e      	b.n	80072c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2202      	movs	r2, #2
 8007252:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <HAL_TIM_Encoder_Start+0xc4>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b04      	cmp	r3, #4
 8007270:	d008      	beq.n	8007284 <HAL_TIM_Encoder_Start+0xd4>
 8007272:	e00f      	b.n	8007294 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2201      	movs	r2, #1
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f001 f9fd 	bl	800867c <TIM_CCxChannelCmd>
      break;
 8007282:	e016      	b.n	80072b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2201      	movs	r2, #1
 800728a:	2104      	movs	r1, #4
 800728c:	4618      	mov	r0, r3
 800728e:	f001 f9f5 	bl	800867c <TIM_CCxChannelCmd>
      break;
 8007292:	e00e      	b.n	80072b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2201      	movs	r2, #1
 800729a:	2100      	movs	r1, #0
 800729c:	4618      	mov	r0, r3
 800729e:	f001 f9ed 	bl	800867c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2201      	movs	r2, #1
 80072a8:	2104      	movs	r1, #4
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 f9e6 	bl	800867c <TIM_CCxChannelCmd>
      break;
 80072b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d026      	beq.n	800733c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d021      	beq.n	800733c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0202 	mvn.w	r2, #2
 8007300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
 8007320:	e009      	b.n	8007336 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d026      	beq.n	8007394 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d021      	beq.n	8007394 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0204 	mvn.w	r2, #4
 8007358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
 8007378:	e009      	b.n	800738e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b00      	cmp	r3, #0
 800739c:	d026      	beq.n	80073ec <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d021      	beq.n	80073ec <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0208 	mvn.w	r2, #8
 80073b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2204      	movs	r2, #4
 80073b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f003 0303 	and.w	r3, r3, #3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
 80073d0:	e009      	b.n	80073e6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f003 0310 	and.w	r3, r3, #16
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d026      	beq.n	8007444 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d021      	beq.n	8007444 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0210 	mvn.w	r2, #16
 8007408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2208      	movs	r2, #8
 800740e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
 8007428:	e009      	b.n	800743e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00e      	beq.n	800746c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d009      	beq.n	800746c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0201 	mvn.w	r2, #1
 8007460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007472:	2b00      	cmp	r3, #0
 8007474:	d104      	bne.n	8007480 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00e      	beq.n	800749e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00e      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80074ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00e      	beq.n	8007516 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d009      	beq.n	8007516 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f06f 0220 	mvn.w	r2, #32
 800750a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00e      	beq.n	800753e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00e      	beq.n	8007566 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d009      	beq.n	8007566 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800755a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00e      	beq.n	800758e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00e      	beq.n	80075b6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80075aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075b6:	bf00      	nop
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075da:	2302      	movs	r3, #2
 80075dc:	e0ff      	b.n	80077de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b14      	cmp	r3, #20
 80075ea:	f200 80f0 	bhi.w	80077ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075ee:	a201      	add	r2, pc, #4	@ (adr r2, 80075f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	08007649 	.word	0x08007649
 80075f8:	080077cf 	.word	0x080077cf
 80075fc:	080077cf 	.word	0x080077cf
 8007600:	080077cf 	.word	0x080077cf
 8007604:	08007689 	.word	0x08007689
 8007608:	080077cf 	.word	0x080077cf
 800760c:	080077cf 	.word	0x080077cf
 8007610:	080077cf 	.word	0x080077cf
 8007614:	080076cb 	.word	0x080076cb
 8007618:	080077cf 	.word	0x080077cf
 800761c:	080077cf 	.word	0x080077cf
 8007620:	080077cf 	.word	0x080077cf
 8007624:	0800770b 	.word	0x0800770b
 8007628:	080077cf 	.word	0x080077cf
 800762c:	080077cf 	.word	0x080077cf
 8007630:	080077cf 	.word	0x080077cf
 8007634:	0800774d 	.word	0x0800774d
 8007638:	080077cf 	.word	0x080077cf
 800763c:	080077cf 	.word	0x080077cf
 8007640:	080077cf 	.word	0x080077cf
 8007644:	0800778d 	.word	0x0800778d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68b9      	ldr	r1, [r7, #8]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fc4e 	bl	8007ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0208 	orr.w	r2, r2, #8
 8007662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699a      	ldr	r2, [r3, #24]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0204 	bic.w	r2, r2, #4
 8007672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6999      	ldr	r1, [r3, #24]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	691a      	ldr	r2, [r3, #16]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	619a      	str	r2, [r3, #24]
      break;
 8007686:	e0a5      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fcc8 	bl	8008024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699a      	ldr	r2, [r3, #24]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6999      	ldr	r1, [r3, #24]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	021a      	lsls	r2, r3, #8
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	619a      	str	r2, [r3, #24]
      break;
 80076c8:	e084      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fd3b 	bl	800814c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69da      	ldr	r2, [r3, #28]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0208 	orr.w	r2, r2, #8
 80076e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69da      	ldr	r2, [r3, #28]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0204 	bic.w	r2, r2, #4
 80076f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69d9      	ldr	r1, [r3, #28]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	61da      	str	r2, [r3, #28]
      break;
 8007708:	e064      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fdad 	bl	8008270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69da      	ldr	r2, [r3, #28]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69da      	ldr	r2, [r3, #28]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	69d9      	ldr	r1, [r3, #28]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	021a      	lsls	r2, r3, #8
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	61da      	str	r2, [r3, #28]
      break;
 800774a:	e043      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fe20 	bl	8008398 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0208 	orr.w	r2, r2, #8
 8007766:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0204 	bic.w	r2, r2, #4
 8007776:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691a      	ldr	r2, [r3, #16]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800778a:	e023      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fe6a 	bl	800846c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	021a      	lsls	r2, r3, #8
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80077cc:	e002      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75fb      	strb	r3, [r7, #23]
      break;
 80077d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop

080077e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_TIM_ConfigClockSource+0x1c>
 8007800:	2302      	movs	r3, #2
 8007802:	e0f6      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x20a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007822:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800782e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a6f      	ldr	r2, [pc, #444]	@ (80079fc <HAL_TIM_ConfigClockSource+0x214>)
 800783e:	4293      	cmp	r3, r2
 8007840:	f000 80c1 	beq.w	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007844:	4a6d      	ldr	r2, [pc, #436]	@ (80079fc <HAL_TIM_ConfigClockSource+0x214>)
 8007846:	4293      	cmp	r3, r2
 8007848:	f200 80c6 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800784c:	4a6c      	ldr	r2, [pc, #432]	@ (8007a00 <HAL_TIM_ConfigClockSource+0x218>)
 800784e:	4293      	cmp	r3, r2
 8007850:	f000 80b9 	beq.w	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007854:	4a6a      	ldr	r2, [pc, #424]	@ (8007a00 <HAL_TIM_ConfigClockSource+0x218>)
 8007856:	4293      	cmp	r3, r2
 8007858:	f200 80be 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800785c:	4a69      	ldr	r2, [pc, #420]	@ (8007a04 <HAL_TIM_ConfigClockSource+0x21c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	f000 80b1 	beq.w	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007864:	4a67      	ldr	r2, [pc, #412]	@ (8007a04 <HAL_TIM_ConfigClockSource+0x21c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	f200 80b6 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800786c:	4a66      	ldr	r2, [pc, #408]	@ (8007a08 <HAL_TIM_ConfigClockSource+0x220>)
 800786e:	4293      	cmp	r3, r2
 8007870:	f000 80a9 	beq.w	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007874:	4a64      	ldr	r2, [pc, #400]	@ (8007a08 <HAL_TIM_ConfigClockSource+0x220>)
 8007876:	4293      	cmp	r3, r2
 8007878:	f200 80ae 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800787c:	4a63      	ldr	r2, [pc, #396]	@ (8007a0c <HAL_TIM_ConfigClockSource+0x224>)
 800787e:	4293      	cmp	r3, r2
 8007880:	f000 80a1 	beq.w	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007884:	4a61      	ldr	r2, [pc, #388]	@ (8007a0c <HAL_TIM_ConfigClockSource+0x224>)
 8007886:	4293      	cmp	r3, r2
 8007888:	f200 80a6 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800788c:	4a60      	ldr	r2, [pc, #384]	@ (8007a10 <HAL_TIM_ConfigClockSource+0x228>)
 800788e:	4293      	cmp	r3, r2
 8007890:	f000 8099 	beq.w	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007894:	4a5e      	ldr	r2, [pc, #376]	@ (8007a10 <HAL_TIM_ConfigClockSource+0x228>)
 8007896:	4293      	cmp	r3, r2
 8007898:	f200 809e 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800789c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078a0:	f000 8091 	beq.w	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 80078a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078a8:	f200 8096 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80078ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078b0:	f000 8089 	beq.w	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 80078b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078b8:	f200 808e 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80078bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078c0:	d03e      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0x158>
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078c6:	f200 8087 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80078ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ce:	f000 8086 	beq.w	80079de <HAL_TIM_ConfigClockSource+0x1f6>
 80078d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d6:	d87f      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80078d8:	2b70      	cmp	r3, #112	@ 0x70
 80078da:	d01a      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0x12a>
 80078dc:	2b70      	cmp	r3, #112	@ 0x70
 80078de:	d87b      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80078e0:	2b60      	cmp	r3, #96	@ 0x60
 80078e2:	d050      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x19e>
 80078e4:	2b60      	cmp	r3, #96	@ 0x60
 80078e6:	d877      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80078e8:	2b50      	cmp	r3, #80	@ 0x50
 80078ea:	d03c      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0x17e>
 80078ec:	2b50      	cmp	r3, #80	@ 0x50
 80078ee:	d873      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80078f0:	2b40      	cmp	r3, #64	@ 0x40
 80078f2:	d058      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x1be>
 80078f4:	2b40      	cmp	r3, #64	@ 0x40
 80078f6:	d86f      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80078f8:	2b30      	cmp	r3, #48	@ 0x30
 80078fa:	d064      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 80078fc:	2b30      	cmp	r3, #48	@ 0x30
 80078fe:	d86b      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007900:	2b20      	cmp	r3, #32
 8007902:	d060      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007904:	2b20      	cmp	r3, #32
 8007906:	d867      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d05c      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 800790c:	2b10      	cmp	r3, #16
 800790e:	d05a      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007910:	e062      	b.n	80079d8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007922:	f000 fe8b 	bl	800863c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	609a      	str	r2, [r3, #8]
      break;
 800793e:	e04f      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007950:	f000 fe74 	bl	800863c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007962:	609a      	str	r2, [r3, #8]
      break;
 8007964:	e03c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007972:	461a      	mov	r2, r3
 8007974:	f000 fde6 	bl	8008544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2150      	movs	r1, #80	@ 0x50
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fe3f 	bl	8008602 <TIM_ITRx_SetConfig>
      break;
 8007984:	e02c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007992:	461a      	mov	r2, r3
 8007994:	f000 fe05 	bl	80085a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2160      	movs	r1, #96	@ 0x60
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fe2f 	bl	8008602 <TIM_ITRx_SetConfig>
      break;
 80079a4:	e01c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b2:	461a      	mov	r2, r3
 80079b4:	f000 fdc6 	bl	8008544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2140      	movs	r1, #64	@ 0x40
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fe1f 	bl	8008602 <TIM_ITRx_SetConfig>
      break;
 80079c4:	e00c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f000 fe16 	bl	8008602 <TIM_ITRx_SetConfig>
      break;
 80079d6:	e003      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
      break;
 80079dc:	e000      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80079de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	00100070 	.word	0x00100070
 8007a00:	00100060 	.word	0x00100060
 8007a04:	00100050 	.word	0x00100050
 8007a08:	00100040 	.word	0x00100040
 8007a0c:	00100030 	.word	0x00100030
 8007a10:	00100020 	.word	0x00100020

08007a14 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e14a      	b.n	8007d7a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	f040 80dd 	bne.w	8007cac <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	2b1f      	cmp	r3, #31
 8007af6:	f200 80d6 	bhi.w	8007ca6 <HAL_TIM_RegisterCallback+0x1de>
 8007afa:	a201      	add	r2, pc, #4	@ (adr r2, 8007b00 <HAL_TIM_RegisterCallback+0x38>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b81 	.word	0x08007b81
 8007b04:	08007b89 	.word	0x08007b89
 8007b08:	08007b91 	.word	0x08007b91
 8007b0c:	08007b99 	.word	0x08007b99
 8007b10:	08007ba1 	.word	0x08007ba1
 8007b14:	08007ba9 	.word	0x08007ba9
 8007b18:	08007bb1 	.word	0x08007bb1
 8007b1c:	08007bb9 	.word	0x08007bb9
 8007b20:	08007bc1 	.word	0x08007bc1
 8007b24:	08007bc9 	.word	0x08007bc9
 8007b28:	08007bd1 	.word	0x08007bd1
 8007b2c:	08007bd9 	.word	0x08007bd9
 8007b30:	08007be1 	.word	0x08007be1
 8007b34:	08007be9 	.word	0x08007be9
 8007b38:	08007bf3 	.word	0x08007bf3
 8007b3c:	08007bfd 	.word	0x08007bfd
 8007b40:	08007c07 	.word	0x08007c07
 8007b44:	08007c11 	.word	0x08007c11
 8007b48:	08007c1b 	.word	0x08007c1b
 8007b4c:	08007c25 	.word	0x08007c25
 8007b50:	08007c2f 	.word	0x08007c2f
 8007b54:	08007c39 	.word	0x08007c39
 8007b58:	08007c43 	.word	0x08007c43
 8007b5c:	08007c4d 	.word	0x08007c4d
 8007b60:	08007c57 	.word	0x08007c57
 8007b64:	08007c61 	.word	0x08007c61
 8007b68:	08007c6b 	.word	0x08007c6b
 8007b6c:	08007c75 	.word	0x08007c75
 8007b70:	08007c7f 	.word	0x08007c7f
 8007b74:	08007c89 	.word	0x08007c89
 8007b78:	08007c93 	.word	0x08007c93
 8007b7c:	08007c9d 	.word	0x08007c9d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007b86:	e0f7      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007b8e:	e0f3      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007b96:	e0ef      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007b9e:	e0eb      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007ba6:	e0e7      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007bae:	e0e3      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007bb6:	e0df      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007bbe:	e0db      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007bc6:	e0d7      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007bce:	e0d3      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007bd6:	e0cf      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007bde:	e0cb      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007be6:	e0c7      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007bf0:	e0c2      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007bfa:	e0bd      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007c04:	e0b8      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007c0e:	e0b3      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007c18:	e0ae      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007c22:	e0a9      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007c2c:	e0a4      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007c36:	e09f      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007c40:	e09a      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007c4a:	e095      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007c54:	e090      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007c5e:	e08b      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007c68:	e086      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007c72:	e081      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007c7c:	e07c      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007c86:	e077      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007c90:	e072      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007c9a:	e06d      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007ca4:	e068      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]
        break;
 8007caa:	e065      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d15d      	bne.n	8007d74 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	2b0d      	cmp	r3, #13
 8007cbc:	d857      	bhi.n	8007d6e <HAL_TIM_RegisterCallback+0x2a6>
 8007cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc4 <HAL_TIM_RegisterCallback+0x1fc>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007cfd 	.word	0x08007cfd
 8007cc8:	08007d05 	.word	0x08007d05
 8007ccc:	08007d0d 	.word	0x08007d0d
 8007cd0:	08007d15 	.word	0x08007d15
 8007cd4:	08007d1d 	.word	0x08007d1d
 8007cd8:	08007d25 	.word	0x08007d25
 8007cdc:	08007d2d 	.word	0x08007d2d
 8007ce0:	08007d35 	.word	0x08007d35
 8007ce4:	08007d3d 	.word	0x08007d3d
 8007ce8:	08007d45 	.word	0x08007d45
 8007cec:	08007d4d 	.word	0x08007d4d
 8007cf0:	08007d55 	.word	0x08007d55
 8007cf4:	08007d5d 	.word	0x08007d5d
 8007cf8:	08007d65 	.word	0x08007d65
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007d02:	e039      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007d0a:	e035      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007d12:	e031      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007d1a:	e02d      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007d22:	e029      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007d2a:	e025      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007d32:	e021      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007d3a:	e01d      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007d42:	e019      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007d4a:	e015      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007d52:	e011      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007d5a:	e00d      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007d62:	e009      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007d6c:	e004      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]
        break;
 8007d72:	e001      	b.n	8007d78 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop

08007d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a4c      	ldr	r2, [pc, #304]	@ (8007ecc <TIM_Base_SetConfig+0x144>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d017      	beq.n	8007dd0 <TIM_Base_SetConfig+0x48>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da6:	d013      	beq.n	8007dd0 <TIM_Base_SetConfig+0x48>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a49      	ldr	r2, [pc, #292]	@ (8007ed0 <TIM_Base_SetConfig+0x148>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00f      	beq.n	8007dd0 <TIM_Base_SetConfig+0x48>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a48      	ldr	r2, [pc, #288]	@ (8007ed4 <TIM_Base_SetConfig+0x14c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00b      	beq.n	8007dd0 <TIM_Base_SetConfig+0x48>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a47      	ldr	r2, [pc, #284]	@ (8007ed8 <TIM_Base_SetConfig+0x150>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d007      	beq.n	8007dd0 <TIM_Base_SetConfig+0x48>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a46      	ldr	r2, [pc, #280]	@ (8007edc <TIM_Base_SetConfig+0x154>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_Base_SetConfig+0x48>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a45      	ldr	r2, [pc, #276]	@ (8007ee0 <TIM_Base_SetConfig+0x158>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d108      	bne.n	8007de2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a39      	ldr	r2, [pc, #228]	@ (8007ecc <TIM_Base_SetConfig+0x144>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d023      	beq.n	8007e32 <TIM_Base_SetConfig+0xaa>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df0:	d01f      	beq.n	8007e32 <TIM_Base_SetConfig+0xaa>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a36      	ldr	r2, [pc, #216]	@ (8007ed0 <TIM_Base_SetConfig+0x148>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d01b      	beq.n	8007e32 <TIM_Base_SetConfig+0xaa>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a35      	ldr	r2, [pc, #212]	@ (8007ed4 <TIM_Base_SetConfig+0x14c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d017      	beq.n	8007e32 <TIM_Base_SetConfig+0xaa>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a34      	ldr	r2, [pc, #208]	@ (8007ed8 <TIM_Base_SetConfig+0x150>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d013      	beq.n	8007e32 <TIM_Base_SetConfig+0xaa>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a33      	ldr	r2, [pc, #204]	@ (8007edc <TIM_Base_SetConfig+0x154>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00f      	beq.n	8007e32 <TIM_Base_SetConfig+0xaa>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a33      	ldr	r2, [pc, #204]	@ (8007ee4 <TIM_Base_SetConfig+0x15c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00b      	beq.n	8007e32 <TIM_Base_SetConfig+0xaa>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a32      	ldr	r2, [pc, #200]	@ (8007ee8 <TIM_Base_SetConfig+0x160>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d007      	beq.n	8007e32 <TIM_Base_SetConfig+0xaa>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a31      	ldr	r2, [pc, #196]	@ (8007eec <TIM_Base_SetConfig+0x164>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <TIM_Base_SetConfig+0xaa>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8007ee0 <TIM_Base_SetConfig+0x158>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d108      	bne.n	8007e44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a18      	ldr	r2, [pc, #96]	@ (8007ecc <TIM_Base_SetConfig+0x144>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d013      	beq.n	8007e98 <TIM_Base_SetConfig+0x110>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a1a      	ldr	r2, [pc, #104]	@ (8007edc <TIM_Base_SetConfig+0x154>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00f      	beq.n	8007e98 <TIM_Base_SetConfig+0x110>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8007ee4 <TIM_Base_SetConfig+0x15c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00b      	beq.n	8007e98 <TIM_Base_SetConfig+0x110>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a19      	ldr	r2, [pc, #100]	@ (8007ee8 <TIM_Base_SetConfig+0x160>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d007      	beq.n	8007e98 <TIM_Base_SetConfig+0x110>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a18      	ldr	r2, [pc, #96]	@ (8007eec <TIM_Base_SetConfig+0x164>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d003      	beq.n	8007e98 <TIM_Base_SetConfig+0x110>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a13      	ldr	r2, [pc, #76]	@ (8007ee0 <TIM_Base_SetConfig+0x158>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d103      	bne.n	8007ea0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d105      	bne.n	8007ebe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f023 0201 	bic.w	r2, r3, #1
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	611a      	str	r2, [r3, #16]
  }
}
 8007ebe:	bf00      	nop
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	40012c00 	.word	0x40012c00
 8007ed0:	40000400 	.word	0x40000400
 8007ed4:	40000800 	.word	0x40000800
 8007ed8:	40000c00 	.word	0x40000c00
 8007edc:	40013400 	.word	0x40013400
 8007ee0:	40015000 	.word	0x40015000
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800

08007ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	f023 0201 	bic.w	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0303 	bic.w	r3, r3, #3
 8007f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f023 0302 	bic.w	r3, r3, #2
 8007f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a30      	ldr	r2, [pc, #192]	@ (800800c <TIM_OC1_SetConfig+0x11c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d013      	beq.n	8007f78 <TIM_OC1_SetConfig+0x88>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a2f      	ldr	r2, [pc, #188]	@ (8008010 <TIM_OC1_SetConfig+0x120>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d00f      	beq.n	8007f78 <TIM_OC1_SetConfig+0x88>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8008014 <TIM_OC1_SetConfig+0x124>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00b      	beq.n	8007f78 <TIM_OC1_SetConfig+0x88>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a2d      	ldr	r2, [pc, #180]	@ (8008018 <TIM_OC1_SetConfig+0x128>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d007      	beq.n	8007f78 <TIM_OC1_SetConfig+0x88>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800801c <TIM_OC1_SetConfig+0x12c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d003      	beq.n	8007f78 <TIM_OC1_SetConfig+0x88>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a2b      	ldr	r2, [pc, #172]	@ (8008020 <TIM_OC1_SetConfig+0x130>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d10c      	bne.n	8007f92 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f023 0308 	bic.w	r3, r3, #8
 8007f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f023 0304 	bic.w	r3, r3, #4
 8007f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a1d      	ldr	r2, [pc, #116]	@ (800800c <TIM_OC1_SetConfig+0x11c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d013      	beq.n	8007fc2 <TIM_OC1_SetConfig+0xd2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008010 <TIM_OC1_SetConfig+0x120>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00f      	beq.n	8007fc2 <TIM_OC1_SetConfig+0xd2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8008014 <TIM_OC1_SetConfig+0x124>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00b      	beq.n	8007fc2 <TIM_OC1_SetConfig+0xd2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a1a      	ldr	r2, [pc, #104]	@ (8008018 <TIM_OC1_SetConfig+0x128>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d007      	beq.n	8007fc2 <TIM_OC1_SetConfig+0xd2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a19      	ldr	r2, [pc, #100]	@ (800801c <TIM_OC1_SetConfig+0x12c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d003      	beq.n	8007fc2 <TIM_OC1_SetConfig+0xd2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a18      	ldr	r2, [pc, #96]	@ (8008020 <TIM_OC1_SetConfig+0x130>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d111      	bne.n	8007fe6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	621a      	str	r2, [r3, #32]
}
 8008000:	bf00      	nop
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	40012c00 	.word	0x40012c00
 8008010:	40013400 	.word	0x40013400
 8008014:	40014000 	.word	0x40014000
 8008018:	40014400 	.word	0x40014400
 800801c:	40014800 	.word	0x40014800
 8008020:	40015000 	.word	0x40015000

08008024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	f023 0210 	bic.w	r2, r3, #16
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800805e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	4313      	orrs	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f023 0320 	bic.w	r3, r3, #32
 8008072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a2c      	ldr	r2, [pc, #176]	@ (8008134 <TIM_OC2_SetConfig+0x110>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d007      	beq.n	8008098 <TIM_OC2_SetConfig+0x74>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a2b      	ldr	r2, [pc, #172]	@ (8008138 <TIM_OC2_SetConfig+0x114>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC2_SetConfig+0x74>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a2a      	ldr	r2, [pc, #168]	@ (800813c <TIM_OC2_SetConfig+0x118>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d10d      	bne.n	80080b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800809e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008134 <TIM_OC2_SetConfig+0x110>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d013      	beq.n	80080e4 <TIM_OC2_SetConfig+0xc0>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a1e      	ldr	r2, [pc, #120]	@ (8008138 <TIM_OC2_SetConfig+0x114>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d00f      	beq.n	80080e4 <TIM_OC2_SetConfig+0xc0>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008140 <TIM_OC2_SetConfig+0x11c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00b      	beq.n	80080e4 <TIM_OC2_SetConfig+0xc0>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a1d      	ldr	r2, [pc, #116]	@ (8008144 <TIM_OC2_SetConfig+0x120>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d007      	beq.n	80080e4 <TIM_OC2_SetConfig+0xc0>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008148 <TIM_OC2_SetConfig+0x124>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d003      	beq.n	80080e4 <TIM_OC2_SetConfig+0xc0>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a17      	ldr	r2, [pc, #92]	@ (800813c <TIM_OC2_SetConfig+0x118>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d113      	bne.n	800810c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40012c00 	.word	0x40012c00
 8008138:	40013400 	.word	0x40013400
 800813c:	40015000 	.word	0x40015000
 8008140:	40014000 	.word	0x40014000
 8008144:	40014400 	.word	0x40014400
 8008148:	40014800 	.word	0x40014800

0800814c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800817a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 0303 	bic.w	r3, r3, #3
 8008186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4313      	orrs	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a2b      	ldr	r2, [pc, #172]	@ (8008258 <TIM_OC3_SetConfig+0x10c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d007      	beq.n	80081be <TIM_OC3_SetConfig+0x72>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a2a      	ldr	r2, [pc, #168]	@ (800825c <TIM_OC3_SetConfig+0x110>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d003      	beq.n	80081be <TIM_OC3_SetConfig+0x72>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a29      	ldr	r2, [pc, #164]	@ (8008260 <TIM_OC3_SetConfig+0x114>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d10d      	bne.n	80081da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a1e      	ldr	r2, [pc, #120]	@ (8008258 <TIM_OC3_SetConfig+0x10c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d013      	beq.n	800820a <TIM_OC3_SetConfig+0xbe>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a1d      	ldr	r2, [pc, #116]	@ (800825c <TIM_OC3_SetConfig+0x110>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00f      	beq.n	800820a <TIM_OC3_SetConfig+0xbe>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008264 <TIM_OC3_SetConfig+0x118>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00b      	beq.n	800820a <TIM_OC3_SetConfig+0xbe>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008268 <TIM_OC3_SetConfig+0x11c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d007      	beq.n	800820a <TIM_OC3_SetConfig+0xbe>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a1b      	ldr	r2, [pc, #108]	@ (800826c <TIM_OC3_SetConfig+0x120>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d003      	beq.n	800820a <TIM_OC3_SetConfig+0xbe>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a16      	ldr	r2, [pc, #88]	@ (8008260 <TIM_OC3_SetConfig+0x114>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d113      	bne.n	8008232 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	011b      	lsls	r3, r3, #4
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	4313      	orrs	r3, r2
 8008224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	621a      	str	r2, [r3, #32]
}
 800824c:	bf00      	nop
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40012c00 	.word	0x40012c00
 800825c:	40013400 	.word	0x40013400
 8008260:	40015000 	.word	0x40015000
 8008264:	40014000 	.word	0x40014000
 8008268:	40014400 	.word	0x40014400
 800826c:	40014800 	.word	0x40014800

08008270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800829e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	031b      	lsls	r3, r3, #12
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008380 <TIM_OC4_SetConfig+0x110>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d007      	beq.n	80082e4 <TIM_OC4_SetConfig+0x74>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a2b      	ldr	r2, [pc, #172]	@ (8008384 <TIM_OC4_SetConfig+0x114>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d003      	beq.n	80082e4 <TIM_OC4_SetConfig+0x74>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a2a      	ldr	r2, [pc, #168]	@ (8008388 <TIM_OC4_SetConfig+0x118>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d10d      	bne.n	8008300 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	031b      	lsls	r3, r3, #12
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a1f      	ldr	r2, [pc, #124]	@ (8008380 <TIM_OC4_SetConfig+0x110>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d013      	beq.n	8008330 <TIM_OC4_SetConfig+0xc0>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a1e      	ldr	r2, [pc, #120]	@ (8008384 <TIM_OC4_SetConfig+0x114>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00f      	beq.n	8008330 <TIM_OC4_SetConfig+0xc0>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a1e      	ldr	r2, [pc, #120]	@ (800838c <TIM_OC4_SetConfig+0x11c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d00b      	beq.n	8008330 <TIM_OC4_SetConfig+0xc0>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a1d      	ldr	r2, [pc, #116]	@ (8008390 <TIM_OC4_SetConfig+0x120>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d007      	beq.n	8008330 <TIM_OC4_SetConfig+0xc0>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a1c      	ldr	r2, [pc, #112]	@ (8008394 <TIM_OC4_SetConfig+0x124>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d003      	beq.n	8008330 <TIM_OC4_SetConfig+0xc0>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a17      	ldr	r2, [pc, #92]	@ (8008388 <TIM_OC4_SetConfig+0x118>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d113      	bne.n	8008358 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008336:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800833e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	019b      	lsls	r3, r3, #6
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	019b      	lsls	r3, r3, #6
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	4313      	orrs	r3, r2
 8008356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	621a      	str	r2, [r3, #32]
}
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40012c00 	.word	0x40012c00
 8008384:	40013400 	.word	0x40013400
 8008388:	40015000 	.word	0x40015000
 800838c:	40014000 	.word	0x40014000
 8008390:	40014400 	.word	0x40014400
 8008394:	40014800 	.word	0x40014800

08008398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80083dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	041b      	lsls	r3, r3, #16
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a19      	ldr	r2, [pc, #100]	@ (8008454 <TIM_OC5_SetConfig+0xbc>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <TIM_OC5_SetConfig+0x82>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a18      	ldr	r2, [pc, #96]	@ (8008458 <TIM_OC5_SetConfig+0xc0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00f      	beq.n	800841a <TIM_OC5_SetConfig+0x82>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a17      	ldr	r2, [pc, #92]	@ (800845c <TIM_OC5_SetConfig+0xc4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00b      	beq.n	800841a <TIM_OC5_SetConfig+0x82>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a16      	ldr	r2, [pc, #88]	@ (8008460 <TIM_OC5_SetConfig+0xc8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d007      	beq.n	800841a <TIM_OC5_SetConfig+0x82>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a15      	ldr	r2, [pc, #84]	@ (8008464 <TIM_OC5_SetConfig+0xcc>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_OC5_SetConfig+0x82>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a14      	ldr	r2, [pc, #80]	@ (8008468 <TIM_OC5_SetConfig+0xd0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d109      	bne.n	800842e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008420:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	021b      	lsls	r3, r3, #8
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	4313      	orrs	r3, r2
 800842c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	621a      	str	r2, [r3, #32]
}
 8008448:	bf00      	nop
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	40012c00 	.word	0x40012c00
 8008458:	40013400 	.word	0x40013400
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800
 8008468:	40015000 	.word	0x40015000

0800846c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800849a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800849e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	021b      	lsls	r3, r3, #8
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	051b      	lsls	r3, r3, #20
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4313      	orrs	r3, r2
 80084be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a1a      	ldr	r2, [pc, #104]	@ (800852c <TIM_OC6_SetConfig+0xc0>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d013      	beq.n	80084f0 <TIM_OC6_SetConfig+0x84>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a19      	ldr	r2, [pc, #100]	@ (8008530 <TIM_OC6_SetConfig+0xc4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d00f      	beq.n	80084f0 <TIM_OC6_SetConfig+0x84>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a18      	ldr	r2, [pc, #96]	@ (8008534 <TIM_OC6_SetConfig+0xc8>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d00b      	beq.n	80084f0 <TIM_OC6_SetConfig+0x84>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a17      	ldr	r2, [pc, #92]	@ (8008538 <TIM_OC6_SetConfig+0xcc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d007      	beq.n	80084f0 <TIM_OC6_SetConfig+0x84>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a16      	ldr	r2, [pc, #88]	@ (800853c <TIM_OC6_SetConfig+0xd0>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d003      	beq.n	80084f0 <TIM_OC6_SetConfig+0x84>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a15      	ldr	r2, [pc, #84]	@ (8008540 <TIM_OC6_SetConfig+0xd4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d109      	bne.n	8008504 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	029b      	lsls	r3, r3, #10
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	621a      	str	r2, [r3, #32]
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40012c00 	.word	0x40012c00
 8008530:	40013400 	.word	0x40013400
 8008534:	40014000 	.word	0x40014000
 8008538:	40014400 	.word	0x40014400
 800853c:	40014800 	.word	0x40014800
 8008540:	40015000 	.word	0x40015000

08008544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f023 0201 	bic.w	r2, r3, #1
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800856e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	4313      	orrs	r3, r2
 8008578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 030a 	bic.w	r3, r3, #10
 8008580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b087      	sub	sp, #28
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	f023 0210 	bic.w	r2, r3, #16
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	031b      	lsls	r3, r3, #12
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	621a      	str	r2, [r3, #32]
}
 80085f6:	bf00      	nop
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	f043 0307 	orr.w	r3, r3, #7
 8008628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	609a      	str	r2, [r3, #8]
}
 8008630:	bf00      	nop
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	021a      	lsls	r2, r3, #8
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	431a      	orrs	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4313      	orrs	r3, r2
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	609a      	str	r2, [r3, #8]
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f003 031f 	and.w	r3, r3, #31
 800868e:	2201      	movs	r2, #1
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a1a      	ldr	r2, [r3, #32]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	43db      	mvns	r3, r3
 800869e:	401a      	ands	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a1a      	ldr	r2, [r3, #32]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	fa01 f303 	lsl.w	r3, r1, r3
 80086b4:	431a      	orrs	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	621a      	str	r2, [r3, #32]
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
	...

080086c8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a26      	ldr	r2, [pc, #152]	@ (800876c <TIM_ResetCallback+0xa4>)
 80086d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a25      	ldr	r2, [pc, #148]	@ (8008770 <TIM_ResetCallback+0xa8>)
 80086dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a24      	ldr	r2, [pc, #144]	@ (8008774 <TIM_ResetCallback+0xac>)
 80086e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a23      	ldr	r2, [pc, #140]	@ (8008778 <TIM_ResetCallback+0xb0>)
 80086ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a22      	ldr	r2, [pc, #136]	@ (800877c <TIM_ResetCallback+0xb4>)
 80086f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a21      	ldr	r2, [pc, #132]	@ (8008780 <TIM_ResetCallback+0xb8>)
 80086fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a20      	ldr	r2, [pc, #128]	@ (8008784 <TIM_ResetCallback+0xbc>)
 8008704:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a1f      	ldr	r2, [pc, #124]	@ (8008788 <TIM_ResetCallback+0xc0>)
 800870c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a1e      	ldr	r2, [pc, #120]	@ (800878c <TIM_ResetCallback+0xc4>)
 8008714:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a1d      	ldr	r2, [pc, #116]	@ (8008790 <TIM_ResetCallback+0xc8>)
 800871c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a1c      	ldr	r2, [pc, #112]	@ (8008794 <TIM_ResetCallback+0xcc>)
 8008724:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a1b      	ldr	r2, [pc, #108]	@ (8008798 <TIM_ResetCallback+0xd0>)
 800872c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a1a      	ldr	r2, [pc, #104]	@ (800879c <TIM_ResetCallback+0xd4>)
 8008734:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a19      	ldr	r2, [pc, #100]	@ (80087a0 <TIM_ResetCallback+0xd8>)
 800873c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a18      	ldr	r2, [pc, #96]	@ (80087a4 <TIM_ResetCallback+0xdc>)
 8008744:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a17      	ldr	r2, [pc, #92]	@ (80087a8 <TIM_ResetCallback+0xe0>)
 800874c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a16      	ldr	r2, [pc, #88]	@ (80087ac <TIM_ResetCallback+0xe4>)
 8008754:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a15      	ldr	r2, [pc, #84]	@ (80087b0 <TIM_ResetCallback+0xe8>)
 800875c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	080031b5 	.word	0x080031b5
 8008770:	08007a15 	.word	0x08007a15
 8008774:	08007a8d 	.word	0x08007a8d
 8008778:	08007aa1 	.word	0x08007aa1
 800877c:	08007a3d 	.word	0x08007a3d
 8008780:	08007a51 	.word	0x08007a51
 8008784:	08007a29 	.word	0x08007a29
 8008788:	08007a65 	.word	0x08007a65
 800878c:	08007a79 	.word	0x08007a79
 8008790:	08007ab5 	.word	0x08007ab5
 8008794:	080088e1 	.word	0x080088e1
 8008798:	080088f5 	.word	0x080088f5
 800879c:	08008909 	.word	0x08008909
 80087a0:	0800891d 	.word	0x0800891d
 80087a4:	08008931 	.word	0x08008931
 80087a8:	08008945 	.word	0x08008945
 80087ac:	08008959 	.word	0x08008959
 80087b0:	0800896d 	.word	0x0800896d

080087b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d101      	bne.n	80087cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087c8:	2302      	movs	r3, #2
 80087ca:	e074      	b.n	80088b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a34      	ldr	r2, [pc, #208]	@ (80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d009      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a33      	ldr	r2, [pc, #204]	@ (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d004      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a31      	ldr	r2, [pc, #196]	@ (80088cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d108      	bne.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008810:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4313      	orrs	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a21      	ldr	r2, [pc, #132]	@ (80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d022      	beq.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800884c:	d01d      	beq.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a1f      	ldr	r2, [pc, #124]	@ (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d018      	beq.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1d      	ldr	r2, [pc, #116]	@ (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d013      	beq.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a1c      	ldr	r2, [pc, #112]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00e      	beq.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a15      	ldr	r2, [pc, #84]	@ (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d009      	beq.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a18      	ldr	r2, [pc, #96]	@ (80088dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d004      	beq.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a11      	ldr	r2, [pc, #68]	@ (80088cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d10c      	bne.n	80088a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	4313      	orrs	r3, r2
 800889a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40012c00 	.word	0x40012c00
 80088c8:	40013400 	.word	0x40013400
 80088cc:	40015000 	.word	0x40015000
 80088d0:	40000400 	.word	0x40000400
 80088d4:	40000800 	.word	0x40000800
 80088d8:	40000c00 	.word	0x40000c00
 80088dc:	40014000 	.word	0x40014000

080088e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e050      	b.n	8008a34 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008998:	2b00      	cmp	r3, #0
 800899a:	d114      	bne.n	80089c6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fe8d 	bl	80096c4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a21      	ldr	r2, [pc, #132]	@ (8008a3c <HAL_UART_Init+0xbc>)
 80089b8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2224      	movs	r2, #36	@ 0x24
 80089ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0201 	bic.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 f9ba 	bl	8009d60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 febb 	bl	8009768 <UART_SetConfig>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d101      	bne.n	80089fc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e01b      	b.n	8008a34 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0201 	orr.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fa39 	bl	8009ea4 <UART_CheckIdleState>
 8008a32:	4603      	mov	r3, r0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	08003561 	.word	0x08003561

08008a40 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d109      	bne.n	8008a6c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e09c      	b.n	8008ba6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	d16c      	bne.n	8008b50 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008a76:	7afb      	ldrb	r3, [r7, #11]
 8008a78:	2b0c      	cmp	r3, #12
 8008a7a:	d85e      	bhi.n	8008b3a <HAL_UART_RegisterCallback+0xfa>
 8008a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a84 <HAL_UART_RegisterCallback+0x44>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008ab9 	.word	0x08008ab9
 8008a88:	08008ac3 	.word	0x08008ac3
 8008a8c:	08008acd 	.word	0x08008acd
 8008a90:	08008ad7 	.word	0x08008ad7
 8008a94:	08008ae1 	.word	0x08008ae1
 8008a98:	08008aeb 	.word	0x08008aeb
 8008a9c:	08008af5 	.word	0x08008af5
 8008aa0:	08008aff 	.word	0x08008aff
 8008aa4:	08008b09 	.word	0x08008b09
 8008aa8:	08008b13 	.word	0x08008b13
 8008aac:	08008b1d 	.word	0x08008b1d
 8008ab0:	08008b27 	.word	0x08008b27
 8008ab4:	08008b31 	.word	0x08008b31
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008ac0:	e070      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008aca:	e06b      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008ad4:	e066      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008ade:	e061      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008ae8:	e05c      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008af2:	e057      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008afc:	e052      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008b06:	e04d      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008b10:	e048      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008b1a:	e043      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008b24:	e03e      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008b2e:	e039      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008b38:	e034      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]
        break;
 8008b4e:	e029      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d11a      	bne.n	8008b90 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008b5a:	7afb      	ldrb	r3, [r7, #11]
 8008b5c:	2b0b      	cmp	r3, #11
 8008b5e:	d002      	beq.n	8008b66 <HAL_UART_RegisterCallback+0x126>
 8008b60:	2b0c      	cmp	r3, #12
 8008b62:	d005      	beq.n	8008b70 <HAL_UART_RegisterCallback+0x130>
 8008b64:	e009      	b.n	8008b7a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008b6e:	e019      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008b78:	e014      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	75fb      	strb	r3, [r7, #23]
        break;
 8008b8e:	e009      	b.n	8008ba4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop

08008bb4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08a      	sub	sp, #40	@ 0x28
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	f040 80b5 	bne.w	8008d3a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <HAL_UART_Receive+0x28>
 8008bd6:	88fb      	ldrh	r3, [r7, #6]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e0ad      	b.n	8008d3c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2222      	movs	r2, #34	@ 0x22
 8008bec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bf6:	f7fa fec3 	bl	8003980 <HAL_GetTick>
 8008bfa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	88fa      	ldrh	r2, [r7, #6]
 8008c00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	88fa      	ldrh	r2, [r7, #6]
 8008c08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c14:	d10e      	bne.n	8008c34 <HAL_UART_Receive+0x80>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d105      	bne.n	8008c2a <HAL_UART_Receive+0x76>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008c24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c28:	e02d      	b.n	8008c86 <HAL_UART_Receive+0xd2>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	22ff      	movs	r2, #255	@ 0xff
 8008c2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c32:	e028      	b.n	8008c86 <HAL_UART_Receive+0xd2>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10d      	bne.n	8008c58 <HAL_UART_Receive+0xa4>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d104      	bne.n	8008c4e <HAL_UART_Receive+0x9a>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	22ff      	movs	r2, #255	@ 0xff
 8008c48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c4c:	e01b      	b.n	8008c86 <HAL_UART_Receive+0xd2>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	227f      	movs	r2, #127	@ 0x7f
 8008c52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c56:	e016      	b.n	8008c86 <HAL_UART_Receive+0xd2>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c60:	d10d      	bne.n	8008c7e <HAL_UART_Receive+0xca>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <HAL_UART_Receive+0xc0>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	227f      	movs	r2, #127	@ 0x7f
 8008c6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c72:	e008      	b.n	8008c86 <HAL_UART_Receive+0xd2>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	223f      	movs	r2, #63	@ 0x3f
 8008c78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c7c:	e003      	b.n	8008c86 <HAL_UART_Receive+0xd2>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c8c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c96:	d108      	bne.n	8008caa <HAL_UART_Receive+0xf6>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d104      	bne.n	8008caa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	61bb      	str	r3, [r7, #24]
 8008ca8:	e003      	b.n	8008cb2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008cb2:	e036      	b.n	8008d22 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2120      	movs	r1, #32
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f001 f99a 	bl	8009ff8 <UART_WaitOnFlagUntilTimeout>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e032      	b.n	8008d3c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10c      	bne.n	8008cf6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	8a7b      	ldrh	r3, [r7, #18]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	3302      	adds	r3, #2
 8008cf2:	61bb      	str	r3, [r7, #24]
 8008cf4:	e00c      	b.n	8008d10 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	8a7b      	ldrh	r3, [r7, #18]
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	4013      	ands	r3, r2
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1c2      	bne.n	8008cb4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	e000      	b.n	8008d3c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008d3a:	2302      	movs	r3, #2
  }
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08a      	sub	sp, #40	@ 0x28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d167      	bne.n	8008e2c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <HAL_UART_Transmit_DMA+0x24>
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e060      	b.n	8008e2e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	88fa      	ldrh	r2, [r7, #6]
 8008d76:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	88fa      	ldrh	r2, [r7, #6]
 8008d7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2221      	movs	r2, #33	@ 0x21
 8008d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d028      	beq.n	8008dec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d9e:	4a26      	ldr	r2, [pc, #152]	@ (8008e38 <HAL_UART_Transmit_DMA+0xf4>)
 8008da0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008da6:	4a25      	ldr	r2, [pc, #148]	@ (8008e3c <HAL_UART_Transmit_DMA+0xf8>)
 8008da8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008dae:	4a24      	ldr	r2, [pc, #144]	@ (8008e40 <HAL_UART_Transmit_DMA+0xfc>)
 8008db0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008db6:	2200      	movs	r2, #0
 8008db8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3328      	adds	r3, #40	@ 0x28
 8008dca:	461a      	mov	r2, r3
 8008dcc:	88fb      	ldrh	r3, [r7, #6]
 8008dce:	f7fc f89b 	bl	8004f08 <HAL_DMA_Start_IT>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d009      	beq.n	8008dec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2210      	movs	r2, #16
 8008ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e020      	b.n	8008e2e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2240      	movs	r2, #64	@ 0x40
 8008df2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3308      	adds	r3, #8
 8008dfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	613b      	str	r3, [r7, #16]
   return(result);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3308      	adds	r3, #8
 8008e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e14:	623a      	str	r2, [r7, #32]
 8008e16:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	69f9      	ldr	r1, [r7, #28]
 8008e1a:	6a3a      	ldr	r2, [r7, #32]
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e5      	bne.n	8008df4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	e000      	b.n	8008e2e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008e2c:	2302      	movs	r3, #2
  }
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3728      	adds	r7, #40	@ 0x28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	0800a36f 	.word	0x0800a36f
 8008e3c:	0800a40d 	.word	0x0800a40d
 8008e40:	0800a5a7 	.word	0x0800a5a7

08008e44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	@ 0x28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	d137      	bne.n	8008ecc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_UART_Receive_DMA+0x24>
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e030      	b.n	8008ece <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a18      	ldr	r2, [pc, #96]	@ (8008ed8 <HAL_UART_Receive_DMA+0x94>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d01f      	beq.n	8008ebc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d018      	beq.n	8008ebc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	e853 3f00 	ldrex	r3, [r3]
 8008e96:	613b      	str	r3, [r7, #16]
   return(result);
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	623b      	str	r3, [r7, #32]
 8008eaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	69f9      	ldr	r1, [r7, #28]
 8008eae:	6a3a      	ldr	r2, [r7, #32]
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e6      	bne.n	8008e8a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ebc:	88fb      	ldrh	r3, [r7, #6]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f001 f906 	bl	800a0d4 <UART_Start_Receive_DMA>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	e000      	b.n	8008ece <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ecc:	2302      	movs	r3, #2
  }
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3728      	adds	r7, #40	@ 0x28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	40008000 	.word	0x40008000

08008edc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b0ba      	sub	sp, #232	@ 0xe8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f06:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d11b      	bne.n	8008f50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f1c:	f003 0320 	and.w	r3, r3, #32
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d015      	beq.n	8008f50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f28:	f003 0320 	and.w	r3, r3, #32
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d105      	bne.n	8008f3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d009      	beq.n	8008f50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 82f3 	beq.w	800952c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	4798      	blx	r3
      }
      return;
 8008f4e:	e2ed      	b.n	800952c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 8129 	beq.w	80091ac <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f5e:	4b90      	ldr	r3, [pc, #576]	@ (80091a0 <HAL_UART_IRQHandler+0x2c4>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008f6a:	4b8e      	ldr	r3, [pc, #568]	@ (80091a4 <HAL_UART_IRQHandler+0x2c8>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 811c 	beq.w	80091ac <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d011      	beq.n	8008fa4 <HAL_UART_IRQHandler+0xc8>
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2201      	movs	r2, #1
 8008f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f9a:	f043 0201 	orr.w	r2, r3, #1
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d011      	beq.n	8008fd4 <HAL_UART_IRQHandler+0xf8>
 8008fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fca:	f043 0204 	orr.w	r2, r3, #4
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d011      	beq.n	8009004 <HAL_UART_IRQHandler+0x128>
 8008fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2204      	movs	r2, #4
 8008ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ffa:	f043 0202 	orr.w	r2, r3, #2
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d017      	beq.n	8009040 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009014:	f003 0320 	and.w	r3, r3, #32
 8009018:	2b00      	cmp	r3, #0
 800901a:	d105      	bne.n	8009028 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800901c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009020:	4b5f      	ldr	r3, [pc, #380]	@ (80091a0 <HAL_UART_IRQHandler+0x2c4>)
 8009022:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2208      	movs	r2, #8
 800902e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009036:	f043 0208 	orr.w	r2, r3, #8
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009048:	2b00      	cmp	r3, #0
 800904a:	d012      	beq.n	8009072 <HAL_UART_IRQHandler+0x196>
 800904c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009050:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00c      	beq.n	8009072 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009068:	f043 0220 	orr.w	r2, r3, #32
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 8259 	beq.w	8009530 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800907e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b00      	cmp	r3, #0
 8009088:	d013      	beq.n	80090b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800908a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d105      	bne.n	80090a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800909a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d005      	beq.n	80090d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d058      	beq.n	8009188 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 f8e3 	bl	800a2a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e6:	2b40      	cmp	r3, #64	@ 0x40
 80090e8:	d148      	bne.n	800917c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3308      	adds	r3, #8
 80090f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3308      	adds	r3, #8
 8009112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009116:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800911a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800912e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1d9      	bne.n	80090ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800913c:	2b00      	cmp	r3, #0
 800913e:	d017      	beq.n	8009170 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009146:	4a18      	ldr	r2, [pc, #96]	@ (80091a8 <HAL_UART_IRQHandler+0x2cc>)
 8009148:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009150:	4618      	mov	r0, r3
 8009152:	f7fb ffad 	bl	80050b0 <HAL_DMA_Abort_IT>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01f      	beq.n	800919c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800916a:	4610      	mov	r0, r2
 800916c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800916e:	e015      	b.n	800919c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917a:	e00f      	b.n	800919c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009186:	e009      	b.n	800919c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800919a:	e1c9      	b.n	8009530 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800919c:	bf00      	nop
    return;
 800919e:	e1c7      	b.n	8009530 <HAL_UART_IRQHandler+0x654>
 80091a0:	10000001 	.word	0x10000001
 80091a4:	04000120 	.word	0x04000120
 80091a8:	0800a62b 	.word	0x0800a62b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	f040 8157 	bne.w	8009464 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ba:	f003 0310 	and.w	r3, r3, #16
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8150 	beq.w	8009464 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c8:	f003 0310 	and.w	r3, r3, #16
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8149 	beq.w	8009464 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2210      	movs	r2, #16
 80091d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e4:	2b40      	cmp	r3, #64	@ 0x40
 80091e6:	f040 80bd 	bne.w	8009364 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8199 	beq.w	8009534 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009208:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800920c:	429a      	cmp	r2, r3
 800920e:	f080 8191 	bcs.w	8009534 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009218:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	f040 8087 	bne.w	800933e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800924c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800925a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800925e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009266:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009272:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1da      	bne.n	8009230 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3308      	adds	r3, #8
 8009280:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800928a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800928c:	f023 0301 	bic.w	r3, r3, #1
 8009290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3308      	adds	r3, #8
 800929a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800929e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e1      	bne.n	800927a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3308      	adds	r3, #8
 80092d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80092da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e3      	bne.n	80092b6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009304:	e853 3f00 	ldrex	r3, [r3]
 8009308:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800930a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800930c:	f023 0310 	bic.w	r3, r3, #16
 8009310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	461a      	mov	r2, r3
 800931a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800931e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009320:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009324:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800932c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e4      	bne.n	80092fc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009338:	4618      	mov	r0, r3
 800933a:	f7fb fe60 	bl	8004ffe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009356:	b292      	uxth	r2, r2
 8009358:	1a8a      	subs	r2, r1, r2
 800935a:	b292      	uxth	r2, r2
 800935c:	4611      	mov	r1, r2
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009362:	e0e7      	b.n	8009534 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009370:	b29b      	uxth	r3, r3
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800937e:	b29b      	uxth	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80d9 	beq.w	8009538 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8009386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 80d4 	beq.w	8009538 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800939e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80093b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093ba:	e841 2300 	strex	r3, r2, [r1]
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e4      	bne.n	8009390 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3308      	adds	r3, #8
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	623b      	str	r3, [r7, #32]
   return(result);
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093dc:	f023 0301 	bic.w	r3, r3, #1
 80093e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80093ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80093f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e1      	bne.n	80093c6 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	60fb      	str	r3, [r7, #12]
   return(result);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f023 0310 	bic.w	r3, r3, #16
 800942a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009438:	61fb      	str	r3, [r7, #28]
 800943a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	69b9      	ldr	r1, [r7, #24]
 800943e:	69fa      	ldr	r2, [r7, #28]
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	617b      	str	r3, [r7, #20]
   return(result);
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e4      	bne.n	8009416 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009458:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800945c:	4611      	mov	r1, r2
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009462:	e069      	b.n	8009538 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009468:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d010      	beq.n	8009492 <HAL_UART_IRQHandler+0x5b6>
 8009470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00a      	beq.n	8009492 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009484:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009490:	e055      	b.n	800953e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949a:	2b00      	cmp	r3, #0
 800949c:	d014      	beq.n	80094c8 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800949e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d105      	bne.n	80094b6 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80094aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d008      	beq.n	80094c8 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d03e      	beq.n	800953c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	4798      	blx	r3
    }
    return;
 80094c6:	e039      	b.n	800953c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d009      	beq.n	80094e8 <HAL_UART_IRQHandler+0x60c>
 80094d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 f8ba 	bl	800a65a <UART_EndTransmit_IT>
    return;
 80094e6:	e02a      	b.n	800953e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00b      	beq.n	800950c <HAL_UART_IRQHandler+0x630>
 80094f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d005      	beq.n	800950c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800950a:	e018      	b.n	800953e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800950c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d012      	beq.n	800953e <HAL_UART_IRQHandler+0x662>
 8009518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800951c:	2b00      	cmp	r3, #0
 800951e:	da0e      	bge.n	800953e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800952a:	e008      	b.n	800953e <HAL_UART_IRQHandler+0x662>
      return;
 800952c:	bf00      	nop
 800952e:	e006      	b.n	800953e <HAL_UART_IRQHandler+0x662>
    return;
 8009530:	bf00      	nop
 8009532:	e004      	b.n	800953e <HAL_UART_IRQHandler+0x662>
      return;
 8009534:	bf00      	nop
 8009536:	e002      	b.n	800953e <HAL_UART_IRQHandler+0x662>
      return;
 8009538:	bf00      	nop
 800953a:	e000      	b.n	800953e <HAL_UART_IRQHandler+0x662>
    return;
 800953c:	bf00      	nop
  }
}
 800953e:	37e8      	adds	r7, #232	@ 0xe8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a09      	ldr	r2, [pc, #36]	@ (8009630 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d009      	beq.n	8009624 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	615a      	str	r2, [r3, #20]
  }
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	40008000 	.word	0x40008000

08009634 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a18      	ldr	r2, [pc, #96]	@ (80096a4 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d027      	beq.n	8009696 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800964c:	2b20      	cmp	r3, #32
 800964e:	d120      	bne.n	8009692 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_UART_EnableReceiverTimeout+0x2a>
 800965a:	2302      	movs	r3, #2
 800965c:	e01c      	b.n	8009698 <HAL_UART_EnableReceiverTimeout+0x64>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2224      	movs	r2, #36	@ 0x24
 800966a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800967c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2220      	movs	r2, #32
 8009682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	e002      	b.n	8009698 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009692:	2302      	movs	r3, #2
 8009694:	e000      	b.n	8009698 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
  }
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	40008000 	.word	0x40008000

080096a8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
	...

080096c4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a1a      	ldr	r2, [pc, #104]	@ (8009738 <UART_InitCallbacksToDefault+0x74>)
 80096d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a19      	ldr	r2, [pc, #100]	@ (800973c <UART_InitCallbacksToDefault+0x78>)
 80096d8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a18      	ldr	r2, [pc, #96]	@ (8009740 <UART_InitCallbacksToDefault+0x7c>)
 80096e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a17      	ldr	r2, [pc, #92]	@ (8009744 <UART_InitCallbacksToDefault+0x80>)
 80096e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a16      	ldr	r2, [pc, #88]	@ (8009748 <UART_InitCallbacksToDefault+0x84>)
 80096f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a15      	ldr	r2, [pc, #84]	@ (800974c <UART_InitCallbacksToDefault+0x88>)
 80096f8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a14      	ldr	r2, [pc, #80]	@ (8009750 <UART_InitCallbacksToDefault+0x8c>)
 8009700:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a13      	ldr	r2, [pc, #76]	@ (8009754 <UART_InitCallbacksToDefault+0x90>)
 8009708:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a12      	ldr	r2, [pc, #72]	@ (8009758 <UART_InitCallbacksToDefault+0x94>)
 8009710:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a11      	ldr	r2, [pc, #68]	@ (800975c <UART_InitCallbacksToDefault+0x98>)
 8009718:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a10      	ldr	r2, [pc, #64]	@ (8009760 <UART_InitCallbacksToDefault+0x9c>)
 8009720:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a0f      	ldr	r2, [pc, #60]	@ (8009764 <UART_InitCallbacksToDefault+0xa0>)
 8009728:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	08009559 	.word	0x08009559
 800973c:	08009545 	.word	0x08009545
 8009740:	08009581 	.word	0x08009581
 8009744:	0800956d 	.word	0x0800956d
 8009748:	08009595 	.word	0x08009595
 800974c:	080095a9 	.word	0x080095a9
 8009750:	080095bd 	.word	0x080095bd
 8009754:	080095d1 	.word	0x080095d1
 8009758:	0800a6b5 	.word	0x0800a6b5
 800975c:	0800a6c9 	.word	0x0800a6c9
 8009760:	0800a6dd 	.word	0x0800a6dd
 8009764:	080095e5 	.word	0x080095e5

08009768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800976c:	b08c      	sub	sp, #48	@ 0x30
 800976e:	af00      	add	r7, sp, #0
 8009770:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	431a      	orrs	r2, r3
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	431a      	orrs	r2, r3
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	69db      	ldr	r3, [r3, #28]
 800978c:	4313      	orrs	r3, r2
 800978e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4baa      	ldr	r3, [pc, #680]	@ (8009a40 <UART_SetConfig+0x2d8>)
 8009798:	4013      	ands	r3, r2
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097a0:	430b      	orrs	r3, r1
 80097a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a9f      	ldr	r2, [pc, #636]	@ (8009a44 <UART_SetConfig+0x2dc>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d004      	beq.n	80097d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097d0:	4313      	orrs	r3, r2
 80097d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80097de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	6812      	ldr	r2, [r2, #0]
 80097e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097e8:	430b      	orrs	r3, r1
 80097ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f2:	f023 010f 	bic.w	r1, r3, #15
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a90      	ldr	r2, [pc, #576]	@ (8009a48 <UART_SetConfig+0x2e0>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d125      	bne.n	8009858 <UART_SetConfig+0xf0>
 800980c:	4b8f      	ldr	r3, [pc, #572]	@ (8009a4c <UART_SetConfig+0x2e4>)
 800980e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	2b03      	cmp	r3, #3
 8009818:	d81a      	bhi.n	8009850 <UART_SetConfig+0xe8>
 800981a:	a201      	add	r2, pc, #4	@ (adr r2, 8009820 <UART_SetConfig+0xb8>)
 800981c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009820:	08009831 	.word	0x08009831
 8009824:	08009841 	.word	0x08009841
 8009828:	08009839 	.word	0x08009839
 800982c:	08009849 	.word	0x08009849
 8009830:	2301      	movs	r3, #1
 8009832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009836:	e116      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009838:	2302      	movs	r3, #2
 800983a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800983e:	e112      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009840:	2304      	movs	r3, #4
 8009842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009846:	e10e      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800984e:	e10a      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009850:	2310      	movs	r3, #16
 8009852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009856:	e106      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a7c      	ldr	r2, [pc, #496]	@ (8009a50 <UART_SetConfig+0x2e8>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d138      	bne.n	80098d4 <UART_SetConfig+0x16c>
 8009862:	4b7a      	ldr	r3, [pc, #488]	@ (8009a4c <UART_SetConfig+0x2e4>)
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009868:	f003 030c 	and.w	r3, r3, #12
 800986c:	2b0c      	cmp	r3, #12
 800986e:	d82d      	bhi.n	80098cc <UART_SetConfig+0x164>
 8009870:	a201      	add	r2, pc, #4	@ (adr r2, 8009878 <UART_SetConfig+0x110>)
 8009872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009876:	bf00      	nop
 8009878:	080098ad 	.word	0x080098ad
 800987c:	080098cd 	.word	0x080098cd
 8009880:	080098cd 	.word	0x080098cd
 8009884:	080098cd 	.word	0x080098cd
 8009888:	080098bd 	.word	0x080098bd
 800988c:	080098cd 	.word	0x080098cd
 8009890:	080098cd 	.word	0x080098cd
 8009894:	080098cd 	.word	0x080098cd
 8009898:	080098b5 	.word	0x080098b5
 800989c:	080098cd 	.word	0x080098cd
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	080098cd 	.word	0x080098cd
 80098a8:	080098c5 	.word	0x080098c5
 80098ac:	2300      	movs	r3, #0
 80098ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098b2:	e0d8      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80098b4:	2302      	movs	r3, #2
 80098b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ba:	e0d4      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80098bc:	2304      	movs	r3, #4
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c2:	e0d0      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80098c4:	2308      	movs	r3, #8
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ca:	e0cc      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80098cc:	2310      	movs	r3, #16
 80098ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d2:	e0c8      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a5e      	ldr	r2, [pc, #376]	@ (8009a54 <UART_SetConfig+0x2ec>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d125      	bne.n	800992a <UART_SetConfig+0x1c2>
 80098de:	4b5b      	ldr	r3, [pc, #364]	@ (8009a4c <UART_SetConfig+0x2e4>)
 80098e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80098e8:	2b30      	cmp	r3, #48	@ 0x30
 80098ea:	d016      	beq.n	800991a <UART_SetConfig+0x1b2>
 80098ec:	2b30      	cmp	r3, #48	@ 0x30
 80098ee:	d818      	bhi.n	8009922 <UART_SetConfig+0x1ba>
 80098f0:	2b20      	cmp	r3, #32
 80098f2:	d00a      	beq.n	800990a <UART_SetConfig+0x1a2>
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d814      	bhi.n	8009922 <UART_SetConfig+0x1ba>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <UART_SetConfig+0x19a>
 80098fc:	2b10      	cmp	r3, #16
 80098fe:	d008      	beq.n	8009912 <UART_SetConfig+0x1aa>
 8009900:	e00f      	b.n	8009922 <UART_SetConfig+0x1ba>
 8009902:	2300      	movs	r3, #0
 8009904:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009908:	e0ad      	b.n	8009a66 <UART_SetConfig+0x2fe>
 800990a:	2302      	movs	r3, #2
 800990c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009910:	e0a9      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009912:	2304      	movs	r3, #4
 8009914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009918:	e0a5      	b.n	8009a66 <UART_SetConfig+0x2fe>
 800991a:	2308      	movs	r3, #8
 800991c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009920:	e0a1      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009922:	2310      	movs	r3, #16
 8009924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009928:	e09d      	b.n	8009a66 <UART_SetConfig+0x2fe>
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a4a      	ldr	r2, [pc, #296]	@ (8009a58 <UART_SetConfig+0x2f0>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d125      	bne.n	8009980 <UART_SetConfig+0x218>
 8009934:	4b45      	ldr	r3, [pc, #276]	@ (8009a4c <UART_SetConfig+0x2e4>)
 8009936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800993a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800993e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009940:	d016      	beq.n	8009970 <UART_SetConfig+0x208>
 8009942:	2bc0      	cmp	r3, #192	@ 0xc0
 8009944:	d818      	bhi.n	8009978 <UART_SetConfig+0x210>
 8009946:	2b80      	cmp	r3, #128	@ 0x80
 8009948:	d00a      	beq.n	8009960 <UART_SetConfig+0x1f8>
 800994a:	2b80      	cmp	r3, #128	@ 0x80
 800994c:	d814      	bhi.n	8009978 <UART_SetConfig+0x210>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <UART_SetConfig+0x1f0>
 8009952:	2b40      	cmp	r3, #64	@ 0x40
 8009954:	d008      	beq.n	8009968 <UART_SetConfig+0x200>
 8009956:	e00f      	b.n	8009978 <UART_SetConfig+0x210>
 8009958:	2300      	movs	r3, #0
 800995a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800995e:	e082      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009960:	2302      	movs	r3, #2
 8009962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009966:	e07e      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009968:	2304      	movs	r3, #4
 800996a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800996e:	e07a      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009970:	2308      	movs	r3, #8
 8009972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009976:	e076      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009978:	2310      	movs	r3, #16
 800997a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800997e:	e072      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a35      	ldr	r2, [pc, #212]	@ (8009a5c <UART_SetConfig+0x2f4>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d12a      	bne.n	80099e0 <UART_SetConfig+0x278>
 800998a:	4b30      	ldr	r3, [pc, #192]	@ (8009a4c <UART_SetConfig+0x2e4>)
 800998c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009994:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009998:	d01a      	beq.n	80099d0 <UART_SetConfig+0x268>
 800999a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800999e:	d81b      	bhi.n	80099d8 <UART_SetConfig+0x270>
 80099a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099a4:	d00c      	beq.n	80099c0 <UART_SetConfig+0x258>
 80099a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099aa:	d815      	bhi.n	80099d8 <UART_SetConfig+0x270>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <UART_SetConfig+0x250>
 80099b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099b4:	d008      	beq.n	80099c8 <UART_SetConfig+0x260>
 80099b6:	e00f      	b.n	80099d8 <UART_SetConfig+0x270>
 80099b8:	2300      	movs	r3, #0
 80099ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099be:	e052      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80099c0:	2302      	movs	r3, #2
 80099c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099c6:	e04e      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80099c8:	2304      	movs	r3, #4
 80099ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ce:	e04a      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80099d0:	2308      	movs	r3, #8
 80099d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d6:	e046      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80099d8:	2310      	movs	r3, #16
 80099da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099de:	e042      	b.n	8009a66 <UART_SetConfig+0x2fe>
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a17      	ldr	r2, [pc, #92]	@ (8009a44 <UART_SetConfig+0x2dc>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d13a      	bne.n	8009a60 <UART_SetConfig+0x2f8>
 80099ea:	4b18      	ldr	r3, [pc, #96]	@ (8009a4c <UART_SetConfig+0x2e4>)
 80099ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80099f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099f8:	d01a      	beq.n	8009a30 <UART_SetConfig+0x2c8>
 80099fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099fe:	d81b      	bhi.n	8009a38 <UART_SetConfig+0x2d0>
 8009a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a04:	d00c      	beq.n	8009a20 <UART_SetConfig+0x2b8>
 8009a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a0a:	d815      	bhi.n	8009a38 <UART_SetConfig+0x2d0>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <UART_SetConfig+0x2b0>
 8009a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a14:	d008      	beq.n	8009a28 <UART_SetConfig+0x2c0>
 8009a16:	e00f      	b.n	8009a38 <UART_SetConfig+0x2d0>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a1e:	e022      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009a20:	2302      	movs	r3, #2
 8009a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a26:	e01e      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2e:	e01a      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009a30:	2308      	movs	r3, #8
 8009a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a36:	e016      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009a38:	2310      	movs	r3, #16
 8009a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3e:	e012      	b.n	8009a66 <UART_SetConfig+0x2fe>
 8009a40:	cfff69f3 	.word	0xcfff69f3
 8009a44:	40008000 	.word	0x40008000
 8009a48:	40013800 	.word	0x40013800
 8009a4c:	40021000 	.word	0x40021000
 8009a50:	40004400 	.word	0x40004400
 8009a54:	40004800 	.word	0x40004800
 8009a58:	40004c00 	.word	0x40004c00
 8009a5c:	40005000 	.word	0x40005000
 8009a60:	2310      	movs	r3, #16
 8009a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4aae      	ldr	r2, [pc, #696]	@ (8009d24 <UART_SetConfig+0x5bc>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	f040 8097 	bne.w	8009ba0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a76:	2b08      	cmp	r3, #8
 8009a78:	d823      	bhi.n	8009ac2 <UART_SetConfig+0x35a>
 8009a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a80 <UART_SetConfig+0x318>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009aa5 	.word	0x08009aa5
 8009a84:	08009ac3 	.word	0x08009ac3
 8009a88:	08009aad 	.word	0x08009aad
 8009a8c:	08009ac3 	.word	0x08009ac3
 8009a90:	08009ab3 	.word	0x08009ab3
 8009a94:	08009ac3 	.word	0x08009ac3
 8009a98:	08009ac3 	.word	0x08009ac3
 8009a9c:	08009ac3 	.word	0x08009ac3
 8009aa0:	08009abb 	.word	0x08009abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aa4:	f7fc fc00 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8009aa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009aaa:	e010      	b.n	8009ace <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aac:	4b9e      	ldr	r3, [pc, #632]	@ (8009d28 <UART_SetConfig+0x5c0>)
 8009aae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ab0:	e00d      	b.n	8009ace <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ab2:	f7fc fb8b 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 8009ab6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ab8:	e009      	b.n	8009ace <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009abe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ac0:	e005      	b.n	8009ace <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009acc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 8130 	beq.w	8009d36 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ada:	4a94      	ldr	r2, [pc, #592]	@ (8009d2c <UART_SetConfig+0x5c4>)
 8009adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	4613      	mov	r3, r2
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	4413      	add	r3, r2
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d305      	bcc.n	8009b06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d903      	bls.n	8009b0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b0c:	e113      	b.n	8009d36 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	2200      	movs	r2, #0
 8009b12:	60bb      	str	r3, [r7, #8]
 8009b14:	60fa      	str	r2, [r7, #12]
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1a:	4a84      	ldr	r2, [pc, #528]	@ (8009d2c <UART_SetConfig+0x5c4>)
 8009b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	2200      	movs	r2, #0
 8009b24:	603b      	str	r3, [r7, #0]
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b30:	f7f7 f96e 	bl	8000e10 <__aeabi_uldivmod>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	f04f 0200 	mov.w	r2, #0
 8009b40:	f04f 0300 	mov.w	r3, #0
 8009b44:	020b      	lsls	r3, r1, #8
 8009b46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b4a:	0202      	lsls	r2, r0, #8
 8009b4c:	6979      	ldr	r1, [r7, #20]
 8009b4e:	6849      	ldr	r1, [r1, #4]
 8009b50:	0849      	lsrs	r1, r1, #1
 8009b52:	2000      	movs	r0, #0
 8009b54:	460c      	mov	r4, r1
 8009b56:	4605      	mov	r5, r0
 8009b58:	eb12 0804 	adds.w	r8, r2, r4
 8009b5c:	eb43 0905 	adc.w	r9, r3, r5
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	469a      	mov	sl, r3
 8009b68:	4693      	mov	fp, r2
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	465b      	mov	r3, fp
 8009b6e:	4640      	mov	r0, r8
 8009b70:	4649      	mov	r1, r9
 8009b72:	f7f7 f94d 	bl	8000e10 <__aeabi_uldivmod>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b84:	d308      	bcc.n	8009b98 <UART_SetConfig+0x430>
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b8c:	d204      	bcs.n	8009b98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6a3a      	ldr	r2, [r7, #32]
 8009b94:	60da      	str	r2, [r3, #12]
 8009b96:	e0ce      	b.n	8009d36 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b9e:	e0ca      	b.n	8009d36 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ba8:	d166      	bne.n	8009c78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009baa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d827      	bhi.n	8009c02 <UART_SetConfig+0x49a>
 8009bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb8 <UART_SetConfig+0x450>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009bdd 	.word	0x08009bdd
 8009bbc:	08009be5 	.word	0x08009be5
 8009bc0:	08009bed 	.word	0x08009bed
 8009bc4:	08009c03 	.word	0x08009c03
 8009bc8:	08009bf3 	.word	0x08009bf3
 8009bcc:	08009c03 	.word	0x08009c03
 8009bd0:	08009c03 	.word	0x08009c03
 8009bd4:	08009c03 	.word	0x08009c03
 8009bd8:	08009bfb 	.word	0x08009bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bdc:	f7fc fb64 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8009be0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009be2:	e014      	b.n	8009c0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be4:	f7fc fb76 	bl	80062d4 <HAL_RCC_GetPCLK2Freq>
 8009be8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bea:	e010      	b.n	8009c0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bec:	4b4e      	ldr	r3, [pc, #312]	@ (8009d28 <UART_SetConfig+0x5c0>)
 8009bee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bf0:	e00d      	b.n	8009c0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bf2:	f7fc faeb 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 8009bf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bf8:	e009      	b.n	8009c0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c00:	e005      	b.n	8009c0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 8090 	beq.w	8009d36 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1a:	4a44      	ldr	r2, [pc, #272]	@ (8009d2c <UART_SetConfig+0x5c4>)
 8009c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c20:	461a      	mov	r2, r3
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c28:	005a      	lsls	r2, r3, #1
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	441a      	add	r2, r3
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	2b0f      	cmp	r3, #15
 8009c40:	d916      	bls.n	8009c70 <UART_SetConfig+0x508>
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c48:	d212      	bcs.n	8009c70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	f023 030f 	bic.w	r3, r3, #15
 8009c52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	085b      	lsrs	r3, r3, #1
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	f003 0307 	and.w	r3, r3, #7
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	8bfb      	ldrh	r3, [r7, #30]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	8bfa      	ldrh	r2, [r7, #30]
 8009c6c:	60da      	str	r2, [r3, #12]
 8009c6e:	e062      	b.n	8009d36 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c76:	e05e      	b.n	8009d36 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d828      	bhi.n	8009cd2 <UART_SetConfig+0x56a>
 8009c80:	a201      	add	r2, pc, #4	@ (adr r2, 8009c88 <UART_SetConfig+0x520>)
 8009c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c86:	bf00      	nop
 8009c88:	08009cad 	.word	0x08009cad
 8009c8c:	08009cb5 	.word	0x08009cb5
 8009c90:	08009cbd 	.word	0x08009cbd
 8009c94:	08009cd3 	.word	0x08009cd3
 8009c98:	08009cc3 	.word	0x08009cc3
 8009c9c:	08009cd3 	.word	0x08009cd3
 8009ca0:	08009cd3 	.word	0x08009cd3
 8009ca4:	08009cd3 	.word	0x08009cd3
 8009ca8:	08009ccb 	.word	0x08009ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cac:	f7fc fafc 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8009cb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cb2:	e014      	b.n	8009cde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cb4:	f7fc fb0e 	bl	80062d4 <HAL_RCC_GetPCLK2Freq>
 8009cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cba:	e010      	b.n	8009cde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009d28 <UART_SetConfig+0x5c0>)
 8009cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cc0:	e00d      	b.n	8009cde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cc2:	f7fc fa83 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 8009cc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cc8:	e009      	b.n	8009cde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cd0:	e005      	b.n	8009cde <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d028      	beq.n	8009d36 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce8:	4a10      	ldr	r2, [pc, #64]	@ (8009d2c <UART_SetConfig+0x5c4>)
 8009cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	085b      	lsrs	r3, r3, #1
 8009cfc:	441a      	add	r2, r3
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	2b0f      	cmp	r3, #15
 8009d0c:	d910      	bls.n	8009d30 <UART_SetConfig+0x5c8>
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d14:	d20c      	bcs.n	8009d30 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	60da      	str	r2, [r3, #12]
 8009d20:	e009      	b.n	8009d36 <UART_SetConfig+0x5ce>
 8009d22:	bf00      	nop
 8009d24:	40008000 	.word	0x40008000
 8009d28:	00f42400 	.word	0x00f42400
 8009d2c:	0800a9b4 	.word	0x0800a9b4
      }
      else
      {
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d52:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3730      	adds	r7, #48	@ 0x30
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6c:	f003 0308 	and.w	r3, r3, #8
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	430a      	orrs	r2, r1
 8009daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00a      	beq.n	8009dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd2:	f003 0304 	and.w	r3, r3, #4
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	430a      	orrs	r2, r1
 8009dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df4:	f003 0310 	and.w	r3, r3, #16
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e16:	f003 0320 	and.w	r3, r3, #32
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01a      	beq.n	8009e76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	430a      	orrs	r2, r1
 8009e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e5e:	d10a      	bne.n	8009e76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00a      	beq.n	8009e98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	430a      	orrs	r2, r1
 8009e96:	605a      	str	r2, [r3, #4]
  }
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b098      	sub	sp, #96	@ 0x60
 8009ea8:	af02      	add	r7, sp, #8
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009eb4:	f7f9 fd64 	bl	8003980 <HAL_GetTick>
 8009eb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0308 	and.w	r3, r3, #8
 8009ec4:	2b08      	cmp	r3, #8
 8009ec6:	d12f      	bne.n	8009f28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ec8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f88e 	bl	8009ff8 <UART_WaitOnFlagUntilTimeout>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d022      	beq.n	8009f28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ef6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e6      	bne.n	8009ee2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2220      	movs	r2, #32
 8009f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e063      	b.n	8009ff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0304 	and.w	r3, r3, #4
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d149      	bne.n	8009fca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f857 	bl	8009ff8 <UART_WaitOnFlagUntilTimeout>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d03c      	beq.n	8009fca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f58:	e853 3f00 	ldrex	r3, [r3]
 8009f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e6      	bne.n	8009f50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f023 0301 	bic.w	r3, r3, #1
 8009f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fa2:	61fa      	str	r2, [r7, #28]
 8009fa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	69b9      	ldr	r1, [r7, #24]
 8009fa8:	69fa      	ldr	r2, [r7, #28]
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	617b      	str	r3, [r7, #20]
   return(result);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e5      	bne.n	8009f82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e012      	b.n	8009ff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3758      	adds	r7, #88	@ 0x58
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	4613      	mov	r3, r2
 800a006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a008:	e04f      	b.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a010:	d04b      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a012:	f7f9 fcb5 	bl	8003980 <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d302      	bcc.n	800a028 <UART_WaitOnFlagUntilTimeout+0x30>
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e04e      	b.n	800a0ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0304 	and.w	r3, r3, #4
 800a036:	2b00      	cmp	r3, #0
 800a038:	d037      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b80      	cmp	r3, #128	@ 0x80
 800a03e:	d034      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b40      	cmp	r3, #64	@ 0x40
 800a044:	d031      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	f003 0308 	and.w	r3, r3, #8
 800a050:	2b08      	cmp	r3, #8
 800a052:	d110      	bne.n	800a076 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2208      	movs	r2, #8
 800a05a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 f920 	bl	800a2a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2208      	movs	r2, #8
 800a066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e029      	b.n	800a0ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a084:	d111      	bne.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a08e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f906 	bl	800a2a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2220      	movs	r2, #32
 800a09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e00f      	b.n	800a0ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69da      	ldr	r2, [r3, #28]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	bf0c      	ite	eq
 800a0ba:	2301      	moveq	r3, #1
 800a0bc:	2300      	movne	r3, #0
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	79fb      	ldrb	r3, [r7, #7]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d0a0      	beq.n	800a00a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b096      	sub	sp, #88	@ 0x58
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	88fa      	ldrh	r2, [r7, #6]
 800a0ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2222      	movs	r2, #34	@ 0x22
 800a0fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a106:	2b00      	cmp	r3, #0
 800a108:	d02d      	beq.n	800a166 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a110:	4a40      	ldr	r2, [pc, #256]	@ (800a214 <UART_Start_Receive_DMA+0x140>)
 800a112:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a11a:	4a3f      	ldr	r2, [pc, #252]	@ (800a218 <UART_Start_Receive_DMA+0x144>)
 800a11c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a124:	4a3d      	ldr	r2, [pc, #244]	@ (800a21c <UART_Start_Receive_DMA+0x148>)
 800a126:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12e:	2200      	movs	r2, #0
 800a130:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3324      	adds	r3, #36	@ 0x24
 800a13e:	4619      	mov	r1, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a144:	461a      	mov	r2, r3
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	f7fa fede 	bl	8004f08 <HAL_DMA_Start_IT>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2210      	movs	r2, #16
 800a156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e051      	b.n	800a20a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d018      	beq.n	800a1a0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a182:	657b      	str	r3, [r7, #84]	@ 0x54
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a18c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a18e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a190:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a194:	e841 2300 	strex	r3, r2, [r1]
 800a198:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a19a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e6      	bne.n	800a16e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3308      	adds	r3, #8
 800a1be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1c0:	637a      	str	r2, [r7, #52]	@ 0x34
 800a1c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1c8:	e841 2300 	strex	r3, r2, [r1]
 800a1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1e5      	bne.n	800a1a0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	e853 3f00 	ldrex	r3, [r3]
 800a1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1f4:	623a      	str	r2, [r7, #32]
 800a1f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f8:	69f9      	ldr	r1, [r7, #28]
 800a1fa:	6a3a      	ldr	r2, [r7, #32]
 800a1fc:	e841 2300 	strex	r3, r2, [r1]
 800a200:	61bb      	str	r3, [r7, #24]
   return(result);
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e5      	bne.n	800a1d4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3758      	adds	r7, #88	@ 0x58
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	0800a42d 	.word	0x0800a42d
 800a218:	0800a561 	.word	0x0800a561
 800a21c:	0800a5a7 	.word	0x0800a5a7

0800a220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a220:	b480      	push	{r7}
 800a222:	b08f      	sub	sp, #60	@ 0x3c
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	61fb      	str	r3, [r7, #28]
   return(result);
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a246:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a248:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a24c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e6      	bne.n	800a228 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	60bb      	str	r3, [r7, #8]
   return(result);
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a270:	633b      	str	r3, [r7, #48]	@ 0x30
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3308      	adds	r3, #8
 800a278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a27a:	61ba      	str	r2, [r7, #24]
 800a27c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	6979      	ldr	r1, [r7, #20]
 800a280:	69ba      	ldr	r2, [r7, #24]
 800a282:	e841 2300 	strex	r3, r2, [r1]
 800a286:	613b      	str	r3, [r7, #16]
   return(result);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1e5      	bne.n	800a25a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a296:	bf00      	nop
 800a298:	373c      	adds	r7, #60	@ 0x3c
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b095      	sub	sp, #84	@ 0x54
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2d0:	e841 2300 	strex	r3, r2, [r1]
 800a2d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e6      	bne.n	800a2aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2f2:	f023 0301 	bic.w	r3, r3, #1
 800a2f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a300:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a302:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a308:	e841 2300 	strex	r3, r2, [r1]
 800a30c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e3      	bne.n	800a2dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d118      	bne.n	800a34e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	e853 3f00 	ldrex	r3, [r3]
 800a328:	60bb      	str	r3, [r7, #8]
   return(result);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	f023 0310 	bic.w	r3, r3, #16
 800a330:	647b      	str	r3, [r7, #68]	@ 0x44
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a33a:	61bb      	str	r3, [r7, #24]
 800a33c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	6979      	ldr	r1, [r7, #20]
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	613b      	str	r3, [r7, #16]
   return(result);
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e6      	bne.n	800a31c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2220      	movs	r2, #32
 800a352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a362:	bf00      	nop
 800a364:	3754      	adds	r7, #84	@ 0x54
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b090      	sub	sp, #64	@ 0x40
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b00      	cmp	r3, #0
 800a388:	d137      	bne.n	800a3fa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3308      	adds	r3, #8
 800a398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	623b      	str	r3, [r7, #32]
   return(result);
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3b2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a3b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e5      	bne.n	800a392 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e4:	61fb      	str	r3, [r7, #28]
 800a3e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	69b9      	ldr	r1, [r7, #24]
 800a3ea:	69fa      	ldr	r2, [r7, #28]
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e6      	bne.n	800a3c6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3f8:	e004      	b.n	800a404 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a400:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a402:	4798      	blx	r3
}
 800a404:	bf00      	nop
 800a406:	3740      	adds	r7, #64	@ 0x40
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a418:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a424:	bf00      	nop
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b09c      	sub	sp, #112	@ 0x70
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a438:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0320 	and.w	r3, r3, #32
 800a444:	2b00      	cmp	r3, #0
 800a446:	d171      	bne.n	800a52c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a45e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a464:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a46e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a470:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a472:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a476:	e841 2300 	strex	r3, r2, [r1]
 800a47a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a47c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e6      	bne.n	800a450 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3308      	adds	r3, #8
 800a488:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a494:	f023 0301 	bic.w	r3, r3, #1
 800a498:	667b      	str	r3, [r7, #100]	@ 0x64
 800a49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a4a2:	647a      	str	r2, [r7, #68]	@ 0x44
 800a4a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e5      	bne.n	800a482 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	e853 3f00 	ldrex	r3, [r3]
 800a4c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e5      	bne.n	800a4b6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d118      	bne.n	800a52c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	60fb      	str	r3, [r7, #12]
   return(result);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f023 0310 	bic.w	r3, r3, #16
 800a50e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a518:	61fb      	str	r3, [r7, #28]
 800a51a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	69b9      	ldr	r1, [r7, #24]
 800a51e:	69fa      	ldr	r2, [r7, #28]
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	617b      	str	r3, [r7, #20]
   return(result);
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e6      	bne.n	800a4fa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a52c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a52e:	2200      	movs	r2, #0
 800a530:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a536:	2b01      	cmp	r3, #1
 800a538:	d109      	bne.n	800a54e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a53a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a53c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a540:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a542:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a546:	4611      	mov	r1, r2
 800a548:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a54a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a54c:	e004      	b.n	800a558 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a54e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a554:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a556:	4798      	blx	r3
}
 800a558:	bf00      	nop
 800a55a:	3770      	adds	r7, #112	@ 0x70
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2201      	movs	r2, #1
 800a572:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d10b      	bne.n	800a594 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a588:	0852      	lsrs	r2, r2, #1
 800a58a:	b292      	uxth	r2, r2
 800a58c:	4611      	mov	r1, r2
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a592:	e004      	b.n	800a59e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	4798      	blx	r3
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ce:	2b80      	cmp	r3, #128	@ 0x80
 800a5d0:	d109      	bne.n	800a5e6 <UART_DMAError+0x40>
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2b21      	cmp	r3, #33	@ 0x21
 800a5d6:	d106      	bne.n	800a5e6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a5e0:	6978      	ldr	r0, [r7, #20]
 800a5e2:	f7ff fe1d 	bl	800a220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f0:	2b40      	cmp	r3, #64	@ 0x40
 800a5f2:	d109      	bne.n	800a608 <UART_DMAError+0x62>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b22      	cmp	r3, #34	@ 0x22
 800a5f8:	d106      	bne.n	800a608 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a602:	6978      	ldr	r0, [r7, #20]
 800a604:	f7ff fe4d 	bl	800a2a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a60e:	f043 0210 	orr.w	r2, r3, #16
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a61e:	6978      	ldr	r0, [r7, #20]
 800a620:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a622:	bf00      	nop
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b088      	sub	sp, #32
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	e853 3f00 	ldrex	r3, [r3]
 800a66e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a676:	61fb      	str	r3, [r7, #28]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	61bb      	str	r3, [r7, #24]
 800a682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a684:	6979      	ldr	r1, [r7, #20]
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	e841 2300 	strex	r3, r2, [r1]
 800a68c:	613b      	str	r3, [r7, #16]
   return(result);
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1e6      	bne.n	800a662 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6ac:	bf00      	nop
 800a6ae:	3720      	adds	r7, #32
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d101      	bne.n	800a706 <HAL_UARTEx_DisableFifoMode+0x16>
 800a702:	2302      	movs	r3, #2
 800a704:	e027      	b.n	800a756 <HAL_UARTEx_DisableFifoMode+0x66>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2224      	movs	r2, #36	@ 0x24
 800a712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0201 	bic.w	r2, r2, #1
 800a72c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a734:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2220      	movs	r2, #32
 800a748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b084      	sub	sp, #16
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a772:	2b01      	cmp	r3, #1
 800a774:	d101      	bne.n	800a77a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a776:	2302      	movs	r3, #2
 800a778:	e02d      	b.n	800a7d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2224      	movs	r2, #36	@ 0x24
 800a786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0201 	bic.w	r2, r2, #1
 800a7a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f850 	bl	800a85c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d101      	bne.n	800a7f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	e02d      	b.n	800a852 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2224      	movs	r2, #36	@ 0x24
 800a802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f022 0201 	bic.w	r2, r2, #1
 800a81c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	430a      	orrs	r2, r1
 800a830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f812 	bl	800a85c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2220      	movs	r2, #32
 800a844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d108      	bne.n	800a87e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a87c:	e031      	b.n	800a8e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a87e:	2308      	movs	r3, #8
 800a880:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a882:	2308      	movs	r3, #8
 800a884:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	0e5b      	lsrs	r3, r3, #25
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	f003 0307 	and.w	r3, r3, #7
 800a894:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	0f5b      	lsrs	r3, r3, #29
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	f003 0307 	and.w	r3, r3, #7
 800a8a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
 800a8a8:	7b3a      	ldrb	r2, [r7, #12]
 800a8aa:	4911      	ldr	r1, [pc, #68]	@ (800a8f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a8ac:	5c8a      	ldrb	r2, [r1, r2]
 800a8ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8b2:	7b3a      	ldrb	r2, [r7, #12]
 800a8b4:	490f      	ldr	r1, [pc, #60]	@ (800a8f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a8b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	7b7a      	ldrb	r2, [r7, #13]
 800a8c8:	4909      	ldr	r1, [pc, #36]	@ (800a8f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a8ca:	5c8a      	ldrb	r2, [r1, r2]
 800a8cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8d0:	7b7a      	ldrb	r2, [r7, #13]
 800a8d2:	4908      	ldr	r1, [pc, #32]	@ (800a8f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a8d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a8e2:	bf00      	nop
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	0800a9cc 	.word	0x0800a9cc
 800a8f4:	0800a9d4 	.word	0x0800a9d4

0800a8f8 <memset>:
 800a8f8:	4402      	add	r2, r0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d100      	bne.n	800a902 <memset+0xa>
 800a900:	4770      	bx	lr
 800a902:	f803 1b01 	strb.w	r1, [r3], #1
 800a906:	e7f9      	b.n	800a8fc <memset+0x4>

0800a908 <__libc_init_array>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	4d0d      	ldr	r5, [pc, #52]	@ (800a940 <__libc_init_array+0x38>)
 800a90c:	4c0d      	ldr	r4, [pc, #52]	@ (800a944 <__libc_init_array+0x3c>)
 800a90e:	1b64      	subs	r4, r4, r5
 800a910:	10a4      	asrs	r4, r4, #2
 800a912:	2600      	movs	r6, #0
 800a914:	42a6      	cmp	r6, r4
 800a916:	d109      	bne.n	800a92c <__libc_init_array+0x24>
 800a918:	4d0b      	ldr	r5, [pc, #44]	@ (800a948 <__libc_init_array+0x40>)
 800a91a:	4c0c      	ldr	r4, [pc, #48]	@ (800a94c <__libc_init_array+0x44>)
 800a91c:	f000 f826 	bl	800a96c <_init>
 800a920:	1b64      	subs	r4, r4, r5
 800a922:	10a4      	asrs	r4, r4, #2
 800a924:	2600      	movs	r6, #0
 800a926:	42a6      	cmp	r6, r4
 800a928:	d105      	bne.n	800a936 <__libc_init_array+0x2e>
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a930:	4798      	blx	r3
 800a932:	3601      	adds	r6, #1
 800a934:	e7ee      	b.n	800a914 <__libc_init_array+0xc>
 800a936:	f855 3b04 	ldr.w	r3, [r5], #4
 800a93a:	4798      	blx	r3
 800a93c:	3601      	adds	r6, #1
 800a93e:	e7f2      	b.n	800a926 <__libc_init_array+0x1e>
 800a940:	0800a9e4 	.word	0x0800a9e4
 800a944:	0800a9e4 	.word	0x0800a9e4
 800a948:	0800a9e4 	.word	0x0800a9e4
 800a94c:	0800a9e8 	.word	0x0800a9e8

0800a950 <memcpy>:
 800a950:	440a      	add	r2, r1
 800a952:	4291      	cmp	r1, r2
 800a954:	f100 33ff 	add.w	r3, r0, #4294967295
 800a958:	d100      	bne.n	800a95c <memcpy+0xc>
 800a95a:	4770      	bx	lr
 800a95c:	b510      	push	{r4, lr}
 800a95e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a962:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a966:	4291      	cmp	r1, r2
 800a968:	d1f9      	bne.n	800a95e <memcpy+0xe>
 800a96a:	bd10      	pop	{r4, pc}

0800a96c <_init>:
 800a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96e:	bf00      	nop
 800a970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a972:	bc08      	pop	{r3}
 800a974:	469e      	mov	lr, r3
 800a976:	4770      	bx	lr

0800a978 <_fini>:
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97a:	bf00      	nop
 800a97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97e:	bc08      	pop	{r3}
 800a980:	469e      	mov	lr, r3
 800a982:	4770      	bx	lr
