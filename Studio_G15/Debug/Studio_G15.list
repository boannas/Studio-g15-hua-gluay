
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cec  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008ec4  08008ec4  00009ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f1c  08008f1c  0000a234  2**0
                  CONTENTS
  4 .ARM          00000008  08008f1c  08008f1c  00009f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f24  08008f24  0000a234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f24  08008f24  00009f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f28  08008f28  00009f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  08008f2c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f14  20000238  08009160  0000a238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  08009160  0000b14c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199e1  00000000  00000000  0000a264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003395  00000000  00000000  00023c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00026fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e89  00000000  00000000  00028290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d75  00000000  00000000  00029119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bfc  00000000  00000000  00050e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe602  00000000  00000000  00069a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016808c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000500c  00000000  00000000  001680d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0016d0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000238 	.word	0x20000238
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008eac 	.word	0x08008eac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000023c 	.word	0x2000023c
 8000214:	08008eac 	.word	0x08008eac

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <easyCase>:
void Reset(){
	registerFrame[0x01].U16 = 0;
	registerFrame[0x10].U16 = 0;
}

void easyCase(){
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	base.bS = registerFrame[0x01].U16;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <easyCase+0x28>)
 8000eea:	885a      	ldrh	r2, [r3, #2]
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <easyCase+0x2c>)
 8000eee:	86da      	strh	r2, [r3, #54]	@ 0x36
	base.vS = registerFrame[0x02].U16;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <easyCase+0x28>)
 8000ef2:	889a      	ldrh	r2, [r3, #4]
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <easyCase+0x2c>)
 8000ef6:	871a      	strh	r2, [r3, #56]	@ 0x38
	base.gmS = registerFrame[0x03].U16;
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <easyCase+0x28>)
 8000efa:	88da      	ldrh	r2, [r3, #6]
 8000efc:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <easyCase+0x2c>)
 8000efe:	875a      	strh	r2, [r3, #58]	@ 0x3a
//	base.gmaS = registerFrame[0x04].U16;
//	base.zmS = registerFrame[0x10].U16;
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000e54 	.word	0x20000e54
 8000f10:	200010f4 	.word	0x200010f4

08000f14 <Heartbeat>:

void Heartbeat(){
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <Heartbeat+0x18>)
 8000f1a:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000f1e:	801a      	strh	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000e54 	.word	0x20000e54

08000f30 <Routine>:

void Routine(){
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 8000f34:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <Routine+0x3c>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	f644 0269 	movw	r2, #18537	@ 0x4869
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d110      	bne.n	8000f62 <Routine+0x32>
	{
		//Gripper 0x04 not sure!?!?
//		  registerFrame[0x04].U16 = 0b0000;
//		  registerFrame[0x04].U16 = 0b0001;   //Gripper status 0b0010 = 0000 0000 0000 0010
		registerFrame[0x10].U16 = base.bStatus;	//Z-axis status 0010 = 1
 8000f40:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <Routine+0x40>)
 8000f42:	881a      	ldrh	r2, [r3, #0]
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <Routine+0x3c>)
 8000f46:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = 1		*10;	//Z-axis position
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <Routine+0x3c>)
 8000f4a:	220a      	movs	r2, #10
 8000f4c:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = 2		*10;	//Z-axis speed
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <Routine+0x3c>)
 8000f50:	2214      	movs	r2, #20
 8000f52:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = 3		*10;	//Z-axis acceleration
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <Routine+0x3c>)
 8000f56:	221e      	movs	r2, #30
 8000f58:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = 4		*10;	//X-axis position
 8000f5a:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <Routine+0x3c>)
 8000f5c:	2228      	movs	r2, #40	@ 0x28
 8000f5e:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	20000e54 	.word	0x20000e54
 8000f70:	200010f4 	.word	0x200010f4

08000f74 <SetShelves>:
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
	}
}

void SetShelves(){
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 1; 		//Z-axis update z-xis moving status to "Set Shelves"
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <SetShelves+0x68>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	841a      	strh	r2, [r3, #32]
	// save Position = floor[0] for moving to that position
	// set shelves 1 = 100 mm shelves 2 = 250 mm
	registerFrame[0x23].U16 = 10 *10; 	//0 = Position Shelve 1
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <SetShelves+0x68>)
 8000f80:	2264      	movs	r2, #100	@ 0x64
 8000f82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	registerFrame[0x24].U16 = 20 *10;
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <SetShelves+0x68>)
 8000f88:	22c8      	movs	r2, #200	@ 0xc8
 8000f8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	registerFrame[0x25].U16 = 30 *10;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <SetShelves+0x68>)
 8000f90:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f94:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	registerFrame[0x26].U16 = 40 *10;
 8000f98:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <SetShelves+0x68>)
 8000f9a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000f9e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	registerFrame[0x27].U16 = 50 *10;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <SetShelves+0x68>)
 8000fa4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fa8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	//finish
	if (base.sw == 1){
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <SetShelves+0x6c>)
 8000fae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d10d      	bne.n	8000fd2 <SetShelves+0x5e>
		base.bStatus = 0;
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <SetShelves+0x6c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <SetShelves+0x6c>)
 8000fbe:	881a      	ldrh	r2, [r3, #0]
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SetShelves+0x68>)
 8000fc2:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SetShelves+0x68>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	841a      	strh	r2, [r3, #32]
		base.sw = 0;
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SetShelves+0x6c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	20000e54 	.word	0x20000e54
 8000fe0:	200010f4 	.word	0x200010f4

08000fe4 <RunPoint>:

void RunPoint(){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <RunPoint+0x50>)
 8000fea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <RunPoint+0x54>)
 8000ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b10      	ldr	r3, [pc, #64]	@ (800103c <RunPoint+0x58>)
 8000ffa:	861a      	strh	r2, [r3, #48]	@ 0x30
	registerFrame[0x10].U16 = 16;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <RunPoint+0x50>)
 8000ffe:	2210      	movs	r2, #16
 8001000:	841a      	strh	r2, [r3, #32]
	//finish
	if(base.swp == 1){
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <RunPoint+0x58>)
 8001004:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001008:	2b01      	cmp	r3, #1
 800100a:	d10d      	bne.n	8001028 <RunPoint+0x44>
		base.bStatus = 0;
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <RunPoint+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <RunPoint+0x58>)
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <RunPoint+0x50>)
 8001018:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <RunPoint+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	841a      	strh	r2, [r3, #32]
		base.swp = 0;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <RunPoint+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	}
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000e54 	.word	0x20000e54
 8001038:	cccccccd 	.word	0xcccccccd
 800103c:	200010f4 	.word	0x200010f4

08001040 <SetHome>:

void SetHome(){
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 2;
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <SetHome+0x3c>)
 8001046:	2202      	movs	r2, #2
 8001048:	841a      	strh	r2, [r3, #32]
	if(base.sh == 1){
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <SetHome+0x40>)
 800104c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001050:	2b01      	cmp	r3, #1
 8001052:	d10d      	bne.n	8001070 <SetHome+0x30>
		base.bStatus = 0;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <SetHome+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <SetHome+0x40>)
 800105c:	881a      	ldrh	r2, [r3, #0]
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <SetHome+0x3c>)
 8001060:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SetHome+0x3c>)
 8001064:	2200      	movs	r2, #0
 8001066:	841a      	strh	r2, [r3, #32]
		base.sh = 0;
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <SetHome+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}
//	base.bS = 0;
//	registerFrame[0x01].U16 = 0;
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000e54 	.word	0x20000e54
 8001080:	200010f4 	.word	0x200010f4

08001084 <RunJog>:

void RunJog(){
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	base.Pick = registerFrame[0x21].U16 ; 	//Get Pick from BaseSystem
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <RunJog+0x54>)
 800108a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <RunJog+0x58>)
 8001090:	865a      	strh	r2, [r3, #50]	@ 0x32
	base.Place = registerFrame[0x22].U16 ;	//Get Place from BaseSystem
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <RunJog+0x54>)
 8001094:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <RunJog+0x58>)
 800109a:	869a      	strh	r2, [r3, #52]	@ 0x34
	registerFrame[0x10].U16 = 4;
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <RunJog+0x54>)
 800109e:	2204      	movs	r2, #4
 80010a0:	841a      	strh	r2, [r3, #32]
	registerFrame[0x10].U16 = 8;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <RunJog+0x54>)
 80010a4:	2208      	movs	r2, #8
 80010a6:	841a      	strh	r2, [r3, #32]
	//pick place 5 time
	if(base.sp == 1){
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <RunJog+0x58>)
 80010aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10d      	bne.n	80010ce <RunJog+0x4a>
		base.bStatus = 0;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <RunJog+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <RunJog+0x58>)
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <RunJog+0x54>)
 80010be:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <RunJog+0x54>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	841a      	strh	r2, [r3, #32]
		base.sp = 0;
 80010c6:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <RunJog+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	}
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20000e54 	.word	0x20000e54
 80010dc:	200010f4 	.word	0x200010f4

080010e0 <AMT_encoder_init>:
int32_t diffPosition;
float diffTime;
float ALPHA = 0.3f;

void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f4:	213c      	movs	r1, #60	@ 0x3c
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 fafa 	bl	80056f0 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 10.0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	220a      	movs	r2, #10
 8001100:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 10.0;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	220a      	movs	r2, #10
 8001106:	605a      	str	r2, [r3, #4]
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <modbus_1t5_Timeout+0x3c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2201      	movs	r2, #1
 800111a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <modbus_1t5_Timeout+0x3c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <modbus_1t5_Timeout+0x3c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <modbus_1t5_Timeout+0x3c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000254 	.word	0x20000254

08001150 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <modbus_3t5_Timeout+0x1c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2201      	movs	r2, #1
 800115e:	755a      	strb	r2, [r3, #21]

}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	20000254 	.word	0x20000254

08001170 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f006 fd35 	bl	8007be8 <HAL_UART_GetError>
 800117e:	4603      	mov	r3, r0
 8001180:	2b20      	cmp	r3, #32
 8001182:	d101      	bne.n	8001188 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001184:	f7ff ffc4 	bl	8001110 <modbus_1t5_Timeout>

	}
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800119a:	4a25      	ldr	r2, [pc, #148]	@ (8001230 <Modbus_init+0xa0>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <Modbus_init+0xa0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	4a21      	ldr	r2, [pc, #132]	@ (8001234 <Modbus_init+0xa4>)
 80011ae:	210e      	movs	r1, #14
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 ff29 	bl	8006008 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2110      	movs	r1, #16
 80011bc:	4618      	mov	r0, r3
 80011be:	f006 fcbd 	bl	8007b3c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f006 fcd4 	bl	8007b74 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <Modbus_init+0xa8>)
 80011d2:	2104      	movs	r1, #4
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 fed3 	bl	8006f80 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011e0:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <Modbus_init+0xa0>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <Modbus_init+0xa0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011ec:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011f0:	4413      	add	r3, r2
 80011f2:	3302      	adds	r3, #2
 80011f4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011f8:	4619      	mov	r1, r3
 80011fa:	f006 f8c3 	bl	8007384 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <Modbus_init+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10c      	bne.n	8001228 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <Modbus_init+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fe7b 	bl	8004f10 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <Modbus_init+0xa0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f004 f922 	bl	800546c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000254 	.word	0x20000254
 8001234:	08001151 	.word	0x08001151
 8001238:	08001171 	.word	0x08001171

0800123c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001248:	23ff      	movs	r3, #255	@ 0xff
 800124a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800124c:	23ff      	movs	r3, #255	@ 0xff
 800124e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001250:	e013      	b.n	800127a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	4053      	eors	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001262:	4a0f      	ldr	r2, [pc, #60]	@ (80012a0 <CRC16+0x64>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4413      	add	r3, r2
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	4053      	eors	r3, r2
 800126e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001270:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <CRC16+0x68>)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800127a:	883b      	ldrh	r3, [r7, #0]
 800127c:	1e5a      	subs	r2, r3, #1
 800127e:	803a      	strh	r2, [r7, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1e6      	bne.n	8001252 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b21a      	sxth	r2, r3
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b21b      	sxth	r3, r3
 8001292:	b29b      	uxth	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	20000100 	.word	0x20000100
 80012a4:	20000000 	.word	0x20000000

080012a8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80012ae:	4b7e      	ldr	r3, [pc, #504]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	7ddb      	ldrb	r3, [r3, #23]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d80a      	bhi.n	80012d0 <Modbus_Protocal_Worker+0x28>
 80012ba:	a201      	add	r2, pc, #4	@ (adr r2, 80012c0 <Modbus_Protocal_Worker+0x18>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	080012db 	.word	0x080012db
 80012c4:	0800146f 	.word	0x0800146f
 80012c8:	08001367 	.word	0x08001367
 80012cc:	080013ab 	.word	0x080013ab
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80012d0:	4b75      	ldr	r3, [pc, #468]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	75da      	strb	r2, [r3, #23]
		break;
 80012d8:	e0e1      	b.n	800149e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012da:	4b73      	ldr	r3, [pc, #460]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012e6:	4b70      	ldr	r3, [pc, #448]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2202      	movs	r2, #2
 80012ec:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012ee:	f000 f9cd 	bl	800168c <Modbus_Emission>
 80012f2:	e018      	b.n	8001326 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80012f4:	4b6c      	ldr	r3, [pc, #432]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80012fe:	4b6a      	ldr	r3, [pc, #424]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001308:	b29b      	uxth	r3, r3
 800130a:	429a      	cmp	r2, r3
 800130c:	d00b      	beq.n	8001326 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800130e:	4b66      	ldr	r3, [pc, #408]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001316:	4b64      	ldr	r3, [pc, #400]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800131e:	4b62      	ldr	r3, [pc, #392]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2203      	movs	r2, #3
 8001324:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001326:	4b60      	ldr	r3, [pc, #384]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001330:	2b20      	cmp	r3, #32
 8001332:	f040 80ad 	bne.w	8001490 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001336:	4b5c      	ldr	r3, [pc, #368]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001340:	4b59      	ldr	r3, [pc, #356]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001346:	4b58      	ldr	r3, [pc, #352]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001352:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001356:	4413      	add	r3, r2
 8001358:	3302      	adds	r3, #2
 800135a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800135e:	4619      	mov	r1, r3
 8001360:	f006 f810 	bl	8007384 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001364:	e094      	b.n	8001490 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001366:	4b50      	ldr	r3, [pc, #320]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	7d1b      	ldrb	r3, [r3, #20]
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 8091 	beq.w	8001494 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001372:	4b4d      	ldr	r3, [pc, #308]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	22fe      	movs	r2, #254	@ 0xfe
 8001378:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800137a:	4b4b      	ldr	r3, [pc, #300]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001384:	4b48      	ldr	r3, [pc, #288]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001394:	4b44      	ldr	r3, [pc, #272]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001398:	1a8a      	subs	r2, r1, r2
 800139a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800139c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80013a0:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2204      	movs	r2, #4
 80013a6:	75da      	strb	r2, [r3, #23]
		}
		break;
 80013a8:	e074      	b.n	8001494 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80013aa:	4b3f      	ldr	r3, [pc, #252]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80013b2:	f113 0f02 	cmn.w	r3, #2
 80013b6:	d150      	bne.n	800145a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80013b8:	4b3b      	ldr	r3, [pc, #236]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80013c0:	4b39      	ldr	r3, [pc, #228]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80013c8:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013d0:	3b02      	subs	r3, #2
 80013d2:	4619      	mov	r1, r3
 80013d4:	4610      	mov	r0, r2
 80013d6:	f7ff ff31 	bl	800123c <CRC16>
 80013da:	4603      	mov	r3, r0
 80013dc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013de:	793a      	ldrb	r2, [r7, #4]
 80013e0:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013ec:	3b02      	subs	r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d10c      	bne.n	8001412 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013f8:	797a      	ldrb	r2, [r7, #5]
 80013fa:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001406:	3b01      	subs	r3, #1
 8001408:	440b      	add	r3, r1
 800140a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800140e:	429a      	cmp	r2, r3
 8001410:	d004      	beq.n	800141c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001412:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	22ff      	movs	r2, #255	@ 0xff
 8001418:	759a      	strb	r2, [r3, #22]
				break;
 800141a:	e040      	b.n	800149e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001424:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d113      	bne.n	8001456 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800142e:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800143e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001448:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800144a:	461a      	mov	r2, r3
 800144c:	f007 fd20 	bl	8008e90 <memcpy>

			//execute command
			Modbus_frame_response();
 8001450:	f000 f904 	bl	800165c <Modbus_frame_response>
 8001454:	e001      	b.n	800145a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001456:	bf00      	nop
					}
		break;


	}
}
 8001458:	e021      	b.n	800149e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	7d5b      	ldrb	r3, [r3, #21]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d019      	beq.n	8001498 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	75da      	strb	r2, [r3, #23]
		break;
 800146c:	e014      	b.n	8001498 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001478:	2b20      	cmp	r3, #32
 800147a:	d10f      	bne.n	800149c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <Modbus_Protocal_Worker+0x200>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2201      	movs	r2, #1
 800148c:	75da      	strb	r2, [r3, #23]
		break;
 800148e:	e005      	b.n	800149c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001490:	bf00      	nop
 8001492:	e004      	b.n	800149e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001494:	bf00      	nop
 8001496:	e002      	b.n	800149e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001498:	bf00      	nop
 800149a:	e000      	b.n	800149e <Modbus_Protocal_Worker+0x1f6>
		break;
 800149c:	bf00      	nop
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000254 	.word	0x20000254

080014ac <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	7e5b      	ldrb	r3, [r3, #25]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	7e92      	ldrb	r2, [r2, #26]
 80014c2:	4413      	add	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d903      	bls.n	80014da <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014d2:	2002      	movs	r0, #2
 80014d4:	f000 f8a0 	bl	8001618 <ModbusErrorReply>
			 return;
 80014d8:	e023      	b.n	8001522 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	440b      	add	r3, r1
 80014ea:	7ed2      	ldrb	r2, [r2, #27]
 80014ec:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	440b      	add	r3, r1
 80014fe:	7f12      	ldrb	r2, [r2, #28]
 8001500:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <modbusWrite1Register+0x7c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <modbusWrite1Register+0x7c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001510:	2208      	movs	r2, #8
 8001512:	4619      	mov	r1, r3
 8001514:	f007 fcbc 	bl	8008e90 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <modbusWrite1Register+0x7c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2205      	movs	r2, #5
 800151e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000254 	.word	0x20000254

0800152c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001532:	4b38      	ldr	r3, [pc, #224]	@ (8001614 <modbusRead1Register+0xe8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	7edb      	ldrb	r3, [r3, #27]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b29b      	uxth	r3, r3
 800153c:	4a35      	ldr	r2, [pc, #212]	@ (8001614 <modbusRead1Register+0xe8>)
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	7f12      	ldrb	r2, [r2, #28]
 8001542:	4413      	add	r3, r2
 8001544:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001546:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <modbusRead1Register+0xe8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	7e5b      	ldrb	r3, [r3, #25]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b29b      	uxth	r3, r3
 8001550:	4a30      	ldr	r2, [pc, #192]	@ (8001614 <modbusRead1Register+0xe8>)
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	7e92      	ldrb	r2, [r2, #26]
 8001556:	4413      	add	r3, r2
 8001558:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <modbusRead1Register+0x3a>
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	2b7d      	cmp	r3, #125	@ 0x7d
 8001564:	d903      	bls.n	800156e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001566:	2003      	movs	r0, #3
 8001568:	f000 f856 	bl	8001618 <ModbusErrorReply>
		 return;
 800156c:	e04e      	b.n	800160c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800156e:	88ba      	ldrh	r2, [r7, #4]
 8001570:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <modbusRead1Register+0xe8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	429a      	cmp	r2, r3
 8001578:	d808      	bhi.n	800158c <modbusRead1Register+0x60>
 800157a:	88ba      	ldrh	r2, [r7, #4]
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	4413      	add	r3, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <modbusRead1Register+0xe8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	429a      	cmp	r2, r3
 800158a:	d903      	bls.n	8001594 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800158c:	2002      	movs	r0, #2
 800158e:	f000 f843 	bl	8001618 <ModbusErrorReply>
		 return;
 8001592:	e03b      	b.n	800160c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001594:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <modbusRead1Register+0xe8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2203      	movs	r2, #3
 800159a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <modbusRead1Register+0xe8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0052      	lsls	r2, r2, #1
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80015ae:	2400      	movs	r4, #0
 80015b0:	e020      	b.n	80015f4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80015b2:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <modbusRead1Register+0xe8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	88bb      	ldrh	r3, [r7, #4]
 80015ba:	4423      	add	r3, r4
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <modbusRead1Register+0xe8>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	1c63      	adds	r3, r4, #1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	7849      	ldrb	r1, [r1, #1]
 80015ca:	4413      	add	r3, r2
 80015cc:	460a      	mov	r2, r1
 80015ce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <modbusRead1Register+0xe8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	4423      	add	r3, r4
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	18d1      	adds	r1, r2, r3
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <modbusRead1Register+0xe8>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	0063      	lsls	r3, r4, #1
 80015e6:	3303      	adds	r3, #3
 80015e8:	7809      	ldrb	r1, [r1, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	460a      	mov	r2, r1
 80015ee:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015f2:	3401      	adds	r4, #1
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	429c      	cmp	r4, r3
 80015f8:	dbdb      	blt.n	80015b2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	3301      	adds	r3, #1
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <modbusRead1Register+0xe8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0052      	lsls	r2, r2, #1
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	20000254 	.word	0x20000254

08001618 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <ModbusErrorReply+0x40>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	7e1a      	ldrb	r2, [r3, #24]
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <ModbusErrorReply+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <ModbusErrorReply+0x40>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <ModbusErrorReply+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2202      	movs	r2, #2
 8001646:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000254 	.word	0x20000254

0800165c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <Modbus_frame_response+0x2c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	7e1b      	ldrb	r3, [r3, #24]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d004      	beq.n	8001674 <Modbus_frame_response+0x18>
 800166a:	2b06      	cmp	r3, #6
 800166c:	d105      	bne.n	800167a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800166e:	f7ff ff1d 	bl	80014ac <modbusWrite1Register>
		break;
 8001672:	e006      	b.n	8001682 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001674:	f7ff ff5a 	bl	800152c <modbusRead1Register>
		break;
 8001678:	e003      	b.n	8001682 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800167a:	2001      	movs	r0, #1
 800167c:	f7ff ffcc 	bl	8001618 <ModbusErrorReply>
		break;
 8001680:	bf00      	nop

	}
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000254 	.word	0x20000254

0800168c <Modbus_Emission>:

void Modbus_Emission()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001692:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <Modbus_Emission+0xe8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169c:	2b20      	cmp	r3, #32
 800169e:	d15d      	bne.n	800175c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80016a0:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <Modbus_Emission+0xe8>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <Modbus_Emission+0xe8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80016ae:	4b31      	ldr	r3, [pc, #196]	@ (8001774 <Modbus_Emission+0xe8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80016b6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80016b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <Modbus_Emission+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80016c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001774 <Modbus_Emission+0xe8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80016c8:	461a      	mov	r2, r3
 80016ca:	f007 fbe1 	bl	8008e90 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80016ce:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <Modbus_Emission+0xe8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <Modbus_Emission+0xe8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3203      	adds	r2, #3
 80016de:	b292      	uxth	r2, r2
 80016e0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016e4:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <Modbus_Emission+0xe8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016ec:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <Modbus_Emission+0xe8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016f4:	3b02      	subs	r3, #2
 80016f6:	4619      	mov	r1, r3
 80016f8:	4610      	mov	r0, r2
 80016fa:	f7ff fd9f 	bl	800123c <CRC16>
 80016fe:	4603      	mov	r3, r0
 8001700:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <Modbus_Emission+0xe8>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <Modbus_Emission+0xe8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800170e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001710:	7939      	ldrb	r1, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	460a      	mov	r2, r1
 8001716:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <Modbus_Emission+0xe8>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <Modbus_Emission+0xe8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001726:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001728:	7979      	ldrb	r1, [r7, #5]
 800172a:	4413      	add	r3, r2
 800172c:	460a      	mov	r2, r1
 800172e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <Modbus_Emission+0xe8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173c:	2b20      	cmp	r3, #32
 800173e:	d10d      	bne.n	800175c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <Modbus_Emission+0xe8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <Modbus_Emission+0xe8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <Modbus_Emission+0xe8>)
 8001750:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001752:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001756:	461a      	mov	r2, r3
 8001758:	f005 fd94 	bl	8007284 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <Modbus_Emission+0xe8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <Modbus_Emission+0xe8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	755a      	strb	r2, [r3, #21]

}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000254 	.word	0x20000254

08001778 <MOTOR_init>:
 *      Author: napat
 */
#include "Motor.h"

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	460b      	mov	r3, r1
 8001788:	80fb      	strh	r3, [r7, #6]
 800178a:	4613      	mov	r3, r2
 800178c:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	88fa      	ldrh	r2, [r7, #6]
 8001798:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	88ba      	ldrh	r2, [r7, #4]
 800179e:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 80017a0:	88bb      	ldrh	r3, [r7, #4]
 80017a2:	4619      	mov	r1, r3
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f003 fc99 	bl	80050dc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4619      	mov	r1, r3
 80017ae:	68b8      	ldr	r0, [r7, #8]
 80017b0:	f003 fc94 	bl	80050dc <HAL_TIM_PWM_Start_IT>

}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 80017c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c4:	b089      	sub	sp, #36	@ 0x24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	61f8      	str	r0, [r7, #28]
 80017ca:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8263 	beq.w	8001c9c <MOTOR_set_duty+0x4dc>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 825e 	beq.w	8001c9c <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 80017e0:	69b8      	ldr	r0, [r7, #24]
 80017e2:	f7fe fe7d 	bl	80004e0 <__aeabi_f2d>
 80017e6:	a394      	add	r3, pc, #592	@ (adr r3, 8001a38 <MOTOR_set_duty+0x278>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe fed0 	bl	8000590 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	a395      	add	r3, pc, #596	@ (adr r3, 8001a50 <MOTOR_set_duty+0x290>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7ff f94d 	bl	8000a9c <__aeabi_dcmpge>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MOTOR_set_duty+0x4c>
 8001808:	4b8f      	ldr	r3, [pc, #572]	@ (8001a48 <MOTOR_set_duty+0x288>)
 800180a:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 800180c:	69b8      	ldr	r0, [r7, #24]
 800180e:	f7fe fe67 	bl	80004e0 <__aeabi_f2d>
 8001812:	a389      	add	r3, pc, #548	@ (adr r3, 8001a38 <MOTOR_set_duty+0x278>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe feba 	bl	8000590 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	a386      	add	r3, pc, #536	@ (adr r3, 8001a40 <MOTOR_set_duty+0x280>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7ff f92d 	bl	8000a88 <__aeabi_dcmple>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MOTOR_set_duty+0x78>
 8001834:	4b85      	ldr	r3, [pc, #532]	@ (8001a4c <MOTOR_set_duty+0x28c>)
 8001836:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 8001838:	edd7 7a06 	vldr	s15, [r7, #24]
 800183c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	d16e      	bne.n	8001924 <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	889b      	ldrh	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <MOTOR_set_duty+0x9a>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	635a      	str	r2, [r3, #52]	@ 0x34
 8001858:	e02c      	b.n	80018b4 <MOTOR_set_duty+0xf4>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	889b      	ldrh	r3, [r3, #4]
 800185e:	2b04      	cmp	r3, #4
 8001860:	d105      	bne.n	800186e <MOTOR_set_duty+0xae>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	6393      	str	r3, [r2, #56]	@ 0x38
 800186c:	e022      	b.n	80018b4 <MOTOR_set_duty+0xf4>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	2b08      	cmp	r3, #8
 8001874:	d105      	bne.n	8001882 <MOTOR_set_duty+0xc2>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2300      	movs	r3, #0
 800187e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001880:	e018      	b.n	80018b4 <MOTOR_set_duty+0xf4>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	889b      	ldrh	r3, [r3, #4]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d105      	bne.n	8001896 <MOTOR_set_duty+0xd6>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2300      	movs	r3, #0
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
 8001894:	e00e      	b.n	80018b4 <MOTOR_set_duty+0xf4>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d105      	bne.n	80018aa <MOTOR_set_duty+0xea>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	6493      	str	r3, [r2, #72]	@ 0x48
 80018a8:	e004      	b.n	80018b4 <MOTOR_set_duty+0xf4>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2300      	movs	r3, #0
 80018b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	88db      	ldrh	r3, [r3, #6]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <MOTOR_set_duty+0x108>
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80018c6:	e1ea      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	88db      	ldrh	r3, [r3, #6]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d105      	bne.n	80018dc <MOTOR_set_duty+0x11c>
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80018da:	e1e0      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	88db      	ldrh	r3, [r3, #6]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d105      	bne.n	80018f0 <MOTOR_set_duty+0x130>
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018ee:	e1d6      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	88db      	ldrh	r3, [r3, #6]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d105      	bne.n	8001904 <MOTOR_set_duty+0x144>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2300      	movs	r3, #0
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	e1cc      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	88db      	ldrh	r3, [r3, #6]
 8001908:	2b10      	cmp	r3, #16
 800190a:	d105      	bne.n	8001918 <MOTOR_set_duty+0x158>
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	6493      	str	r3, [r2, #72]	@ 0x48
 8001916:	e1c2      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001922:	e1bc      	b.n	8001c9e <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 8001924:	edd7 7a06 	vldr	s15, [r7, #24]
 8001928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	f340 80d6 	ble.w	8001ae0 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	889b      	ldrh	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <MOTOR_set_duty+0x188>
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	635a      	str	r2, [r3, #52]	@ 0x34
 8001946:	e02c      	b.n	80019a2 <MOTOR_set_duty+0x1e2>
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	889b      	ldrh	r3, [r3, #4]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d105      	bne.n	800195c <MOTOR_set_duty+0x19c>
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	6393      	str	r3, [r2, #56]	@ 0x38
 800195a:	e022      	b.n	80019a2 <MOTOR_set_duty+0x1e2>
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	889b      	ldrh	r3, [r3, #4]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d105      	bne.n	8001970 <MOTOR_set_duty+0x1b0>
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800196e:	e018      	b.n	80019a2 <MOTOR_set_duty+0x1e2>
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	889b      	ldrh	r3, [r3, #4]
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d105      	bne.n	8001984 <MOTOR_set_duty+0x1c4>
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	6413      	str	r3, [r2, #64]	@ 0x40
 8001982:	e00e      	b.n	80019a2 <MOTOR_set_duty+0x1e2>
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	889b      	ldrh	r3, [r3, #4]
 8001988:	2b10      	cmp	r3, #16
 800198a:	d105      	bne.n	8001998 <MOTOR_set_duty+0x1d8>
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	2300      	movs	r3, #0
 8001994:	6493      	str	r3, [r2, #72]	@ 0x48
 8001996:	e004      	b.n	80019a2 <MOTOR_set_duty+0x1e2>
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2300      	movs	r3, #0
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	88db      	ldrh	r3, [r3, #6]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d113      	bne.n	80019d2 <MOTOR_set_duty+0x212>
 80019aa:	69b8      	ldr	r0, [r7, #24]
 80019ac:	f7fe fd98 	bl	80004e0 <__aeabi_f2d>
 80019b0:	a321      	add	r3, pc, #132	@ (adr r3, 8001a38 <MOTOR_set_duty+0x278>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe fdeb 	bl	8000590 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681c      	ldr	r4, [r3, #0]
 80019c8:	f7ff f8a4 	bl	8000b14 <__aeabi_d2uiz>
 80019cc:	4603      	mov	r3, r0
 80019ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80019d0:	e165      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	88db      	ldrh	r3, [r3, #6]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d113      	bne.n	8001a02 <MOTOR_set_duty+0x242>
 80019da:	69b8      	ldr	r0, [r7, #24]
 80019dc:	f7fe fd80 	bl	80004e0 <__aeabi_f2d>
 80019e0:	a315      	add	r3, pc, #84	@ (adr r3, 8001a38 <MOTOR_set_duty+0x278>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fdd3 	bl	8000590 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681c      	ldr	r4, [r3, #0]
 80019f8:	f7ff f88c 	bl	8000b14 <__aeabi_d2uiz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001a00:	e14d      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	88db      	ldrh	r3, [r3, #6]
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d126      	bne.n	8001a58 <MOTOR_set_duty+0x298>
 8001a0a:	69b8      	ldr	r0, [r7, #24]
 8001a0c:	f7fe fd68 	bl	80004e0 <__aeabi_f2d>
 8001a10:	a309      	add	r3, pc, #36	@ (adr r3, 8001a38 <MOTOR_set_duty+0x278>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fdbb 	bl	8000590 <__aeabi_dmul>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681c      	ldr	r4, [r3, #0]
 8001a28:	f7ff f874 	bl	8000b14 <__aeabi_d2uiz>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001a30:	e135      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	3b645a1d 	.word	0x3b645a1d
 8001a3c:	40453fdf 	.word	0x40453fdf
 8001a40:	00000000 	.word	0x00000000
 8001a44:	c0e4c060 	.word	0xc0e4c060
 8001a48:	47260300 	.word	0x47260300
 8001a4c:	c7260300 	.word	0xc7260300
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40e4c060 	.word	0x40e4c060
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	88db      	ldrh	r3, [r3, #6]
 8001a5c:	2b0c      	cmp	r3, #12
 8001a5e:	d113      	bne.n	8001a88 <MOTOR_set_duty+0x2c8>
 8001a60:	69b8      	ldr	r0, [r7, #24]
 8001a62:	f7fe fd3d 	bl	80004e0 <__aeabi_f2d>
 8001a66:	a390      	add	r3, pc, #576	@ (adr r3, 8001ca8 <MOTOR_set_duty+0x4e8>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fd90 	bl	8000590 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681c      	ldr	r4, [r3, #0]
 8001a7e:	f7ff f849 	bl	8000b14 <__aeabi_d2uiz>
 8001a82:	4603      	mov	r3, r0
 8001a84:	6423      	str	r3, [r4, #64]	@ 0x40
 8001a86:	e10a      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	88db      	ldrh	r3, [r3, #6]
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d113      	bne.n	8001ab8 <MOTOR_set_duty+0x2f8>
 8001a90:	69b8      	ldr	r0, [r7, #24]
 8001a92:	f7fe fd25 	bl	80004e0 <__aeabi_f2d>
 8001a96:	a384      	add	r3, pc, #528	@ (adr r3, 8001ca8 <MOTOR_set_duty+0x4e8>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fd78 	bl	8000590 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681c      	ldr	r4, [r3, #0]
 8001aae:	f7ff f831 	bl	8000b14 <__aeabi_d2uiz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001ab6:	e0f2      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001ab8:	69b8      	ldr	r0, [r7, #24]
 8001aba:	f7fe fd11 	bl	80004e0 <__aeabi_f2d>
 8001abe:	a37a      	add	r3, pc, #488	@ (adr r3, 8001ca8 <MOTOR_set_duty+0x4e8>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe fd64 	bl	8000590 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681c      	ldr	r4, [r3, #0]
 8001ad6:	f7ff f81d 	bl	8000b14 <__aeabi_d2uiz>
 8001ada:	4603      	mov	r3, r0
 8001adc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001ade:	e0de      	b.n	8001c9e <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	889b      	ldrh	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <MOTOR_set_duty+0x336>
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8001af2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af4:	e031      	b.n	8001b5a <MOTOR_set_duty+0x39a>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	889b      	ldrh	r3, [r3, #4]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d106      	bne.n	8001b0c <MOTOR_set_duty+0x34c>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001b08:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b0a:	e026      	b.n	8001b5a <MOTOR_set_duty+0x39a>
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	889b      	ldrh	r3, [r3, #4]
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d106      	bne.n	8001b22 <MOTOR_set_duty+0x362>
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001b1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001b20:	e01b      	b.n	8001b5a <MOTOR_set_duty+0x39a>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	889b      	ldrh	r3, [r3, #4]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d106      	bne.n	8001b38 <MOTOR_set_duty+0x378>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	e010      	b.n	8001b5a <MOTOR_set_duty+0x39a>
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	889b      	ldrh	r3, [r3, #4]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d106      	bne.n	8001b4e <MOTOR_set_duty+0x38e>
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001b4a:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b4c:	e005      	b.n	8001b5a <MOTOR_set_duty+0x39a>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	88db      	ldrh	r3, [r3, #6]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d117      	bne.n	8001b92 <MOTOR_set_duty+0x3d2>
 8001b62:	69b8      	ldr	r0, [r7, #24]
 8001b64:	f7fe fcbc 	bl	80004e0 <__aeabi_f2d>
 8001b68:	a34f      	add	r3, pc, #316	@ (adr r3, 8001ca8 <MOTOR_set_duty+0x4e8>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	f7fe fd0f 	bl	8000590 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	613a      	str	r2, [r7, #16]
 8001b78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681c      	ldr	r4, [r3, #0]
 8001b84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b88:	f7fe ffc4 	bl	8000b14 <__aeabi_d2uiz>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b90:	e085      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	88db      	ldrh	r3, [r3, #6]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d117      	bne.n	8001bca <MOTOR_set_duty+0x40a>
 8001b9a:	69b8      	ldr	r0, [r7, #24]
 8001b9c:	f7fe fca0 	bl	80004e0 <__aeabi_f2d>
 8001ba0:	a341      	add	r3, pc, #260	@ (adr r3, 8001ca8 <MOTOR_set_duty+0x4e8>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	f7fe fcf3 	bl	8000590 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	60ba      	str	r2, [r7, #8]
 8001bb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681c      	ldr	r4, [r3, #0]
 8001bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bc0:	f7fe ffa8 	bl	8000b14 <__aeabi_d2uiz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001bc8:	e069      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	88db      	ldrh	r3, [r3, #6]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d117      	bne.n	8001c02 <MOTOR_set_duty+0x442>
 8001bd2:	69b8      	ldr	r0, [r7, #24]
 8001bd4:	f7fe fc84 	bl	80004e0 <__aeabi_f2d>
 8001bd8:	a333      	add	r3, pc, #204	@ (adr r3, 8001ca8 <MOTOR_set_duty+0x4e8>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fcd7 	bl	8000590 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	603a      	str	r2, [r7, #0]
 8001be8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681c      	ldr	r4, [r3, #0]
 8001bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf8:	f7fe ff8c 	bl	8000b14 <__aeabi_d2uiz>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001c00:	e04d      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	88db      	ldrh	r3, [r3, #6]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d116      	bne.n	8001c38 <MOTOR_set_duty+0x478>
 8001c0a:	69b8      	ldr	r0, [r7, #24]
 8001c0c:	f7fe fc68 	bl	80004e0 <__aeabi_f2d>
 8001c10:	a325      	add	r3, pc, #148	@ (adr r3, 8001ca8 <MOTOR_set_duty+0x4e8>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fcbb 	bl	8000590 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4615      	mov	r5, r2
 8001c20:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681c      	ldr	r4, [r3, #0]
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	4631      	mov	r1, r6
 8001c2e:	f7fe ff71 	bl	8000b14 <__aeabi_d2uiz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	6423      	str	r3, [r4, #64]	@ 0x40
 8001c36:	e032      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	88db      	ldrh	r3, [r3, #6]
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d116      	bne.n	8001c6e <MOTOR_set_duty+0x4ae>
 8001c40:	69b8      	ldr	r0, [r7, #24]
 8001c42:	f7fe fc4d 	bl	80004e0 <__aeabi_f2d>
 8001c46:	a318      	add	r3, pc, #96	@ (adr r3, 8001ca8 <MOTOR_set_duty+0x4e8>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fca0 	bl	8000590 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4692      	mov	sl, r2
 8001c56:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	4650      	mov	r0, sl
 8001c62:	4659      	mov	r1, fp
 8001c64:	f7fe ff56 	bl	8000b14 <__aeabi_d2uiz>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001c6c:	e017      	b.n	8001c9e <MOTOR_set_duty+0x4de>
 8001c6e:	69b8      	ldr	r0, [r7, #24]
 8001c70:	f7fe fc36 	bl	80004e0 <__aeabi_f2d>
 8001c74:	a30c      	add	r3, pc, #48	@ (adr r3, 8001ca8 <MOTOR_set_duty+0x4e8>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fc89 	bl	8000590 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4690      	mov	r8, r2
 8001c84:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681c      	ldr	r4, [r3, #0]
 8001c8e:	4640      	mov	r0, r8
 8001c90:	4649      	mov	r1, r9
 8001c92:	f7fe ff3f 	bl	8000b14 <__aeabi_d2uiz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001c9a:	e000      	b.n	8001c9e <MOTOR_set_duty+0x4de>
        return;
 8001c9c:	bf00      	nop
    }
}
 8001c9e:	3724      	adds	r7, #36	@ 0x24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ca6:	bf00      	nop
 8001ca8:	3b645a1d 	.word	0x3b645a1d
 8001cac:	40453fdf 	.word	0x40453fdf

08001cb0 <PID_controller_init>:

extern Trap_Traj Traj;

float boundary = 0.05;
void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8001cc0:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	0000      	movs	r0, r0
 8001d04:	0000      	movs	r0, r0
	...

08001d08 <PS2X_Reader>:
    PS2->on = 0;
}
extern PS2_typedef ps2;

void PS2X_Reader()
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
//	ps2.ps2Y = 0;
//	ps2.ps2X = 0;
	if (ps2.ps2RX[0] == 69) 		//Press L4 to switch to use Joy stick
 8001d0e:	4b84      	ldr	r3, [pc, #528]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b45      	cmp	r3, #69	@ 0x45
 8001d14:	d105      	bne.n	8001d22 <PS2X_Reader+0x1a>
	{
		ps2.mode = 1;
 8001d16:	4b82      	ldr	r3, [pc, #520]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on = 0;
 8001d1c:	4b80      	ldr	r3, [pc, #512]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	67da      	str	r2, [r3, #124]	@ 0x7c
//		ps2.ps2YPos = 132;
	}
	if (ps2.ps2RX[0] == 70)		//Press L5 to switch to use Button
 8001d22:	4b7f      	ldr	r3, [pc, #508]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b46      	cmp	r3, #70	@ 0x46
 8001d28:	d109      	bne.n	8001d3e <PS2X_Reader+0x36>
	{
		ps2.mode = 2;
 8001d2a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on =1;
 8001d30:	4b7b      	ldr	r3, [pc, #492]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.PIDPos = AMT.Linear_Position;
 8001d36:	4b7b      	ldr	r3, [pc, #492]	@ (8001f24 <PS2X_Reader+0x21c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a79      	ldr	r2, [pc, #484]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d3c:	6793      	str	r3, [r2, #120]	@ 0x78


	}
	//Mode Joy stick
	if (ps2.mode == 1)
 8001d3e:	4b78      	ldr	r3, [pc, #480]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	f040 80c5 	bne.w	8001ed2 <PS2X_Reader+0x1ca>
	{
		//Read Ps2 Joy stick in VERTICAL
		if(ps2.ps2RX[0] == 81){
 8001d48:	4b75      	ldr	r3, [pc, #468]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b51      	cmp	r3, #81	@ 0x51
 8001d4e:	d169      	bne.n	8001e24 <PS2X_Reader+0x11c>
			if (ps2.ps2RX[2] == 83){
 8001d50:	4b73      	ldr	r3, [pc, #460]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d52:	789b      	ldrb	r3, [r3, #2]
 8001d54:	2b53      	cmp	r3, #83	@ 0x53
 8001d56:	d103      	bne.n	8001d60 <PS2X_Reader+0x58>
				ps2.digit = 1;
 8001d58:	4b71      	ldr	r3, [pc, #452]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	e00e      	b.n	8001d7e <PS2X_Reader+0x76>
			}
			else if (ps2.ps2RX[3] == 83){
 8001d60:	4b6f      	ldr	r3, [pc, #444]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	2b53      	cmp	r3, #83	@ 0x53
 8001d66:	d103      	bne.n	8001d70 <PS2X_Reader+0x68>
				ps2.digit = 2;
 8001d68:	4b6d      	ldr	r3, [pc, #436]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	e006      	b.n	8001d7e <PS2X_Reader+0x76>
			}
			else if (ps2.ps2RX[4] == 83){
 8001d70:	4b6b      	ldr	r3, [pc, #428]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d72:	791b      	ldrb	r3, [r3, #4]
 8001d74:	2b53      	cmp	r3, #83	@ 0x53
 8001d76:	d102      	bne.n	8001d7e <PS2X_Reader+0x76>
				ps2.digit = 3;
 8001d78:	4b69      	ldr	r3, [pc, #420]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	60da      	str	r2, [r3, #12]
			}
			for(int k=1 ; k<5 ; k++){
 8001d7e:	2301      	movs	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e01d      	b.n	8001dc0 <PS2X_Reader+0xb8>
				for (int l=0; l<10 ; l++){
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	e014      	b.n	8001db4 <PS2X_Reader+0xac>
					if (ps2.ps2RX[k] == num[l]){
 8001d8a:	4a65      	ldr	r2, [pc, #404]	@ (8001f20 <PS2X_Reader+0x218>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4619      	mov	r1, r3
 8001d94:	4a64      	ldr	r2, [pc, #400]	@ (8001f28 <PS2X_Reader+0x220>)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	4299      	cmp	r1, r3
 8001d9e:	d106      	bne.n	8001dae <PS2X_Reader+0xa6>
						ps2.gain[k-1] = l;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	495e      	ldr	r1, [pc, #376]	@ (8001f20 <PS2X_Reader+0x218>)
 8001da6:	3304      	adds	r3, #4
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int l=0; l<10 ; l++){
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3301      	adds	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	dde7      	ble.n	8001d8a <PS2X_Reader+0x82>
			for(int k=1 ; k<5 ; k++){
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	ddde      	ble.n	8001d84 <PS2X_Reader+0x7c>
					}
				}
			}
			if (ps2.digit == 1){
 8001dc6:	4b56      	ldr	r3, [pc, #344]	@ (8001f20 <PS2X_Reader+0x218>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d104      	bne.n	8001dd8 <PS2X_Reader+0xd0>
				ps2.ps2YPos = ps2.gain[0];
 8001dce:	4b54      	ldr	r3, [pc, #336]	@ (8001f20 <PS2X_Reader+0x218>)
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	4a53      	ldr	r2, [pc, #332]	@ (8001f20 <PS2X_Reader+0x218>)
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	e025      	b.n	8001e24 <PS2X_Reader+0x11c>
			}
			else if (ps2.digit == 2){
 8001dd8:	4b51      	ldr	r3, [pc, #324]	@ (8001f20 <PS2X_Reader+0x218>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d10c      	bne.n	8001dfa <PS2X_Reader+0xf2>
				ps2.ps2YPos = (ps2.gain[0]*10)+ps2.gain[1];
 8001de0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f20 <PS2X_Reader+0x218>)
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b4c      	ldr	r3, [pc, #304]	@ (8001f20 <PS2X_Reader+0x218>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a4a      	ldr	r2, [pc, #296]	@ (8001f20 <PS2X_Reader+0x218>)
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	e014      	b.n	8001e24 <PS2X_Reader+0x11c>
			}
			else if (ps2.digit == 3){
 8001dfa:	4b49      	ldr	r3, [pc, #292]	@ (8001f20 <PS2X_Reader+0x218>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d110      	bne.n	8001e24 <PS2X_Reader+0x11c>
				ps2.ps2YPos = (ps2.gain[0]*100)+(ps2.gain[1]*10)+ps2.gain[2];
 8001e02:	4b47      	ldr	r3, [pc, #284]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2264      	movs	r2, #100	@ 0x64
 8001e08:	fb02 f103 	mul.w	r1, r2, r3
 8001e0c:	4b44      	ldr	r3, [pc, #272]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	18ca      	adds	r2, r1, r3
 8001e1a:	4b41      	ldr	r3, [pc, #260]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a3f      	ldr	r2, [pc, #252]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e22:	6213      	str	r3, [r2, #32]
		//Convert from 0 - 255 to -128 - 128
//		ps2.ps2Y = (ps2.ps2YPos - 132);
//		ps2.ps2X = ps2.ps2XPos - 132;

		//Generate PWM
		ps2.pwmOut = ((ps2.ps2Y/ 132.0)*300) + 150;
 8001e24:	4b3e      	ldr	r3, [pc, #248]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb47 	bl	80004bc <__aeabi_i2d>
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	4b3e      	ldr	r3, [pc, #248]	@ (8001f2c <PS2X_Reader+0x224>)
 8001e34:	f7fe fcd6 	bl	80007e4 <__aeabi_ddiv>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	a333      	add	r3, pc, #204	@ (adr r3, 8001f10 <PS2X_Reader+0x208>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe fba3 	bl	8000590 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	a331      	add	r3, pc, #196	@ (adr r3, 8001f18 <PS2X_Reader+0x210>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe f9e4 	bl	8000224 <__adddf3>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fe2e 	bl	8000ac4 <__aeabi_d2iz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e6c:	6693      	str	r3, [r2, #104]	@ 0x68
		ps2.pwmOut = 320 - ps2.ps2YPos;
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001e76:	4a2a      	ldr	r2, [pc, #168]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e78:	6693      	str	r3, [r2, #104]	@ 0x68
		if (ps2.pwmOut > 300)
 8001e7a:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e7e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001e82:	dd03      	ble.n	8001e8c <PS2X_Reader+0x184>
		{
			ps2.pwmOut = 300;
 8001e84:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e8a:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < -300)
 8001e8c:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e90:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8001e94:	da02      	bge.n	8001e9c <PS2X_Reader+0x194>
		{
			ps2.pwmOut = 0;
 8001e96:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < 0)
 8001e9c:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <PS2X_Reader+0x218>)
 8001e9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da05      	bge.n	8001eb0 <PS2X_Reader+0x1a8>
		{
			MOTOR_set_duty(&MT, 0);
 8001ea4:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001f30 <PS2X_Reader+0x228>
 8001ea8:	4822      	ldr	r0, [pc, #136]	@ (8001f34 <PS2X_Reader+0x22c>)
 8001eaa:	f7ff fc89 	bl	80017c0 <MOTOR_set_duty>
 8001eae:	e0cd      	b.n	800204c <PS2X_Reader+0x344>
		}
		else if (ps2.pwmOut > 0)
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <PS2X_Reader+0x218>)
 8001eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f340 80c9 	ble.w	800204c <PS2X_Reader+0x344>
		{
			MOTOR_set_duty(&MT, ps2.pwmOut);
 8001eba:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <PS2X_Reader+0x218>)
 8001ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eca:	481a      	ldr	r0, [pc, #104]	@ (8001f34 <PS2X_Reader+0x22c>)
 8001ecc:	f7ff fc78 	bl	80017c0 <MOTOR_set_duty>
 8001ed0:	e0bc      	b.n	800204c <PS2X_Reader+0x344>
		}
	}

	//--- Mode Button ---//
	else if (ps2.mode == 2)
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <PS2X_Reader+0x218>)
 8001ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	f040 80b8 	bne.w	800204c <PS2X_Reader+0x344>
	{
//		ps2.PIDPos = AMT.Linear_Position;
		ps2.on = 1;
 8001edc:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <PS2X_Reader+0x218>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.ps2Y = 0;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <PS2X_Reader+0x218>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
//		ps2.ps2X = 0;
		//Keys Map
		static uint32_t timestamp =0;
		if(timestamp < HAL_GetTick())
 8001ee8:	f001 f902 	bl	80030f0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <PS2X_Reader+0x230>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d908      	bls.n	8001f08 <PS2X_Reader+0x200>
		{
			timestamp = HAL_GetTick()+100;
 8001ef6:	f001 f8fb 	bl	80030f0 <HAL_GetTick>
 8001efa:	4603      	mov	r3, r0
 8001efc:	3364      	adds	r3, #100	@ 0x64
 8001efe:	4a0e      	ldr	r2, [pc, #56]	@ (8001f38 <PS2X_Reader+0x230>)
 8001f00:	6013      	str	r3, [r2, #0]
			ps2.ps2RX[0] = 0;
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <PS2X_Reader+0x218>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
		}
		for (int i =0;i<6;i++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	e05a      	b.n	8001fc4 <PS2X_Reader+0x2bc>
 8001f0e:	bf00      	nop
 8001f10:	00000000 	.word	0x00000000
 8001f14:	4072c000 	.word	0x4072c000
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	4062c000 	.word	0x4062c000
 8001f20:	20001074 	.word	0x20001074
 8001f24:	20000fe8 	.word	0x20000fe8
 8001f28:	20000200 	.word	0x20000200
 8001f2c:	40608000 	.word	0x40608000
 8001f30:	00000000 	.word	0x00000000
 8001f34:	20001020 	.word	0x20001020
 8001f38:	20000258 	.word	0x20000258
		{
			if (ps2.ps2RX[0] == 0)
 8001f3c:	4b66      	ldr	r3, [pc, #408]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d123      	bne.n	8001f8c <PS2X_Reader+0x284>
			{
				//Left
				ps2.l[0] = 0; //w
 8001f44:	4b64      	ldr	r3, [pc, #400]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	651a      	str	r2, [r3, #80]	@ 0x50
				ps2.l[1] = 0;	//a
 8001f4a:	4b63      	ldr	r3, [pc, #396]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	655a      	str	r2, [r3, #84]	@ 0x54
				ps2.l[2] = 0;	//s
 8001f50:	4b61      	ldr	r3, [pc, #388]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	659a      	str	r2, [r3, #88]	@ 0x58
				ps2.l[3] = 0;	//d
 8001f56:	4b60      	ldr	r3, [pc, #384]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
				ps2.l[4] = 0;	//l1
 8001f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	661a      	str	r2, [r3, #96]	@ 0x60
				ps2.l[5] = 0;	//l2
 8001f62:	4b5d      	ldr	r3, [pc, #372]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	665a      	str	r2, [r3, #100]	@ 0x64
				//Right
				ps2.r[0] = 0;	//w
 8001f68:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	639a      	str	r2, [r3, #56]	@ 0x38
				ps2.r[1] = 0;	//a
 8001f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	63da      	str	r2, [r3, #60]	@ 0x3c
				ps2.r[2] = 0;	//s
 8001f74:	4b58      	ldr	r3, [pc, #352]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	641a      	str	r2, [r3, #64]	@ 0x40
				ps2.r[3] = 0;	//d
 8001f7a:	4b57      	ldr	r3, [pc, #348]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	@ 0x44
				ps2.r[4] = 0;	//r1
 8001f80:	4b55      	ldr	r3, [pc, #340]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	649a      	str	r2, [r3, #72]	@ 0x48
				ps2.r[5] = 0;	//r2
 8001f86:	4b54      	ldr	r3, [pc, #336]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	64da      	str	r2, [r3, #76]	@ 0x4c
			}

			if (ps2.ps2RX[0] - 65 == i)
 8001f8c:	4b52      	ldr	r3, [pc, #328]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	3b41      	subs	r3, #65	@ 0x41
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <PS2X_Reader+0x29e>
			{
				ps2.l[i] = 1;
 8001f98:	4a4f      	ldr	r2, [pc, #316]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3314      	adds	r3, #20
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001fa4:	e00b      	b.n	8001fbe <PS2X_Reader+0x2b6>
			}

			else if (ps2.ps2RX[0] - 73 == i)
 8001fa6:	4b4c      	ldr	r3, [pc, #304]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	3b49      	subs	r3, #73	@ 0x49
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d105      	bne.n	8001fbe <PS2X_Reader+0x2b6>
			{
				ps2.r[i] = 1;
 8001fb2:	4a49      	ldr	r2, [pc, #292]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	330e      	adds	r3, #14
 8001fb8:	2101      	movs	r1, #1
 8001fba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i =0;i<6;i++)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	ddb8      	ble.n	8001f3c <PS2X_Reader+0x234>
			}
		}

		//Generate PWM
		if (ps2.l[2] == 1)
 8001fca:	4b43      	ldr	r3, [pc, #268]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d113      	bne.n	8001ffa <PS2X_Reader+0x2f2>
		{
			//Adjust How to decrease(-) Linear position
			ps2.PIDPos -= 0.1;
 8001fd2:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa82 	bl	80004e0 <__aeabi_f2d>
 8001fdc:	a33c      	add	r3, pc, #240	@ (adr r3, 80020d0 <PS2X_Reader+0x3c8>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe f91d 	bl	8000220 <__aeabi_dsub>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fdb1 	bl	8000b54 <__aeabi_d2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4a38      	ldr	r2, [pc, #224]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001ff6:	6793      	str	r3, [r2, #120]	@ 0x78
 8001ff8:	e028      	b.n	800204c <PS2X_Reader+0x344>
//			if (ps2.pwmOut < 0)
//			{
//				ps2.pwmOut = 0;		// to make pwm1 >= 0
//			}
		}
		else if (ps2.l[3] == 1)
 8001ffa:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d113      	bne.n	800202a <PS2X_Reader+0x322>
		{
			//Adjust How to increase(+) Linear position
			ps2.PIDPos += 0.1;
 8002002:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8002004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fa6a 	bl	80004e0 <__aeabi_f2d>
 800200c:	a330      	add	r3, pc, #192	@ (adr r3, 80020d0 <PS2X_Reader+0x3c8>)
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	f7fe f907 	bl	8000224 <__adddf3>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fd99 	bl	8000b54 <__aeabi_d2f>
 8002022:	4603      	mov	r3, r0
 8002024:	4a2c      	ldr	r2, [pc, #176]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8002026:	6793      	str	r3, [r2, #120]	@ 0x78
 8002028:	e010      	b.n	800204c <PS2X_Reader+0x344>
//			ps2.pwmOut = ps2.pwmOut + count;	// + PWM with count
		}
		else if (ps2.l[0] == 1)		//Press down button(l1) to PWM out forward
 800202a:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <PS2X_Reader+0x3d0>)
 800202c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800202e:	2b01      	cmp	r3, #1
 8002030:	d00c      	beq.n	800204c <PS2X_Reader+0x344>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else if (ps2.l[1] == 1)		//Press down button(l1) to PWM out backward
 8002032:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8002034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002036:	2b01      	cmp	r3, #1
 8002038:	d008      	beq.n	800204c <PS2X_Reader+0x344>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
		}
		else if (ps2.r[1] == 1)		//Press X(r1) to stop
 800203a:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <PS2X_Reader+0x3d0>)
 800203c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203e:	2b01      	cmp	r3, #1
 8002040:	d004      	beq.n	800204c <PS2X_Reader+0x344>
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
			MOTOR_set_duty(&MT, 150);
 8002042:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80020dc <PS2X_Reader+0x3d4>
 8002046:	4826      	ldr	r0, [pc, #152]	@ (80020e0 <PS2X_Reader+0x3d8>)
 8002048:	f7ff fbba 	bl	80017c0 <MOTOR_set_duty>
		}
	}
	// Floor Selection
	if(base.ShelveMode == 1){
 800204c:	4b25      	ldr	r3, [pc, #148]	@ (80020e4 <PS2X_Reader+0x3dc>)
 800204e:	8b1b      	ldrh	r3, [r3, #24]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d136      	bne.n	80020c2 <PS2X_Reader+0x3ba>
		if (ps2.ps2RX[0] == 71){
 8002054:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b47      	cmp	r3, #71	@ 0x47
 800205a:	d112      	bne.n	8002082 <PS2X_Reader+0x37a>
			base.Shelve[ps2.counts-1] = ps2.PIDPos;
 800205c:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <PS2X_Reader+0x3d0>)
 800205e:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8002062:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002066:	3b01      	subs	r3, #1
 8002068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800206c:	ee17 1a90 	vmov	r1, s15
 8002070:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <PS2X_Reader+0x3dc>)
 8002072:	3306      	adds	r3, #6
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	6059      	str	r1, [r3, #4]
			ps2.counts=  +1;
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <PS2X_Reader+0x3d0>)
 800207c:	2201      	movs	r2, #1
 800207e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002080:	e011      	b.n	80020a6 <PS2X_Reader+0x39e>
		}
		else if (ps2.ps2RX[0] == 73){
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <PS2X_Reader+0x3d0>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b49      	cmp	r3, #73	@ 0x49
 8002088:	d10d      	bne.n	80020a6 <PS2X_Reader+0x39e>
			base.Shelve[ps2.counts-1] = 0;
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <PS2X_Reader+0x3d0>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208e:	3b01      	subs	r3, #1
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <PS2X_Reader+0x3dc>)
 8002092:	3306      	adds	r3, #6
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	605a      	str	r2, [r3, #4]
			ps2.counts = ps2.counts -1;
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <PS2X_Reader+0x3d0>)
 800209e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a0:	3b01      	subs	r3, #1
 80020a2:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <PS2X_Reader+0x3d0>)
 80020a4:	6753      	str	r3, [r2, #116]	@ 0x74
		}

		if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1){
 80020a6:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <PS2X_Reader+0x3d0>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b48      	cmp	r3, #72	@ 0x48
 80020ac:	d109      	bne.n	80020c2 <PS2X_Reader+0x3ba>
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <PS2X_Reader+0x3dc>)
 80020b0:	8b1b      	ldrh	r3, [r3, #24]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <PS2X_Reader+0x3ba>
			base.ShelveMode = 0;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <PS2X_Reader+0x3dc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	831a      	strh	r2, [r3, #24]
			registerFrame[0x10].U16 = 0b0000;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <PS2X_Reader+0x3e0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	841a      	strh	r2, [r3, #32]
		}
	}
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	f3af 8000 	nop.w
 80020d0:	9999999a 	.word	0x9999999a
 80020d4:	3fb99999 	.word	0x3fb99999
 80020d8:	20001074 	.word	0x20001074
 80020dc:	43160000 	.word	0x43160000
 80020e0:	20001020 	.word	0x20001020
 80020e4:	200010f4 	.word	0x200010f4
 80020e8:	20000e54 	.word	0x20000e54

080020ec <Traject_init>:
float Time_acc;
float Time_dec;


void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80020f8:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002132:	f000 ff78 	bl	8003026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002136:	f000 f91f 	bl	8002378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800213a:	f000 fc11 	bl	8002960 <MX_GPIO_Init>
  MX_DMA_Init();
 800213e:	f000 fbdd 	bl	80028fc <MX_DMA_Init>
  MX_TIM2_Init();
 8002142:	f000 f965 	bl	8002410 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002146:	f000 f9b7 	bl	80024b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800214a:	f000 fa87 	bl	800265c <MX_TIM5_Init>
  MX_UART4_Init();
 800214e:	f000 fb39 	bl	80027c4 <MX_UART4_Init>
  MX_TIM4_Init();
 8002152:	f000 fa33 	bl	80025bc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002156:	f000 fb83 	bl	8002860 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800215a:	f000 fb03 	bl	8002764 <MX_TIM16_Init>
  MX_TIM6_Init();
 800215e:	f000 facb 	bl	80026f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 8002162:	4870      	ldr	r0, [pc, #448]	@ (8002324 <main+0x1f8>)
 8002164:	f002 fe64 	bl	8004e30 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);					// Output compare
 8002168:	486f      	ldr	r0, [pc, #444]	@ (8002328 <main+0x1fc>)
 800216a:	f002 fe61 	bl	8004e30 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);					// Trajectory trigger
 800216e:	486f      	ldr	r0, [pc, #444]	@ (800232c <main+0x200>)
 8002170:	f002 fe5e 	bl	8004e30 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);        // PWM
 8002174:	2100      	movs	r1, #0
 8002176:	486c      	ldr	r0, [pc, #432]	@ (8002328 <main+0x1fc>)
 8002178:	f002 ffb0 	bl	80050dc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);        // Direction
 800217c:	2104      	movs	r1, #4
 800217e:	486a      	ldr	r0, [pc, #424]	@ (8002328 <main+0x1fc>)
 8002180:	f002 ffac 	bl	80050dc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002184:	486a      	ldr	r0, [pc, #424]	@ (8002330 <main+0x204>)
 8002186:	f002 fec3 	bl	8004f10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800218a:	486a      	ldr	r0, [pc, #424]	@ (8002334 <main+0x208>)
 800218c:	f002 fec0 	bl	8004f10 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 8002190:	4b69      	ldr	r3, [pc, #420]	@ (8002338 <main+0x20c>)
 8002192:	4a6a      	ldr	r2, [pc, #424]	@ (800233c <main+0x210>)
 8002194:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8002196:	4b68      	ldr	r3, [pc, #416]	@ (8002338 <main+0x20c>)
 8002198:	4a69      	ldr	r2, [pc, #420]	@ (8002340 <main+0x214>)
 800219a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800219c:	4b66      	ldr	r3, [pc, #408]	@ (8002338 <main+0x20c>)
 800219e:	2215      	movs	r2, #21
 80021a0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80021a2:	4b65      	ldr	r3, [pc, #404]	@ (8002338 <main+0x20c>)
 80021a4:	22c8      	movs	r2, #200	@ 0xc8
 80021a6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80021a8:	4966      	ldr	r1, [pc, #408]	@ (8002344 <main+0x218>)
 80021aa:	4863      	ldr	r0, [pc, #396]	@ (8002338 <main+0x20c>)
 80021ac:	f7fe fff0 	bl	8001190 <Modbus_init>

  //float PID_pos_K[3] = {0.01 ,0.0, 0};
  float PID_pos_K[3] = {4.5 ,0.00000000495, 0};
 80021b0:	4a65      	ldr	r2, [pc, #404]	@ (8002348 <main+0x21c>)
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  //float PID_velo_K[3] = {3.35 ,0.050, 0.001};
  float PID_velo_K[3] = {3.35 ,0.050, 0.001};
 80021bc:	4a63      	ldr	r2, [pc, #396]	@ (800234c <main+0x220>)
 80021be:	463b      	mov	r3, r7
 80021c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80021c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // Initialize ASRS
  Traject_init(&Traj,450, 500);				// V_max, A_max
 80021c6:	eddf 0a62 	vldr	s1, [pc, #392]	@ 8002350 <main+0x224>
 80021ca:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8002354 <main+0x228>
 80021ce:	4862      	ldr	r0, [pc, #392]	@ (8002358 <main+0x22c>)
 80021d0:	f7ff ff8c 	bl	80020ec <Traject_init>
//  Kalman_Start(&Vel_filtered);
  AMT_encoder_init(&AMT, &htim2);
 80021d4:	4953      	ldr	r1, [pc, #332]	@ (8002324 <main+0x1f8>)
 80021d6:	4861      	ldr	r0, [pc, #388]	@ (800235c <main+0x230>)
 80021d8:	f7fe ff82 	bl	80010e0 <AMT_encoder_init>
  MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 80021dc:	2300      	movs	r3, #0
 80021de:	2204      	movs	r2, #4
 80021e0:	4951      	ldr	r1, [pc, #324]	@ (8002328 <main+0x1fc>)
 80021e2:	485f      	ldr	r0, [pc, #380]	@ (8002360 <main+0x234>)
 80021e4:	f7ff fac8 	bl	8001778 <MOTOR_init>
  PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 80021e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80021f0:	edd7 6a05 	vldr	s13, [r7, #20]
 80021f4:	eeb0 1a66 	vmov.f32	s2, s13
 80021f8:	eef0 0a47 	vmov.f32	s1, s14
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	4858      	ldr	r0, [pc, #352]	@ (8002364 <main+0x238>)
 8002202:	f7ff fd55 	bl	8001cb0 <PID_controller_init>
  PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 8002206:	edd7 7a00 	vldr	s15, [r7]
 800220a:	ed97 7a01 	vldr	s14, [r7, #4]
 800220e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002212:	eeb0 1a66 	vmov.f32	s2, s13
 8002216:	eef0 0a47 	vmov.f32	s1, s14
 800221a:	eeb0 0a67 	vmov.f32	s0, s15
 800221e:	4852      	ldr	r0, [pc, #328]	@ (8002368 <main+0x23c>)
 8002220:	f7ff fd46 	bl	8001cb0 <PID_controller_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Modbus
	  easyCase();
 8002224:	f7fe fe5e 	bl	8000ee4 <easyCase>
	  switch(base.bS){
 8002228:	4b50      	ldr	r3, [pc, #320]	@ (800236c <main+0x240>)
 800222a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800222c:	3b01      	subs	r3, #1
 800222e:	2b07      	cmp	r3, #7
 8002230:	d82a      	bhi.n	8002288 <main+0x15c>
 8002232:	a201      	add	r2, pc, #4	@ (adr r2, 8002238 <main+0x10c>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002259 	.word	0x08002259
 800223c:	08002265 	.word	0x08002265
 8002240:	08002289 	.word	0x08002289
 8002244:	08002271 	.word	0x08002271
 8002248:	08002289 	.word	0x08002289
 800224c:	08002289 	.word	0x08002289
 8002250:	08002289 	.word	0x08002289
 8002254:	0800227d 	.word	0x0800227d
//	  case 0:
//		  registerFrame[0x01].U16 = 0;
//		  base.bStatus = 0;
//		  break;
	  case 1:
		  base.bStatus = 1;
 8002258:	4b44      	ldr	r3, [pc, #272]	@ (800236c <main+0x240>)
 800225a:	2201      	movs	r2, #1
 800225c:	801a      	strh	r2, [r3, #0]
		  SetShelves();
 800225e:	f7fe fe89 	bl	8000f74 <SetShelves>
//		  base.bS = 0;
		  break;
 8002262:	e011      	b.n	8002288 <main+0x15c>
	  case 2:
		  base.bStatus = 2;
 8002264:	4b41      	ldr	r3, [pc, #260]	@ (800236c <main+0x240>)
 8002266:	2202      	movs	r2, #2
 8002268:	801a      	strh	r2, [r3, #0]
		  SetHome();
 800226a:	f7fe fee9 	bl	8001040 <SetHome>
//		  base.bS = 0;
		  break;
 800226e:	e00b      	b.n	8002288 <main+0x15c>
	  case 4:
		  base.bStatus = 4;
 8002270:	4b3e      	ldr	r3, [pc, #248]	@ (800236c <main+0x240>)
 8002272:	2204      	movs	r2, #4
 8002274:	801a      	strh	r2, [r3, #0]
		  RunJog();
 8002276:	f7fe ff05 	bl	8001084 <RunJog>
//		  base.bS = 0;
		  break;
 800227a:	e005      	b.n	8002288 <main+0x15c>
	  case 8:
		  base.bStatus = 8;
 800227c:	4b3b      	ldr	r3, [pc, #236]	@ (800236c <main+0x240>)
 800227e:	2208      	movs	r2, #8
 8002280:	801a      	strh	r2, [r3, #0]
		  RunPoint();
 8002282:	f7fe feaf 	bl	8000fe4 <RunPoint>
//		  base.bS = 0;
		  break;
 8002286:	bf00      	nop
	  }

	  switch(base.vS){
 8002288:	4b38      	ldr	r3, [pc, #224]	@ (800236c <main+0x240>)
 800228a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <main+0x16a>
 8002290:	2b01      	cmp	r3, #1
 8002292:	d004      	beq.n	800229e <main+0x172>
 8002294:	e007      	b.n	80022a6 <main+0x17a>
	  case 0:
		  base.Vacuum = 0;
 8002296:	4b35      	ldr	r3, [pc, #212]	@ (800236c <main+0x240>)
 8002298:	2200      	movs	r2, #0
 800229a:	829a      	strh	r2, [r3, #20]
		  break;
 800229c:	e003      	b.n	80022a6 <main+0x17a>
	  case 1:
		  base.Vacuum = 1;
 800229e:	4b33      	ldr	r3, [pc, #204]	@ (800236c <main+0x240>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	829a      	strh	r2, [r3, #20]
		  break;
 80022a4:	bf00      	nop
	  }

	  switch(base.gmS){
 80022a6:	4b31      	ldr	r3, [pc, #196]	@ (800236c <main+0x240>)
 80022a8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <main+0x188>
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d004      	beq.n	80022bc <main+0x190>
 80022b2:	e007      	b.n	80022c4 <main+0x198>
	  case 0:
		  base.Gripper = 0;
 80022b4:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <main+0x240>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	82da      	strh	r2, [r3, #22]
		  break;
 80022ba:	e003      	b.n	80022c4 <main+0x198>
	  case 1:
		  base.Gripper = 1;
 80022bc:	4b2b      	ldr	r3, [pc, #172]	@ (800236c <main+0x240>)
 80022be:	2201      	movs	r2, #1
 80022c0:	82da      	strh	r2, [r3, #22]
		  break;
 80022c2:	bf00      	nop
	  }


	  Modbus_Protocal_Worker();
 80022c4:	f7fe fff0 	bl	80012a8 <Modbus_Protocal_Worker>
	  Routine();
 80022c8:	f7fe fe32 	bl	8000f30 <Routine>
//	  //--
//	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 80022cc:	230a      	movs	r3, #10
 80022ce:	220a      	movs	r2, #10
 80022d0:	4927      	ldr	r1, [pc, #156]	@ (8002370 <main+0x244>)
 80022d2:	4828      	ldr	r0, [pc, #160]	@ (8002374 <main+0x248>)
 80022d4:	f004 ff0e 	bl	80070f4 <HAL_UART_Receive>
	  if(ps2.ps2RX[0] == 74){
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <main+0x244>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b4a      	cmp	r3, #74	@ 0x4a
 80022de:	d102      	bne.n	80022e6 <main+0x1ba>
		  ps2.stop = 1;
 80022e0:	4b23      	ldr	r3, [pc, #140]	@ (8002370 <main+0x244>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	671a      	str	r2, [r3, #112]	@ 0x70
	  }
	  if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 80022e6:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <main+0x244>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d113      	bne.n	8002316 <main+0x1ea>
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <main+0x244>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b4b      	cmp	r3, #75	@ 0x4b
 80022f4:	d10f      	bne.n	8002316 <main+0x1ea>
		  ps2.stop = 0;
 80022f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <main+0x244>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	671a      	str	r2, [r3, #112]	@ 0x70
		  ps2.pwmOut = 150;
 80022fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <main+0x244>)
 80022fe:	2296      	movs	r2, #150	@ 0x96
 8002300:	669a      	str	r2, [r3, #104]	@ 0x68
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);		//Stop and Holf Position
 8002302:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <main+0x244>)
 8002304:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002306:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <main+0x1fc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <main+0x1fc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2200      	movs	r2, #0
 8002312:	639a      	str	r2, [r3, #56]	@ 0x38
 8002314:	e005      	b.n	8002322 <main+0x1f6>

	  }
	  else if(ps2.stop == 0){
 8002316:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <main+0x244>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	2b00      	cmp	r3, #0
 800231c:	d182      	bne.n	8002224 <main+0xf8>
		  PS2X_Reader();
 800231e:	f7ff fcf3 	bl	8001d08 <PS2X_Reader>
	  easyCase();
 8002322:	e77f      	b.n	8002224 <main+0xf8>
 8002324:	2000025c 	.word	0x2000025c
 8002328:	20000328 	.word	0x20000328
 800232c:	2000058c 	.word	0x2000058c
 8002330:	200003f4 	.word	0x200003f4
 8002334:	200004c0 	.word	0x200004c0
 8002338:	2000097c 	.word	0x2000097c
 800233c:	200007f0 	.word	0x200007f0
 8002340:	20000658 	.word	0x20000658
 8002344:	20000e54 	.word	0x20000e54
 8002348:	08008ec4 	.word	0x08008ec4
 800234c:	08008ed0 	.word	0x08008ed0
 8002350:	43fa0000 	.word	0x43fa0000
 8002354:	43e10000 	.word	0x43e10000
 8002358:	20001060 	.word	0x20001060
 800235c:	20000fe8 	.word	0x20000fe8
 8002360:	20001020 	.word	0x20001020
 8002364:	20001028 	.word	0x20001028
 8002368:	20001044 	.word	0x20001044
 800236c:	200010f4 	.word	0x200010f4
 8002370:	20001074 	.word	0x20001074
 8002374:	20000724 	.word	0x20000724

08002378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b094      	sub	sp, #80	@ 0x50
 800237c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800237e:	f107 0318 	add.w	r3, r7, #24
 8002382:	2238      	movs	r2, #56	@ 0x38
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f006 fd56 	bl	8008e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800239a:	2000      	movs	r0, #0
 800239c:	f001 fcb4 	bl	8003d08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023aa:	2340      	movs	r3, #64	@ 0x40
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ae:	2302      	movs	r3, #2
 80023b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023b2:	2302      	movs	r3, #2
 80023b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80023b6:	2304      	movs	r3, #4
 80023b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80023ba:	2355      	movs	r3, #85	@ 0x55
 80023bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023be:	2302      	movs	r3, #2
 80023c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023c2:	2302      	movs	r3, #2
 80023c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023c6:	2302      	movs	r3, #2
 80023c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ca:	f107 0318 	add.w	r3, r7, #24
 80023ce:	4618      	mov	r0, r3
 80023d0:	f001 fd4e 	bl	8003e70 <HAL_RCC_OscConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023da:	f000 fb51 	bl	8002a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023de:	230f      	movs	r3, #15
 80023e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e2:	2303      	movs	r3, #3
 80023e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2104      	movs	r1, #4
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 f84c 	bl	8004494 <HAL_RCC_ClockConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002402:	f000 fb3d 	bl	8002a80 <Error_Handler>
  }
}
 8002406:	bf00      	nop
 8002408:	3750      	adds	r7, #80	@ 0x50
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	@ 0x30
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	2224      	movs	r2, #36	@ 0x24
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f006 fd0a 	bl	8008e38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002424:	463b      	mov	r3, r7
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800242e:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <MX_TIM2_Init+0xa4>)
 8002430:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002434:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002436:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <MX_TIM2_Init+0xa4>)
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243c:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <MX_TIM2_Init+0xa4>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <MX_TIM2_Init+0xa4>)
 8002444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002448:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244a:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <MX_TIM2_Init+0xa4>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <MX_TIM2_Init+0xa4>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002456:	2303      	movs	r3, #3
 8002458:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800245e:	2301      	movs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800246e:	2301      	movs	r3, #1
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4619      	mov	r1, r3
 8002480:	480c      	ldr	r0, [pc, #48]	@ (80024b4 <MX_TIM2_Init+0xa4>)
 8002482:	f003 f881 	bl	8005588 <HAL_TIM_Encoder_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800248c:	f000 faf8 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002498:	463b      	mov	r3, r7
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <MX_TIM2_Init+0xa4>)
 800249e:	f004 fc29 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80024a8:	f000 faea 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	3730      	adds	r7, #48	@ 0x30
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000025c 	.word	0x2000025c

080024b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08e      	sub	sp, #56	@ 0x38
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d8:	463b      	mov	r3, r7
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	611a      	str	r2, [r3, #16]
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ea:	4b32      	ldr	r3, [pc, #200]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 80024ec:	4a32      	ldr	r2, [pc, #200]	@ (80025b8 <MX_TIM3_Init+0x100>)
 80024ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80024f0:	4b30      	ldr	r3, [pc, #192]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 80024f2:	22a9      	movs	r2, #169	@ 0xa9
 80024f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b2f      	ldr	r3, [pc, #188]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80024fc:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 80024fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	4b2a      	ldr	r3, [pc, #168]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002510:	4828      	ldr	r0, [pc, #160]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 8002512:	f002 fc29 	bl	8004d68 <HAL_TIM_Base_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800251c:	f000 fab0 	bl	8002a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002524:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800252a:	4619      	mov	r1, r3
 800252c:	4821      	ldr	r0, [pc, #132]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 800252e:	f003 fbfb 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002538:	f000 faa2 	bl	8002a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800253c:	481d      	ldr	r0, [pc, #116]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 800253e:	f002 fd5f 	bl	8005000 <HAL_TIM_PWM_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002548:	f000 fa9a 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4619      	mov	r1, r3
 800255a:	4816      	ldr	r0, [pc, #88]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 800255c:	f004 fbca 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002566:	f000 fa8b 	bl	8002a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256a:	2360      	movs	r3, #96	@ 0x60
 800256c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800257a:	463b      	mov	r3, r7
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 8002582:	f003 fabd 	bl	8005b00 <HAL_TIM_PWM_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800258c:	f000 fa78 	bl	8002a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	2204      	movs	r2, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 8002598:	f003 fab2 	bl	8005b00 <HAL_TIM_PWM_ConfigChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80025a2:	f000 fa6d 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025a6:	4803      	ldr	r0, [pc, #12]	@ (80025b4 <MX_TIM3_Init+0xfc>)
 80025a8:	f000 fb5a 	bl	8002c60 <HAL_TIM_MspPostInit>

}
 80025ac:	bf00      	nop
 80025ae:	3738      	adds	r7, #56	@ 0x38
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000328 	.word	0x20000328
 80025b8:	40000400 	.word	0x40000400

080025bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <MX_TIM4_Init+0x98>)
 80025dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002658 <MX_TIM4_Init+0x9c>)
 80025de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 80025e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <MX_TIM4_Init+0x98>)
 80025e2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80025e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <MX_TIM4_Init+0x98>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80025ee:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <MX_TIM4_Init+0x98>)
 80025f0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80025f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <MX_TIM4_Init+0x98>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fc:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <MX_TIM4_Init+0x98>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002602:	4814      	ldr	r0, [pc, #80]	@ (8002654 <MX_TIM4_Init+0x98>)
 8002604:	f002 fbb0 	bl	8004d68 <HAL_TIM_Base_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800260e:	f000 fa37 	bl	8002a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002616:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	4619      	mov	r1, r3
 800261e:	480d      	ldr	r0, [pc, #52]	@ (8002654 <MX_TIM4_Init+0x98>)
 8002620:	f003 fb82 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800262a:	f000 fa29 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4806      	ldr	r0, [pc, #24]	@ (8002654 <MX_TIM4_Init+0x98>)
 800263c:	f004 fb5a 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002646:	f000 fa1b 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200003f4 	.word	0x200003f4
 8002658:	40000800 	.word	0x40000800

0800265c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002662:	f107 0310 	add.w	r3, r7, #16
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800267a:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <MX_TIM5_Init+0x94>)
 800267c:	4a1d      	ldr	r2, [pc, #116]	@ (80026f4 <MX_TIM5_Init+0x98>)
 800267e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002680:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <MX_TIM5_Init+0x94>)
 8002682:	22a9      	movs	r2, #169	@ 0xa9
 8002684:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002686:	4b1a      	ldr	r3, [pc, #104]	@ (80026f0 <MX_TIM5_Init+0x94>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800268c:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <MX_TIM5_Init+0x94>)
 800268e:	f04f 32ff 	mov.w	r2, #4294967295
 8002692:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002694:	4b16      	ldr	r3, [pc, #88]	@ (80026f0 <MX_TIM5_Init+0x94>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <MX_TIM5_Init+0x94>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026a0:	4813      	ldr	r0, [pc, #76]	@ (80026f0 <MX_TIM5_Init+0x94>)
 80026a2:	f002 fb61 	bl	8004d68 <HAL_TIM_Base_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80026ac:	f000 f9e8 	bl	8002a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	4619      	mov	r1, r3
 80026bc:	480c      	ldr	r0, [pc, #48]	@ (80026f0 <MX_TIM5_Init+0x94>)
 80026be:	f003 fb33 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80026c8:	f000 f9da 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	@ (80026f0 <MX_TIM5_Init+0x94>)
 80026da:	f004 fb0b 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80026e4:	f000 f9cc 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200004c0 	.word	0x200004c0
 80026f4:	40000c00 	.word	0x40000c00

080026f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002708:	4b14      	ldr	r3, [pc, #80]	@ (800275c <MX_TIM6_Init+0x64>)
 800270a:	4a15      	ldr	r2, [pc, #84]	@ (8002760 <MX_TIM6_Init+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 800270e:	4b13      	ldr	r3, [pc, #76]	@ (800275c <MX_TIM6_Init+0x64>)
 8002710:	22a9      	movs	r2, #169	@ 0xa9
 8002712:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <MX_TIM6_Init+0x64>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <MX_TIM6_Init+0x64>)
 800271c:	220a      	movs	r2, #10
 800271e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002720:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <MX_TIM6_Init+0x64>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002726:	480d      	ldr	r0, [pc, #52]	@ (800275c <MX_TIM6_Init+0x64>)
 8002728:	f002 fb1e 	bl	8004d68 <HAL_TIM_Base_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002732:	f000 f9a5 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4806      	ldr	r0, [pc, #24]	@ (800275c <MX_TIM6_Init+0x64>)
 8002744:	f004 fad6 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800274e:	f000 f997 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000058c 	.word	0x2000058c
 8002760:	40001000 	.word	0x40001000

08002764 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002768:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <MX_TIM16_Init+0x58>)
 800276a:	4a15      	ldr	r2, [pc, #84]	@ (80027c0 <MX_TIM16_Init+0x5c>)
 800276c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800276e:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002770:	22a9      	movs	r2, #169	@ 0xa9
 8002772:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <MX_TIM16_Init+0x58>)
 800277c:	f240 4279 	movw	r2, #1145	@ 0x479
 8002780:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002782:	4b0e      	ldr	r3, [pc, #56]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <MX_TIM16_Init+0x58>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002794:	4809      	ldr	r0, [pc, #36]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002796:	f002 fae7 	bl	8004d68 <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80027a0:	f000 f96e 	bl	8002a80 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80027a4:	2108      	movs	r1, #8
 80027a6:	4805      	ldr	r0, [pc, #20]	@ (80027bc <MX_TIM16_Init+0x58>)
 80027a8:	f002 fdf8 	bl	800539c <HAL_TIM_OnePulse_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80027b2:	f000 f965 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000658 	.word	0x20000658
 80027c0:	40014400 	.word	0x40014400

080027c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027c8:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <MX_UART4_Init+0x94>)
 80027ca:	4a24      	ldr	r2, [pc, #144]	@ (800285c <MX_UART4_Init+0x98>)
 80027cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9700;
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <MX_UART4_Init+0x94>)
 80027d0:	f242 52e4 	movw	r2, #9700	@ 0x25e4
 80027d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <MX_UART4_Init+0x94>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <MX_UART4_Init+0x94>)
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <MX_UART4_Init+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <MX_UART4_Init+0x94>)
 80027ea:	220c      	movs	r2, #12
 80027ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <MX_UART4_Init+0x94>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f4:	4b18      	ldr	r3, [pc, #96]	@ (8002858 <MX_UART4_Init+0x94>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027fa:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <MX_UART4_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002800:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <MX_UART4_Init+0x94>)
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002806:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <MX_UART4_Init+0x94>)
 8002808:	2200      	movs	r2, #0
 800280a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800280c:	4812      	ldr	r0, [pc, #72]	@ (8002858 <MX_UART4_Init+0x94>)
 800280e:	f004 fb57 	bl	8006ec0 <HAL_UART_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002818:	f000 f932 	bl	8002a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800281c:	2100      	movs	r1, #0
 800281e:	480e      	ldr	r0, [pc, #56]	@ (8002858 <MX_UART4_Init+0x94>)
 8002820:	f006 fa3f 	bl	8008ca2 <HAL_UARTEx_SetTxFifoThreshold>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800282a:	f000 f929 	bl	8002a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800282e:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8002832:	4809      	ldr	r0, [pc, #36]	@ (8002858 <MX_UART4_Init+0x94>)
 8002834:	f006 fa73 	bl	8008d1e <HAL_UARTEx_SetRxFifoThreshold>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 800283e:	f000 f91f 	bl	8002a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002842:	4805      	ldr	r0, [pc, #20]	@ (8002858 <MX_UART4_Init+0x94>)
 8002844:	f006 f9f4 	bl	8008c30 <HAL_UARTEx_DisableFifoMode>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 800284e:	f000 f917 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000724 	.word	0x20000724
 800285c:	40004c00 	.word	0x40004c00

08002860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002864:	4b23      	ldr	r3, [pc, #140]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 8002866:	4a24      	ldr	r2, [pc, #144]	@ (80028f8 <MX_USART2_UART_Init+0x98>)
 8002868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800286a:	4b22      	ldr	r3, [pc, #136]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 800286c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002872:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 8002874:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002878:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800287a:	4b1e      	ldr	r3, [pc, #120]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002880:	4b1c      	ldr	r3, [pc, #112]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 8002882:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002888:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 800288a:	220c      	movs	r2, #12
 800288c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288e:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002894:	4b17      	ldr	r3, [pc, #92]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800289a:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 800289c:	2200      	movs	r2, #0
 800289e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028a6:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028ac:	4811      	ldr	r0, [pc, #68]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 80028ae:	f004 fb07 	bl	8006ec0 <HAL_UART_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80028b8:	f000 f8e2 	bl	8002a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028bc:	2100      	movs	r1, #0
 80028be:	480d      	ldr	r0, [pc, #52]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 80028c0:	f006 f9ef 	bl	8008ca2 <HAL_UARTEx_SetTxFifoThreshold>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80028ca:	f000 f8d9 	bl	8002a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ce:	2100      	movs	r1, #0
 80028d0:	4808      	ldr	r0, [pc, #32]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 80028d2:	f006 fa24 	bl	8008d1e <HAL_UARTEx_SetRxFifoThreshold>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80028dc:	f000 f8d0 	bl	8002a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028e0:	4804      	ldr	r0, [pc, #16]	@ (80028f4 <MX_USART2_UART_Init+0x94>)
 80028e2:	f006 f9a5 	bl	8008c30 <HAL_UARTEx_DisableFifoMode>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80028ec:	f000 f8c8 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200007f0 	.word	0x200007f0
 80028f8:	40004400 	.word	0x40004400

080028fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002902:	4b16      	ldr	r3, [pc, #88]	@ (800295c <MX_DMA_Init+0x60>)
 8002904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002906:	4a15      	ldr	r2, [pc, #84]	@ (800295c <MX_DMA_Init+0x60>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	6493      	str	r3, [r2, #72]	@ 0x48
 800290e:	4b13      	ldr	r3, [pc, #76]	@ (800295c <MX_DMA_Init+0x60>)
 8002910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800291a:	4b10      	ldr	r3, [pc, #64]	@ (800295c <MX_DMA_Init+0x60>)
 800291c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800291e:	4a0f      	ldr	r2, [pc, #60]	@ (800295c <MX_DMA_Init+0x60>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6493      	str	r3, [r2, #72]	@ 0x48
 8002926:	4b0d      	ldr	r3, [pc, #52]	@ (800295c <MX_DMA_Init+0x60>)
 8002928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	200b      	movs	r0, #11
 8002938:	f000 fcc1 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800293c:	200b      	movs	r0, #11
 800293e:	f000 fcd8 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	200c      	movs	r0, #12
 8002948:	f000 fcb9 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800294c:	200c      	movs	r0, #12
 800294e:	f000 fcd0 	bl	80032f2 <HAL_NVIC_EnableIRQ>

}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000

08002960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	@ 0x28
 8002964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	4b2f      	ldr	r3, [pc, #188]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297a:	4a2e      	ldr	r2, [pc, #184]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002982:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800298e:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	4a28      	ldr	r2, [pc, #160]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 8002994:	f043 0320 	orr.w	r3, r3, #32
 8002998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	4a22      	ldr	r2, [pc, #136]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b2:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <MX_GPIO_Init+0xd4>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2120      	movs	r1, #32
 80029da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029de:	f001 f957 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	480f      	ldr	r0, [pc, #60]	@ (8002a38 <MX_GPIO_Init+0xd8>)
 80029fa:	f000 ffc7 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029fe:	2320      	movs	r3, #32
 8002a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a18:	f000 ffb8 	bl	800398c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2028      	movs	r0, #40	@ 0x28
 8002a22:	f000 fc4c 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a26:	2028      	movs	r0, #40	@ 0x28
 8002a28:	f000 fc63 	bl	80032f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a2c:	bf00      	nop
 8002a2e:	3728      	adds	r7, #40	@ 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	48000800 	.word	0x48000800

08002a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8002a3c:	b5b0      	push	{r4, r5, r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
		if(htim == &htim5)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a0b      	ldr	r2, [pc, #44]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d108      	bne.n	8002a5e <HAL_TIM_PeriodElapsedCallback+0x22>
			{
			_micros += UINT32_MAX;
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	1e54      	subs	r4, r2, #1
 8002a54:	f143 0500 	adc.w	r5, r3, #0
 8002a58:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a5a:	e9c3 4500 	strd	r4, r5, [r3]
			}
		if(htim == &htim4)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a06      	ldr	r2, [pc, #24]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			 Heartbeat();
 8002a66:	f7fe fa55 	bl	8000f14 <Heartbeat>
		}
	}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bdb0      	pop	{r4, r5, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200004c0 	.word	0x200004c0
 8002a78:	20001140 	.word	0x20001140
 8002a7c:	200003f4 	.word	0x200003f4

08002a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a84:	b672      	cpsid	i
}
 8002a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <Error_Handler+0x8>

08002a8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad0 <HAL_MspInit+0x44>)
 8002a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a96:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad0 <HAL_MspInit+0x44>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <HAL_MspInit+0x44>)
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <HAL_MspInit+0x44>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aae:	4a08      	ldr	r2, [pc, #32]	@ (8002ad0 <HAL_MspInit+0x44>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_MspInit+0x44>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ac2:	f001 f9c5 	bl	8003e50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	@ 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af4:	d128      	bne.n	8002b48 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afa:	4a15      	ldr	r2, [pc, #84]	@ (8002b50 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b02:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b12:	4a0f      	ldr	r2, [pc, #60]	@ (8002b50 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b26:	2303      	movs	r3, #3
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b36:	2301      	movs	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b44:	f000 ff22 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b48:	bf00      	nop
 8002b4a:	3728      	adds	r7, #40	@ 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000

08002b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a39      	ldr	r2, [pc, #228]	@ (8002c48 <HAL_TIM_Base_MspInit+0xf4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d10c      	bne.n	8002b80 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b66:	4b39      	ldr	r3, [pc, #228]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	4a38      	ldr	r2, [pc, #224]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b72:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002b7e:	e05e      	b.n	8002c3e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a32      	ldr	r2, [pc, #200]	@ (8002c50 <HAL_TIM_Base_MspInit+0xfc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d114      	bne.n	8002bb4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b8a:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	201e      	movs	r0, #30
 8002ba8:	f000 fb89 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bac:	201e      	movs	r0, #30
 8002bae:	f000 fba0 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 8002bb2:	e044      	b.n	8002c3e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a26      	ldr	r2, [pc, #152]	@ (8002c54 <HAL_TIM_Base_MspInit+0x100>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d114      	bne.n	8002be8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bbe:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	4a22      	ldr	r2, [pc, #136]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2032      	movs	r0, #50	@ 0x32
 8002bdc:	f000 fb6f 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002be0:	2032      	movs	r0, #50	@ 0x32
 8002be2:	f000 fb86 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 8002be6:	e02a      	b.n	8002c3e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	@ (8002c58 <HAL_TIM_Base_MspInit+0x104>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10c      	bne.n	8002c0c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bf2:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf6:	4a15      	ldr	r2, [pc, #84]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002bf8:	f043 0310 	orr.w	r3, r3, #16
 8002bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bfe:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
}
 8002c0a:	e018      	b.n	8002c3e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <HAL_TIM_Base_MspInit+0x108>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d113      	bne.n	8002c3e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_TIM_Base_MspInit+0xf8>)
 8002c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	2019      	movs	r0, #25
 8002c34:	f000 fb43 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c38:	2019      	movs	r0, #25
 8002c3a:	f000 fb5a 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40000800 	.word	0x40000800
 8002c54:	40000c00 	.word	0x40000c00
 8002c58:	40001000 	.word	0x40001000
 8002c5c:	40014400 	.word	0x40014400

08002c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a11      	ldr	r2, [pc, #68]	@ (8002cc4 <HAL_TIM_MspPostInit+0x64>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d11b      	bne.n	8002cba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <HAL_TIM_MspPostInit+0x68>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	4a10      	ldr	r2, [pc, #64]	@ (8002cc8 <HAL_TIM_MspPostInit+0x68>)
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <HAL_TIM_MspPostInit+0x68>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c9a:	2330      	movs	r3, #48	@ 0x30
 8002c9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002caa:	2302      	movs	r3, #2
 8002cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4805      	ldr	r0, [pc, #20]	@ (8002ccc <HAL_TIM_MspPostInit+0x6c>)
 8002cb6:	f000 fe69 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cba:	bf00      	nop
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	48000400 	.word	0x48000400

08002cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b0a0      	sub	sp, #128	@ 0x80
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ce8:	f107 0318 	add.w	r3, r7, #24
 8002cec:	2254      	movs	r2, #84	@ 0x54
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f006 f8a1 	bl	8008e38 <memset>
  if(huart->Instance==UART4)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a6b      	ldr	r2, [pc, #428]	@ (8002ea8 <HAL_UART_MspInit+0x1d8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d137      	bne.n	8002d70 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002d00:	2308      	movs	r3, #8
 8002d02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d08:	f107 0318 	add.w	r3, r7, #24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fddd 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d18:	f7ff feb2 	bl	8002a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d1c:	4b63      	ldr	r3, [pc, #396]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	4a62      	ldr	r2, [pc, #392]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002d22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d28:	4b60      	ldr	r3, [pc, #384]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d34:	4b5d      	ldr	r3, [pc, #372]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d38:	4a5c      	ldr	r2, [pc, #368]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d40:	4b5a      	ldr	r3, [pc, #360]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d4c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002d5e:	2305      	movs	r3, #5
 8002d60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d62:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002d66:	4619      	mov	r1, r3
 8002d68:	4851      	ldr	r0, [pc, #324]	@ (8002eb0 <HAL_UART_MspInit+0x1e0>)
 8002d6a:	f000 fe0f 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d6e:	e097      	b.n	8002ea0 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb4 <HAL_UART_MspInit+0x1e4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	f040 8092 	bne.w	8002ea0 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d84:	f107 0318 	add.w	r3, r7, #24
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fd9f 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002d94:	f7ff fe74 	bl	8002a80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d98:	4b44      	ldr	r3, [pc, #272]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9c:	4a43      	ldr	r2, [pc, #268]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002da4:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db0:	4b3e      	ldr	r3, [pc, #248]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db4:	4a3d      	ldr	r2, [pc, #244]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <HAL_UART_MspInit+0x1dc>)
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dc8:	230c      	movs	r3, #12
 8002dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dd8:	2307      	movs	r3, #7
 8002dda:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ddc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002de0:	4619      	mov	r1, r3
 8002de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002de6:	f000 fdd1 	bl	800398c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002dea:	4b33      	ldr	r3, [pc, #204]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002dec:	4a33      	ldr	r2, [pc, #204]	@ (8002ebc <HAL_UART_MspInit+0x1ec>)
 8002dee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002df0:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002df2:	221b      	movs	r2, #27
 8002df4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002df6:	4b30      	ldr	r3, [pc, #192]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002df8:	2210      	movs	r2, #16
 8002dfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e02:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002e04:	2280      	movs	r2, #128	@ 0x80
 8002e06:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e08:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e14:	4b28      	ldr	r3, [pc, #160]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e1a:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e20:	4825      	ldr	r0, [pc, #148]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002e22:	f000 fa81 	bl	8003328 <HAL_DMA_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_UART_MspInit+0x160>
      Error_Handler();
 8002e2c:	f7ff fe28 	bl	8002a80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a21      	ldr	r2, [pc, #132]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002e34:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002e36:	4a20      	ldr	r2, [pc, #128]	@ (8002eb8 <HAL_UART_MspInit+0x1e8>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002e3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e3e:	4a21      	ldr	r2, [pc, #132]	@ (8002ec4 <HAL_UART_MspInit+0x1f4>)
 8002e40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002e42:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e44:	221a      	movs	r2, #26
 8002e46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e56:	2280      	movs	r2, #128	@ 0x80
 8002e58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e5a:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e60:	4b17      	ldr	r3, [pc, #92]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e66:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e72:	4813      	ldr	r0, [pc, #76]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e74:	f000 fa58 	bl	8003328 <HAL_DMA_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8002e7e:	f7ff fdff 	bl	8002a80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec0 <HAL_UART_MspInit+0x1f0>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2100      	movs	r1, #0
 8002e94:	2026      	movs	r0, #38	@ 0x26
 8002e96:	f000 fa12 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e9a:	2026      	movs	r0, #38	@ 0x26
 8002e9c:	f000 fa29 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 8002ea0:	bf00      	nop
 8002ea2:	3780      	adds	r7, #128	@ 0x80
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40004c00 	.word	0x40004c00
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	48000800 	.word	0x48000800
 8002eb4:	40004400 	.word	0x40004400
 8002eb8:	200008bc 	.word	0x200008bc
 8002ebc:	40020008 	.word	0x40020008
 8002ec0:	2000091c 	.word	0x2000091c
 8002ec4:	4002001c 	.word	0x4002001c

08002ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <NMI_Handler+0x4>

08002ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <HardFault_Handler+0x4>

08002ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002edc:	bf00      	nop
 8002ede:	e7fd      	b.n	8002edc <MemManage_Handler+0x4>

08002ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <BusFault_Handler+0x4>

08002ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <UsageFault_Handler+0x4>

08002ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f1e:	f000 f8d5 	bl	80030cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f2c:	4802      	ldr	r0, [pc, #8]	@ (8002f38 <DMA1_Channel1_IRQHandler+0x10>)
 8002f2e:	f000 fbde 	bl	80036ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200008bc 	.word	0x200008bc

08002f3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f40:	4802      	ldr	r0, [pc, #8]	@ (8002f4c <DMA1_Channel2_IRQHandler+0x10>)
 8002f42:	f000 fbd4 	bl	80036ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000091c 	.word	0x2000091c

08002f50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002f54:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002f56:	f002 fc59 	bl	800580c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000658 	.word	0x20000658

08002f64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f68:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <TIM4_IRQHandler+0x10>)
 8002f6a:	f002 fc4f 	bl	800580c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200003f4 	.word	0x200003f4

08002f78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f7c:	4802      	ldr	r0, [pc, #8]	@ (8002f88 <USART2_IRQHandler+0x10>)
 8002f7e:	f004 fa4d 	bl	800741c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200007f0 	.word	0x200007f0

08002f8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002f94:	f000 fe94 	bl	8003cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fa0:	4802      	ldr	r0, [pc, #8]	@ (8002fac <TIM5_IRQHandler+0x10>)
 8002fa2:	f002 fc33 	bl	800580c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200004c0 	.word	0x200004c0

08002fb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fb4:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <SystemInit+0x20>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fba:	4a05      	ldr	r2, [pc, #20]	@ (8002fd0 <SystemInit+0x20>)
 8002fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fd4:	480d      	ldr	r0, [pc, #52]	@ (800300c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fd8:	f7ff ffea 	bl	8002fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fdc:	480c      	ldr	r0, [pc, #48]	@ (8003010 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fde:	490d      	ldr	r1, [pc, #52]	@ (8003014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8003018 <LoopForever+0xe>)
  movs r3, #0
 8002fe2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002fe4:	e002      	b.n	8002fec <LoopCopyDataInit>

08002fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fea:	3304      	adds	r3, #4

08002fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff0:	d3f9      	bcc.n	8002fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8003020 <LoopForever+0x16>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff8:	e001      	b.n	8002ffe <LoopFillZerobss>

08002ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ffc:	3204      	adds	r2, #4

08002ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003000:	d3fb      	bcc.n	8002ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003002:	f005 ff21 	bl	8008e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003006:	f7ff f891 	bl	800212c <main>

0800300a <LoopForever>:

LoopForever:
    b LoopForever
 800300a:	e7fe      	b.n	800300a <LoopForever>
  ldr   r0, =_estack
 800300c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003014:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8003018:	08008f2c 	.word	0x08008f2c
  ldr r2, =_sbss
 800301c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8003020:	2000114c 	.word	0x2000114c

08003024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003024:	e7fe      	b.n	8003024 <ADC1_2_IRQHandler>

08003026 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003030:	2003      	movs	r0, #3
 8003032:	f000 f939 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003036:	2000      	movs	r0, #0
 8003038:	f000 f80e 	bl	8003058 <HAL_InitTick>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	71fb      	strb	r3, [r7, #7]
 8003046:	e001      	b.n	800304c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003048:	f7ff fd20 	bl	8002a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800304c:	79fb      	ldrb	r3, [r7, #7]

}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003064:	4b16      	ldr	r3, [pc, #88]	@ (80030c0 <HAL_InitTick+0x68>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d022      	beq.n	80030b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800306c:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <HAL_InitTick+0x6c>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <HAL_InitTick+0x68>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003078:	fbb1 f3f3 	udiv	r3, r1, r3
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f944 	bl	800330e <HAL_SYSTICK_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10f      	bne.n	80030ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d809      	bhi.n	80030a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003092:	2200      	movs	r2, #0
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	f04f 30ff 	mov.w	r0, #4294967295
 800309a:	f000 f910 	bl	80032be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800309e:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_InitTick+0x70>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	e007      	b.n	80030b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	e004      	b.n	80030b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e001      	b.n	80030b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000230 	.word	0x20000230
 80030c4:	20000228 	.word	0x20000228
 80030c8:	2000022c 	.word	0x2000022c

080030cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <HAL_IncTick+0x1c>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_IncTick+0x20>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4413      	add	r3, r2
 80030da:	4a03      	ldr	r2, [pc, #12]	@ (80030e8 <HAL_IncTick+0x1c>)
 80030dc:	6013      	str	r3, [r2, #0]
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	20001148 	.word	0x20001148
 80030ec:	20000230 	.word	0x20000230

080030f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return uwTick;
 80030f4:	4b03      	ldr	r3, [pc, #12]	@ (8003104 <HAL_GetTick+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20001148 	.word	0x20001148

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	@ (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	@ (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	@ (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003274:	d301      	bcc.n	800327a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003276:	2301      	movs	r3, #1
 8003278:	e00f      	b.n	800329a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327a:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <SysTick_Config+0x40>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003282:	210f      	movs	r1, #15
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f7ff ff8e 	bl	80031a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800328c:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <SysTick_Config+0x40>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003292:	4b04      	ldr	r3, [pc, #16]	@ (80032a4 <SysTick_Config+0x40>)
 8003294:	2207      	movs	r2, #7
 8003296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000e010 	.word	0xe000e010

080032a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff29 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032cc:	f7ff ff40 	bl	8003150 <__NVIC_GetPriorityGrouping>
 80032d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f7ff ff90 	bl	80031fc <NVIC_EncodePriority>
 80032dc:	4602      	mov	r2, r0
 80032de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff5f 	bl	80031a8 <__NVIC_SetPriority>
}
 80032ea:	bf00      	nop
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff33 	bl	800316c <__NVIC_EnableIRQ>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffa4 	bl	8003264 <SysTick_Config>
 800331c:	4603      	mov	r3, r0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e08d      	b.n	8003456 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	4b47      	ldr	r3, [pc, #284]	@ (8003460 <HAL_DMA_Init+0x138>)
 8003342:	429a      	cmp	r2, r3
 8003344:	d80f      	bhi.n	8003366 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	4b45      	ldr	r3, [pc, #276]	@ (8003464 <HAL_DMA_Init+0x13c>)
 800334e:	4413      	add	r3, r2
 8003350:	4a45      	ldr	r2, [pc, #276]	@ (8003468 <HAL_DMA_Init+0x140>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	009a      	lsls	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a42      	ldr	r2, [pc, #264]	@ (800346c <HAL_DMA_Init+0x144>)
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40
 8003364:	e00e      	b.n	8003384 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	4b40      	ldr	r3, [pc, #256]	@ (8003470 <HAL_DMA_Init+0x148>)
 800336e:	4413      	add	r3, r2
 8003370:	4a3d      	ldr	r2, [pc, #244]	@ (8003468 <HAL_DMA_Init+0x140>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	009a      	lsls	r2, r3, #2
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a3c      	ldr	r2, [pc, #240]	@ (8003474 <HAL_DMA_Init+0x14c>)
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800339a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa76 	bl	80038c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033e4:	d102      	bne.n	80033ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003400:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_DMA_Init+0x104>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d80c      	bhi.n	800342c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fa96 	bl	8003944 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	e008      	b.n	800343e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40020407 	.word	0x40020407
 8003464:	bffdfff8 	.word	0xbffdfff8
 8003468:	cccccccd 	.word	0xcccccccd
 800346c:	40020000 	.word	0x40020000
 8003470:	bffdfbf8 	.word	0xbffdfbf8
 8003474:	40020400 	.word	0x40020400

08003478 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Start_IT+0x20>
 8003494:	2302      	movs	r3, #2
 8003496:	e066      	b.n	8003566 <HAL_DMA_Start_IT+0xee>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d155      	bne.n	8003558 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f9bb 	bl	800384c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 020e 	orr.w	r2, r2, #14
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e00f      	b.n	8003510 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 020a 	orr.w	r2, r2, #10
 800350e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003528:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800352c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003544:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e005      	b.n	8003564 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003560:	2302      	movs	r3, #2
 8003562:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003564:	7dfb      	ldrb	r3, [r7, #23]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d005      	beq.n	8003592 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2204      	movs	r2, #4
 800358a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e037      	b.n	8003602 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 020e 	bic.w	r2, r2, #14
 80035a0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035b0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	f003 021f 	and.w	r2, r3, #31
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035de:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00c      	beq.n	8003602 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035f6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003600:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d00d      	beq.n	8003654 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2204      	movs	r2, #4
 800363c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	e047      	b.n	80036e4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 020e 	bic.w	r2, r2, #14
 8003662:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003682:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003688:	f003 021f 	and.w	r2, r3, #31
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f202 	lsl.w	r2, r1, r2
 8003696:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4798      	blx	r3
    }
  }
  return status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2204      	movs	r2, #4
 8003710:	409a      	lsls	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d026      	beq.n	8003768 <HAL_DMA_IRQHandler+0x7a>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d021      	beq.n	8003768 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d107      	bne.n	8003742 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0204 	bic.w	r2, r2, #4
 8003740:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f003 021f 	and.w	r2, r3, #31
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2104      	movs	r1, #4
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	2b00      	cmp	r3, #0
 800375c:	d071      	beq.n	8003842 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003766:	e06c      	b.n	8003842 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2202      	movs	r2, #2
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02e      	beq.n	80037da <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d029      	beq.n	80037da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10b      	bne.n	80037ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 020a 	bic.w	r2, r2, #10
 80037a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	2102      	movs	r1, #2
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d038      	beq.n	8003842 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037d8:	e033      	b.n	8003842 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2208      	movs	r2, #8
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02a      	beq.n	8003844 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d025      	beq.n	8003844 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 020e 	bic.w	r2, r2, #14
 8003806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	2101      	movs	r1, #1
 8003816:	fa01 f202 	lsl.w	r2, r1, r2
 800381a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003842:	bf00      	nop
 8003844:	bf00      	nop
}
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003862:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003868:	2b00      	cmp	r3, #0
 800386a:	d004      	beq.n	8003876 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003874:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	f003 021f 	and.w	r2, r3, #31
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f202 	lsl.w	r2, r1, r2
 8003888:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b10      	cmp	r3, #16
 8003898:	d108      	bne.n	80038ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038aa:	e007      	b.n	80038bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b16      	ldr	r3, [pc, #88]	@ (8003930 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80038d8:	429a      	cmp	r2, r3
 80038da:	d802      	bhi.n	80038e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80038dc:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	e001      	b.n	80038e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038e4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	3b08      	subs	r3, #8
 80038f2:	4a12      	ldr	r2, [pc, #72]	@ (800393c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	009a      	lsls	r2, r3, #2
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	461a      	mov	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a0b      	ldr	r2, [pc, #44]	@ (8003940 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003912:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2201      	movs	r2, #1
 800391c:	409a      	lsls	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40020407 	.word	0x40020407
 8003934:	40020800 	.word	0x40020800
 8003938:	40020820 	.word	0x40020820
 800393c:	cccccccd 	.word	0xcccccccd
 8003940:	40020880 	.word	0x40020880

08003944 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a08      	ldr	r2, [pc, #32]	@ (8003988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003966:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3b01      	subs	r3, #1
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2201      	movs	r2, #1
 8003972:	409a      	lsls	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	1000823f 	.word	0x1000823f
 8003988:	40020940 	.word	0x40020940

0800398c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800399a:	e15a      	b.n	8003c52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	2101      	movs	r1, #1
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	4013      	ands	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 814c 	beq.w	8003c4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d005      	beq.n	80039cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d130      	bne.n	8003a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a02:	2201      	movs	r2, #1
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 0201 	and.w	r2, r3, #1
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d017      	beq.n	8003a6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d123      	bne.n	8003abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3208      	adds	r2, #8
 8003a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	220f      	movs	r2, #15
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	08da      	lsrs	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3208      	adds	r2, #8
 8003ab8:	6939      	ldr	r1, [r7, #16]
 8003aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	2203      	movs	r2, #3
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0203 	and.w	r2, r3, #3
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80a6 	beq.w	8003c4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b00:	4b5b      	ldr	r3, [pc, #364]	@ (8003c70 <HAL_GPIO_Init+0x2e4>)
 8003b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b04:	4a5a      	ldr	r2, [pc, #360]	@ (8003c70 <HAL_GPIO_Init+0x2e4>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b0c:	4b58      	ldr	r3, [pc, #352]	@ (8003c70 <HAL_GPIO_Init+0x2e4>)
 8003b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b18:	4a56      	ldr	r2, [pc, #344]	@ (8003c74 <HAL_GPIO_Init+0x2e8>)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	089b      	lsrs	r3, r3, #2
 8003b1e:	3302      	adds	r3, #2
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	220f      	movs	r2, #15
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b42:	d01f      	beq.n	8003b84 <HAL_GPIO_Init+0x1f8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a4c      	ldr	r2, [pc, #304]	@ (8003c78 <HAL_GPIO_Init+0x2ec>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d019      	beq.n	8003b80 <HAL_GPIO_Init+0x1f4>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a4b      	ldr	r2, [pc, #300]	@ (8003c7c <HAL_GPIO_Init+0x2f0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <HAL_GPIO_Init+0x1f0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a4a      	ldr	r2, [pc, #296]	@ (8003c80 <HAL_GPIO_Init+0x2f4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00d      	beq.n	8003b78 <HAL_GPIO_Init+0x1ec>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a49      	ldr	r2, [pc, #292]	@ (8003c84 <HAL_GPIO_Init+0x2f8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <HAL_GPIO_Init+0x1e8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a48      	ldr	r2, [pc, #288]	@ (8003c88 <HAL_GPIO_Init+0x2fc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <HAL_GPIO_Init+0x1e4>
 8003b6c:	2305      	movs	r3, #5
 8003b6e:	e00a      	b.n	8003b86 <HAL_GPIO_Init+0x1fa>
 8003b70:	2306      	movs	r3, #6
 8003b72:	e008      	b.n	8003b86 <HAL_GPIO_Init+0x1fa>
 8003b74:	2304      	movs	r3, #4
 8003b76:	e006      	b.n	8003b86 <HAL_GPIO_Init+0x1fa>
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e004      	b.n	8003b86 <HAL_GPIO_Init+0x1fa>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e002      	b.n	8003b86 <HAL_GPIO_Init+0x1fa>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_GPIO_Init+0x1fa>
 8003b84:	2300      	movs	r3, #0
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	f002 0203 	and.w	r2, r2, #3
 8003b8c:	0092      	lsls	r2, r2, #2
 8003b8e:	4093      	lsls	r3, r2
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b96:	4937      	ldr	r1, [pc, #220]	@ (8003c74 <HAL_GPIO_Init+0x2e8>)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ba4:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bc8:	4a30      	ldr	r2, [pc, #192]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bce:	4b2f      	ldr	r3, [pc, #188]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bf2:	4a26      	ldr	r2, [pc, #152]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003bf8:	4b24      	ldr	r3, [pc, #144]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c22:	4b1a      	ldr	r3, [pc, #104]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c46:	4a11      	ldr	r2, [pc, #68]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f ae9d 	bne.w	800399c <HAL_GPIO_Init+0x10>
  }
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40010000 	.word	0x40010000
 8003c78:	48000400 	.word	0x48000400
 8003c7c:	48000800 	.word	0x48000800
 8003c80:	48000c00 	.word	0x48000c00
 8003c84:	48001000 	.word	0x48001000
 8003c88:	48001400 	.word	0x48001400
 8003c8c:	40010400 	.word	0x40010400

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cac:	e002      	b.n	8003cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cca:	4b08      	ldr	r3, [pc, #32]	@ (8003cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cd6:	4a05      	ldr	r2, [pc, #20]	@ (8003cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f806 	bl	8003cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40010400 	.word	0x40010400

08003cf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d141      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d16:	4b4b      	ldr	r3, [pc, #300]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d22:	d131      	bne.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d24:	4b47      	ldr	r3, [pc, #284]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d2a:	4a46      	ldr	r2, [pc, #280]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d34:	4b43      	ldr	r3, [pc, #268]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d3c:	4a41      	ldr	r2, [pc, #260]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d44:	4b40      	ldr	r3, [pc, #256]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2232      	movs	r2, #50	@ 0x32
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	0c9b      	lsrs	r3, r3, #18
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d5a:	e002      	b.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d62:	4b38      	ldr	r3, [pc, #224]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6e:	d102      	bne.n	8003d76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f2      	bne.n	8003d5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d76:	4b33      	ldr	r3, [pc, #204]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d82:	d158      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e057      	b.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d88:	4b2e      	ldr	r3, [pc, #184]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d98:	e04d      	b.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da0:	d141      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003da2:	4b28      	ldr	r3, [pc, #160]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dae:	d131      	bne.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db0:	4b24      	ldr	r3, [pc, #144]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db6:	4a23      	ldr	r2, [pc, #140]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc0:	4b20      	ldr	r3, [pc, #128]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2232      	movs	r2, #50	@ 0x32
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	4a1c      	ldr	r2, [pc, #112]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	0c9b      	lsrs	r3, r3, #18
 8003de2:	3301      	adds	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de6:	e002      	b.n	8003dee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfa:	d102      	bne.n	8003e02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f2      	bne.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e02:	4b10      	ldr	r3, [pc, #64]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0e:	d112      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e011      	b.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e14:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e24:	e007      	b.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e26:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e2e:	4a05      	ldr	r2, [pc, #20]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40007000 	.word	0x40007000
 8003e48:	20000228 	.word	0x20000228
 8003e4c:	431bde83 	.word	0x431bde83

08003e50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a04      	ldr	r2, [pc, #16]	@ (8003e6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e5e:	6093      	str	r3, [r2, #8]
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40007000 	.word	0x40007000

08003e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e2fe      	b.n	8004480 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d075      	beq.n	8003f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e8e:	4b97      	ldr	r3, [pc, #604]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e98:	4b94      	ldr	r3, [pc, #592]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d102      	bne.n	8003eae <HAL_RCC_OscConfig+0x3e>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x44>
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d05b      	beq.n	8003f78 <HAL_RCC_OscConfig+0x108>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d157      	bne.n	8003f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e2d9      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x74>
 8003ed6:	4b85      	ldr	r3, [pc, #532]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a84      	ldr	r2, [pc, #528]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e01d      	b.n	8003f20 <HAL_RCC_OscConfig+0xb0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x98>
 8003eee:	4b7f      	ldr	r3, [pc, #508]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	4b7c      	ldr	r3, [pc, #496]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7b      	ldr	r2, [pc, #492]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e00b      	b.n	8003f20 <HAL_RCC_OscConfig+0xb0>
 8003f08:	4b78      	ldr	r3, [pc, #480]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a77      	ldr	r2, [pc, #476]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4b75      	ldr	r3, [pc, #468]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a74      	ldr	r2, [pc, #464]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7ff f8e2 	bl	80030f0 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f30:	f7ff f8de 	bl	80030f0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b64      	cmp	r3, #100	@ 0x64
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e29e      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f42:	4b6a      	ldr	r3, [pc, #424]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0xc0>
 8003f4e:	e014      	b.n	8003f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7ff f8ce 	bl	80030f0 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7ff f8ca 	bl	80030f0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	@ 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e28a      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f6a:	4b60      	ldr	r3, [pc, #384]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0xe8>
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d075      	beq.n	8004072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4b59      	ldr	r3, [pc, #356]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f90:	4b56      	ldr	r3, [pc, #344]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x136>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_OscConfig+0x13c>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d11f      	bne.n	8003fec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fac:	4b4f      	ldr	r3, [pc, #316]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x154>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e25d      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	4b49      	ldr	r3, [pc, #292]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	4946      	ldr	r1, [pc, #280]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fd8:	4b45      	ldr	r3, [pc, #276]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff f83b 	bl	8003058 <HAL_InitTick>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d043      	beq.n	8004070 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e249      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d023      	beq.n	800403c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7ff f876 	bl	80030f0 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004008:	f7ff f872 	bl	80030f0 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e232      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401a:	4b34      	ldr	r3, [pc, #208]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004026:	4b31      	ldr	r3, [pc, #196]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	061b      	lsls	r3, r3, #24
 8004034:	492d      	ldr	r1, [pc, #180]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
 800403a:	e01a      	b.n	8004072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403c:	4b2b      	ldr	r3, [pc, #172]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2a      	ldr	r2, [pc, #168]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004042:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7ff f852 	bl	80030f0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004050:	f7ff f84e 	bl	80030f0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e20e      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004062:	4b22      	ldr	r3, [pc, #136]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x1e0>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d041      	beq.n	8004102 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01c      	beq.n	80040c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004086:	4b19      	ldr	r3, [pc, #100]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800408c:	4a17      	ldr	r2, [pc, #92]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7ff f82b 	bl	80030f0 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409e:	f7ff f827 	bl	80030f0 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e1e7      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040b0:	4b0e      	ldr	r3, [pc, #56]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 80040b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ef      	beq.n	800409e <HAL_RCC_OscConfig+0x22e>
 80040be:	e020      	b.n	8004102 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c0:	4b0a      	ldr	r3, [pc, #40]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 80040c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c6:	4a09      	ldr	r2, [pc, #36]	@ (80040ec <HAL_RCC_OscConfig+0x27c>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7ff f80e 	bl	80030f0 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d6:	e00d      	b.n	80040f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d8:	f7ff f80a 	bl	80030f0 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d906      	bls.n	80040f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1ca      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	2000022c 	.word	0x2000022c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f4:	4b8c      	ldr	r3, [pc, #560]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80040f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ea      	bne.n	80040d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80a6 	beq.w	800425c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004110:	2300      	movs	r3, #0
 8004112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004114:	4b84      	ldr	r3, [pc, #528]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_OscConfig+0x2b4>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x2b6>
 8004124:	2300      	movs	r3, #0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	4b7f      	ldr	r3, [pc, #508]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412e:	4a7e      	ldr	r2, [pc, #504]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004134:	6593      	str	r3, [r2, #88]	@ 0x58
 8004136:	4b7c      	ldr	r3, [pc, #496]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004146:	4b79      	ldr	r3, [pc, #484]	@ (800432c <HAL_RCC_OscConfig+0x4bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d118      	bne.n	8004184 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004152:	4b76      	ldr	r3, [pc, #472]	@ (800432c <HAL_RCC_OscConfig+0x4bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a75      	ldr	r2, [pc, #468]	@ (800432c <HAL_RCC_OscConfig+0x4bc>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800415c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415e:	f7fe ffc7 	bl	80030f0 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004166:	f7fe ffc3 	bl	80030f0 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e183      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004178:	4b6c      	ldr	r3, [pc, #432]	@ (800432c <HAL_RCC_OscConfig+0x4bc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d108      	bne.n	800419e <HAL_RCC_OscConfig+0x32e>
 800418c:	4b66      	ldr	r3, [pc, #408]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004192:	4a65      	ldr	r2, [pc, #404]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800419c:	e024      	b.n	80041e8 <HAL_RCC_OscConfig+0x378>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d110      	bne.n	80041c8 <HAL_RCC_OscConfig+0x358>
 80041a6:	4b60      	ldr	r3, [pc, #384]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041ae:	f043 0304 	orr.w	r3, r3, #4
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041c6:	e00f      	b.n	80041e8 <HAL_RCC_OscConfig+0x378>
 80041c8:	4b57      	ldr	r3, [pc, #348]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ce:	4a56      	ldr	r2, [pc, #344]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041d8:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041de:	4a52      	ldr	r2, [pc, #328]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d016      	beq.n	800421e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe ff7e 	bl	80030f0 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f6:	e00a      	b.n	800420e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fe ff7a 	bl	80030f0 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e138      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800420e:	4b46      	ldr	r3, [pc, #280]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ed      	beq.n	80041f8 <HAL_RCC_OscConfig+0x388>
 800421c:	e015      	b.n	800424a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fe ff67 	bl	80030f0 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fe ff63 	bl	80030f0 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e121      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800423c:	4b3a      	ldr	r3, [pc, #232]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1ed      	bne.n	8004226 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800424a:	7ffb      	ldrb	r3, [r7, #31]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4b35      	ldr	r3, [pc, #212]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004254:	4a34      	ldr	r2, [pc, #208]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800425a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d03c      	beq.n	80042e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01c      	beq.n	80042aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004270:	4b2d      	ldr	r3, [pc, #180]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004276:	4a2c      	ldr	r2, [pc, #176]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fe ff36 	bl	80030f0 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004288:	f7fe ff32 	bl	80030f0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0f2      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800429a:	4b23      	ldr	r3, [pc, #140]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 800429c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ef      	beq.n	8004288 <HAL_RCC_OscConfig+0x418>
 80042a8:	e01b      	b.n	80042e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80042ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fe ff19 	bl	80030f0 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c2:	f7fe ff15 	bl	80030f0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0d5      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042d4:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80042d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ef      	bne.n	80042c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80c9 	beq.w	800447e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	f000 8083 	beq.w	8004400 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d15e      	bne.n	80043c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a08      	ldr	r2, [pc, #32]	@ (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004308:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fe feef 	bl	80030f0 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004314:	e00c      	b.n	8004330 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7fe feeb 	bl	80030f0 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d905      	bls.n	8004330 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e0ab      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
 8004328:	40021000 	.word	0x40021000
 800432c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004330:	4b55      	ldr	r3, [pc, #340]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ec      	bne.n	8004316 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800433c:	4b52      	ldr	r3, [pc, #328]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	4b52      	ldr	r3, [pc, #328]	@ (800448c <HAL_RCC_OscConfig+0x61c>)
 8004342:	4013      	ands	r3, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6a11      	ldr	r1, [r2, #32]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800434c:	3a01      	subs	r2, #1
 800434e:	0112      	lsls	r2, r2, #4
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004356:	0212      	lsls	r2, r2, #8
 8004358:	4311      	orrs	r1, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800435e:	0852      	lsrs	r2, r2, #1
 8004360:	3a01      	subs	r2, #1
 8004362:	0552      	lsls	r2, r2, #21
 8004364:	4311      	orrs	r1, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	3a01      	subs	r2, #1
 800436e:	0652      	lsls	r2, r2, #25
 8004370:	4311      	orrs	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004376:	06d2      	lsls	r2, r2, #27
 8004378:	430a      	orrs	r2, r1
 800437a:	4943      	ldr	r1, [pc, #268]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 800437c:	4313      	orrs	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004380:	4b41      	ldr	r3, [pc, #260]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a40      	ldr	r2, [pc, #256]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800438a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800438c:	4b3e      	ldr	r3, [pc, #248]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a3d      	ldr	r2, [pc, #244]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004396:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe feaa 	bl	80030f0 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe fea6 	bl	80030f0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e066      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	4b35      	ldr	r3, [pc, #212]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x530>
 80043be:	e05e      	b.n	800447e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c0:	4b31      	ldr	r3, [pc, #196]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a30      	ldr	r2, [pc, #192]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fe fe90 	bl	80030f0 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fe fe8c 	bl	80030f0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e04c      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e6:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043f2:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	4924      	ldr	r1, [pc, #144]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 80043f8:	4b25      	ldr	r3, [pc, #148]	@ (8004490 <HAL_RCC_OscConfig+0x620>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	60cb      	str	r3, [r1, #12]
 80043fe:	e03e      	b.n	800447e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e039      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800440c:	4b1e      	ldr	r3, [pc, #120]	@ (8004488 <HAL_RCC_OscConfig+0x618>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 0203 	and.w	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	429a      	cmp	r2, r3
 800441e:	d12c      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	3b01      	subs	r3, #1
 800442c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d123      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d11b      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d113      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	3b01      	subs	r3, #1
 8004460:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d109      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	3b01      	subs	r3, #1
 8004474:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	019f800c 	.word	0x019f800c
 8004490:	feeefffc 	.word	0xfeeefffc

08004494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e11e      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044ac:	4b91      	ldr	r3, [pc, #580]	@ (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d910      	bls.n	80044dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ba:	4b8e      	ldr	r3, [pc, #568]	@ (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 020f 	bic.w	r2, r3, #15
 80044c2:	498c      	ldr	r1, [pc, #560]	@ (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b8a      	ldr	r3, [pc, #552]	@ (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e106      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d073      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d129      	bne.n	8004544 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f0:	4b81      	ldr	r3, [pc, #516]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0f4      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004500:	f000 f99e 	bl	8004840 <RCC_GetSysClockFreqFromPLLSource>
 8004504:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4a7c      	ldr	r2, [pc, #496]	@ (80046fc <HAL_RCC_ClockConfig+0x268>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d93f      	bls.n	800458e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800450e:	4b7a      	ldr	r3, [pc, #488]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004522:	2b00      	cmp	r3, #0
 8004524:	d033      	beq.n	800458e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800452a:	2b00      	cmp	r3, #0
 800452c:	d12f      	bne.n	800458e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800452e:	4b72      	ldr	r3, [pc, #456]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004536:	4a70      	ldr	r2, [pc, #448]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800453e:	2380      	movs	r3, #128	@ 0x80
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e024      	b.n	800458e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d107      	bne.n	800455c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454c:	4b6a      	ldr	r3, [pc, #424]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d109      	bne.n	800456c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0c6      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455c:	4b66      	ldr	r3, [pc, #408]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0be      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800456c:	f000 f8ce 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8004570:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4a61      	ldr	r2, [pc, #388]	@ (80046fc <HAL_RCC_ClockConfig+0x268>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d909      	bls.n	800458e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800457a:	4b5f      	ldr	r3, [pc, #380]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004582:	4a5d      	ldr	r2, [pc, #372]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004588:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800458e:	4b5a      	ldr	r3, [pc, #360]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f023 0203 	bic.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4957      	ldr	r1, [pc, #348]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a0:	f7fe fda6 	bl	80030f0 <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	e00a      	b.n	80045be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a8:	f7fe fda2 	bl	80030f0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e095      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	4b4e      	ldr	r3, [pc, #312]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 020c 	and.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d1eb      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d023      	beq.n	8004624 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e8:	4b43      	ldr	r3, [pc, #268]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a42      	ldr	r2, [pc, #264]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80045ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004600:	4b3d      	ldr	r3, [pc, #244]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004608:	4a3b      	ldr	r2, [pc, #236]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800460a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800460e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004610:	4b39      	ldr	r3, [pc, #228]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4936      	ldr	r1, [pc, #216]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
 8004622:	e008      	b.n	8004636 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b80      	cmp	r3, #128	@ 0x80
 8004628:	d105      	bne.n	8004636 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800462a:	4b33      	ldr	r3, [pc, #204]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	4a32      	ldr	r2, [pc, #200]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004630:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004634:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004636:	4b2f      	ldr	r3, [pc, #188]	@ (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d21d      	bcs.n	8004680 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 020f 	bic.w	r2, r3, #15
 800464c:	4929      	ldr	r1, [pc, #164]	@ (80046f4 <HAL_RCC_ClockConfig+0x260>)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004654:	f7fe fd4c 	bl	80030f0 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465c:	f7fe fd48 	bl	80030f0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e03b      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b20      	ldr	r3, [pc, #128]	@ (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d1ed      	bne.n	800465c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468c:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4917      	ldr	r1, [pc, #92]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046aa:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	490f      	ldr	r1, [pc, #60]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046be:	f000 f825 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046c2:	4602      	mov	r2, r0
 80046c4:	4b0c      	ldr	r3, [pc, #48]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	490c      	ldr	r1, [pc, #48]	@ (8004700 <HAL_RCC_ClockConfig+0x26c>)
 80046d0:	5ccb      	ldrb	r3, [r1, r3]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	fa22 f303 	lsr.w	r3, r2, r3
 80046da:	4a0a      	ldr	r2, [pc, #40]	@ (8004704 <HAL_RCC_ClockConfig+0x270>)
 80046dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046de:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <HAL_RCC_ClockConfig+0x274>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe fcb8 	bl	8003058 <HAL_InitTick>
 80046e8:	4603      	mov	r3, r0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40022000 	.word	0x40022000
 80046f8:	40021000 	.word	0x40021000
 80046fc:	04c4b400 	.word	0x04c4b400
 8004700:	08008edc 	.word	0x08008edc
 8004704:	20000228 	.word	0x20000228
 8004708:	2000022c 	.word	0x2000022c

0800470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004712:	4b2c      	ldr	r3, [pc, #176]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b04      	cmp	r3, #4
 800471c:	d102      	bne.n	8004724 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800471e:	4b2a      	ldr	r3, [pc, #168]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e047      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004724:	4b27      	ldr	r3, [pc, #156]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b08      	cmp	r3, #8
 800472e:	d102      	bne.n	8004736 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004730:	4b26      	ldr	r3, [pc, #152]	@ (80047cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	e03e      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004736:	4b23      	ldr	r3, [pc, #140]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b0c      	cmp	r3, #12
 8004740:	d136      	bne.n	80047b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004742:	4b20      	ldr	r3, [pc, #128]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800474c:	4b1d      	ldr	r3, [pc, #116]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	3301      	adds	r3, #1
 8004758:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d10c      	bne.n	800477a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004760:	4a1a      	ldr	r2, [pc, #104]	@ (80047cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800476a:	68d2      	ldr	r2, [r2, #12]
 800476c:	0a12      	lsrs	r2, r2, #8
 800476e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	617b      	str	r3, [r7, #20]
      break;
 8004778:	e00c      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800477a:	4a13      	ldr	r2, [pc, #76]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	4a10      	ldr	r2, [pc, #64]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004784:	68d2      	ldr	r2, [r2, #12]
 8004786:	0a12      	lsrs	r2, r2, #8
 8004788:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]
      break;
 8004792:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004794:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0e5b      	lsrs	r3, r3, #25
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	3301      	adds	r3, #1
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e001      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047b4:	693b      	ldr	r3, [r7, #16]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	016e3600 	.word	0x016e3600

080047d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d4:	4b03      	ldr	r3, [pc, #12]	@ (80047e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000228 	.word	0x20000228

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047ec:	f7ff fff0 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4904      	ldr	r1, [pc, #16]	@ (8004810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	08008eec 	.word	0x08008eec

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004818:	f7ff ffda 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4904      	ldr	r1, [pc, #16]	@ (800483c <HAL_RCC_GetPCLK2Freq+0x28>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	08008eec 	.word	0x08008eec

08004840 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004846:	4b1e      	ldr	r3, [pc, #120]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004850:	4b1b      	ldr	r3, [pc, #108]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d10c      	bne.n	800487e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004864:	4a17      	ldr	r2, [pc, #92]	@ (80048c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	4a14      	ldr	r2, [pc, #80]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800486e:	68d2      	ldr	r2, [r2, #12]
 8004870:	0a12      	lsrs	r2, r2, #8
 8004872:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	617b      	str	r3, [r7, #20]
    break;
 800487c:	e00c      	b.n	8004898 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800487e:	4a12      	ldr	r2, [pc, #72]	@ (80048c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	4a0e      	ldr	r2, [pc, #56]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004888:	68d2      	ldr	r2, [r2, #12]
 800488a:	0a12      	lsrs	r2, r2, #8
 800488c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]
    break;
 8004896:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004898:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0e5b      	lsrs	r3, r3, #25
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	3301      	adds	r3, #1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048b2:	687b      	ldr	r3, [r7, #4]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40021000 	.word	0x40021000
 80048c4:	016e3600 	.word	0x016e3600
 80048c8:	00f42400 	.word	0x00f42400

080048cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048d4:	2300      	movs	r3, #0
 80048d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048d8:	2300      	movs	r3, #0
 80048da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8098 	beq.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ea:	2300      	movs	r3, #0
 80048ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ee:	4b43      	ldr	r3, [pc, #268]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10d      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	4b40      	ldr	r3, [pc, #256]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	4a3f      	ldr	r2, [pc, #252]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004904:	6593      	str	r3, [r2, #88]	@ 0x58
 8004906:	4b3d      	ldr	r3, [pc, #244]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004912:	2301      	movs	r3, #1
 8004914:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004916:	4b3a      	ldr	r3, [pc, #232]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a39      	ldr	r2, [pc, #228]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800491c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004920:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004922:	f7fe fbe5 	bl	80030f0 <HAL_GetTick>
 8004926:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004928:	e009      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492a:	f7fe fbe1 	bl	80030f0 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d902      	bls.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	74fb      	strb	r3, [r7, #19]
        break;
 800493c:	e005      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800493e:	4b30      	ldr	r3, [pc, #192]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0ef      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800494a:	7cfb      	ldrb	r3, [r7, #19]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d159      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004950:	4b2a      	ldr	r3, [pc, #168]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01e      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	429a      	cmp	r2, r3
 800496a:	d019      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800496c:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004976:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004978:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	4a1f      	ldr	r2, [pc, #124]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004988:	4b1c      	ldr	r3, [pc, #112]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498e:	4a1b      	ldr	r2, [pc, #108]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004998:	4a18      	ldr	r2, [pc, #96]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fe fba1 	bl	80030f0 <HAL_GetTick>
 80049ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b0:	e00b      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fe fb9d 	bl	80030f0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d902      	bls.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	74fb      	strb	r3, [r7, #19]
            break;
 80049c8:	e006      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ca:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ec      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049de:	4b07      	ldr	r3, [pc, #28]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	4903      	ldr	r1, [pc, #12]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049f4:	e008      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	74bb      	strb	r3, [r7, #18]
 80049fa:	e005      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a08:	7c7b      	ldrb	r3, [r7, #17]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0e:	4ba7      	ldr	r3, [pc, #668]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a12:	4aa6      	ldr	r2, [pc, #664]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a26:	4ba1      	ldr	r3, [pc, #644]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2c:	f023 0203 	bic.w	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	499d      	ldr	r1, [pc, #628]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a48:	4b98      	ldr	r3, [pc, #608]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4e:	f023 020c 	bic.w	r2, r3, #12
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4995      	ldr	r1, [pc, #596]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a6a:	4b90      	ldr	r3, [pc, #576]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	498c      	ldr	r1, [pc, #560]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a8c:	4b87      	ldr	r3, [pc, #540]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	4984      	ldr	r1, [pc, #528]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aae:	4b7f      	ldr	r3, [pc, #508]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	497b      	ldr	r1, [pc, #492]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ad0:	4b76      	ldr	r3, [pc, #472]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	4973      	ldr	r1, [pc, #460]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004af2:	4b6e      	ldr	r3, [pc, #440]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	496a      	ldr	r1, [pc, #424]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b14:	4b65      	ldr	r3, [pc, #404]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	4962      	ldr	r1, [pc, #392]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b36:	4b5d      	ldr	r3, [pc, #372]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	4959      	ldr	r1, [pc, #356]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b58:	4b54      	ldr	r3, [pc, #336]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b5e:	f023 0203 	bic.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b66:	4951      	ldr	r1, [pc, #324]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	4948      	ldr	r1, [pc, #288]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d015      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b9c:	4b43      	ldr	r3, [pc, #268]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004baa:	4940      	ldr	r1, [pc, #256]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bd4:	4b35      	ldr	r3, [pc, #212]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be2:	4932      	ldr	r1, [pc, #200]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d015      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c0c:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	4924      	ldr	r1, [pc, #144]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a1e      	ldr	r2, [pc, #120]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c44:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c52:	4916      	ldr	r1, [pc, #88]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c62:	d105      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c64:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4a10      	ldr	r2, [pc, #64]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d019      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	4908      	ldr	r1, [pc, #32]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c9a:	d109      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c9c:	4b03      	ldr	r3, [pc, #12]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a02      	ldr	r2, [pc, #8]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ca6:	60d3      	str	r3, [r2, #12]
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cbc:	4b29      	ldr	r3, [pc, #164]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cca:	4926      	ldr	r1, [pc, #152]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cda:	d105      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cdc:	4b21      	ldr	r3, [pc, #132]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a20      	ldr	r2, [pc, #128]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d02:	4918      	ldr	r1, [pc, #96]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d12:	d105      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d14:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a12      	ldr	r2, [pc, #72]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3a:	490a      	ldr	r1, [pc, #40]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d58:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000

08004d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e054      	b.n	8004e24 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d111      	bne.n	8004daa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 ff3a 	bl	8006c08 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a23      	ldr	r2, [pc, #140]	@ (8004e2c <HAL_TIM_Base_Init+0xc4>)
 8004da0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f001 fa83 	bl	80062c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	08002b55 	.word	0x08002b55

08004e30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d001      	beq.n	8004e48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e04c      	b.n	8004ee2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a26      	ldr	r2, [pc, #152]	@ (8004ef0 <HAL_TIM_Base_Start+0xc0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <HAL_TIM_Base_Start+0x70>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e62:	d01d      	beq.n	8004ea0 <HAL_TIM_Base_Start+0x70>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a22      	ldr	r2, [pc, #136]	@ (8004ef4 <HAL_TIM_Base_Start+0xc4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <HAL_TIM_Base_Start+0x70>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a21      	ldr	r2, [pc, #132]	@ (8004ef8 <HAL_TIM_Base_Start+0xc8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_TIM_Base_Start+0x70>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004efc <HAL_TIM_Base_Start+0xcc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <HAL_TIM_Base_Start+0x70>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1e      	ldr	r2, [pc, #120]	@ (8004f00 <HAL_TIM_Base_Start+0xd0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_TIM_Base_Start+0x70>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1c      	ldr	r2, [pc, #112]	@ (8004f04 <HAL_TIM_Base_Start+0xd4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_TIM_Base_Start+0x70>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f08 <HAL_TIM_Base_Start+0xd8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d115      	bne.n	8004ecc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <HAL_TIM_Base_Start+0xdc>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d015      	beq.n	8004ede <HAL_TIM_Base_Start+0xae>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb8:	d011      	beq.n	8004ede <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eca:	e008      	b.n	8004ede <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e000      	b.n	8004ee0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	40013400 	.word	0x40013400
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40015000 	.word	0x40015000
 8004f0c:	00010007 	.word	0x00010007

08004f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d001      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e054      	b.n	8004fd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a26      	ldr	r2, [pc, #152]	@ (8004fe0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d022      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x80>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f52:	d01d      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x80>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x80>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a21      	ldr	r2, [pc, #132]	@ (8004fe8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x80>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <HAL_TIM_Base_Start_IT+0xdc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x80>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x80>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x80>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d115      	bne.n	8004fbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	4b19      	ldr	r3, [pc, #100]	@ (8004ffc <HAL_TIM_Base_Start_IT+0xec>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b06      	cmp	r3, #6
 8004fa0:	d015      	beq.n	8004fce <HAL_TIM_Base_Start_IT+0xbe>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa8:	d011      	beq.n	8004fce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fba:	e008      	b.n	8004fce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e000      	b.n	8004fd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40000c00 	.word	0x40000c00
 8004ff0:	40013400 	.word	0x40013400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40015000 	.word	0x40015000
 8004ffc:	00010007 	.word	0x00010007

08005000 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e054      	b.n	80050bc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d111      	bne.n	8005042 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 fdee 	bl	8006c08 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a23      	ldr	r2, [pc, #140]	@ (80050c4 <HAL_TIM_PWM_Init+0xc4>)
 8005038:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2202      	movs	r2, #2
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f001 f937 	bl	80062c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	080050c9 	.word	0x080050c9

080050c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <HAL_TIM_PWM_Start_IT+0x28>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	bf14      	ite	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	2300      	moveq	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e03c      	b.n	800517e <HAL_TIM_PWM_Start_IT+0xa2>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b04      	cmp	r3, #4
 8005108:	d109      	bne.n	800511e <HAL_TIM_PWM_Start_IT+0x42>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	e02f      	b.n	800517e <HAL_TIM_PWM_Start_IT+0xa2>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d109      	bne.n	8005138 <HAL_TIM_PWM_Start_IT+0x5c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	bf14      	ite	ne
 8005130:	2301      	movne	r3, #1
 8005132:	2300      	moveq	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e022      	b.n	800517e <HAL_TIM_PWM_Start_IT+0xa2>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d109      	bne.n	8005152 <HAL_TIM_PWM_Start_IT+0x76>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e015      	b.n	800517e <HAL_TIM_PWM_Start_IT+0xa2>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b10      	cmp	r3, #16
 8005156:	d109      	bne.n	800516c <HAL_TIM_PWM_Start_IT+0x90>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e008      	b.n	800517e <HAL_TIM_PWM_Start_IT+0xa2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e0f1      	b.n	800536a <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start_IT+0xba>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005194:	e023      	b.n	80051de <HAL_TIM_PWM_Start_IT+0x102>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start_IT+0xca>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a4:	e01b      	b.n	80051de <HAL_TIM_PWM_Start_IT+0x102>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Start_IT+0xda>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b4:	e013      	b.n	80051de <HAL_TIM_PWM_Start_IT+0x102>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_PWM_Start_IT+0xea>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051c4:	e00b      	b.n	80051de <HAL_TIM_PWM_Start_IT+0x102>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Start_IT+0xfa>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051d4:	e003      	b.n	80051de <HAL_TIM_PWM_Start_IT+0x102>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b0c      	cmp	r3, #12
 80051e2:	d841      	bhi.n	8005268 <HAL_TIM_PWM_Start_IT+0x18c>
 80051e4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <HAL_TIM_PWM_Start_IT+0x110>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005221 	.word	0x08005221
 80051f0:	08005269 	.word	0x08005269
 80051f4:	08005269 	.word	0x08005269
 80051f8:	08005269 	.word	0x08005269
 80051fc:	08005233 	.word	0x08005233
 8005200:	08005269 	.word	0x08005269
 8005204:	08005269 	.word	0x08005269
 8005208:	08005269 	.word	0x08005269
 800520c:	08005245 	.word	0x08005245
 8005210:	08005269 	.word	0x08005269
 8005214:	08005269 	.word	0x08005269
 8005218:	08005269 	.word	0x08005269
 800521c:	08005257 	.word	0x08005257
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0202 	orr.w	r2, r2, #2
 800522e:	60da      	str	r2, [r3, #12]
      break;
 8005230:	e01d      	b.n	800526e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0204 	orr.w	r2, r2, #4
 8005240:	60da      	str	r2, [r3, #12]
      break;
 8005242:	e014      	b.n	800526e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0208 	orr.w	r2, r2, #8
 8005252:	60da      	str	r2, [r3, #12]
      break;
 8005254:	e00b      	b.n	800526e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0210 	orr.w	r2, r2, #16
 8005264:	60da      	str	r2, [r3, #12]
      break;
 8005266:	e002      	b.n	800526e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
      break;
 800526c:	bf00      	nop
  }

  if (status == HAL_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d179      	bne.n	8005368 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2201      	movs	r2, #1
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f001 fc9d 	bl	8006bbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a3b      	ldr	r2, [pc, #236]	@ (8005374 <HAL_TIM_PWM_Start_IT+0x298>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d018      	beq.n	80052be <HAL_TIM_PWM_Start_IT+0x1e2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a39      	ldr	r2, [pc, #228]	@ (8005378 <HAL_TIM_PWM_Start_IT+0x29c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_TIM_PWM_Start_IT+0x1e2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a38      	ldr	r2, [pc, #224]	@ (800537c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_TIM_PWM_Start_IT+0x1e2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a36      	ldr	r2, [pc, #216]	@ (8005380 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_TIM_PWM_Start_IT+0x1e2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a35      	ldr	r2, [pc, #212]	@ (8005384 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_TIM_PWM_Start_IT+0x1e2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a33      	ldr	r2, [pc, #204]	@ (8005388 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d101      	bne.n	80052c2 <HAL_TIM_PWM_Start_IT+0x1e6>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_TIM_PWM_Start_IT+0x1e8>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a25      	ldr	r2, [pc, #148]	@ (8005374 <HAL_TIM_PWM_Start_IT+0x298>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d022      	beq.n	8005328 <HAL_TIM_PWM_Start_IT+0x24c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ea:	d01d      	beq.n	8005328 <HAL_TIM_PWM_Start_IT+0x24c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a26      	ldr	r2, [pc, #152]	@ (800538c <HAL_TIM_PWM_Start_IT+0x2b0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d018      	beq.n	8005328 <HAL_TIM_PWM_Start_IT+0x24c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a25      	ldr	r2, [pc, #148]	@ (8005390 <HAL_TIM_PWM_Start_IT+0x2b4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d013      	beq.n	8005328 <HAL_TIM_PWM_Start_IT+0x24c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a23      	ldr	r2, [pc, #140]	@ (8005394 <HAL_TIM_PWM_Start_IT+0x2b8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00e      	beq.n	8005328 <HAL_TIM_PWM_Start_IT+0x24c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1a      	ldr	r2, [pc, #104]	@ (8005378 <HAL_TIM_PWM_Start_IT+0x29c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_TIM_PWM_Start_IT+0x24c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a18      	ldr	r2, [pc, #96]	@ (800537c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_TIM_PWM_Start_IT+0x24c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a19      	ldr	r2, [pc, #100]	@ (8005388 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d115      	bne.n	8005354 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	4b1a      	ldr	r3, [pc, #104]	@ (8005398 <HAL_TIM_PWM_Start_IT+0x2bc>)
 8005330:	4013      	ands	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b06      	cmp	r3, #6
 8005338:	d015      	beq.n	8005366 <HAL_TIM_PWM_Start_IT+0x28a>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005340:	d011      	beq.n	8005366 <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005352:	e008      	b.n	8005366 <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e000      	b.n	8005368 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005366:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40013400 	.word	0x40013400
 800537c:	40014000 	.word	0x40014000
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800
 8005388:	40015000 	.word	0x40015000
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	00010007 	.word	0x00010007

0800539c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e04c      	b.n	800544a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d111      	bne.n	80053e0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 fc1f 	bl	8006c08 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005454 <HAL_TIM_OnePulse_Init+0xb8>)
 80053d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 ff68 	bl	80062c8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0208 	bic.w	r2, r2, #8
 8005406:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6819      	ldr	r1, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	08005459 	.word	0x08005459

08005458 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800547c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005484:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800548c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005494:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d108      	bne.n	80054ae <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d105      	bne.n	80054ae <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a2:	7b7b      	ldrb	r3, [r7, #13]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d102      	bne.n	80054ae <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054a8:	7b3b      	ldrb	r3, [r7, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d001      	beq.n	80054b2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e059      	b.n	8005566 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0202 	orr.w	r2, r2, #2
 80054e0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0204 	orr.w	r2, r2, #4
 80054f0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2201      	movs	r2, #1
 80054f8:	2100      	movs	r1, #0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 fb5e 	bl	8006bbc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2201      	movs	r2, #1
 8005506:	2104      	movs	r1, #4
 8005508:	4618      	mov	r0, r3
 800550a:	f001 fb57 	bl	8006bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a15      	ldr	r2, [pc, #84]	@ (8005574 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a14      	ldr	r2, [pc, #80]	@ (8005578 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_TIM_OnePulse_Start_IT+0xde>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a12      	ldr	r2, [pc, #72]	@ (800557c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a11      	ldr	r2, [pc, #68]	@ (8005580 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a0f      	ldr	r2, [pc, #60]	@ (8005584 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d101      	bne.n	800554e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005562:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40013400 	.word	0x40013400
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800
 8005584:	40015000 	.word	0x40015000

08005588 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0a2      	b.n	80056e2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d111      	bne.n	80055cc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 fb29 	bl	8006c08 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d102      	bne.n	80055c4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a4a      	ldr	r2, [pc, #296]	@ (80056ec <HAL_TIM_Encoder_Init+0x164>)
 80055c2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80055e2:	f023 0307 	bic.w	r3, r3, #7
 80055e6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f000 fe68 	bl	80062c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005620:	f023 0303 	bic.w	r3, r3, #3
 8005624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	4313      	orrs	r3, r2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800563e:	f023 030c 	bic.w	r3, r3, #12
 8005642:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800564a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800564e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	4313      	orrs	r3, r2
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	011a      	lsls	r2, r3, #4
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	4313      	orrs	r3, r2
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800567c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005684:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	4313      	orrs	r3, r2
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	08002ad5 	.word	0x08002ad5

080056f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005700:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005708:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005710:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005718:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d110      	bne.n	8005742 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d102      	bne.n	800572c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005726:	7b7b      	ldrb	r3, [r7, #13]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d001      	beq.n	8005730 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e069      	b.n	8005804 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005740:	e031      	b.n	80057a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b04      	cmp	r3, #4
 8005746:	d110      	bne.n	800576a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d102      	bne.n	8005754 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800574e:	7b3b      	ldrb	r3, [r7, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e055      	b.n	8005804 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005768:	e01d      	b.n	80057a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d108      	bne.n	8005782 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d105      	bne.n	8005782 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005776:	7b7b      	ldrb	r3, [r7, #13]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d102      	bne.n	8005782 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800577c:	7b3b      	ldrb	r3, [r7, #12]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d001      	beq.n	8005786 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e03e      	b.n	8005804 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_TIM_Encoder_Start+0xc4>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d008      	beq.n	80057c4 <HAL_TIM_Encoder_Start+0xd4>
 80057b2:	e00f      	b.n	80057d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2201      	movs	r2, #1
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 f9fd 	bl	8006bbc <TIM_CCxChannelCmd>
      break;
 80057c2:	e016      	b.n	80057f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2201      	movs	r2, #1
 80057ca:	2104      	movs	r1, #4
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 f9f5 	bl	8006bbc <TIM_CCxChannelCmd>
      break;
 80057d2:	e00e      	b.n	80057f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f001 f9ed 	bl	8006bbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2201      	movs	r2, #1
 80057e8:	2104      	movs	r1, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 f9e6 	bl	8006bbc <TIM_CCxChannelCmd>
      break;
 80057f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d026      	beq.n	800587c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d021      	beq.n	800587c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0202 	mvn.w	r2, #2
 8005840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
 8005860:	e009      	b.n	8005876 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d026      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d021      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0204 	mvn.w	r2, #4
 8005898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
 80058b8:	e009      	b.n	80058ce <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d026      	beq.n	800592c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d021      	beq.n	800592c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0208 	mvn.w	r2, #8
 80058f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2204      	movs	r2, #4
 80058f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4798      	blx	r3
 8005910:	e009      	b.n	8005926 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	d026      	beq.n	8005984 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	d021      	beq.n	8005984 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0210 	mvn.w	r2, #16
 8005948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2208      	movs	r2, #8
 800594e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
 8005968:	e009      	b.n	800597e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00e      	beq.n	80059ac <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0201 	mvn.w	r2, #1
 80059a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00e      	beq.n	80059de <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00e      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00e      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00e      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f06f 0220 	mvn.w	r2, #32
 8005a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00e      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00e      	beq.n	8005ace <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e0ff      	b.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b14      	cmp	r3, #20
 8005b2a:	f200 80f0 	bhi.w	8005d0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005d0f 	.word	0x08005d0f
 8005b3c:	08005d0f 	.word	0x08005d0f
 8005b40:	08005d0f 	.word	0x08005d0f
 8005b44:	08005bc9 	.word	0x08005bc9
 8005b48:	08005d0f 	.word	0x08005d0f
 8005b4c:	08005d0f 	.word	0x08005d0f
 8005b50:	08005d0f 	.word	0x08005d0f
 8005b54:	08005c0b 	.word	0x08005c0b
 8005b58:	08005d0f 	.word	0x08005d0f
 8005b5c:	08005d0f 	.word	0x08005d0f
 8005b60:	08005d0f 	.word	0x08005d0f
 8005b64:	08005c4b 	.word	0x08005c4b
 8005b68:	08005d0f 	.word	0x08005d0f
 8005b6c:	08005d0f 	.word	0x08005d0f
 8005b70:	08005d0f 	.word	0x08005d0f
 8005b74:	08005c8d 	.word	0x08005c8d
 8005b78:	08005d0f 	.word	0x08005d0f
 8005b7c:	08005d0f 	.word	0x08005d0f
 8005b80:	08005d0f 	.word	0x08005d0f
 8005b84:	08005ccd 	.word	0x08005ccd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fc4e 	bl	8006430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0208 	orr.w	r2, r2, #8
 8005ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0204 	bic.w	r2, r2, #4
 8005bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6999      	ldr	r1, [r3, #24]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	619a      	str	r2, [r3, #24]
      break;
 8005bc6:	e0a5      	b.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fcc8 	bl	8006564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6999      	ldr	r1, [r3, #24]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	021a      	lsls	r2, r3, #8
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	619a      	str	r2, [r3, #24]
      break;
 8005c08:	e084      	b.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fd3b 	bl	800668c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0208 	orr.w	r2, r2, #8
 8005c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0204 	bic.w	r2, r2, #4
 8005c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69d9      	ldr	r1, [r3, #28]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	61da      	str	r2, [r3, #28]
      break;
 8005c48:	e064      	b.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fdad 	bl	80067b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69d9      	ldr	r1, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	021a      	lsls	r2, r3, #8
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	61da      	str	r2, [r3, #28]
      break;
 8005c8a:	e043      	b.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fe20 	bl	80068d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0208 	orr.w	r2, r2, #8
 8005ca6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0204 	bic.w	r2, r2, #4
 8005cb6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005cca:	e023      	b.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fe6a 	bl	80069ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ce6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cf6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	021a      	lsls	r2, r3, #8
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d0c:	e002      	b.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	75fb      	strb	r3, [r7, #23]
      break;
 8005d12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop

08005d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIM_ConfigClockSource+0x1c>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e0f6      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x20a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005d62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a6f      	ldr	r2, [pc, #444]	@ (8005f3c <HAL_TIM_ConfigClockSource+0x214>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	f000 80c1 	beq.w	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d84:	4a6d      	ldr	r2, [pc, #436]	@ (8005f3c <HAL_TIM_ConfigClockSource+0x214>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	f200 80c6 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d8c:	4a6c      	ldr	r2, [pc, #432]	@ (8005f40 <HAL_TIM_ConfigClockSource+0x218>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f000 80b9 	beq.w	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d94:	4a6a      	ldr	r2, [pc, #424]	@ (8005f40 <HAL_TIM_ConfigClockSource+0x218>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	f200 80be 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d9c:	4a69      	ldr	r2, [pc, #420]	@ (8005f44 <HAL_TIM_ConfigClockSource+0x21c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f000 80b1 	beq.w	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005da4:	4a67      	ldr	r2, [pc, #412]	@ (8005f44 <HAL_TIM_ConfigClockSource+0x21c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	f200 80b6 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dac:	4a66      	ldr	r2, [pc, #408]	@ (8005f48 <HAL_TIM_ConfigClockSource+0x220>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	f000 80a9 	beq.w	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005db4:	4a64      	ldr	r2, [pc, #400]	@ (8005f48 <HAL_TIM_ConfigClockSource+0x220>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	f200 80ae 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dbc:	4a63      	ldr	r2, [pc, #396]	@ (8005f4c <HAL_TIM_ConfigClockSource+0x224>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	f000 80a1 	beq.w	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005dc4:	4a61      	ldr	r2, [pc, #388]	@ (8005f4c <HAL_TIM_ConfigClockSource+0x224>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f200 80a6 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dcc:	4a60      	ldr	r2, [pc, #384]	@ (8005f50 <HAL_TIM_ConfigClockSource+0x228>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	f000 8099 	beq.w	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005dd4:	4a5e      	ldr	r2, [pc, #376]	@ (8005f50 <HAL_TIM_ConfigClockSource+0x228>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	f200 809e 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ddc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005de0:	f000 8091 	beq.w	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005de4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005de8:	f200 8096 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df0:	f000 8089 	beq.w	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df8:	f200 808e 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e00:	d03e      	beq.n	8005e80 <HAL_TIM_ConfigClockSource+0x158>
 8005e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e06:	f200 8087 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0e:	f000 8086 	beq.w	8005f1e <HAL_TIM_ConfigClockSource+0x1f6>
 8005e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e16:	d87f      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e18:	2b70      	cmp	r3, #112	@ 0x70
 8005e1a:	d01a      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x12a>
 8005e1c:	2b70      	cmp	r3, #112	@ 0x70
 8005e1e:	d87b      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e20:	2b60      	cmp	r3, #96	@ 0x60
 8005e22:	d050      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x19e>
 8005e24:	2b60      	cmp	r3, #96	@ 0x60
 8005e26:	d877      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e28:	2b50      	cmp	r3, #80	@ 0x50
 8005e2a:	d03c      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x17e>
 8005e2c:	2b50      	cmp	r3, #80	@ 0x50
 8005e2e:	d873      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e30:	2b40      	cmp	r3, #64	@ 0x40
 8005e32:	d058      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0x1be>
 8005e34:	2b40      	cmp	r3, #64	@ 0x40
 8005e36:	d86f      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e38:	2b30      	cmp	r3, #48	@ 0x30
 8005e3a:	d064      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005e3c:	2b30      	cmp	r3, #48	@ 0x30
 8005e3e:	d86b      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d060      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d867      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d05c      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d05a      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x1de>
 8005e50:	e062      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e62:	f000 fe8b 	bl	8006b7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	609a      	str	r2, [r3, #8]
      break;
 8005e7e:	e04f      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e90:	f000 fe74 	bl	8006b7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ea2:	609a      	str	r2, [r3, #8]
      break;
 8005ea4:	e03c      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f000 fde6 	bl	8006a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2150      	movs	r1, #80	@ 0x50
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fe3f 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 8005ec4:	e02c      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f000 fe05 	bl	8006ae2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2160      	movs	r1, #96	@ 0x60
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fe2f 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 8005ee4:	e01c      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f000 fdc6 	bl	8006a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2140      	movs	r1, #64	@ 0x40
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fe1f 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 8005f04:	e00c      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f000 fe16 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 8005f16:	e003      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1c:	e000      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	00100070 	.word	0x00100070
 8005f40:	00100060 	.word	0x00100060
 8005f44:	00100050 	.word	0x00100050
 8005f48:	00100040 	.word	0x00100040
 8005f4c:	00100030 	.word	0x00100030
 8005f50:	00100020 	.word	0x00100020

08005f54 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e14a      	b.n	80062ba <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b01      	cmp	r3, #1
 800602e:	f040 80dd 	bne.w	80061ec <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	2b1f      	cmp	r3, #31
 8006036:	f200 80d6 	bhi.w	80061e6 <HAL_TIM_RegisterCallback+0x1de>
 800603a:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <HAL_TIM_RegisterCallback+0x38>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	080060c1 	.word	0x080060c1
 8006044:	080060c9 	.word	0x080060c9
 8006048:	080060d1 	.word	0x080060d1
 800604c:	080060d9 	.word	0x080060d9
 8006050:	080060e1 	.word	0x080060e1
 8006054:	080060e9 	.word	0x080060e9
 8006058:	080060f1 	.word	0x080060f1
 800605c:	080060f9 	.word	0x080060f9
 8006060:	08006101 	.word	0x08006101
 8006064:	08006109 	.word	0x08006109
 8006068:	08006111 	.word	0x08006111
 800606c:	08006119 	.word	0x08006119
 8006070:	08006121 	.word	0x08006121
 8006074:	08006129 	.word	0x08006129
 8006078:	08006133 	.word	0x08006133
 800607c:	0800613d 	.word	0x0800613d
 8006080:	08006147 	.word	0x08006147
 8006084:	08006151 	.word	0x08006151
 8006088:	0800615b 	.word	0x0800615b
 800608c:	08006165 	.word	0x08006165
 8006090:	0800616f 	.word	0x0800616f
 8006094:	08006179 	.word	0x08006179
 8006098:	08006183 	.word	0x08006183
 800609c:	0800618d 	.word	0x0800618d
 80060a0:	08006197 	.word	0x08006197
 80060a4:	080061a1 	.word	0x080061a1
 80060a8:	080061ab 	.word	0x080061ab
 80060ac:	080061b5 	.word	0x080061b5
 80060b0:	080061bf 	.word	0x080061bf
 80060b4:	080061c9 	.word	0x080061c9
 80060b8:	080061d3 	.word	0x080061d3
 80060bc:	080061dd 	.word	0x080061dd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80060c6:	e0f7      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80060ce:	e0f3      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80060d6:	e0ef      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80060de:	e0eb      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80060e6:	e0e7      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80060ee:	e0e3      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80060f6:	e0df      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80060fe:	e0db      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006106:	e0d7      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800610e:	e0d3      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006116:	e0cf      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800611e:	e0cb      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006126:	e0c7      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006130:	e0c2      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800613a:	e0bd      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006144:	e0b8      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800614e:	e0b3      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8006158:	e0ae      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006162:	e0a9      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800616c:	e0a4      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8006176:	e09f      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006180:	e09a      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800618a:	e095      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006194:	e090      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800619e:	e08b      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80061a8:	e086      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80061b2:	e081      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80061bc:	e07c      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80061c6:	e077      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80061d0:	e072      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80061da:	e06d      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80061e4:	e068      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]
        break;
 80061ea:	e065      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d15d      	bne.n	80062b4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80061f8:	7afb      	ldrb	r3, [r7, #11]
 80061fa:	2b0d      	cmp	r3, #13
 80061fc:	d857      	bhi.n	80062ae <HAL_TIM_RegisterCallback+0x2a6>
 80061fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006204 <HAL_TIM_RegisterCallback+0x1fc>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	0800623d 	.word	0x0800623d
 8006208:	08006245 	.word	0x08006245
 800620c:	0800624d 	.word	0x0800624d
 8006210:	08006255 	.word	0x08006255
 8006214:	0800625d 	.word	0x0800625d
 8006218:	08006265 	.word	0x08006265
 800621c:	0800626d 	.word	0x0800626d
 8006220:	08006275 	.word	0x08006275
 8006224:	0800627d 	.word	0x0800627d
 8006228:	08006285 	.word	0x08006285
 800622c:	0800628d 	.word	0x0800628d
 8006230:	08006295 	.word	0x08006295
 8006234:	0800629d 	.word	0x0800629d
 8006238:	080062a5 	.word	0x080062a5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006242:	e039      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800624a:	e035      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006252:	e031      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800625a:	e02d      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006262:	e029      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800626a:	e025      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006272:	e021      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800627a:	e01d      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006282:	e019      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800628a:	e015      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006292:	e011      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800629a:	e00d      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80062a2:	e009      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80062ac:	e004      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]
        break;
 80062b2:	e001      	b.n	80062b8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop

080062c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a4c      	ldr	r2, [pc, #304]	@ (800640c <TIM_Base_SetConfig+0x144>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d017      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e6:	d013      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a49      	ldr	r2, [pc, #292]	@ (8006410 <TIM_Base_SetConfig+0x148>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00f      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a48      	ldr	r2, [pc, #288]	@ (8006414 <TIM_Base_SetConfig+0x14c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00b      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a47      	ldr	r2, [pc, #284]	@ (8006418 <TIM_Base_SetConfig+0x150>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d007      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a46      	ldr	r2, [pc, #280]	@ (800641c <TIM_Base_SetConfig+0x154>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a45      	ldr	r2, [pc, #276]	@ (8006420 <TIM_Base_SetConfig+0x158>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d108      	bne.n	8006322 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a39      	ldr	r2, [pc, #228]	@ (800640c <TIM_Base_SetConfig+0x144>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d023      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006330:	d01f      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a36      	ldr	r2, [pc, #216]	@ (8006410 <TIM_Base_SetConfig+0x148>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01b      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a35      	ldr	r2, [pc, #212]	@ (8006414 <TIM_Base_SetConfig+0x14c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d017      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a34      	ldr	r2, [pc, #208]	@ (8006418 <TIM_Base_SetConfig+0x150>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a33      	ldr	r2, [pc, #204]	@ (800641c <TIM_Base_SetConfig+0x154>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00f      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a33      	ldr	r2, [pc, #204]	@ (8006424 <TIM_Base_SetConfig+0x15c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00b      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a32      	ldr	r2, [pc, #200]	@ (8006428 <TIM_Base_SetConfig+0x160>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d007      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a31      	ldr	r2, [pc, #196]	@ (800642c <TIM_Base_SetConfig+0x164>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d003      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2c      	ldr	r2, [pc, #176]	@ (8006420 <TIM_Base_SetConfig+0x158>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d108      	bne.n	8006384 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a18      	ldr	r2, [pc, #96]	@ (800640c <TIM_Base_SetConfig+0x144>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a1a      	ldr	r2, [pc, #104]	@ (800641c <TIM_Base_SetConfig+0x154>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00f      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006424 <TIM_Base_SetConfig+0x15c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00b      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a19      	ldr	r2, [pc, #100]	@ (8006428 <TIM_Base_SetConfig+0x160>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d007      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a18      	ldr	r2, [pc, #96]	@ (800642c <TIM_Base_SetConfig+0x164>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a13      	ldr	r2, [pc, #76]	@ (8006420 <TIM_Base_SetConfig+0x158>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d103      	bne.n	80063e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d105      	bne.n	80063fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	611a      	str	r2, [r3, #16]
  }
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40000400 	.word	0x40000400
 8006414:	40000800 	.word	0x40000800
 8006418:	40000c00 	.word	0x40000c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40015000 	.word	0x40015000
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800

08006430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f023 0201 	bic.w	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 0302 	bic.w	r3, r3, #2
 800647c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a30      	ldr	r2, [pc, #192]	@ (800654c <TIM_OC1_SetConfig+0x11c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2f      	ldr	r2, [pc, #188]	@ (8006550 <TIM_OC1_SetConfig+0x120>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00f      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a2e      	ldr	r2, [pc, #184]	@ (8006554 <TIM_OC1_SetConfig+0x124>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00b      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006558 <TIM_OC1_SetConfig+0x128>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d007      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a2c      	ldr	r2, [pc, #176]	@ (800655c <TIM_OC1_SetConfig+0x12c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006560 <TIM_OC1_SetConfig+0x130>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10c      	bne.n	80064d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0308 	bic.w	r3, r3, #8
 80064be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0304 	bic.w	r3, r3, #4
 80064d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1d      	ldr	r2, [pc, #116]	@ (800654c <TIM_OC1_SetConfig+0x11c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006550 <TIM_OC1_SetConfig+0x120>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00f      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006554 <TIM_OC1_SetConfig+0x124>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00b      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006558 <TIM_OC1_SetConfig+0x128>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d007      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a19      	ldr	r2, [pc, #100]	@ (800655c <TIM_OC1_SetConfig+0x12c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a18      	ldr	r2, [pc, #96]	@ (8006560 <TIM_OC1_SetConfig+0x130>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d111      	bne.n	8006526 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800
 8006560:	40015000 	.word	0x40015000

08006564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f023 0210 	bic.w	r2, r3, #16
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800659e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0320 	bic.w	r3, r3, #32
 80065b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006674 <TIM_OC2_SetConfig+0x110>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_OC2_SetConfig+0x74>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a2b      	ldr	r2, [pc, #172]	@ (8006678 <TIM_OC2_SetConfig+0x114>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC2_SetConfig+0x74>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a2a      	ldr	r2, [pc, #168]	@ (800667c <TIM_OC2_SetConfig+0x118>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d10d      	bne.n	80065f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <TIM_OC2_SetConfig+0x110>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d013      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006678 <TIM_OC2_SetConfig+0x114>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00f      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a1e      	ldr	r2, [pc, #120]	@ (8006680 <TIM_OC2_SetConfig+0x11c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00b      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a1d      	ldr	r2, [pc, #116]	@ (8006684 <TIM_OC2_SetConfig+0x120>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d007      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a1c      	ldr	r2, [pc, #112]	@ (8006688 <TIM_OC2_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a17      	ldr	r2, [pc, #92]	@ (800667c <TIM_OC2_SetConfig+0x118>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d113      	bne.n	800664c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800662a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40013400 	.word	0x40013400
 800667c:	40015000 	.word	0x40015000
 8006680:	40014000 	.word	0x40014000
 8006684:	40014400 	.word	0x40014400
 8006688:	40014800 	.word	0x40014800

0800668c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006798 <TIM_OC3_SetConfig+0x10c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <TIM_OC3_SetConfig+0x72>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2a      	ldr	r2, [pc, #168]	@ (800679c <TIM_OC3_SetConfig+0x110>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_OC3_SetConfig+0x72>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a29      	ldr	r2, [pc, #164]	@ (80067a0 <TIM_OC3_SetConfig+0x114>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d10d      	bne.n	800671a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1e      	ldr	r2, [pc, #120]	@ (8006798 <TIM_OC3_SetConfig+0x10c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d013      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1d      	ldr	r2, [pc, #116]	@ (800679c <TIM_OC3_SetConfig+0x110>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00f      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1d      	ldr	r2, [pc, #116]	@ (80067a4 <TIM_OC3_SetConfig+0x118>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00b      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1c      	ldr	r2, [pc, #112]	@ (80067a8 <TIM_OC3_SetConfig+0x11c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d007      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1b      	ldr	r2, [pc, #108]	@ (80067ac <TIM_OC3_SetConfig+0x120>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d003      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a16      	ldr	r2, [pc, #88]	@ (80067a0 <TIM_OC3_SetConfig+0x114>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d113      	bne.n	8006772 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40013400 	.word	0x40013400
 80067a0:	40015000 	.word	0x40015000
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800

080067b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	031b      	lsls	r3, r3, #12
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a2c      	ldr	r2, [pc, #176]	@ (80068c0 <TIM_OC4_SetConfig+0x110>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d007      	beq.n	8006824 <TIM_OC4_SetConfig+0x74>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a2b      	ldr	r2, [pc, #172]	@ (80068c4 <TIM_OC4_SetConfig+0x114>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_OC4_SetConfig+0x74>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a2a      	ldr	r2, [pc, #168]	@ (80068c8 <TIM_OC4_SetConfig+0x118>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d10d      	bne.n	8006840 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800682a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	031b      	lsls	r3, r3, #12
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800683e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1f      	ldr	r2, [pc, #124]	@ (80068c0 <TIM_OC4_SetConfig+0x110>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a1e      	ldr	r2, [pc, #120]	@ (80068c4 <TIM_OC4_SetConfig+0x114>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00f      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a1e      	ldr	r2, [pc, #120]	@ (80068cc <TIM_OC4_SetConfig+0x11c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00b      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a1d      	ldr	r2, [pc, #116]	@ (80068d0 <TIM_OC4_SetConfig+0x120>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d007      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1c      	ldr	r2, [pc, #112]	@ (80068d4 <TIM_OC4_SetConfig+0x124>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a17      	ldr	r2, [pc, #92]	@ (80068c8 <TIM_OC4_SetConfig+0x118>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d113      	bne.n	8006898 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006876:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800687e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	019b      	lsls	r3, r3, #6
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	019b      	lsls	r3, r3, #6
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40013400 	.word	0x40013400
 80068c8:	40015000 	.word	0x40015000
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800

080068d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800691c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	041b      	lsls	r3, r3, #16
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a19      	ldr	r2, [pc, #100]	@ (8006994 <TIM_OC5_SetConfig+0xbc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a18      	ldr	r2, [pc, #96]	@ (8006998 <TIM_OC5_SetConfig+0xc0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00f      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a17      	ldr	r2, [pc, #92]	@ (800699c <TIM_OC5_SetConfig+0xc4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00b      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a16      	ldr	r2, [pc, #88]	@ (80069a0 <TIM_OC5_SetConfig+0xc8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d007      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a15      	ldr	r2, [pc, #84]	@ (80069a4 <TIM_OC5_SetConfig+0xcc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a14      	ldr	r2, [pc, #80]	@ (80069a8 <TIM_OC5_SetConfig+0xd0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d109      	bne.n	800696e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40013400 	.word	0x40013400
 800699c:	40014000 	.word	0x40014000
 80069a0:	40014400 	.word	0x40014400
 80069a4:	40014800 	.word	0x40014800
 80069a8:	40015000 	.word	0x40015000

080069ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	021b      	lsls	r3, r3, #8
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a1a      	ldr	r2, [pc, #104]	@ (8006a6c <TIM_OC6_SetConfig+0xc0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a19      	ldr	r2, [pc, #100]	@ (8006a70 <TIM_OC6_SetConfig+0xc4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00f      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a18      	ldr	r2, [pc, #96]	@ (8006a74 <TIM_OC6_SetConfig+0xc8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a17      	ldr	r2, [pc, #92]	@ (8006a78 <TIM_OC6_SetConfig+0xcc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <TIM_OC6_SetConfig+0xd0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a15      	ldr	r2, [pc, #84]	@ (8006a80 <TIM_OC6_SetConfig+0xd4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d109      	bne.n	8006a44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800
 8006a80:	40015000 	.word	0x40015000

08006a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f023 0201 	bic.w	r2, r3, #1
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f023 030a 	bic.w	r3, r3, #10
 8006ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b087      	sub	sp, #28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f023 0210 	bic.w	r2, r3, #16
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	031b      	lsls	r3, r3, #12
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b085      	sub	sp, #20
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f043 0307 	orr.w	r3, r3, #7
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	021a      	lsls	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	609a      	str	r2, [r3, #8]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2201      	movs	r2, #1
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1a      	ldr	r2, [r3, #32]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	401a      	ands	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1a      	ldr	r2, [r3, #32]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a26      	ldr	r2, [pc, #152]	@ (8006cac <TIM_ResetCallback+0xa4>)
 8006c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a25      	ldr	r2, [pc, #148]	@ (8006cb0 <TIM_ResetCallback+0xa8>)
 8006c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a24      	ldr	r2, [pc, #144]	@ (8006cb4 <TIM_ResetCallback+0xac>)
 8006c24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a23      	ldr	r2, [pc, #140]	@ (8006cb8 <TIM_ResetCallback+0xb0>)
 8006c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a22      	ldr	r2, [pc, #136]	@ (8006cbc <TIM_ResetCallback+0xb4>)
 8006c34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a21      	ldr	r2, [pc, #132]	@ (8006cc0 <TIM_ResetCallback+0xb8>)
 8006c3c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a20      	ldr	r2, [pc, #128]	@ (8006cc4 <TIM_ResetCallback+0xbc>)
 8006c44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc8 <TIM_ResetCallback+0xc0>)
 8006c4c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a1e      	ldr	r2, [pc, #120]	@ (8006ccc <TIM_ResetCallback+0xc4>)
 8006c54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8006cd0 <TIM_ResetCallback+0xc8>)
 8006c5c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd4 <TIM_ResetCallback+0xcc>)
 8006c64:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd8 <TIM_ResetCallback+0xd0>)
 8006c6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a1a      	ldr	r2, [pc, #104]	@ (8006cdc <TIM_ResetCallback+0xd4>)
 8006c74:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a19      	ldr	r2, [pc, #100]	@ (8006ce0 <TIM_ResetCallback+0xd8>)
 8006c7c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a18      	ldr	r2, [pc, #96]	@ (8006ce4 <TIM_ResetCallback+0xdc>)
 8006c84:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ce8 <TIM_ResetCallback+0xe0>)
 8006c8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a16      	ldr	r2, [pc, #88]	@ (8006cec <TIM_ResetCallback+0xe4>)
 8006c94:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a15      	ldr	r2, [pc, #84]	@ (8006cf0 <TIM_ResetCallback+0xe8>)
 8006c9c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	08002a3d 	.word	0x08002a3d
 8006cb0:	08005f55 	.word	0x08005f55
 8006cb4:	08005fcd 	.word	0x08005fcd
 8006cb8:	08005fe1 	.word	0x08005fe1
 8006cbc:	08005f7d 	.word	0x08005f7d
 8006cc0:	08005f91 	.word	0x08005f91
 8006cc4:	08005f69 	.word	0x08005f69
 8006cc8:	08005fa5 	.word	0x08005fa5
 8006ccc:	08005fb9 	.word	0x08005fb9
 8006cd0:	08005ff5 	.word	0x08005ff5
 8006cd4:	08006e21 	.word	0x08006e21
 8006cd8:	08006e35 	.word	0x08006e35
 8006cdc:	08006e49 	.word	0x08006e49
 8006ce0:	08006e5d 	.word	0x08006e5d
 8006ce4:	08006e71 	.word	0x08006e71
 8006ce8:	08006e85 	.word	0x08006e85
 8006cec:	08006e99 	.word	0x08006e99
 8006cf0:	08006ead 	.word	0x08006ead

08006cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e074      	b.n	8006df6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a34      	ldr	r2, [pc, #208]	@ (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a33      	ldr	r2, [pc, #204]	@ (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a31      	ldr	r2, [pc, #196]	@ (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d108      	bne.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a21      	ldr	r2, [pc, #132]	@ (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d022      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8c:	d01d      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1f      	ldr	r2, [pc, #124]	@ (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d018      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a15      	ldr	r2, [pc, #84]	@ (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a18      	ldr	r2, [pc, #96]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d004      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a11      	ldr	r2, [pc, #68]	@ (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d10c      	bne.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40012c00 	.word	0x40012c00
 8006e08:	40013400 	.word	0x40013400
 8006e0c:	40015000 	.word	0x40015000
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	40000c00 	.word	0x40000c00
 8006e1c:	40014000 	.word	0x40014000

08006e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e050      	b.n	8006f74 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d114      	bne.n	8006f06 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fe8d 	bl	8007c04 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d103      	bne.n	8006efc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a21      	ldr	r2, [pc, #132]	@ (8006f7c <HAL_UART_Init+0xbc>)
 8006ef8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2224      	movs	r2, #36	@ 0x24
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0201 	bic.w	r2, r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 f9ba 	bl	80082a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 febb 	bl	8007ca8 <UART_SetConfig>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e01b      	b.n	8006f74 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 fa39 	bl	80083e4 <UART_CheckIdleState>
 8006f72:	4603      	mov	r3, r0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	08002cd1 	.word	0x08002cd1

08006f80 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e09c      	b.n	80070e6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d16c      	bne.n	8007090 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	2b0c      	cmp	r3, #12
 8006fba:	d85e      	bhi.n	800707a <HAL_UART_RegisterCallback+0xfa>
 8006fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc4 <HAL_UART_RegisterCallback+0x44>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006ff9 	.word	0x08006ff9
 8006fc8:	08007003 	.word	0x08007003
 8006fcc:	0800700d 	.word	0x0800700d
 8006fd0:	08007017 	.word	0x08007017
 8006fd4:	08007021 	.word	0x08007021
 8006fd8:	0800702b 	.word	0x0800702b
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	0800703f 	.word	0x0800703f
 8006fe4:	08007049 	.word	0x08007049
 8006fe8:	08007053 	.word	0x08007053
 8006fec:	0800705d 	.word	0x0800705d
 8006ff0:	08007067 	.word	0x08007067
 8006ff4:	08007071 	.word	0x08007071
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007000:	e070      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800700a:	e06b      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007014:	e066      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800701e:	e061      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007028:	e05c      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007032:	e057      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800703c:	e052      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007046:	e04d      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007050:	e048      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800705a:	e043      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007064:	e03e      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800706e:	e039      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007078:	e034      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007080:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
        break;
 800708e:	e029      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007096:	2b00      	cmp	r3, #0
 8007098:	d11a      	bne.n	80070d0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	2b0b      	cmp	r3, #11
 800709e:	d002      	beq.n	80070a6 <HAL_UART_RegisterCallback+0x126>
 80070a0:	2b0c      	cmp	r3, #12
 80070a2:	d005      	beq.n	80070b0 <HAL_UART_RegisterCallback+0x130>
 80070a4:	e009      	b.n	80070ba <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80070ae:	e019      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80070b8:	e014      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
        break;
 80070ce:	e009      	b.n	80070e4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop

080070f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	@ 0x28
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800710a:	2b20      	cmp	r3, #32
 800710c:	f040 80b5 	bne.w	800727a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_UART_Receive+0x28>
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e0ad      	b.n	800727c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2222      	movs	r2, #34	@ 0x22
 800712c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007136:	f7fb ffdb 	bl	80030f0 <HAL_GetTick>
 800713a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007154:	d10e      	bne.n	8007174 <HAL_UART_Receive+0x80>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d105      	bne.n	800716a <HAL_UART_Receive+0x76>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007164:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007168:	e02d      	b.n	80071c6 <HAL_UART_Receive+0xd2>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	22ff      	movs	r2, #255	@ 0xff
 800716e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007172:	e028      	b.n	80071c6 <HAL_UART_Receive+0xd2>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10d      	bne.n	8007198 <HAL_UART_Receive+0xa4>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <HAL_UART_Receive+0x9a>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	22ff      	movs	r2, #255	@ 0xff
 8007188:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800718c:	e01b      	b.n	80071c6 <HAL_UART_Receive+0xd2>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	227f      	movs	r2, #127	@ 0x7f
 8007192:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007196:	e016      	b.n	80071c6 <HAL_UART_Receive+0xd2>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071a0:	d10d      	bne.n	80071be <HAL_UART_Receive+0xca>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <HAL_UART_Receive+0xc0>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	227f      	movs	r2, #127	@ 0x7f
 80071ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071b2:	e008      	b.n	80071c6 <HAL_UART_Receive+0xd2>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	223f      	movs	r2, #63	@ 0x3f
 80071b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071bc:	e003      	b.n	80071c6 <HAL_UART_Receive+0xd2>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80071cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d6:	d108      	bne.n	80071ea <HAL_UART_Receive+0xf6>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	61bb      	str	r3, [r7, #24]
 80071e8:	e003      	b.n	80071f2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80071f2:	e036      	b.n	8007262 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2200      	movs	r2, #0
 80071fc:	2120      	movs	r1, #32
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f001 f99a 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e032      	b.n	800727c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10c      	bne.n	8007236 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	b29a      	uxth	r2, r3
 8007224:	8a7b      	ldrh	r3, [r7, #18]
 8007226:	4013      	ands	r3, r2
 8007228:	b29a      	uxth	r2, r3
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	3302      	adds	r3, #2
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	e00c      	b.n	8007250 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723c:	b2da      	uxtb	r2, r3
 800723e:	8a7b      	ldrh	r3, [r7, #18]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	4013      	ands	r3, r2
 8007244:	b2da      	uxtb	r2, r3
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	3301      	adds	r3, #1
 800724e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1c2      	bne.n	80071f4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	e000      	b.n	800727c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800727a:	2302      	movs	r3, #2
  }
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	@ 0x28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007298:	2b20      	cmp	r3, #32
 800729a:	d167      	bne.n	800736c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_UART_Transmit_DMA+0x24>
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e060      	b.n	800736e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2221      	movs	r2, #33	@ 0x21
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d028      	beq.n	800732c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072de:	4a26      	ldr	r2, [pc, #152]	@ (8007378 <HAL_UART_Transmit_DMA+0xf4>)
 80072e0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072e6:	4a25      	ldr	r2, [pc, #148]	@ (800737c <HAL_UART_Transmit_DMA+0xf8>)
 80072e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072ee:	4a24      	ldr	r2, [pc, #144]	@ (8007380 <HAL_UART_Transmit_DMA+0xfc>)
 80072f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f6:	2200      	movs	r2, #0
 80072f8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007302:	4619      	mov	r1, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3328      	adds	r3, #40	@ 0x28
 800730a:	461a      	mov	r2, r3
 800730c:	88fb      	ldrh	r3, [r7, #6]
 800730e:	f7fc f8b3 	bl	8003478 <HAL_DMA_Start_IT>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d009      	beq.n	800732c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2210      	movs	r2, #16
 800731c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e020      	b.n	800736e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2240      	movs	r2, #64	@ 0x40
 8007332:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	613b      	str	r3, [r7, #16]
   return(result);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800734a:	627b      	str	r3, [r7, #36]	@ 0x24
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007354:	623a      	str	r2, [r7, #32]
 8007356:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	69f9      	ldr	r1, [r7, #28]
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	61bb      	str	r3, [r7, #24]
   return(result);
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e5      	bne.n	8007334 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	e000      	b.n	800736e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800736c:	2302      	movs	r3, #2
  }
}
 800736e:	4618      	mov	r0, r3
 8007370:	3728      	adds	r7, #40	@ 0x28
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	080088af 	.word	0x080088af
 800737c:	0800894d 	.word	0x0800894d
 8007380:	08008ae7 	.word	0x08008ae7

08007384 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	@ 0x28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007398:	2b20      	cmp	r3, #32
 800739a:	d137      	bne.n	800740c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <HAL_UART_Receive_DMA+0x24>
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e030      	b.n	800740e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a18      	ldr	r2, [pc, #96]	@ (8007418 <HAL_UART_Receive_DMA+0x94>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d01f      	beq.n	80073fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d018      	beq.n	80073fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	613b      	str	r3, [r7, #16]
   return(result);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073de:	627b      	str	r3, [r7, #36]	@ 0x24
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	623b      	str	r3, [r7, #32]
 80073ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	69f9      	ldr	r1, [r7, #28]
 80073ee:	6a3a      	ldr	r2, [r7, #32]
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e6      	bne.n	80073ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	461a      	mov	r2, r3
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f001 f906 	bl	8008614 <UART_Start_Receive_DMA>
 8007408:	4603      	mov	r3, r0
 800740a:	e000      	b.n	800740e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800740c:	2302      	movs	r3, #2
  }
}
 800740e:	4618      	mov	r0, r3
 8007410:	3728      	adds	r7, #40	@ 0x28
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	40008000 	.word	0x40008000

0800741c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b0ba      	sub	sp, #232	@ 0xe8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007442:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007446:	f640 030f 	movw	r3, #2063	@ 0x80f
 800744a:	4013      	ands	r3, r2
 800744c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007454:	2b00      	cmp	r3, #0
 8007456:	d11b      	bne.n	8007490 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d015      	beq.n	8007490 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b00      	cmp	r3, #0
 800746e:	d105      	bne.n	800747c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 82f3 	beq.w	8007a6c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
      }
      return;
 800748e:	e2ed      	b.n	8007a6c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8129 	beq.w	80076ec <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800749a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800749e:	4b90      	ldr	r3, [pc, #576]	@ (80076e0 <HAL_UART_IRQHandler+0x2c4>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80074aa:	4b8e      	ldr	r3, [pc, #568]	@ (80076e4 <HAL_UART_IRQHandler+0x2c8>)
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 811c 	beq.w	80076ec <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d011      	beq.n	80074e4 <HAL_UART_IRQHandler+0xc8>
 80074c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2201      	movs	r2, #1
 80074d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074da:	f043 0201 	orr.w	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d011      	beq.n	8007514 <HAL_UART_IRQHandler+0xf8>
 80074f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2202      	movs	r2, #2
 8007502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750a:	f043 0204 	orr.w	r2, r3, #4
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	d011      	beq.n	8007544 <HAL_UART_IRQHandler+0x128>
 8007520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00b      	beq.n	8007544 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2204      	movs	r2, #4
 8007532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753a:	f043 0202 	orr.w	r2, r3, #2
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d017      	beq.n	8007580 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800755c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007560:	4b5f      	ldr	r3, [pc, #380]	@ (80076e0 <HAL_UART_IRQHandler+0x2c4>)
 8007562:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2208      	movs	r2, #8
 800756e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007576:	f043 0208 	orr.w	r2, r3, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007588:	2b00      	cmp	r3, #0
 800758a:	d012      	beq.n	80075b2 <HAL_UART_IRQHandler+0x196>
 800758c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007590:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a8:	f043 0220 	orr.w	r2, r3, #32
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8259 	beq.w	8007a70 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d013      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d105      	bne.n	80075e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d007      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007606:	2b40      	cmp	r3, #64	@ 0x40
 8007608:	d005      	beq.n	8007616 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800760a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800760e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007612:	2b00      	cmp	r3, #0
 8007614:	d058      	beq.n	80076c8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 f8e3 	bl	80087e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007626:	2b40      	cmp	r3, #64	@ 0x40
 8007628:	d148      	bne.n	80076bc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007640:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007644:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007656:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800765a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800766e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1d9      	bne.n	800762a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767c:	2b00      	cmp	r3, #0
 800767e:	d017      	beq.n	80076b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007686:	4a18      	ldr	r2, [pc, #96]	@ (80076e8 <HAL_UART_IRQHandler+0x2cc>)
 8007688:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007690:	4618      	mov	r0, r3
 8007692:	f7fb ffc5 	bl	8003620 <HAL_DMA_Abort_IT>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01f      	beq.n	80076dc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80076aa:	4610      	mov	r0, r2
 80076ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ae:	e015      	b.n	80076dc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ba:	e00f      	b.n	80076dc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c6:	e009      	b.n	80076dc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80076da:	e1c9      	b.n	8007a70 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	bf00      	nop
    return;
 80076de:	e1c7      	b.n	8007a70 <HAL_UART_IRQHandler+0x654>
 80076e0:	10000001 	.word	0x10000001
 80076e4:	04000120 	.word	0x04000120
 80076e8:	08008b6b 	.word	0x08008b6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	f040 8157 	bne.w	80079a4 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076fa:	f003 0310 	and.w	r3, r3, #16
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 8150 	beq.w	80079a4 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007708:	f003 0310 	and.w	r3, r3, #16
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8149 	beq.w	80079a4 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2210      	movs	r2, #16
 8007718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007724:	2b40      	cmp	r3, #64	@ 0x40
 8007726:	f040 80bd 	bne.w	80078a4 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007738:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8199 	beq.w	8007a74 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007748:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800774c:	429a      	cmp	r2, r3
 800774e:	f080 8191 	bcs.w	8007a74 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007758:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	f040 8087 	bne.w	800787e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800778c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800779a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800779e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1da      	bne.n	8007770 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077cc:	f023 0301 	bic.w	r3, r3, #1
 80077d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3308      	adds	r3, #8
 80077da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e1      	bne.n	80077ba <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3308      	adds	r3, #8
 80077fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800780c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3308      	adds	r3, #8
 8007816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800781a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800781c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007820:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e3      	bne.n	80077f6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800784a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800784c:	f023 0310 	bic.w	r3, r3, #16
 8007850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800785e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007860:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800786c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e4      	bne.n	800783c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007878:	4618      	mov	r0, r3
 800787a:	f7fb fe78 	bl	800356e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8007896:	b292      	uxth	r2, r2
 8007898:	1a8a      	subs	r2, r1, r2
 800789a:	b292      	uxth	r2, r2
 800789c:	4611      	mov	r1, r2
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078a2:	e0e7      	b.n	8007a74 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80d9 	beq.w	8007a78 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80078c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 80d4 	beq.w	8007a78 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80078f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e4      	bne.n	80078d0 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3308      	adds	r3, #8
 800790c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	623b      	str	r3, [r7, #32]
   return(result);
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800791c:	f023 0301 	bic.w	r3, r3, #1
 8007920:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3308      	adds	r3, #8
 800792a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800792e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007930:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e1      	bne.n	8007906 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	60fb      	str	r3, [r7, #12]
   return(result);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0310 	bic.w	r3, r3, #16
 800796a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	69b9      	ldr	r1, [r7, #24]
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	617b      	str	r3, [r7, #20]
   return(result);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e4      	bne.n	8007956 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007998:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800799c:	4611      	mov	r1, r2
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079a2:	e069      	b.n	8007a78 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d010      	beq.n	80079d2 <HAL_UART_IRQHandler+0x5b6>
 80079b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079c4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079d0:	e055      	b.n	8007a7e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d014      	beq.n	8007a08 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d105      	bne.n	80079f6 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d03e      	beq.n	8007a7c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
    }
    return;
 8007a06:	e039      	b.n	8007a7c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d009      	beq.n	8007a28 <HAL_UART_IRQHandler+0x60c>
 8007a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 f8ba 	bl	8008b9a <UART_EndTransmit_IT>
    return;
 8007a26:	e02a      	b.n	8007a7e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <HAL_UART_IRQHandler+0x630>
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a4a:	e018      	b.n	8007a7e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d012      	beq.n	8007a7e <HAL_UART_IRQHandler+0x662>
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da0e      	bge.n	8007a7e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a6a:	e008      	b.n	8007a7e <HAL_UART_IRQHandler+0x662>
      return;
 8007a6c:	bf00      	nop
 8007a6e:	e006      	b.n	8007a7e <HAL_UART_IRQHandler+0x662>
    return;
 8007a70:	bf00      	nop
 8007a72:	e004      	b.n	8007a7e <HAL_UART_IRQHandler+0x662>
      return;
 8007a74:	bf00      	nop
 8007a76:	e002      	b.n	8007a7e <HAL_UART_IRQHandler+0x662>
      return;
 8007a78:	bf00      	nop
 8007a7a:	e000      	b.n	8007a7e <HAL_UART_IRQHandler+0x662>
    return;
 8007a7c:	bf00      	nop
  }
}
 8007a7e:	37e8      	adds	r7, #232	@ 0xe8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a09      	ldr	r2, [pc, #36]	@ (8007b70 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d009      	beq.n	8007b64 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	615a      	str	r2, [r3, #20]
  }
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	40008000 	.word	0x40008000

08007b74 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a18      	ldr	r2, [pc, #96]	@ (8007be4 <HAL_UART_EnableReceiverTimeout+0x70>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d027      	beq.n	8007bd6 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d120      	bne.n	8007bd2 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_UART_EnableReceiverTimeout+0x2a>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e01c      	b.n	8007bd8 <HAL_UART_EnableReceiverTimeout+0x64>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2224      	movs	r2, #36	@ 0x24
 8007baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007bbc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e002      	b.n	8007bd8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	e000      	b.n	8007bd8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
  }
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	40008000 	.word	0x40008000

08007be8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
	...

08007c04 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8007c78 <UART_InitCallbacksToDefault+0x74>)
 8007c10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a19      	ldr	r2, [pc, #100]	@ (8007c7c <UART_InitCallbacksToDefault+0x78>)
 8007c18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a18      	ldr	r2, [pc, #96]	@ (8007c80 <UART_InitCallbacksToDefault+0x7c>)
 8007c20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a17      	ldr	r2, [pc, #92]	@ (8007c84 <UART_InitCallbacksToDefault+0x80>)
 8007c28:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a16      	ldr	r2, [pc, #88]	@ (8007c88 <UART_InitCallbacksToDefault+0x84>)
 8007c30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a15      	ldr	r2, [pc, #84]	@ (8007c8c <UART_InitCallbacksToDefault+0x88>)
 8007c38:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a14      	ldr	r2, [pc, #80]	@ (8007c90 <UART_InitCallbacksToDefault+0x8c>)
 8007c40:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a13      	ldr	r2, [pc, #76]	@ (8007c94 <UART_InitCallbacksToDefault+0x90>)
 8007c48:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a12      	ldr	r2, [pc, #72]	@ (8007c98 <UART_InitCallbacksToDefault+0x94>)
 8007c50:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a11      	ldr	r2, [pc, #68]	@ (8007c9c <UART_InitCallbacksToDefault+0x98>)
 8007c58:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a10      	ldr	r2, [pc, #64]	@ (8007ca0 <UART_InitCallbacksToDefault+0x9c>)
 8007c60:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a0f      	ldr	r2, [pc, #60]	@ (8007ca4 <UART_InitCallbacksToDefault+0xa0>)
 8007c68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	08007a99 	.word	0x08007a99
 8007c7c:	08007a85 	.word	0x08007a85
 8007c80:	08007ac1 	.word	0x08007ac1
 8007c84:	08007aad 	.word	0x08007aad
 8007c88:	08007ad5 	.word	0x08007ad5
 8007c8c:	08007ae9 	.word	0x08007ae9
 8007c90:	08007afd 	.word	0x08007afd
 8007c94:	08007b11 	.word	0x08007b11
 8007c98:	08008bf5 	.word	0x08008bf5
 8007c9c:	08008c09 	.word	0x08008c09
 8007ca0:	08008c1d 	.word	0x08008c1d
 8007ca4:	08007b25 	.word	0x08007b25

08007ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cac:	b08c      	sub	sp, #48	@ 0x30
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	4baa      	ldr	r3, [pc, #680]	@ (8007f80 <UART_SetConfig+0x2d8>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	6812      	ldr	r2, [r2, #0]
 8007cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ce0:	430b      	orrs	r3, r1
 8007ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a9f      	ldr	r2, [pc, #636]	@ (8007f84 <UART_SetConfig+0x2dc>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d10:	4313      	orrs	r3, r2
 8007d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007d1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	6812      	ldr	r2, [r2, #0]
 8007d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d32:	f023 010f 	bic.w	r1, r3, #15
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a90      	ldr	r2, [pc, #576]	@ (8007f88 <UART_SetConfig+0x2e0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d125      	bne.n	8007d98 <UART_SetConfig+0xf0>
 8007d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8007f8c <UART_SetConfig+0x2e4>)
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d81a      	bhi.n	8007d90 <UART_SetConfig+0xe8>
 8007d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d60 <UART_SetConfig+0xb8>)
 8007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007d89 	.word	0x08007d89
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d76:	e116      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d7e:	e112      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007d80:	2304      	movs	r3, #4
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d86:	e10e      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007d88:	2308      	movs	r3, #8
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d8e:	e10a      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007d90:	2310      	movs	r3, #16
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d96:	e106      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a7c      	ldr	r2, [pc, #496]	@ (8007f90 <UART_SetConfig+0x2e8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d138      	bne.n	8007e14 <UART_SetConfig+0x16c>
 8007da2:	4b7a      	ldr	r3, [pc, #488]	@ (8007f8c <UART_SetConfig+0x2e4>)
 8007da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da8:	f003 030c 	and.w	r3, r3, #12
 8007dac:	2b0c      	cmp	r3, #12
 8007dae:	d82d      	bhi.n	8007e0c <UART_SetConfig+0x164>
 8007db0:	a201      	add	r2, pc, #4	@ (adr r2, 8007db8 <UART_SetConfig+0x110>)
 8007db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db6:	bf00      	nop
 8007db8:	08007ded 	.word	0x08007ded
 8007dbc:	08007e0d 	.word	0x08007e0d
 8007dc0:	08007e0d 	.word	0x08007e0d
 8007dc4:	08007e0d 	.word	0x08007e0d
 8007dc8:	08007dfd 	.word	0x08007dfd
 8007dcc:	08007e0d 	.word	0x08007e0d
 8007dd0:	08007e0d 	.word	0x08007e0d
 8007dd4:	08007e0d 	.word	0x08007e0d
 8007dd8:	08007df5 	.word	0x08007df5
 8007ddc:	08007e0d 	.word	0x08007e0d
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	08007e0d 	.word	0x08007e0d
 8007de8:	08007e05 	.word	0x08007e05
 8007dec:	2300      	movs	r3, #0
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df2:	e0d8      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007df4:	2302      	movs	r3, #2
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfa:	e0d4      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007dfc:	2304      	movs	r3, #4
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e02:	e0d0      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007e04:	2308      	movs	r3, #8
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0a:	e0cc      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e12:	e0c8      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a5e      	ldr	r2, [pc, #376]	@ (8007f94 <UART_SetConfig+0x2ec>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d125      	bne.n	8007e6a <UART_SetConfig+0x1c2>
 8007e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8007f8c <UART_SetConfig+0x2e4>)
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e28:	2b30      	cmp	r3, #48	@ 0x30
 8007e2a:	d016      	beq.n	8007e5a <UART_SetConfig+0x1b2>
 8007e2c:	2b30      	cmp	r3, #48	@ 0x30
 8007e2e:	d818      	bhi.n	8007e62 <UART_SetConfig+0x1ba>
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	d00a      	beq.n	8007e4a <UART_SetConfig+0x1a2>
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d814      	bhi.n	8007e62 <UART_SetConfig+0x1ba>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <UART_SetConfig+0x19a>
 8007e3c:	2b10      	cmp	r3, #16
 8007e3e:	d008      	beq.n	8007e52 <UART_SetConfig+0x1aa>
 8007e40:	e00f      	b.n	8007e62 <UART_SetConfig+0x1ba>
 8007e42:	2300      	movs	r3, #0
 8007e44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e48:	e0ad      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e50:	e0a9      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007e52:	2304      	movs	r3, #4
 8007e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e58:	e0a5      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e60:	e0a1      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007e62:	2310      	movs	r3, #16
 8007e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e68:	e09d      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8007f98 <UART_SetConfig+0x2f0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d125      	bne.n	8007ec0 <UART_SetConfig+0x218>
 8007e74:	4b45      	ldr	r3, [pc, #276]	@ (8007f8c <UART_SetConfig+0x2e4>)
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e80:	d016      	beq.n	8007eb0 <UART_SetConfig+0x208>
 8007e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e84:	d818      	bhi.n	8007eb8 <UART_SetConfig+0x210>
 8007e86:	2b80      	cmp	r3, #128	@ 0x80
 8007e88:	d00a      	beq.n	8007ea0 <UART_SetConfig+0x1f8>
 8007e8a:	2b80      	cmp	r3, #128	@ 0x80
 8007e8c:	d814      	bhi.n	8007eb8 <UART_SetConfig+0x210>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <UART_SetConfig+0x1f0>
 8007e92:	2b40      	cmp	r3, #64	@ 0x40
 8007e94:	d008      	beq.n	8007ea8 <UART_SetConfig+0x200>
 8007e96:	e00f      	b.n	8007eb8 <UART_SetConfig+0x210>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e9e:	e082      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ea6:	e07e      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007ea8:	2304      	movs	r3, #4
 8007eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eae:	e07a      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb6:	e076      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ebe:	e072      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a35      	ldr	r2, [pc, #212]	@ (8007f9c <UART_SetConfig+0x2f4>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d12a      	bne.n	8007f20 <UART_SetConfig+0x278>
 8007eca:	4b30      	ldr	r3, [pc, #192]	@ (8007f8c <UART_SetConfig+0x2e4>)
 8007ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ed8:	d01a      	beq.n	8007f10 <UART_SetConfig+0x268>
 8007eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ede:	d81b      	bhi.n	8007f18 <UART_SetConfig+0x270>
 8007ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ee4:	d00c      	beq.n	8007f00 <UART_SetConfig+0x258>
 8007ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eea:	d815      	bhi.n	8007f18 <UART_SetConfig+0x270>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <UART_SetConfig+0x250>
 8007ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef4:	d008      	beq.n	8007f08 <UART_SetConfig+0x260>
 8007ef6:	e00f      	b.n	8007f18 <UART_SetConfig+0x270>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efe:	e052      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f00:	2302      	movs	r3, #2
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f06:	e04e      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f08:	2304      	movs	r3, #4
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0e:	e04a      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f10:	2308      	movs	r3, #8
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f16:	e046      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f18:	2310      	movs	r3, #16
 8007f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1e:	e042      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a17      	ldr	r2, [pc, #92]	@ (8007f84 <UART_SetConfig+0x2dc>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d13a      	bne.n	8007fa0 <UART_SetConfig+0x2f8>
 8007f2a:	4b18      	ldr	r3, [pc, #96]	@ (8007f8c <UART_SetConfig+0x2e4>)
 8007f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f38:	d01a      	beq.n	8007f70 <UART_SetConfig+0x2c8>
 8007f3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f3e:	d81b      	bhi.n	8007f78 <UART_SetConfig+0x2d0>
 8007f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f44:	d00c      	beq.n	8007f60 <UART_SetConfig+0x2b8>
 8007f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f4a:	d815      	bhi.n	8007f78 <UART_SetConfig+0x2d0>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <UART_SetConfig+0x2b0>
 8007f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f54:	d008      	beq.n	8007f68 <UART_SetConfig+0x2c0>
 8007f56:	e00f      	b.n	8007f78 <UART_SetConfig+0x2d0>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5e:	e022      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f60:	2302      	movs	r3, #2
 8007f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f66:	e01e      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6e:	e01a      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f70:	2308      	movs	r3, #8
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e016      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	e012      	b.n	8007fa6 <UART_SetConfig+0x2fe>
 8007f80:	cfff69f3 	.word	0xcfff69f3
 8007f84:	40008000 	.word	0x40008000
 8007f88:	40013800 	.word	0x40013800
 8007f8c:	40021000 	.word	0x40021000
 8007f90:	40004400 	.word	0x40004400
 8007f94:	40004800 	.word	0x40004800
 8007f98:	40004c00 	.word	0x40004c00
 8007f9c:	40005000 	.word	0x40005000
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4aae      	ldr	r2, [pc, #696]	@ (8008264 <UART_SetConfig+0x5bc>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	f040 8097 	bne.w	80080e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fb6:	2b08      	cmp	r3, #8
 8007fb8:	d823      	bhi.n	8008002 <UART_SetConfig+0x35a>
 8007fba:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc0 <UART_SetConfig+0x318>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08008003 	.word	0x08008003
 8007fc8:	08007fed 	.word	0x08007fed
 8007fcc:	08008003 	.word	0x08008003
 8007fd0:	08007ff3 	.word	0x08007ff3
 8007fd4:	08008003 	.word	0x08008003
 8007fd8:	08008003 	.word	0x08008003
 8007fdc:	08008003 	.word	0x08008003
 8007fe0:	08007ffb 	.word	0x08007ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe4:	f7fc fc00 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8007fe8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fea:	e010      	b.n	800800e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fec:	4b9e      	ldr	r3, [pc, #632]	@ (8008268 <UART_SetConfig+0x5c0>)
 8007fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ff0:	e00d      	b.n	800800e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ff2:	f7fc fb8b 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8007ff6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ff8:	e009      	b.n	800800e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008000:	e005      	b.n	800800e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800800c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8130 	beq.w	8008276 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801a:	4a94      	ldr	r2, [pc, #592]	@ (800826c <UART_SetConfig+0x5c4>)
 800801c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008020:	461a      	mov	r2, r3
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	fbb3 f3f2 	udiv	r3, r3, r2
 8008028:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	4613      	mov	r3, r2
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	4413      	add	r3, r2
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	429a      	cmp	r2, r3
 8008038:	d305      	bcc.n	8008046 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	429a      	cmp	r2, r3
 8008044:	d903      	bls.n	800804e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800804c:	e113      	b.n	8008276 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800804e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008050:	2200      	movs	r2, #0
 8008052:	60bb      	str	r3, [r7, #8]
 8008054:	60fa      	str	r2, [r7, #12]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805a:	4a84      	ldr	r2, [pc, #528]	@ (800826c <UART_SetConfig+0x5c4>)
 800805c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008060:	b29b      	uxth	r3, r3
 8008062:	2200      	movs	r2, #0
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800806c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008070:	f7f8 fdc0 	bl	8000bf4 <__aeabi_uldivmod>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4610      	mov	r0, r2
 800807a:	4619      	mov	r1, r3
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	020b      	lsls	r3, r1, #8
 8008086:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800808a:	0202      	lsls	r2, r0, #8
 800808c:	6979      	ldr	r1, [r7, #20]
 800808e:	6849      	ldr	r1, [r1, #4]
 8008090:	0849      	lsrs	r1, r1, #1
 8008092:	2000      	movs	r0, #0
 8008094:	460c      	mov	r4, r1
 8008096:	4605      	mov	r5, r0
 8008098:	eb12 0804 	adds.w	r8, r2, r4
 800809c:	eb43 0905 	adc.w	r9, r3, r5
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	469a      	mov	sl, r3
 80080a8:	4693      	mov	fp, r2
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	4640      	mov	r0, r8
 80080b0:	4649      	mov	r1, r9
 80080b2:	f7f8 fd9f 	bl	8000bf4 <__aeabi_uldivmod>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4613      	mov	r3, r2
 80080bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080c4:	d308      	bcc.n	80080d8 <UART_SetConfig+0x430>
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080cc:	d204      	bcs.n	80080d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6a3a      	ldr	r2, [r7, #32]
 80080d4:	60da      	str	r2, [r3, #12]
 80080d6:	e0ce      	b.n	8008276 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080de:	e0ca      	b.n	8008276 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080e8:	d166      	bne.n	80081b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80080ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080ee:	2b08      	cmp	r3, #8
 80080f0:	d827      	bhi.n	8008142 <UART_SetConfig+0x49a>
 80080f2:	a201      	add	r2, pc, #4	@ (adr r2, 80080f8 <UART_SetConfig+0x450>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	0800811d 	.word	0x0800811d
 80080fc:	08008125 	.word	0x08008125
 8008100:	0800812d 	.word	0x0800812d
 8008104:	08008143 	.word	0x08008143
 8008108:	08008133 	.word	0x08008133
 800810c:	08008143 	.word	0x08008143
 8008110:	08008143 	.word	0x08008143
 8008114:	08008143 	.word	0x08008143
 8008118:	0800813b 	.word	0x0800813b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800811c:	f7fc fb64 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8008120:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008122:	e014      	b.n	800814e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008124:	f7fc fb76 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8008128:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800812a:	e010      	b.n	800814e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800812c:	4b4e      	ldr	r3, [pc, #312]	@ (8008268 <UART_SetConfig+0x5c0>)
 800812e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008130:	e00d      	b.n	800814e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008132:	f7fc faeb 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8008136:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008138:	e009      	b.n	800814e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800813a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800813e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008140:	e005      	b.n	800814e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800814c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 8090 	beq.w	8008276 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815a:	4a44      	ldr	r2, [pc, #272]	@ (800826c <UART_SetConfig+0x5c4>)
 800815c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008160:	461a      	mov	r2, r3
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	fbb3 f3f2 	udiv	r3, r3, r2
 8008168:	005a      	lsls	r2, r3, #1
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	085b      	lsrs	r3, r3, #1
 8008170:	441a      	add	r2, r3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	fbb2 f3f3 	udiv	r3, r2, r3
 800817a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	2b0f      	cmp	r3, #15
 8008180:	d916      	bls.n	80081b0 <UART_SetConfig+0x508>
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008188:	d212      	bcs.n	80081b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	b29b      	uxth	r3, r3
 800818e:	f023 030f 	bic.w	r3, r3, #15
 8008192:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	085b      	lsrs	r3, r3, #1
 8008198:	b29b      	uxth	r3, r3
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	b29a      	uxth	r2, r3
 80081a0:	8bfb      	ldrh	r3, [r7, #30]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	8bfa      	ldrh	r2, [r7, #30]
 80081ac:	60da      	str	r2, [r3, #12]
 80081ae:	e062      	b.n	8008276 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081b6:	e05e      	b.n	8008276 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d828      	bhi.n	8008212 <UART_SetConfig+0x56a>
 80081c0:	a201      	add	r2, pc, #4	@ (adr r2, 80081c8 <UART_SetConfig+0x520>)
 80081c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c6:	bf00      	nop
 80081c8:	080081ed 	.word	0x080081ed
 80081cc:	080081f5 	.word	0x080081f5
 80081d0:	080081fd 	.word	0x080081fd
 80081d4:	08008213 	.word	0x08008213
 80081d8:	08008203 	.word	0x08008203
 80081dc:	08008213 	.word	0x08008213
 80081e0:	08008213 	.word	0x08008213
 80081e4:	08008213 	.word	0x08008213
 80081e8:	0800820b 	.word	0x0800820b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081ec:	f7fc fafc 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 80081f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081f2:	e014      	b.n	800821e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081f4:	f7fc fb0e 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80081f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081fa:	e010      	b.n	800821e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008268 <UART_SetConfig+0x5c0>)
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008200:	e00d      	b.n	800821e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008202:	f7fc fa83 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8008206:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008208:	e009      	b.n	800821e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800820a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800820e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008210:	e005      	b.n	800821e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800821c:	bf00      	nop
    }

    if (pclk != 0U)
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	2b00      	cmp	r3, #0
 8008222:	d028      	beq.n	8008276 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008228:	4a10      	ldr	r2, [pc, #64]	@ (800826c <UART_SetConfig+0x5c4>)
 800822a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800822e:	461a      	mov	r2, r3
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	fbb3 f2f2 	udiv	r2, r3, r2
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	441a      	add	r2, r3
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	fbb2 f3f3 	udiv	r3, r2, r3
 8008246:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	2b0f      	cmp	r3, #15
 800824c:	d910      	bls.n	8008270 <UART_SetConfig+0x5c8>
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008254:	d20c      	bcs.n	8008270 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	b29a      	uxth	r2, r3
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60da      	str	r2, [r3, #12]
 8008260:	e009      	b.n	8008276 <UART_SetConfig+0x5ce>
 8008262:	bf00      	nop
 8008264:	40008000 	.word	0x40008000
 8008268:	00f42400 	.word	0x00f42400
 800826c:	08008ef4 	.word	0x08008ef4
      }
      else
      {
        ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2201      	movs	r2, #1
 800827a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2201      	movs	r2, #1
 8008282:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2200      	movs	r2, #0
 800828a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2200      	movs	r2, #0
 8008290:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008292:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008296:	4618      	mov	r0, r3
 8008298:	3730      	adds	r7, #48	@ 0x30
 800829a:	46bd      	mov	sp, r7
 800829c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080082a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ac:	f003 0308 	and.w	r3, r3, #8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008356:	f003 0320 	and.w	r3, r3, #32
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01a      	beq.n	80083b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800839e:	d10a      	bne.n	80083b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00a      	beq.n	80083d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	605a      	str	r2, [r3, #4]
  }
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b098      	sub	sp, #96	@ 0x60
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083f4:	f7fa fe7c 	bl	80030f0 <HAL_GetTick>
 80083f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0308 	and.w	r3, r3, #8
 8008404:	2b08      	cmp	r3, #8
 8008406:	d12f      	bne.n	8008468 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008408:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008410:	2200      	movs	r2, #0
 8008412:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f88e 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d022      	beq.n	8008468 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008436:	653b      	str	r3, [r7, #80]	@ 0x50
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008440:	647b      	str	r3, [r7, #68]	@ 0x44
 8008442:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800844e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e6      	bne.n	8008422 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e063      	b.n	8008530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b04      	cmp	r3, #4
 8008474:	d149      	bne.n	800850a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008476:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800847e:	2200      	movs	r2, #0
 8008480:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f857 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d03c      	beq.n	800850a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	623b      	str	r3, [r7, #32]
   return(result);
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80084b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e6      	bne.n	8008490 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3308      	adds	r3, #8
 80084c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084e2:	61fa      	str	r2, [r7, #28]
 80084e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	69b9      	ldr	r1, [r7, #24]
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	617b      	str	r3, [r7, #20]
   return(result);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e5      	bne.n	80084c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e012      	b.n	8008530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3758      	adds	r7, #88	@ 0x58
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008548:	e04f      	b.n	80085ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d04b      	beq.n	80085ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008552:	f7fa fdcd 	bl	80030f0 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	429a      	cmp	r2, r3
 8008560:	d302      	bcc.n	8008568 <UART_WaitOnFlagUntilTimeout+0x30>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e04e      	b.n	800860a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	d037      	beq.n	80085ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b80      	cmp	r3, #128	@ 0x80
 800857e:	d034      	beq.n	80085ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b40      	cmp	r3, #64	@ 0x40
 8008584:	d031      	beq.n	80085ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	f003 0308 	and.w	r3, r3, #8
 8008590:	2b08      	cmp	r3, #8
 8008592:	d110      	bne.n	80085b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2208      	movs	r2, #8
 800859a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f920 	bl	80087e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2208      	movs	r2, #8
 80085a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e029      	b.n	800860a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085c4:	d111      	bne.n	80085ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 f906 	bl	80087e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e00f      	b.n	800860a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69da      	ldr	r2, [r3, #28]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4013      	ands	r3, r2
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	bf0c      	ite	eq
 80085fa:	2301      	moveq	r3, #1
 80085fc:	2300      	movne	r3, #0
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	429a      	cmp	r2, r3
 8008606:	d0a0      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b096      	sub	sp, #88	@ 0x58
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	4613      	mov	r3, r2
 8008620:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2222      	movs	r2, #34	@ 0x22
 800863c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008646:	2b00      	cmp	r3, #0
 8008648:	d02d      	beq.n	80086a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008650:	4a40      	ldr	r2, [pc, #256]	@ (8008754 <UART_Start_Receive_DMA+0x140>)
 8008652:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800865a:	4a3f      	ldr	r2, [pc, #252]	@ (8008758 <UART_Start_Receive_DMA+0x144>)
 800865c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008664:	4a3d      	ldr	r2, [pc, #244]	@ (800875c <UART_Start_Receive_DMA+0x148>)
 8008666:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866e:	2200      	movs	r2, #0
 8008670:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3324      	adds	r3, #36	@ 0x24
 800867e:	4619      	mov	r1, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008684:	461a      	mov	r2, r3
 8008686:	88fb      	ldrh	r3, [r7, #6]
 8008688:	f7fa fef6 	bl	8003478 <HAL_DMA_Start_IT>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2210      	movs	r2, #16
 8008696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2220      	movs	r2, #32
 800869e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e051      	b.n	800874a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d018      	beq.n	80086e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80086da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e6      	bne.n	80086ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	f043 0301 	orr.w	r3, r3, #1
 80086f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3308      	adds	r3, #8
 80086fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008700:	637a      	str	r2, [r7, #52]	@ 0x34
 8008702:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008706:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800870e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e5      	bne.n	80086e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	613b      	str	r3, [r7, #16]
   return(result);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800872a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3308      	adds	r3, #8
 8008732:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008734:	623a      	str	r2, [r7, #32]
 8008736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	69f9      	ldr	r1, [r7, #28]
 800873a:	6a3a      	ldr	r2, [r7, #32]
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	61bb      	str	r3, [r7, #24]
   return(result);
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e5      	bne.n	8008714 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3758      	adds	r7, #88	@ 0x58
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	0800896d 	.word	0x0800896d
 8008758:	08008aa1 	.word	0x08008aa1
 800875c:	08008ae7 	.word	0x08008ae7

08008760 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008760:	b480      	push	{r7}
 8008762:	b08f      	sub	sp, #60	@ 0x3c
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	61fb      	str	r3, [r7, #28]
   return(result);
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800877c:	637b      	str	r3, [r7, #52]	@ 0x34
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008788:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800878c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e6      	bne.n	8008768 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3308      	adds	r3, #8
 80087a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	e853 3f00 	ldrex	r3, [r3]
 80087a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80087b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3308      	adds	r3, #8
 80087b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ba:	61ba      	str	r2, [r7, #24]
 80087bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	6979      	ldr	r1, [r7, #20]
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	613b      	str	r3, [r7, #16]
   return(result);
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e5      	bne.n	800879a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80087d6:	bf00      	nop
 80087d8:	373c      	adds	r7, #60	@ 0x3c
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b095      	sub	sp, #84	@ 0x54
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f2:	e853 3f00 	ldrex	r3, [r3]
 80087f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	461a      	mov	r2, r3
 8008806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008808:	643b      	str	r3, [r7, #64]	@ 0x40
 800880a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800880e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e6      	bne.n	80087ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3308      	adds	r3, #8
 8008822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	61fb      	str	r3, [r7, #28]
   return(result);
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008832:	f023 0301 	bic.w	r3, r3, #1
 8008836:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3308      	adds	r3, #8
 800883e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008840:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008842:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e3      	bne.n	800881c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d118      	bne.n	800888e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	60bb      	str	r3, [r7, #8]
   return(result);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f023 0310 	bic.w	r3, r3, #16
 8008870:	647b      	str	r3, [r7, #68]	@ 0x44
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800887a:	61bb      	str	r3, [r7, #24]
 800887c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6979      	ldr	r1, [r7, #20]
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	613b      	str	r3, [r7, #16]
   return(result);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e6      	bne.n	800885c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2220      	movs	r2, #32
 8008892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80088a2:	bf00      	nop
 80088a4:	3754      	adds	r7, #84	@ 0x54
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b090      	sub	sp, #64	@ 0x40
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d137      	bne.n	800893a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80088ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088cc:	2200      	movs	r2, #0
 80088ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3308      	adds	r3, #8
 80088d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	623b      	str	r3, [r7, #32]
   return(result);
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80088f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e5      	bne.n	80088d2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	60fb      	str	r3, [r7, #12]
   return(result);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
 800891c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008924:	61fb      	str	r3, [r7, #28]
 8008926:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	69b9      	ldr	r1, [r7, #24]
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	617b      	str	r3, [r7, #20]
   return(result);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e6      	bne.n	8008906 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008938:	e004      	b.n	8008944 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800893a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008940:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008942:	4798      	blx	r3
}
 8008944:	bf00      	nop
 8008946:	3740      	adds	r7, #64	@ 0x40
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008958:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008964:	bf00      	nop
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b09c      	sub	sp, #112	@ 0x70
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008978:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b00      	cmp	r3, #0
 8008986:	d171      	bne.n	8008a6c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800898a:	2200      	movs	r2, #0
 800898c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800899e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e6      	bne.n	8008990 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3308      	adds	r3, #8
 80089c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089cc:	e853 3f00 	ldrex	r3, [r3]
 80089d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d4:	f023 0301 	bic.w	r3, r3, #1
 80089d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80089da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3308      	adds	r3, #8
 80089e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80089e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80089e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089ea:	e841 2300 	strex	r3, r2, [r1]
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1e5      	bne.n	80089c2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3308      	adds	r3, #8
 80089fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	623b      	str	r3, [r7, #32]
   return(result);
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3308      	adds	r3, #8
 8008a14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e5      	bne.n	80089f6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d118      	bne.n	8008a6c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0310 	bic.w	r3, r3, #16
 8008a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a58:	61fb      	str	r3, [r7, #28]
 8008a5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	69b9      	ldr	r1, [r7, #24]
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	e841 2300 	strex	r3, r2, [r1]
 8008a64:	617b      	str	r3, [r7, #20]
   return(result);
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e6      	bne.n	8008a3a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a6e:	2200      	movs	r2, #0
 8008a70:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d109      	bne.n	8008a8e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a82:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008a86:	4611      	mov	r1, r2
 8008a88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008a8a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a8c:	e004      	b.n	8008a98 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8008a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008a96:	4798      	blx	r3
}
 8008a98:	bf00      	nop
 8008a9a:	3770      	adds	r7, #112	@ 0x70
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d10b      	bne.n	8008ad4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008ac8:	0852      	lsrs	r2, r2, #1
 8008aca:	b292      	uxth	r2, r2
 8008acc:	4611      	mov	r1, r2
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ad2:	e004      	b.n	8008ade <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	4798      	blx	r3
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b086      	sub	sp, #24
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008afa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b0e:	2b80      	cmp	r3, #128	@ 0x80
 8008b10:	d109      	bne.n	8008b26 <UART_DMAError+0x40>
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b21      	cmp	r3, #33	@ 0x21
 8008b16:	d106      	bne.n	8008b26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008b20:	6978      	ldr	r0, [r7, #20]
 8008b22:	f7ff fe1d 	bl	8008760 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b30:	2b40      	cmp	r3, #64	@ 0x40
 8008b32:	d109      	bne.n	8008b48 <UART_DMAError+0x62>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b22      	cmp	r3, #34	@ 0x22
 8008b38:	d106      	bne.n	8008b48 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f7ff fe4d 	bl	80087e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b4e:	f043 0210 	orr.w	r2, r3, #16
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b5e:	6978      	ldr	r0, [r7, #20]
 8008b60:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b62:	bf00      	nop
 8008b64:	3718      	adds	r7, #24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b088      	sub	sp, #32
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	61bb      	str	r3, [r7, #24]
 8008bc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	6979      	ldr	r1, [r7, #20]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	e841 2300 	strex	r3, r2, [r1]
 8008bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e6      	bne.n	8008ba2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bec:	bf00      	nop
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d101      	bne.n	8008c46 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e027      	b.n	8008c96 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2224      	movs	r2, #36	@ 0x24
 8008c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0201 	bic.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008c74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e02d      	b.n	8008d16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2224      	movs	r2, #36	@ 0x24
 8008cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0201 	bic.w	r2, r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f850 	bl	8008d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e02d      	b.n	8008d92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2224      	movs	r2, #36	@ 0x24
 8008d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0201 	bic.w	r2, r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f812 	bl	8008d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d108      	bne.n	8008dbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dbc:	e031      	b.n	8008e22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dc2:	2308      	movs	r3, #8
 8008dc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	0e5b      	lsrs	r3, r3, #25
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 0307 	and.w	r3, r3, #7
 8008dd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	0f5b      	lsrs	r3, r3, #29
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	7b3a      	ldrb	r2, [r7, #12]
 8008dea:	4911      	ldr	r1, [pc, #68]	@ (8008e30 <UARTEx_SetNbDataToProcess+0x94>)
 8008dec:	5c8a      	ldrb	r2, [r1, r2]
 8008dee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008df2:	7b3a      	ldrb	r2, [r7, #12]
 8008df4:	490f      	ldr	r1, [pc, #60]	@ (8008e34 <UARTEx_SetNbDataToProcess+0x98>)
 8008df6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	7b7a      	ldrb	r2, [r7, #13]
 8008e08:	4909      	ldr	r1, [pc, #36]	@ (8008e30 <UARTEx_SetNbDataToProcess+0x94>)
 8008e0a:	5c8a      	ldrb	r2, [r1, r2]
 8008e0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e10:	7b7a      	ldrb	r2, [r7, #13]
 8008e12:	4908      	ldr	r1, [pc, #32]	@ (8008e34 <UARTEx_SetNbDataToProcess+0x98>)
 8008e14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	08008f0c 	.word	0x08008f0c
 8008e34:	08008f14 	.word	0x08008f14

08008e38 <memset>:
 8008e38:	4402      	add	r2, r0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d100      	bne.n	8008e42 <memset+0xa>
 8008e40:	4770      	bx	lr
 8008e42:	f803 1b01 	strb.w	r1, [r3], #1
 8008e46:	e7f9      	b.n	8008e3c <memset+0x4>

08008e48 <__libc_init_array>:
 8008e48:	b570      	push	{r4, r5, r6, lr}
 8008e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8008e80 <__libc_init_array+0x38>)
 8008e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8008e84 <__libc_init_array+0x3c>)
 8008e4e:	1b64      	subs	r4, r4, r5
 8008e50:	10a4      	asrs	r4, r4, #2
 8008e52:	2600      	movs	r6, #0
 8008e54:	42a6      	cmp	r6, r4
 8008e56:	d109      	bne.n	8008e6c <__libc_init_array+0x24>
 8008e58:	4d0b      	ldr	r5, [pc, #44]	@ (8008e88 <__libc_init_array+0x40>)
 8008e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8008e8c <__libc_init_array+0x44>)
 8008e5c:	f000 f826 	bl	8008eac <_init>
 8008e60:	1b64      	subs	r4, r4, r5
 8008e62:	10a4      	asrs	r4, r4, #2
 8008e64:	2600      	movs	r6, #0
 8008e66:	42a6      	cmp	r6, r4
 8008e68:	d105      	bne.n	8008e76 <__libc_init_array+0x2e>
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e70:	4798      	blx	r3
 8008e72:	3601      	adds	r6, #1
 8008e74:	e7ee      	b.n	8008e54 <__libc_init_array+0xc>
 8008e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7a:	4798      	blx	r3
 8008e7c:	3601      	adds	r6, #1
 8008e7e:	e7f2      	b.n	8008e66 <__libc_init_array+0x1e>
 8008e80:	08008f24 	.word	0x08008f24
 8008e84:	08008f24 	.word	0x08008f24
 8008e88:	08008f24 	.word	0x08008f24
 8008e8c:	08008f28 	.word	0x08008f28

08008e90 <memcpy>:
 8008e90:	440a      	add	r2, r1
 8008e92:	4291      	cmp	r1, r2
 8008e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e98:	d100      	bne.n	8008e9c <memcpy+0xc>
 8008e9a:	4770      	bx	lr
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ea6:	4291      	cmp	r1, r2
 8008ea8:	d1f9      	bne.n	8008e9e <memcpy+0xe>
 8008eaa:	bd10      	pop	{r4, pc}

08008eac <_init>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr

08008eb8 <_fini>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	bf00      	nop
 8008ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ebe:	bc08      	pop	{r3}
 8008ec0:	469e      	mov	lr, r3
 8008ec2:	4770      	bx	lr
