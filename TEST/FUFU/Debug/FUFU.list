
FUFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007508  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080076e0  080076e0  000086e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007720  08007720  0000903c  2**0
                  CONTENTS
  4 .ARM          00000008  08007720  08007720  00008720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007728  08007728  0000903c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007728  08007728  00008728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800772c  0800772c  0000872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08007730  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000040  0800776c  00009040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800776c  0000940c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001813c  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce5  00000000  00000000  000211a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00023e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000109b  00000000  00000000  000253b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  0002644b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b2d  00000000  00000000  0004f221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001141d4  00000000  00000000  00067d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bf22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf4  00000000  00000000  0017bf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00181c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000040 	.word	0x20000040
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080076c8 	.word	0x080076c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000044 	.word	0x20000044
 8000214:	080076c8 	.word	0x080076c8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d98:	f001 f9b9 	bl	800210e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 f84e 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 faf6 	bl	8001390 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da4:	f000 faca 	bl	800133c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000da8:	f000 f90c 	bl	8000fc4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000dac:	f000 f892 	bl	8000ed4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000db0:	f000 f9a0 	bl	80010f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000db4:	f000 f9f2 	bl	800119c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000db8:	f000 fa72 	bl	80012a0 <MX_TIM5_Init>
  MX_UART4_Init();
 8000dbc:	f000 f94c 	bl	8001058 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  PID.Kp =0.1;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <main+0x8c>)
 8000dc2:	4a18      	ldr	r2, [pc, #96]	@ (8000e24 <main+0x90>)
 8000dc4:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <main+0x8c>)
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <main+0x8c>)
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8000dd6:	213c      	movs	r1, #60	@ 0x3c
 8000dd8:	4813      	ldr	r0, [pc, #76]	@ (8000e28 <main+0x94>)
 8000dda:	f004 fcee 	bl	80057ba <HAL_TIM_Encoder_Start>
  arm_pid_init_f32(&PID, 0);
 8000dde:	2100      	movs	r1, #0
 8000de0:	480f      	ldr	r0, [pc, #60]	@ (8000e20 <main+0x8c>)
 8000de2:	f006 fc0f 	bl	8007604 <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim3);
 8000de6:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <main+0x98>)
 8000de8:	f004 faf8 	bl	80053dc <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000dec:	213c      	movs	r1, #60	@ 0x3c
 8000dee:	480f      	ldr	r0, [pc, #60]	@ (8000e2c <main+0x98>)
 8000df0:	f004 fce3 	bl	80057ba <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000df4:	480e      	ldr	r0, [pc, #56]	@ (8000e30 <main+0x9c>)
 8000df6:	f004 fb61 	bl	80054bc <HAL_TIM_Base_Start_IT>
//		}
//
//	  }

//
	  	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Encoder QEI
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <main+0x94>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e00:	4a0c      	ldr	r2, [pc, #48]	@ (8000e34 <main+0xa0>)
 8000e02:	6013      	str	r3, [r2, #0]
	  	  if(mode == 1)
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <main+0xa4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <main+0x7e>
	  	  {
	  		PS2X_Reader();
 8000e0c:	f000 fbf4 	bl	80015f8 <PS2X_Reader>
 8000e10:	e7f3      	b.n	8000dfa <main+0x66>
	  	  }
	  	  else if(mode == 2)
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <main+0xa4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d1ef      	bne.n	8000dfa <main+0x66>
	  	  {
	  		Automatic_Control();
 8000e1a:	f000 fe05 	bl	8001a28 <Automatic_Control>
	  	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Encoder QEI
 8000e1e:	e7ec      	b.n	8000dfa <main+0x66>
 8000e20:	200003a4 	.word	0x200003a4
 8000e24:	3dcccccd 	.word	0x3dcccccd
 8000e28:	20000250 	.word	0x20000250
 8000e2c:	2000029c 	.word	0x2000029c
 8000e30:	200002e8 	.word	0x200002e8
 8000e34:	2000039c 	.word	0x2000039c
 8000e38:	20000000 	.word	0x20000000

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	@ 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2238      	movs	r2, #56	@ 0x38
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 fc10 	bl	8007670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f003 fa34 	bl	80042cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6e:	2340      	movs	r3, #64	@ 0x40
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e76:	2302      	movs	r3, #2
 8000e78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e7e:	2355      	movs	r3, #85	@ 0x55
 8000e80:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 face 	bl	8004434 <HAL_RCC_OscConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e9e:	f000 fea7 	bl	8001bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fdcc 	bl	8004a58 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ec6:	f000 fe93 	bl	8001bf0 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3750      	adds	r7, #80	@ 0x50
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2220      	movs	r2, #32
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fbbf 	bl	8007670 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b32      	ldr	r3, [pc, #200]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000ef4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ef8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000efa:	4b30      	ldr	r3, [pc, #192]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000efc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f08:	4b2c      	ldr	r3, [pc, #176]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f14:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1a:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f20:	4b26      	ldr	r3, [pc, #152]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f26:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f2c:	4b23      	ldr	r3, [pc, #140]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f32:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f5c:	4817      	ldr	r0, [pc, #92]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f5e:	f001 fb5f 	bl	8002620 <HAL_ADC_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f68:	f000 fe42 	bl	8001bf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4811      	ldr	r0, [pc, #68]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f78:	f002 fc24 	bl	80037c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f82:	f000 fe35 	bl	8001bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_ADC1_Init+0xec>)
 8000f88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f8e:	2307      	movs	r3, #7
 8000f90:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f92:	237f      	movs	r3, #127	@ 0x7f
 8000f94:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f96:	2304      	movs	r3, #4
 8000f98:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000fa4:	f001 ff76 	bl	8002e94 <HAL_ADC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fae:	f000 fe1f 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	@ 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000005c 	.word	0x2000005c
 8000fc0:	19200040 	.word	0x19200040

08000fc4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8000fca:	4a22      	ldr	r2, [pc, #136]	@ (8001054 <MX_LPUART1_UART_Init+0x90>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8001002:	2200      	movs	r2, #0
 8001004:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001006:	4812      	ldr	r0, [pc, #72]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 8001008:	f005 fbc6 	bl	8006798 <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001012:	f000 fded 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001016:	2100      	movs	r1, #0
 8001018:	480d      	ldr	r0, [pc, #52]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 800101a:	f006 fa29 	bl	8007470 <HAL_UARTEx_SetTxFifoThreshold>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001024:	f000 fde4 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001028:	2100      	movs	r1, #0
 800102a:	4809      	ldr	r0, [pc, #36]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 800102c:	f006 fa5e 	bl	80074ec <HAL_UARTEx_SetRxFifoThreshold>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001036:	f000 fddb 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_LPUART1_UART_Init+0x8c>)
 800103c:	f006 f9df 	bl	80073fe <HAL_UARTEx_DisableFifoMode>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001046:	f000 fdd3 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000128 	.word	0x20000128
 8001054:	40008000 	.word	0x40008000

08001058 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800105c:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <MX_UART4_Init+0x94>)
 800105e:	4a24      	ldr	r2, [pc, #144]	@ (80010f0 <MX_UART4_Init+0x98>)
 8001060:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001062:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <MX_UART4_Init+0x94>)
 8001064:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001068:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <MX_UART4_Init+0x94>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <MX_UART4_Init+0x94>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <MX_UART4_Init+0x94>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <MX_UART4_Init+0x94>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_UART4_Init+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MX_UART4_Init+0x94>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <MX_UART4_Init+0x94>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <MX_UART4_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_UART4_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010a0:	4812      	ldr	r0, [pc, #72]	@ (80010ec <MX_UART4_Init+0x94>)
 80010a2:	f005 fb79 	bl	8006798 <HAL_UART_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80010ac:	f000 fda0 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	480e      	ldr	r0, [pc, #56]	@ (80010ec <MX_UART4_Init+0x94>)
 80010b4:	f006 f9dc 	bl	8007470 <HAL_UARTEx_SetTxFifoThreshold>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80010be:	f000 fd97 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80010c2:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 80010c6:	4809      	ldr	r0, [pc, #36]	@ (80010ec <MX_UART4_Init+0x94>)
 80010c8:	f006 fa10 	bl	80074ec <HAL_UARTEx_SetRxFifoThreshold>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 80010d2:	f000 fd8d 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_UART4_Init+0x94>)
 80010d8:	f006 f991 	bl	80073fe <HAL_UARTEx_DisableFifoMode>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 80010e2:	f000 fd85 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001bc 	.word	0x200001bc
 80010f0:	40004c00 	.word	0x40004c00

080010f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	@ 0x30
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2224      	movs	r2, #36	@ 0x24
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f006 fab4 	bl	8007670 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001114:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001118:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <MX_TIM2_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001128:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800112c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800113a:	2303      	movs	r3, #3
 800113c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001142:	2301      	movs	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001152:	2301      	movs	r3, #1
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001166:	f004 fa82 	bl	800566e <HAL_TIM_Encoder_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001170:	f000 fd3e 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001182:	f005 fa73 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800118c:	f000 fd30 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3730      	adds	r7, #48	@ 0x30
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000250 	.word	0x20000250

0800119c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	@ 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <MX_TIM3_Init+0xfc>)
 80011d0:	4a32      	ldr	r2, [pc, #200]	@ (800129c <MX_TIM3_Init+0x100>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <MX_TIM3_Init+0xfc>)
 80011d6:	22a9      	movs	r2, #169	@ 0xa9
 80011d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <MX_TIM3_Init+0xfc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <MX_TIM3_Init+0xfc>)
 80011e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <MX_TIM3_Init+0xfc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <MX_TIM3_Init+0xfc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f4:	4828      	ldr	r0, [pc, #160]	@ (8001298 <MX_TIM3_Init+0xfc>)
 80011f6:	f004 f899 	bl	800532c <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001200:	f000 fcf6 	bl	8001bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120e:	4619      	mov	r1, r3
 8001210:	4821      	ldr	r0, [pc, #132]	@ (8001298 <MX_TIM3_Init+0xfc>)
 8001212:	f004 fc75 	bl	8005b00 <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800121c:	f000 fce8 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001220:	481d      	ldr	r0, [pc, #116]	@ (8001298 <MX_TIM3_Init+0xfc>)
 8001222:	f004 f9c3 	bl	80055ac <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800122c:	f000 fce0 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4816      	ldr	r0, [pc, #88]	@ (8001298 <MX_TIM3_Init+0xfc>)
 8001240:	f005 fa14 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800124a:	f000 fcd1 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	@ 0x60
 8001250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <MX_TIM3_Init+0xfc>)
 8001266:	f004 fb37 	bl	80058d8 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001270:	f000 fcbe 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2204      	movs	r2, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4807      	ldr	r0, [pc, #28]	@ (8001298 <MX_TIM3_Init+0xfc>)
 800127c:	f004 fb2c 	bl	80058d8 <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001286:	f000 fcb3 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <MX_TIM3_Init+0xfc>)
 800128c:	f000 fe72 	bl	8001f74 <HAL_TIM_MspPostInit>

}
 8001290:	bf00      	nop
 8001292:	3738      	adds	r7, #56	@ 0x38
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000029c 	.word	0x2000029c
 800129c:	40000400 	.word	0x40000400

080012a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_TIM5_Init+0x94>)
 80012c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001338 <MX_TIM5_Init+0x98>)
 80012c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_TIM5_Init+0x94>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_TIM5_Init+0x94>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_TIM5_Init+0x94>)
 80012d2:	f04f 32ff 	mov.w	r2, #4294967295
 80012d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_TIM5_Init+0x94>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_TIM5_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012e4:	4813      	ldr	r0, [pc, #76]	@ (8001334 <MX_TIM5_Init+0x94>)
 80012e6:	f004 f821 	bl	800532c <HAL_TIM_Base_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80012f0:	f000 fc7e 	bl	8001bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <MX_TIM5_Init+0x94>)
 8001302:	f004 fbfd 	bl	8005b00 <HAL_TIM_ConfigClockSource>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800130c:	f000 fc70 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_TIM5_Init+0x94>)
 800131e:	f005 f9a5 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001328:	f000 fc62 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200002e8 	.word	0x200002e8
 8001338:	40000c00 	.word	0x40000c00

0800133c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_DMA_Init+0x50>)
 8001344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001346:	4a11      	ldr	r2, [pc, #68]	@ (800138c <MX_DMA_Init+0x50>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6493      	str	r3, [r2, #72]	@ 0x48
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_DMA_Init+0x50>)
 8001350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_DMA_Init+0x50>)
 800135c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135e:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <MX_DMA_Init+0x50>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6493      	str	r3, [r2, #72]	@ 0x48
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_DMA_Init+0x50>)
 8001368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	200b      	movs	r0, #11
 8001378:	f002 fc07 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800137c:	200b      	movs	r0, #11
 800137e:	f002 fc1e 	bl	8003bbe <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b3e      	ldr	r3, [pc, #248]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	4a3d      	ldr	r2, [pc, #244]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b2:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013be:	4b38      	ldr	r3, [pc, #224]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a37      	ldr	r2, [pc, #220]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b35      	ldr	r3, [pc, #212]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a31      	ldr	r2, [pc, #196]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b2c      	ldr	r3, [pc, #176]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4a2b      	ldr	r2, [pc, #172]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <MX_GPIO_Init+0x110>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2120      	movs	r1, #32
 800140a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140e:	f002 ff2d 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001412:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001418:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	481e      	ldr	r0, [pc, #120]	@ (80014a4 <MX_GPIO_Init+0x114>)
 800142a:	f002 fd9d 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800142e:	2350      	movs	r3, #80	@ 0x50
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001432:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001446:	f002 fd8f 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144a:	2320      	movs	r3, #32
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001464:	f002 fd80 	bl	8003f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	200a      	movs	r0, #10
 800146e:	f002 fb8c 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001472:	200a      	movs	r0, #10
 8001474:	f002 fba3 	bl	8003bbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2017      	movs	r0, #23
 800147e:	f002 fb84 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001482:	2017      	movs	r0, #23
 8001484:	f002 fb9b 	bl	8003bbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2028      	movs	r0, #40	@ 0x28
 800148e:	f002 fb7c 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001492:	2028      	movs	r0, #40	@ 0x28
 8001494:	f002 fb93 	bl	8003bbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	@ 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000800 	.word	0x48000800

080014a8 <micros>:
			{
			_micros += UINT32_MAX;
			}
	}
uint64_t micros()
	{
 80014a8:	b4b0      	push	{r4, r5, r7}
 80014aa:	af00      	add	r7, sp, #0
		return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <micros+0x2c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	4611      	mov	r1, r2
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <micros+0x30>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	1884      	adds	r4, r0, r2
 80014c0:	eb41 0503 	adc.w	r5, r1, r3
 80014c4:	4622      	mov	r2, r4
 80014c6:	462b      	mov	r3, r5
	}
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bcb0      	pop	{r4, r5, r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200002e8 	.word	0x200002e8
 80014d8:	200003f0 	.word	0x200003f0
 80014dc:	00000000 	.word	0x00000000

080014e0 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
	{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
		//collect data
		QEIdata.TimeStamp[NEW] = micros();
 80014e6:	f7ff ffdf 	bl	80014a8 <micros>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	493e      	ldr	r1, [pc, #248]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 80014f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 80014f4:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <QEIEncoderPosVel_Update+0x10c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	4a3b      	ldr	r2, [pc, #236]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 80014fc:	6013      	str	r3, [r2, #0]
		//Postion 1 turn calculation
		QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 80014fe:	4b3a      	ldr	r3, [pc, #232]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800150e:	4b36      	ldr	r3, [pc, #216]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 8001510:	edc3 7a06 	vstr	s15, [r3, #24]
		//calculate dx
		int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001514:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b33      	ldr	r3, [pc, #204]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	607b      	str	r3, [r7, #4]
		//Handle Warp around
		if(diffPosition > 32256)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f5b3 4ffc 	cmp.w	r3, #32256	@ 0x7e00
 8001526:	dd03      	ble.n	8001530 <QEIEncoderPosVel_Update+0x50>
			diffPosition -=64512;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
 800152e:	607b      	str	r3, [r7, #4]
		if(diffPosition < -32256)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f513 4ffc 	cmn.w	r3, #32256	@ 0x7e00
 8001536:	da03      	bge.n	8001540 <QEIEncoderPosVel_Update+0x60>
			diffPosition +=64512;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 800153e:	607b      	str	r3, [r7, #4]
		//calculate dt
		float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8001540:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 8001542:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001546:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 8001548:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800154c:	1a84      	subs	r4, r0, r2
 800154e:	eb61 0503 	sbc.w	r5, r1, r3
 8001552:	4620      	mov	r0, r4
 8001554:	4629      	mov	r1, r5
 8001556:	f7fe ffe5 	bl	8000524 <__aeabi_ul2d>
 800155a:	a321      	add	r3, pc, #132	@ (adr r3, 80015e0 <QEIEncoderPosVel_Update+0x100>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f816 	bl	8000590 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fa4a 	bl	8000a04 <__aeabi_d2f>
 8001570:	4603      	mov	r3, r0
 8001572:	603b      	str	r3, [r7, #0]
		//calculate anglar velocity
		QEIdata.QEIAngularVelocity = ((diffPosition/8192.0)*60) / diffTime;
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7fe ffa1 	bl	80004bc <__aeabi_i2d>
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <QEIEncoderPosVel_Update+0x110>)
 8001580:	f7ff f930 	bl	80007e4 <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <QEIEncoderPosVel_Update+0x114>)
 8001592:	f7fe fffd 	bl	8000590 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4614      	mov	r4, r2
 800159c:	461d      	mov	r5, r3
 800159e:	6838      	ldr	r0, [r7, #0]
 80015a0:	f7fe ff9e 	bl	80004e0 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7ff f91a 	bl	80007e4 <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff f9fc 	bl	80009b4 <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 80015c0:	61d3      	str	r3, [r2, #28]
		//store value for next loop
		QEIdata.Position[OLD] = QEIdata.Position[NEW];
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 80015c8:	6053      	str	r3, [r2, #4]
		QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 80015cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d0:	4905      	ldr	r1, [pc, #20]	@ (80015e8 <QEIEncoderPosVel_Update+0x108>)
 80015d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdb0      	pop	{r4, r5, r7, pc}
 80015de:	bf00      	nop
 80015e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80015e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80015e8:	200003d0 	.word	0x200003d0
 80015ec:	20000250 	.word	0x20000250
 80015f0:	40c00000 	.word	0x40c00000
 80015f4:	404e0000 	.word	0x404e0000

080015f8 <PS2X_Reader>:

void PS2X_Reader()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
	//-------------porpor-------------//
			  HAL_UART_Receive(&huart4,ps2rx, 10 ,10);
 80015fe:	230a      	movs	r3, #10
 8001600:	220a      	movs	r2, #10
 8001602:	499b      	ldr	r1, [pc, #620]	@ (8001870 <PS2X_Reader+0x278>)
 8001604:	489b      	ldr	r0, [pc, #620]	@ (8001874 <PS2X_Reader+0x27c>)
 8001606:	f005 f917 	bl	8006838 <HAL_UART_Receive>
			  ps2v = 0;
 800160a:	4b9b      	ldr	r3, [pc, #620]	@ (8001878 <PS2X_Reader+0x280>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
			  ps2v = 0;
 8001610:	4b99      	ldr	r3, [pc, #612]	@ (8001878 <PS2X_Reader+0x280>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
			  on = 0;
 8001616:	4b99      	ldr	r3, [pc, #612]	@ (800187c <PS2X_Reader+0x284>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
			  if (ps2rx[0] == 72)
 800161c:	4b94      	ldr	r3, [pc, #592]	@ (8001870 <PS2X_Reader+0x278>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b48      	cmp	r3, #72	@ 0x48
 8001622:	d10c      	bne.n	800163e <PS2X_Reader+0x46>
			  {
				  mode = 1;
 8001624:	4b96      	ldr	r3, [pc, #600]	@ (8001880 <PS2X_Reader+0x288>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]
				  ps2v = 0;
 800162a:	4b93      	ldr	r3, [pc, #588]	@ (8001878 <PS2X_Reader+0x280>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
				  ps2v = 0;
 8001630:	4b91      	ldr	r3, [pc, #580]	@ (8001878 <PS2X_Reader+0x280>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
				  on = 0;
 8001636:	4b91      	ldr	r3, [pc, #580]	@ (800187c <PS2X_Reader+0x284>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e006      	b.n	800164c <PS2X_Reader+0x54>
			  }
			  else if (ps2rx[0] == 71)
 800163e:	4b8c      	ldr	r3, [pc, #560]	@ (8001870 <PS2X_Reader+0x278>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b47      	cmp	r3, #71	@ 0x47
 8001644:	d102      	bne.n	800164c <PS2X_Reader+0x54>
			  {
				  mode = 0;
 8001646:	4b8e      	ldr	r3, [pc, #568]	@ (8001880 <PS2X_Reader+0x288>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
			  }
			  //--- Mode Analog---//
			  if (mode == 1)
 800164c:	4b8c      	ldr	r3, [pc, #560]	@ (8001880 <PS2X_Reader+0x288>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	f040 80e7 	bne.w	8001824 <PS2X_Reader+0x22c>
	//				  }
	//				  ps2hpos = (h[0]*100)+(h[1]*10)+h[2];
	//			  }

				  //Read Ps2 analog in VERTICAL
				  if(ps2rx[0] == 87){
 8001656:	4b86      	ldr	r3, [pc, #536]	@ (8001870 <PS2X_Reader+0x278>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b57      	cmp	r3, #87	@ 0x57
 800165c:	d168      	bne.n	8001730 <PS2X_Reader+0x138>
					  if (ps2rx[2] == 80){
 800165e:	4b84      	ldr	r3, [pc, #528]	@ (8001870 <PS2X_Reader+0x278>)
 8001660:	789b      	ldrb	r3, [r3, #2]
 8001662:	2b50      	cmp	r3, #80	@ 0x50
 8001664:	d103      	bne.n	800166e <PS2X_Reader+0x76>
						  y = 1;
 8001666:	4b87      	ldr	r3, [pc, #540]	@ (8001884 <PS2X_Reader+0x28c>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e00e      	b.n	800168c <PS2X_Reader+0x94>
					  }
					  else if (ps2rx[3] == 80){
 800166e:	4b80      	ldr	r3, [pc, #512]	@ (8001870 <PS2X_Reader+0x278>)
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	2b50      	cmp	r3, #80	@ 0x50
 8001674:	d103      	bne.n	800167e <PS2X_Reader+0x86>
						  y = 2;
 8001676:	4b83      	ldr	r3, [pc, #524]	@ (8001884 <PS2X_Reader+0x28c>)
 8001678:	2202      	movs	r2, #2
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e006      	b.n	800168c <PS2X_Reader+0x94>
					  }
					  else if (ps2rx[4] == 80){
 800167e:	4b7c      	ldr	r3, [pc, #496]	@ (8001870 <PS2X_Reader+0x278>)
 8001680:	791b      	ldrb	r3, [r3, #4]
 8001682:	2b50      	cmp	r3, #80	@ 0x50
 8001684:	d102      	bne.n	800168c <PS2X_Reader+0x94>
						  y = 3;
 8001686:	4b7f      	ldr	r3, [pc, #508]	@ (8001884 <PS2X_Reader+0x28c>)
 8001688:	2203      	movs	r2, #3
 800168a:	601a      	str	r2, [r3, #0]
					  }
					  for(int k=1 ; k<5 ; k++){
 800168c:	2301      	movs	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e01c      	b.n	80016cc <PS2X_Reader+0xd4>
						  for (int l=0; l<10 ; l++){
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	e013      	b.n	80016c0 <PS2X_Reader+0xc8>
							  if (ps2rx[k] == num[l]){
 8001698:	4a75      	ldr	r2, [pc, #468]	@ (8001870 <PS2X_Reader+0x278>)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4a79      	ldr	r2, [pc, #484]	@ (8001888 <PS2X_Reader+0x290>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	4299      	cmp	r1, r3
 80016ac:	d105      	bne.n	80016ba <PS2X_Reader+0xc2>
								  v[k-1] = l;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	4976      	ldr	r1, [pc, #472]	@ (800188c <PS2X_Reader+0x294>)
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						  for (int l=0; l<10 ; l++){
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	3301      	adds	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b09      	cmp	r3, #9
 80016c4:	dde8      	ble.n	8001698 <PS2X_Reader+0xa0>
					  for(int k=1 ; k<5 ; k++){
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	dddf      	ble.n	8001692 <PS2X_Reader+0x9a>
							  }
						  }
					  }
					  if (y == 1){
 80016d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001884 <PS2X_Reader+0x28c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d104      	bne.n	80016e4 <PS2X_Reader+0xec>
						  ps2vpos = v[0];
 80016da:	4b6c      	ldr	r3, [pc, #432]	@ (800188c <PS2X_Reader+0x294>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6c      	ldr	r2, [pc, #432]	@ (8001890 <PS2X_Reader+0x298>)
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e025      	b.n	8001730 <PS2X_Reader+0x138>
					  }
					  else if (y == 2){
 80016e4:	4b67      	ldr	r3, [pc, #412]	@ (8001884 <PS2X_Reader+0x28c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d10c      	bne.n	8001706 <PS2X_Reader+0x10e>
						  ps2vpos = (v[0]*10)+v[1];
 80016ec:	4b67      	ldr	r3, [pc, #412]	@ (800188c <PS2X_Reader+0x294>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b64      	ldr	r3, [pc, #400]	@ (800188c <PS2X_Reader+0x294>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	4a63      	ldr	r2, [pc, #396]	@ (8001890 <PS2X_Reader+0x298>)
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e014      	b.n	8001730 <PS2X_Reader+0x138>
					  }
					  else if (y == 3){
 8001706:	4b5f      	ldr	r3, [pc, #380]	@ (8001884 <PS2X_Reader+0x28c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d110      	bne.n	8001730 <PS2X_Reader+0x138>
						  ps2vpos = (v[0]*100)+(v[1]*10)+v[2];
 800170e:	4b5f      	ldr	r3, [pc, #380]	@ (800188c <PS2X_Reader+0x294>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2264      	movs	r2, #100	@ 0x64
 8001714:	fb02 f103 	mul.w	r1, r2, r3
 8001718:	4b5c      	ldr	r3, [pc, #368]	@ (800188c <PS2X_Reader+0x294>)
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	18ca      	adds	r2, r1, r3
 8001726:	4b59      	ldr	r3, [pc, #356]	@ (800188c <PS2X_Reader+0x294>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	4413      	add	r3, r2
 800172c:	4a58      	ldr	r2, [pc, #352]	@ (8001890 <PS2X_Reader+0x298>)
 800172e:	6013      	str	r3, [r2, #0]
					  }
				  }

			  //Convert from 0 - 255 to -128 - 128
			  ps2v = ((ps2vpos - 123)*128)/127.0;
 8001730:	4b57      	ldr	r3, [pc, #348]	@ (8001890 <PS2X_Reader+0x298>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3b7b      	subs	r3, #123	@ 0x7b
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe febf 	bl	80004bc <__aeabi_i2d>
 800173e:	a348      	add	r3, pc, #288	@ (adr r3, 8001860 <PS2X_Reader+0x268>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f84e 	bl	80007e4 <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff f930 	bl	80009b4 <__aeabi_d2iz>
 8001754:	4603      	mov	r3, r0
 8001756:	4a48      	ldr	r2, [pc, #288]	@ (8001878 <PS2X_Reader+0x280>)
 8001758:	6013      	str	r3, [r2, #0]
			  ps2h = ((ps2hpos - 123)*128)/127.0;
 800175a:	4b4e      	ldr	r3, [pc, #312]	@ (8001894 <PS2X_Reader+0x29c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3b7b      	subs	r3, #123	@ 0x7b
 8001760:	01db      	lsls	r3, r3, #7
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe feaa 	bl	80004bc <__aeabi_i2d>
 8001768:	a33d      	add	r3, pc, #244	@ (adr r3, 8001860 <PS2X_Reader+0x268>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7ff f839 	bl	80007e4 <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f91b 	bl	80009b4 <__aeabi_d2iz>
 800177e:	4603      	mov	r3, r0
 8001780:	4a45      	ldr	r2, [pc, #276]	@ (8001898 <PS2X_Reader+0x2a0>)
 8001782:	6013      	str	r3, [r2, #0]

			  //Generate PWM
			  pwm1 = (ps2v / 128.0)*300;
 8001784:	4b3c      	ldr	r3, [pc, #240]	@ (8001878 <PS2X_Reader+0x280>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fe97 	bl	80004bc <__aeabi_i2d>
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b42      	ldr	r3, [pc, #264]	@ (800189c <PS2X_Reader+0x2a4>)
 8001794:	f7ff f826 	bl	80007e4 <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	a331      	add	r3, pc, #196	@ (adr r3, 8001868 <PS2X_Reader+0x270>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f8ff 	bl	80009b4 <__aeabi_d2iz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4a39      	ldr	r2, [pc, #228]	@ (80018a0 <PS2X_Reader+0x2a8>)
 80017ba:	6013      	str	r3, [r2, #0]
			  if (pwm1 > 300){
 80017bc:	4b38      	ldr	r3, [pc, #224]	@ (80018a0 <PS2X_Reader+0x2a8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017c4:	dd02      	ble.n	80017cc <PS2X_Reader+0x1d4>
				  pwm1 = 0;
 80017c6:	4b36      	ldr	r3, [pc, #216]	@ (80018a0 <PS2X_Reader+0x2a8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
			  }
			  if (pwm1 < -300){
 80017cc:	4b34      	ldr	r3, [pc, #208]	@ (80018a0 <PS2X_Reader+0x2a8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 80017d4:	da02      	bge.n	80017dc <PS2X_Reader+0x1e4>
				  pwm1 = 0;
 80017d6:	4b32      	ldr	r3, [pc, #200]	@ (80018a0 <PS2X_Reader+0x2a8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
			  }
			  if (pwm1 < 0)
 80017dc:	4b30      	ldr	r3, [pc, #192]	@ (80018a0 <PS2X_Reader+0x2a8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da0d      	bge.n	8001800 <PS2X_Reader+0x208>
			  {
				  on = -1;
 80017e4:	4b25      	ldr	r3, [pc, #148]	@ (800187c <PS2X_Reader+0x284>)
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ea:	601a      	str	r2, [r3, #0]
				  pwm1 = pwm1 * -1;
 80017ec:	4b2c      	ldr	r3, [pc, #176]	@ (80018a0 <PS2X_Reader+0x2a8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	425b      	negs	r3, r3
 80017f2:	4a2b      	ldr	r2, [pc, #172]	@ (80018a0 <PS2X_Reader+0x2a8>)
 80017f4:	6013      	str	r3, [r2, #0]
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80017f6:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <PS2X_Reader+0x2ac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2200      	movs	r2, #0
 80017fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80017fe:	e00b      	b.n	8001818 <PS2X_Reader+0x220>
			  }
			  else if (pwm1 > 0)
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <PS2X_Reader+0x2a8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	dd07      	ble.n	8001818 <PS2X_Reader+0x220>
			  {
				  on = 1;
 8001808:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <PS2X_Reader+0x284>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);		//PWM out forward
 800180e:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <PS2X_Reader+0x2ac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001816:	639a      	str	r2, [r3, #56]	@ 0x38

			  }
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm1);
 8001818:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <PS2X_Reader+0x2a8>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <PS2X_Reader+0x2ac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	635a      	str	r2, [r3, #52]	@ 0x34
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	//PWM out backward
				  }
			  }

	//--------------------------------//
}
 8001822:	e0ec      	b.n	80019fe <PS2X_Reader+0x406>
			  else if (mode == 0)
 8001824:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <PS2X_Reader+0x288>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 80e8 	bne.w	80019fe <PS2X_Reader+0x406>
				  ps2v = 0;
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <PS2X_Reader+0x280>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
				  ps2h = 0;
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <PS2X_Reader+0x2a0>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
				  if(timestamp < HAL_GetTick())
 800183a:	f000 fccd 	bl	80021d8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <PS2X_Reader+0x2b0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d908      	bls.n	800185a <PS2X_Reader+0x262>
					  timestamp = HAL_GetTick()+50;
 8001848:	f000 fcc6 	bl	80021d8 <HAL_GetTick>
 800184c:	4603      	mov	r3, r0
 800184e:	3332      	adds	r3, #50	@ 0x32
 8001850:	4a15      	ldr	r2, [pc, #84]	@ (80018a8 <PS2X_Reader+0x2b0>)
 8001852:	6013      	str	r3, [r2, #0]
					  ps2rx[0] = 0;
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <PS2X_Reader+0x278>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
				  for (int i =0;i<6;i++)
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	e06a      	b.n	8001936 <PS2X_Reader+0x33e>
 8001860:	00000000 	.word	0x00000000
 8001864:	405fc000 	.word	0x405fc000
 8001868:	00000000 	.word	0x00000000
 800186c:	4072c000 	.word	0x4072c000
 8001870:	20000334 	.word	0x20000334
 8001874:	200001bc 	.word	0x200001bc
 8001878:	20000354 	.word	0x20000354
 800187c:	20000340 	.word	0x20000340
 8001880:	20000000 	.word	0x20000000
 8001884:	20000364 	.word	0x20000364
 8001888:	20000004 	.word	0x20000004
 800188c:	20000344 	.word	0x20000344
 8001890:	20000350 	.word	0x20000350
 8001894:	20000358 	.word	0x20000358
 8001898:	2000035c 	.word	0x2000035c
 800189c:	40600000 	.word	0x40600000
 80018a0:	20000368 	.word	0x20000368
 80018a4:	2000029c 	.word	0x2000029c
 80018a8:	200003f8 	.word	0x200003f8
					  if (ps2rx[0] == 0)
 80018ac:	4b56      	ldr	r3, [pc, #344]	@ (8001a08 <PS2X_Reader+0x410>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d126      	bne.n	8001902 <PS2X_Reader+0x30a>
						  l[0] = 0; //w
 80018b4:	4b55      	ldr	r3, [pc, #340]	@ (8001a0c <PS2X_Reader+0x414>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
						  l[1] = 0;	//a
 80018ba:	4b54      	ldr	r3, [pc, #336]	@ (8001a0c <PS2X_Reader+0x414>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
						  l[2] = 0;	//s
 80018c0:	4b52      	ldr	r3, [pc, #328]	@ (8001a0c <PS2X_Reader+0x414>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
						  l[3] = 0;	//d
 80018c6:	4b51      	ldr	r3, [pc, #324]	@ (8001a0c <PS2X_Reader+0x414>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
						  l[4] = 0;	//l1
 80018cc:	4b4f      	ldr	r3, [pc, #316]	@ (8001a0c <PS2X_Reader+0x414>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
						  l[5] = 0;	//l2
 80018d2:	4b4e      	ldr	r3, [pc, #312]	@ (8001a0c <PS2X_Reader+0x414>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
						  r[0] = 0;	//w
 80018d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a10 <PS2X_Reader+0x418>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
						  r[1] = 0;	//a
 80018de:	4b4c      	ldr	r3, [pc, #304]	@ (8001a10 <PS2X_Reader+0x418>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
						  r[2] = 0;	//s
 80018e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001a10 <PS2X_Reader+0x418>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
						  r[3] = 0;	//d
 80018ea:	4b49      	ldr	r3, [pc, #292]	@ (8001a10 <PS2X_Reader+0x418>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
						  r[4] = 0;	//r1
 80018f0:	4b47      	ldr	r3, [pc, #284]	@ (8001a10 <PS2X_Reader+0x418>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
						  r[5] = 0;	//r2
 80018f6:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <PS2X_Reader+0x418>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
						  on = 0;
 80018fc:	4b45      	ldr	r3, [pc, #276]	@ (8001a14 <PS2X_Reader+0x41c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
					  if (ps2rx[0] - 65 == i)
 8001902:	4b41      	ldr	r3, [pc, #260]	@ (8001a08 <PS2X_Reader+0x410>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	3b41      	subs	r3, #65	@ 0x41
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d105      	bne.n	800191a <PS2X_Reader+0x322>
						  l[i] = 1;
 800190e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a0c <PS2X_Reader+0x414>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2101      	movs	r1, #1
 8001914:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001918:	e00a      	b.n	8001930 <PS2X_Reader+0x338>
					  else if (ps2rx[0] - 73 == i)
 800191a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a08 <PS2X_Reader+0x410>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	3b49      	subs	r3, #73	@ 0x49
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	d104      	bne.n	8001930 <PS2X_Reader+0x338>
						  r[i] = 1;
 8001926:	4a3a      	ldr	r2, [pc, #232]	@ (8001a10 <PS2X_Reader+0x418>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2101      	movs	r1, #1
 800192c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  for (int i =0;i<6;i++)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3301      	adds	r3, #1
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b05      	cmp	r3, #5
 800193a:	ddb7      	ble.n	80018ac <PS2X_Reader+0x2b4>
				  if (l[2] == 1)
 800193c:	4b33      	ldr	r3, [pc, #204]	@ (8001a0c <PS2X_Reader+0x414>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d107      	bne.n	8001954 <PS2X_Reader+0x35c>
					  pwm1 = pwm1 - x;	// + PWM with x
 8001944:	4b34      	ldr	r3, [pc, #208]	@ (8001a18 <PS2X_Reader+0x420>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <PS2X_Reader+0x424>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4a32      	ldr	r2, [pc, #200]	@ (8001a18 <PS2X_Reader+0x420>)
 8001950:	6013      	str	r3, [r2, #0]
}
 8001952:	e054      	b.n	80019fe <PS2X_Reader+0x406>
				  else if (l[3] == 1)
 8001954:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <PS2X_Reader+0x414>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d107      	bne.n	800196c <PS2X_Reader+0x374>
					  pwm1 = pwm1 + x;	// - PWM with x
 800195c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a18 <PS2X_Reader+0x420>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b2e      	ldr	r3, [pc, #184]	@ (8001a1c <PS2X_Reader+0x424>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4413      	add	r3, r2
 8001966:	4a2c      	ldr	r2, [pc, #176]	@ (8001a18 <PS2X_Reader+0x420>)
 8001968:	6013      	str	r3, [r2, #0]
}
 800196a:	e048      	b.n	80019fe <PS2X_Reader+0x406>
				  else if (r[3] == 1)
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <PS2X_Reader+0x418>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d134      	bne.n	80019de <PS2X_Reader+0x3e6>
					  if (pwm1 < 0)
 8001974:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <PS2X_Reader+0x420>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da0b      	bge.n	8001994 <PS2X_Reader+0x39c>
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -pwm1);	//PWM out forward
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <PS2X_Reader+0x420>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	425a      	negs	r2, r3
 8001982:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <PS2X_Reader+0x428>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	635a      	str	r2, [r3, #52]	@ 0x34
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 8001988:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <PS2X_Reader+0x428>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001990:	639a      	str	r2, [r3, #56]	@ 0x38
 8001992:	e010      	b.n	80019b6 <PS2X_Reader+0x3be>
					  else if (pwm > 0)
 8001994:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <PS2X_Reader+0x42c>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	dd08      	ble.n	80019b6 <PS2X_Reader+0x3be>
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm1);	//PWM out forward
 80019a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <PS2X_Reader+0x420>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <PS2X_Reader+0x428>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	635a      	str	r2, [r3, #52]	@ 0x34
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <PS2X_Reader+0x428>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2200      	movs	r2, #0
 80019b4:	639a      	str	r2, [r3, #56]	@ 0x38
					  on = 1;
 80019b6:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <PS2X_Reader+0x41c>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
					  if (pwm == 0)
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <PS2X_Reader+0x42c>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d118      	bne.n	80019fe <PS2X_Reader+0x406>
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);	//PWM out forward
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <PS2X_Reader+0x428>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	635a      	str	r2, [r3, #52]	@ 0x34
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <PS2X_Reader+0x428>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2200      	movs	r2, #0
 80019da:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80019dc:	e00f      	b.n	80019fe <PS2X_Reader+0x406>
				  else if (r[1] == 1)
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <PS2X_Reader+0x418>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d10b      	bne.n	80019fe <PS2X_Reader+0x406>
					  on = -1;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <PS2X_Reader+0x41c>)
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	601a      	str	r2, [r3, #0]
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80019ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <PS2X_Reader+0x428>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	635a      	str	r2, [r3, #52]	@ 0x34
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	//PWM out backward
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <PS2X_Reader+0x428>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000334 	.word	0x20000334
 8001a0c:	20000384 	.word	0x20000384
 8001a10:	2000036c 	.word	0x2000036c
 8001a14:	20000340 	.word	0x20000340
 8001a18:	20000368 	.word	0x20000368
 8001a1c:	20000360 	.word	0x20000360
 8001a20:	2000029c 	.word	0x2000029c
 8001a24:	2000002c 	.word	0x2000002c

08001a28 <Automatic_Control>:


void Automatic_Control()
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0

		  static uint32_t timestamp =0;
	 	  diff = setposition - QEIReadRaw;
 8001a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8001b64 <Automatic_Control+0x13c>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b4c      	ldr	r3, [pc, #304]	@ (8001b68 <Automatic_Control+0x140>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b6c <Automatic_Control+0x144>)
 8001a40:	601a      	str	r2, [r3, #0]
		  if(timestamp < HAL_GetTick())
 8001a42:	f000 fbc9 	bl	80021d8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b49      	ldr	r3, [pc, #292]	@ (8001b70 <Automatic_Control+0x148>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d943      	bls.n	8001ad8 <Automatic_Control+0xb0>
			  {
			  timestamp = HAL_GetTick()+1;
 8001a50:	f000 fbc2 	bl	80021d8 <HAL_GetTick>
 8001a54:	4603      	mov	r3, r0
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a45      	ldr	r2, [pc, #276]	@ (8001b70 <Automatic_Control+0x148>)
 8001a5a:	6013      	str	r3, [r2, #0]
			  Vfeedback = arm_pid_f32(&PID, setposition - QEIReadRaw);
 8001a5c:	4b41      	ldr	r3, [pc, #260]	@ (8001b64 <Automatic_Control+0x13c>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b40      	ldr	r3, [pc, #256]	@ (8001b68 <Automatic_Control+0x140>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a72:	4b40      	ldr	r3, [pc, #256]	@ (8001b74 <Automatic_Control+0x14c>)
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	ed93 7a00 	vldr	s14, [r3]
 8001a80:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a84:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001a98:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a28      	ldr	r2, [pc, #160]	@ (8001b78 <Automatic_Control+0x150>)
 8001ad6:	6013      	str	r3, [r2, #0]
			  }
		  if(diff > 0)
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <Automatic_Control+0x144>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	dd0e      	ble.n	8001afe <Automatic_Control+0xd6>
			  {
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Vfeedback);
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <Automatic_Control+0x150>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <Automatic_Control+0x154>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aee:	ee17 2a90 	vmov	r2, s15
 8001af2:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001af4:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <Automatic_Control+0x154>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2200      	movs	r2, #0
 8001afa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001afc:	e012      	b.n	8001b24 <Automatic_Control+0xfc>
			  }
		  else if(diff < 0)
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <Automatic_Control+0x144>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da0e      	bge.n	8001b24 <Automatic_Control+0xfc>
			  {
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Vfeedback);
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <Automatic_Control+0x150>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <Automatic_Control+0x154>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b14:	ee17 2a90 	vmov	r2, s15
 8001b18:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <Automatic_Control+0x154>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b22:	639a      	str	r2, [r3, #56]	@ 0x38
			  }
			  static uint64_t timestamps =0;
			  int64_t currentTime = micros();
 8001b24:	f7ff fcc0 	bl	80014a8 <micros>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			  if(currentTime > timestamps)
 8001b30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b34:	4912      	ldr	r1, [pc, #72]	@ (8001b80 <Automatic_Control+0x158>)
 8001b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b3a:	4290      	cmp	r0, r2
 8001b3c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001b40:	d20c      	bcs.n	8001b5c <Automatic_Control+0x134>
			  {
			  timestamps =currentTime + 100000;//us
 8001b42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b46:	490f      	ldr	r1, [pc, #60]	@ (8001b84 <Automatic_Control+0x15c>)
 8001b48:	1854      	adds	r4, r2, r1
 8001b4a:	f143 0500 	adc.w	r5, r3, #0
 8001b4e:	4622      	mov	r2, r4
 8001b50:	462b      	mov	r3, r5
 8001b52:	490b      	ldr	r1, [pc, #44]	@ (8001b80 <Automatic_Control+0x158>)
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]
			  QEIEncoderPosVel_Update();
 8001b58:	f7ff fcc2 	bl	80014e0 <QEIEncoderPosVel_Update>
			  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdb0      	pop	{r4, r5, r7, pc}
 8001b64:	200003c8 	.word	0x200003c8
 8001b68:	2000039c 	.word	0x2000039c
 8001b6c:	200003a0 	.word	0x200003a0
 8001b70:	200003fc 	.word	0x200003fc
 8001b74:	200003a4 	.word	0x200003a4
 8001b78:	200003cc 	.word	0x200003cc
 8001b7c:	2000029c 	.word	0x2000029c
 8001b80:	20000400 	.word	0x20000400
 8001b84:	000186a0 	.word	0x000186a0

08001b88 <HAL_GPIO_EXTI_Callback>:
// Photo electric Limit Switch Condition
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4)
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d10e      	bne.n	8001bb6 <HAL_GPIO_EXTI_Callback+0x2e>
    {
        // Handle the interrupt for PA4
        // Example: Toggle an LED, send a message, etc.
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba0:	f002 fb64 	bl	800426c <HAL_GPIO_WritePin>
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ba4:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	//PWM out backward
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	639a      	str	r2, [r3, #56]	@ 0x38
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	//PWM out backward
		mode = 0;
    }
}
 8001bb4:	e013      	b.n	8001bde <HAL_GPIO_EXTI_Callback+0x56>
    else if (GPIO_Pin == GPIO_PIN_6)
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b40      	cmp	r3, #64	@ 0x40
 8001bba:	d110      	bne.n	8001bde <HAL_GPIO_EXTI_Callback+0x56>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc4:	f002 fb52 	bl	800426c <HAL_GPIO_WritePin>
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001bc8:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	//PWM out backward
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	639a      	str	r2, [r3, #56]	@ 0x38
		mode = 0;
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <HAL_GPIO_EXTI_Callback+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000029c 	.word	0x2000029c
 8001bec:	20000000 	.word	0x20000000

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <Error_Handler+0x8>

08001bfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c06:	4a0e      	ldr	r2, [pc, #56]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c32:	f002 fbef 	bl	8004414 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09e      	sub	sp, #120	@ 0x78
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2254      	movs	r2, #84	@ 0x54
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fd03 	bl	8007670 <memset>
  if(hadc->Instance==ADC1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c72:	d166      	bne.n	8001d42 <HAL_ADC_MspInit+0xfe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c7e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 f903 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c90:	f7ff ffae 	bl	8001bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c94:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <HAL_ADC_MspInit+0x108>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c98:	4a2c      	ldr	r2, [pc, #176]	@ (8001d4c <HAL_ADC_MspInit+0x108>)
 8001c9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <HAL_ADC_MspInit+0x108>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	@ (8001d4c <HAL_ADC_MspInit+0x108>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb0:	4a26      	ldr	r2, [pc, #152]	@ (8001d4c <HAL_ADC_MspInit+0x108>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_ADC_MspInit+0x108>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	481e      	ldr	r0, [pc, #120]	@ (8001d50 <HAL_ADC_MspInit+0x10c>)
 8001cd8:	f002 f946 	bl	8003f68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001cde:	4a1e      	ldr	r2, [pc, #120]	@ (8001d58 <HAL_ADC_MspInit+0x114>)
 8001ce0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cee:	4b19      	ldr	r3, [pc, #100]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001cf6:	2280      	movs	r2, #128	@ 0x80
 8001cf8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001d04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d16:	480f      	ldr	r0, [pc, #60]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001d18:	f001 ff6c 	bl	8003bf4 <HAL_DMA_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8001d22:	f7ff ff65 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001d2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d2c:	4a09      	ldr	r2, [pc, #36]	@ (8001d54 <HAL_ADC_MspInit+0x110>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2012      	movs	r0, #18
 8001d38:	f001 ff27 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d3c:	2012      	movs	r0, #18
 8001d3e:	f001 ff3e 	bl	8003bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3778      	adds	r7, #120	@ 0x78
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	48000800 	.word	0x48000800
 8001d54:	200000c8 	.word	0x200000c8
 8001d58:	40020008 	.word	0x40020008

08001d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0a0      	sub	sp, #128	@ 0x80
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d74:	f107 0318 	add.w	r3, r7, #24
 8001d78:	2254      	movs	r2, #84	@ 0x54
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f005 fc77 	bl	8007670 <memset>
  if(huart->Instance==LPUART1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a3d      	ldr	r2, [pc, #244]	@ (8001e7c <HAL_UART_MspInit+0x120>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d137      	bne.n	8001dfc <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 f879 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001da4:	f7ff ff24 	bl	8001bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001da8:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	4a34      	ldr	r2, [pc, #208]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001db4:	4b32      	ldr	r3, [pc, #200]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001dd8:	230c      	movs	r3, #12
 8001dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001de8:	230c      	movs	r3, #12
 8001dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df6:	f002 f8b7 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001dfa:	e03b      	b.n	8001e74 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==UART4)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a20      	ldr	r2, [pc, #128]	@ (8001e84 <HAL_UART_MspInit+0x128>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d136      	bne.n	8001e74 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e06:	2308      	movs	r3, #8
 8001e08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0e:	f107 0318 	add.w	r3, r7, #24
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 f83c 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001e1e:	f7ff fee7 	bl	8001bf0 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e22:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	4a16      	ldr	r2, [pc, #88]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e2e:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e52:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001e64:	2305      	movs	r3, #5
 8001e66:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e68:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <HAL_UART_MspInit+0x12c>)
 8001e70:	f002 f87a 	bl	8003f68 <HAL_GPIO_Init>
}
 8001e74:	bf00      	nop
 8001e76:	3780      	adds	r7, #128	@ 0x80
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40008000 	.word	0x40008000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40004c00 	.word	0x40004c00
 8001e88:	48000800 	.word	0x48000800

08001e8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eac:	d128      	bne.n	8001f00 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	4a15      	ldr	r2, [pc, #84]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	4a0f      	ldr	r2, [pc, #60]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001efc:	f002 f834 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	@ 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a13      	ldr	r2, [pc, #76]	@ (8001f68 <HAL_TIM_Base_MspInit+0x5c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d10c      	bne.n	8001f38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f1e:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <HAL_TIM_Base_MspInit+0x60>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f22:	4a12      	ldr	r2, [pc, #72]	@ (8001f6c <HAL_TIM_Base_MspInit+0x60>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <HAL_TIM_Base_MspInit+0x60>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f36:	e010      	b.n	8001f5a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <HAL_TIM_Base_MspInit+0x64>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10b      	bne.n	8001f5a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_TIM_Base_MspInit+0x60>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	4a09      	ldr	r2, [pc, #36]	@ (8001f6c <HAL_TIM_Base_MspInit+0x60>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_TIM_Base_MspInit+0x60>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40000c00 	.word	0x40000c00

08001f74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a11      	ldr	r2, [pc, #68]	@ (8001fd8 <HAL_TIM_MspPostInit+0x64>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d11b      	bne.n	8001fce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_TIM_MspPostInit+0x68>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	4a10      	ldr	r2, [pc, #64]	@ (8001fdc <HAL_TIM_MspPostInit+0x68>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_TIM_MspPostInit+0x68>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fae:	2330      	movs	r3, #48	@ 0x30
 8001fb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001fca:	f001 ffcd 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	48000400 	.word	0x48000400

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <NMI_Handler+0x4>

08001fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <UsageFault_Handler+0x4>

0800200c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203a:	f000 f8bb 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}

08002042 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002046:	2010      	movs	r0, #16
 8002048:	f002 f928 	bl	800429c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <DMA1_Channel1_IRQHandler+0x10>)
 8002056:	f001 fe75 	bl	8003d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200000c8 	.word	0x200000c8

08002064 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <ADC1_2_IRQHandler+0x10>)
 800206a:	f000 fc95 	bl	8002998 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000005c 	.word	0x2000005c

08002078 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800207c:	2040      	movs	r0, #64	@ 0x40
 800207e:	f002 f90d 	bl	800429c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}

08002086 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800208a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800208e:	f002 f905 	bl	800429c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020c0:	f7ff ffea 	bl	8002098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c4:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020c6:	490d      	ldr	r1, [pc, #52]	@ (80020fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <LoopForever+0xe>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002108 <LoopForever+0x16>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ea:	f005 fac9 	bl	8007680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ee:	f7fe fe51 	bl	8000d94 <main>

080020f2 <LoopForever>:

LoopForever:
    b LoopForever
 80020f2:	e7fe      	b.n	80020f2 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 80020f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002100:	08007730 	.word	0x08007730
  ldr r2, =_sbss
 8002104:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8002108:	2000040c 	.word	0x2000040c

0800210c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC3_IRQHandler>

0800210e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	2003      	movs	r0, #3
 800211a:	f001 fd2b 	bl	8003b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800211e:	2000      	movs	r0, #0
 8002120:	f000 f80e 	bl	8002140 <HAL_InitTick>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	71fb      	strb	r3, [r7, #7]
 800212e:	e001      	b.n	8002134 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002130:	f7ff fd64 	bl	8001bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002134:	79fb      	ldrb	r3, [r7, #7]

}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800214c:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <HAL_InitTick+0x68>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d022      	beq.n	800219a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002154:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_InitTick+0x6c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <HAL_InitTick+0x68>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002160:	fbb1 f3f3 	udiv	r3, r1, r3
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	4618      	mov	r0, r3
 800216a:	f001 fd36 	bl	8003bda <HAL_SYSTICK_Config>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10f      	bne.n	8002194 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	d809      	bhi.n	800218e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217a:	2200      	movs	r2, #0
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	f04f 30ff 	mov.w	r0, #4294967295
 8002182:	f001 fd02 	bl	8003b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_InitTick+0x70>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e007      	b.n	800219e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e004      	b.n	800219e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e001      	b.n	800219e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000038 	.word	0x20000038
 80021ac:	20000030 	.word	0x20000030
 80021b0:	20000034 	.word	0x20000034

080021b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_IncTick+0x1c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_IncTick+0x20>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a03      	ldr	r2, [pc, #12]	@ (80021d0 <HAL_IncTick+0x1c>)
 80021c4:	6013      	str	r3, [r2, #0]
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	20000408 	.word	0x20000408
 80021d4:	20000038 	.word	0x20000038

080021d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_GetTick+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000408 	.word	0x20000408

080021f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	609a      	str	r2, [r3, #8]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3360      	adds	r3, #96	@ 0x60
 800226a:	461a      	mov	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <LL_ADC_SetOffset+0x44>)
 800227a:	4013      	ands	r3, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	4313      	orrs	r3, r2
 8002288:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	03fff000 	.word	0x03fff000

080022a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3360      	adds	r3, #96	@ 0x60
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3360      	adds	r3, #96	@ 0x60
 80022dc:	461a      	mov	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022f6:	bf00      	nop
 80022f8:	371c      	adds	r7, #28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002302:	b480      	push	{r7}
 8002304:	b087      	sub	sp, #28
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3360      	adds	r3, #96	@ 0x60
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	431a      	orrs	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800232c:	bf00      	nop
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3360      	adds	r3, #96	@ 0x60
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	431a      	orrs	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	615a      	str	r2, [r3, #20]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b087      	sub	sp, #28
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3330      	adds	r3, #48	@ 0x30
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	4413      	add	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	211f      	movs	r1, #31
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	401a      	ands	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	f003 011f 	and.w	r1, r3, #31
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	431a      	orrs	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3314      	adds	r3, #20
 8002448:	461a      	mov	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	0e5b      	lsrs	r3, r3, #25
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	0d1b      	lsrs	r3, r3, #20
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	2107      	movs	r1, #7
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	401a      	ands	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	0d1b      	lsrs	r3, r3, #20
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	43db      	mvns	r3, r3
 80024aa:	401a      	ands	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0318 	and.w	r3, r3, #24
 80024b2:	4908      	ldr	r1, [pc, #32]	@ (80024d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024b4:	40d9      	lsrs	r1, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	400b      	ands	r3, r1
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	431a      	orrs	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	0007ffff 	.word	0x0007ffff

080024d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 031f 	and.w	r3, r3, #31
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002520:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6093      	str	r3, [r2, #8]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002548:	d101      	bne.n	800254e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800256c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002570:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002598:	d101      	bne.n	800259e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <LL_ADC_IsEnabled+0x18>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <LL_ADC_IsEnabled+0x1a>
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d101      	bne.n	80025ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b08      	cmp	r3, #8
 800260a:	d101      	bne.n	8002610 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b089      	sub	sp, #36	@ 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e1a9      	b.n	800298e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fafb 	bl	8001c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff67 	bl	8002534 <LL_ADC_IsDeepPowerDownEnabled>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff4d 	bl	8002510 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ff82 	bl	8002584 <LL_ADC_IsInternalRegulatorEnabled>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff66 	bl	800255c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002690:	4b9c      	ldr	r3, [pc, #624]	@ (8002904 <HAL_ADC_Init+0x2e4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	4a9c      	ldr	r2, [pc, #624]	@ (8002908 <HAL_ADC_Init+0x2e8>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	099b      	lsrs	r3, r3, #6
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026a4:	e002      	b.n	80026ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f9      	bne.n	80026a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff64 	bl	8002584 <LL_ADC_IsInternalRegulatorEnabled>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c6:	f043 0210 	orr.w	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff75 	bl	80025d2 <LL_ADC_REG_IsConversionOngoing>
 80026e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 8142 	bne.w	800297c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 813e 	bne.w	800297c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002708:	f043 0202 	orr.w	r2, r3, #2
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff49 	bl	80025ac <LL_ADC_IsEnabled>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d141      	bne.n	80027a4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002728:	d004      	beq.n	8002734 <HAL_ADC_Init+0x114>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a77      	ldr	r2, [pc, #476]	@ (800290c <HAL_ADC_Init+0x2ec>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d10f      	bne.n	8002754 <HAL_ADC_Init+0x134>
 8002734:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002738:	f7ff ff38 	bl	80025ac <LL_ADC_IsEnabled>
 800273c:	4604      	mov	r4, r0
 800273e:	4873      	ldr	r0, [pc, #460]	@ (800290c <HAL_ADC_Init+0x2ec>)
 8002740:	f7ff ff34 	bl	80025ac <LL_ADC_IsEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	4323      	orrs	r3, r4
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e012      	b.n	800277a <HAL_ADC_Init+0x15a>
 8002754:	486e      	ldr	r0, [pc, #440]	@ (8002910 <HAL_ADC_Init+0x2f0>)
 8002756:	f7ff ff29 	bl	80025ac <LL_ADC_IsEnabled>
 800275a:	4604      	mov	r4, r0
 800275c:	486d      	ldr	r0, [pc, #436]	@ (8002914 <HAL_ADC_Init+0x2f4>)
 800275e:	f7ff ff25 	bl	80025ac <LL_ADC_IsEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	431c      	orrs	r4, r3
 8002766:	486c      	ldr	r0, [pc, #432]	@ (8002918 <HAL_ADC_Init+0x2f8>)
 8002768:	f7ff ff20 	bl	80025ac <LL_ADC_IsEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	4323      	orrs	r3, r4
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002786:	d004      	beq.n	8002792 <HAL_ADC_Init+0x172>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5f      	ldr	r2, [pc, #380]	@ (800290c <HAL_ADC_Init+0x2ec>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Init+0x176>
 8002792:	4a62      	ldr	r2, [pc, #392]	@ (800291c <HAL_ADC_Init+0x2fc>)
 8002794:	e000      	b.n	8002798 <HAL_ADC_Init+0x178>
 8002796:	4a62      	ldr	r2, [pc, #392]	@ (8002920 <HAL_ADC_Init+0x300>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f7ff fd26 	bl	80021f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7f5b      	ldrb	r3, [r3, #29]
 80027a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	045b      	lsls	r3, r3, #17
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b48      	ldr	r3, [pc, #288]	@ (8002924 <HAL_ADC_Init+0x304>)
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	430b      	orrs	r3, r1
 800280e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fee4 	bl	80025f8 <LL_ADC_INJ_IsConversionOngoing>
 8002830:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d17f      	bne.n	8002938 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d17c      	bne.n	8002938 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002842:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800284a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800285a:	f023 0302 	bic.w	r3, r3, #2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	430b      	orrs	r3, r1
 8002866:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d017      	beq.n	80028a0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800287e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002888:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800288c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6911      	ldr	r1, [r2, #16]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	430b      	orrs	r3, r1
 800289a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800289e:	e013      	b.n	80028c8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80028ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028c4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d12a      	bne.n	8002928 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028dc:	f023 0304 	bic.w	r3, r3, #4
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028e8:	4311      	orrs	r1, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028f4:	430a      	orrs	r2, r1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	611a      	str	r2, [r3, #16]
 8002902:	e019      	b.n	8002938 <HAL_ADC_Init+0x318>
 8002904:	20000030 	.word	0x20000030
 8002908:	053e2d63 	.word	0x053e2d63
 800290c:	50000100 	.word	0x50000100
 8002910:	50000400 	.word	0x50000400
 8002914:	50000500 	.word	0x50000500
 8002918:	50000600 	.word	0x50000600
 800291c:	50000300 	.word	0x50000300
 8002920:	50000700 	.word	0x50000700
 8002924:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10c      	bne.n	800295a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f023 010f 	bic.w	r1, r3, #15
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
 8002958:	e007      	b.n	800296a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 020f 	bic.w	r2, r2, #15
 8002968:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	65da      	str	r2, [r3, #92]	@ 0x5c
 800297a:	e007      	b.n	800298c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	f043 0210 	orr.w	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800298c:	7ffb      	ldrb	r3, [r7, #31]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3724      	adds	r7, #36	@ 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	bf00      	nop

08002998 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029bc:	d004      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x30>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a8e      	ldr	r2, [pc, #568]	@ (8002bfc <HAL_ADC_IRQHandler+0x264>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_IRQHandler+0x34>
 80029c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002c00 <HAL_ADC_IRQHandler+0x268>)
 80029ca:	e000      	b.n	80029ce <HAL_ADC_IRQHandler+0x36>
 80029cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002c04 <HAL_ADC_IRQHandler+0x26c>)
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fd82 	bl	80024d8 <LL_ADC_GetMultimode>
 80029d4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d017      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x78>
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fed4 	bl	80037b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <HAL_ADC_IRQHandler+0x8c>
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8094 	beq.w	8002b58 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 808e 	beq.w	8002b58 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fc9b 	bl	8002394 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d072      	beq.n	8002b4a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a64      	ldr	r2, [pc, #400]	@ (8002bfc <HAL_ADC_IRQHandler+0x264>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_ADC_IRQHandler+0xea>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a65      	ldr	r2, [pc, #404]	@ (8002c08 <HAL_ADC_IRQHandler+0x270>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d002      	beq.n	8002a7e <HAL_ADC_IRQHandler+0xe6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	e003      	b.n	8002a86 <HAL_ADC_IRQHandler+0xee>
 8002a7e:	4b63      	ldr	r3, [pc, #396]	@ (8002c0c <HAL_ADC_IRQHandler+0x274>)
 8002a80:	e001      	b.n	8002a86 <HAL_ADC_IRQHandler+0xee>
 8002a82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d008      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d002      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	d104      	bne.n	8002aaa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	623b      	str	r3, [r7, #32]
 8002aa8:	e014      	b.n	8002ad4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a53      	ldr	r2, [pc, #332]	@ (8002bfc <HAL_ADC_IRQHandler+0x264>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d009      	beq.n	8002ac8 <HAL_ADC_IRQHandler+0x130>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a53      	ldr	r2, [pc, #332]	@ (8002c08 <HAL_ADC_IRQHandler+0x270>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d002      	beq.n	8002ac4 <HAL_ADC_IRQHandler+0x12c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	e003      	b.n	8002acc <HAL_ADC_IRQHandler+0x134>
 8002ac4:	4b51      	ldr	r3, [pc, #324]	@ (8002c0c <HAL_ADC_IRQHandler+0x274>)
 8002ac6:	e001      	b.n	8002acc <HAL_ADC_IRQHandler+0x134>
 8002ac8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002acc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d135      	bne.n	8002b4a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d12e      	bne.n	8002b4a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fd6e 	bl	80025d2 <LL_ADC_REG_IsConversionOngoing>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d11a      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 020c 	bic.w	r2, r2, #12
 8002b0a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d112      	bne.n	8002b4a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b28:	f043 0201 	orr.w	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b30:	e00b      	b.n	8002b4a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	f043 0210 	orr.w	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f984 	bl	8002e58 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	220c      	movs	r2, #12
 8002b56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d004      	beq.n	8002b6c <HAL_ADC_IRQHandler+0x1d4>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80b3 	beq.w	8002cde <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80ad 	beq.w	8002cde <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fc36 	bl	8002412 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ba6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fbf1 	bl	8002394 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bb2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a10      	ldr	r2, [pc, #64]	@ (8002bfc <HAL_ADC_IRQHandler+0x264>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d009      	beq.n	8002bd2 <HAL_ADC_IRQHandler+0x23a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a11      	ldr	r2, [pc, #68]	@ (8002c08 <HAL_ADC_IRQHandler+0x270>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d002      	beq.n	8002bce <HAL_ADC_IRQHandler+0x236>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	e003      	b.n	8002bd6 <HAL_ADC_IRQHandler+0x23e>
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_ADC_IRQHandler+0x274>)
 8002bd0:	e001      	b.n	8002bd6 <HAL_ADC_IRQHandler+0x23e>
 8002bd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d008      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d002      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b07      	cmp	r3, #7
 8002bee:	d10f      	bne.n	8002c10 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	e01f      	b.n	8002c3a <HAL_ADC_IRQHandler+0x2a2>
 8002bfa:	bf00      	nop
 8002bfc:	50000100 	.word	0x50000100
 8002c00:	50000300 	.word	0x50000300
 8002c04:	50000700 	.word	0x50000700
 8002c08:	50000500 	.word	0x50000500
 8002c0c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a8b      	ldr	r2, [pc, #556]	@ (8002e44 <HAL_ADC_IRQHandler+0x4ac>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_ADC_IRQHandler+0x296>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a8a      	ldr	r2, [pc, #552]	@ (8002e48 <HAL_ADC_IRQHandler+0x4b0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d002      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x292>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	e003      	b.n	8002c32 <HAL_ADC_IRQHandler+0x29a>
 8002c2a:	4b88      	ldr	r3, [pc, #544]	@ (8002e4c <HAL_ADC_IRQHandler+0x4b4>)
 8002c2c:	e001      	b.n	8002c32 <HAL_ADC_IRQHandler+0x29a>
 8002c2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d047      	beq.n	8002cd0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x2c2>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d03f      	beq.n	8002cd0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d13a      	bne.n	8002cd0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c64:	2b40      	cmp	r3, #64	@ 0x40
 8002c66:	d133      	bne.n	8002cd0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d12e      	bne.n	8002cd0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fcbe 	bl	80025f8 <LL_ADC_INJ_IsConversionOngoing>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11a      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d112      	bne.n	8002cd0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cb6:	e00b      	b.n	8002cd0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	f043 0210 	orr.w	r2, r3, #16
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fd45 	bl	8003760 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2260      	movs	r2, #96	@ 0x60
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d011      	beq.n	8002d0c <HAL_ADC_IRQHandler+0x374>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00c      	beq.n	8002d0c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8b4 	bl	8002e6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2280      	movs	r2, #128	@ 0x80
 8002d0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d012      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x3a4>
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fd2b 	bl	8003788 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d012      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x3d4>
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fd1d 	bl	800379c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d043      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x466>
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d03e      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d8c:	e021      	b.n	8002dd2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x410>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a28      	ldr	r2, [pc, #160]	@ (8002e44 <HAL_ADC_IRQHandler+0x4ac>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_IRQHandler+0x414>
 8002da8:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <HAL_ADC_IRQHandler+0x4b8>)
 8002daa:	e000      	b.n	8002dae <HAL_ADC_IRQHandler+0x416>
 8002dac:	4b29      	ldr	r3, [pc, #164]	@ (8002e54 <HAL_ADC_IRQHandler+0x4bc>)
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fba0 	bl	80024f4 <LL_ADC_GetMultiDMATransfer>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dbe:	e008      	b.n	8002dd2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10e      	bne.n	8002df6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ddc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de8:	f043 0202 	orr.w	r2, r3, #2
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f845 	bl	8002e80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d018      	beq.n	8002e3a <HAL_ADC_IRQHandler+0x4a2>
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d013      	beq.n	8002e3a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e22:	f043 0208 	orr.w	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e32:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fc9d 	bl	8003774 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e3a:	bf00      	nop
 8002e3c:	3728      	adds	r7, #40	@ 0x28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	50000100 	.word	0x50000100
 8002e48:	50000500 	.word	0x50000500
 8002e4c:	50000400 	.word	0x50000400
 8002e50:	50000300 	.word	0x50000300
 8002e54:	50000700 	.word	0x50000700

08002e58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b0b6      	sub	sp, #216	@ 0xd8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d102      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x24>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	f000 bc13 	b.w	80036de <HAL_ADC_ConfigChannel+0x84a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fb84 	bl	80025d2 <LL_ADC_REG_IsConversionOngoing>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f040 83f3 	bne.w	80036b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f7ff fa6b 	bl	80023ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fb72 	bl	80025d2 <LL_ADC_REG_IsConversionOngoing>
 8002eee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fb7e 	bl	80025f8 <LL_ADC_INJ_IsConversionOngoing>
 8002efc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 81d9 	bne.w	80032bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 81d4 	bne.w	80032bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f1c:	d10f      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f7ff fa85 	bl	8002438 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fa19 	bl	800236e <LL_ADC_SetSamplingTimeCommonConfig>
 8002f3c:	e00e      	b.n	8002f5c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f7ff fa74 	bl	8002438 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fa09 	bl	800236e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	08db      	lsrs	r3, r3, #3
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d022      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6919      	ldr	r1, [r3, #16]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f8e:	f7ff f963 	bl	8002258 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6919      	ldr	r1, [r3, #16]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f7ff f9af 	bl	8002302 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x126>
 8002fb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fb8:	e000      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x128>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f7ff f9bb 	bl	8002338 <LL_ADC_SetOffsetSaturation>
 8002fc2:	e17b      	b.n	80032bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f968 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x15c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f95d 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	f003 021f 	and.w	r2, r3, #31
 8002fee:	e01e      	b.n	800302e <HAL_ADC_ConfigChannel+0x19a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f952 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800300e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003012:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e004      	b.n	800302c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003036:	2b00      	cmp	r3, #0
 8003038:	d105      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x1b2>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	0e9b      	lsrs	r3, r3, #26
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	e018      	b.n	8003078 <HAL_ADC_ConfigChannel+0x1e4>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800305a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800305e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800306a:	2320      	movs	r3, #32
 800306c:	e004      	b.n	8003078 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800306e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f921 	bl	80022cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff f905 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x222>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f8fa 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	e01e      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x260>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff f8ef 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80030d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80030dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	e004      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80030e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_ADC_ConfigChannel+0x278>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	e018      	b.n	800313e <HAL_ADC_ConfigChannel+0x2aa>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003120:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003130:	2320      	movs	r3, #32
 8003132:	e004      	b.n	800313e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003134:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800313e:	429a      	cmp	r2, r3
 8003140:	d106      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	2101      	movs	r1, #1
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f8be 	bl	80022cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2102      	movs	r1, #2
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f8a2 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_ADC_ConfigChannel+0x2e8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2102      	movs	r1, #2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff f897 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	f003 021f 	and.w	r2, r3, #31
 800317a:	e01e      	b.n	80031ba <HAL_ADC_ConfigChannel+0x326>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f88c 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8003188:	4603      	mov	r3, r0
 800318a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800319a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800319e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80031a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80031aa:	2320      	movs	r3, #32
 80031ac:	e004      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80031ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x33e>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	e016      	b.n	8003200 <HAL_ADC_ConfigChannel+0x36c>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80031e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80031ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80031f2:	2320      	movs	r3, #32
 80031f4:	e004      	b.n	8003200 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80031f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f85d 	bl	80022cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2103      	movs	r1, #3
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f841 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 800321e:	4603      	mov	r3, r0
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <HAL_ADC_ConfigChannel+0x3aa>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2103      	movs	r1, #3
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff f836 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	0e9b      	lsrs	r3, r3, #26
 8003238:	f003 021f 	and.w	r2, r3, #31
 800323c:	e017      	b.n	800326e <HAL_ADC_ConfigChannel+0x3da>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2103      	movs	r1, #3
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff f82b 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 800324a:	4603      	mov	r3, r0
 800324c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003258:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800325a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003260:	2320      	movs	r3, #32
 8003262:	e003      	b.n	800326c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x3f2>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0e9b      	lsrs	r3, r3, #26
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	e011      	b.n	80032aa <HAL_ADC_ConfigChannel+0x416>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003296:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800329e:	2320      	movs	r3, #32
 80032a0:	e003      	b.n	80032aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80032a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d106      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	2103      	movs	r1, #3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f808 	bl	80022cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f973 	bl	80025ac <LL_ADC_IsEnabled>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f040 813d 	bne.w	8003548 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	461a      	mov	r2, r3
 80032dc:	f7ff f8d8 	bl	8002490 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4aa2      	ldr	r2, [pc, #648]	@ (8003570 <HAL_ADC_ConfigChannel+0x6dc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	f040 812e 	bne.w	8003548 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x480>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0e9b      	lsrs	r3, r3, #26
 8003302:	3301      	adds	r3, #1
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2b09      	cmp	r3, #9
 800330a:	bf94      	ite	ls
 800330c:	2301      	movls	r3, #1
 800330e:	2300      	movhi	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e019      	b.n	8003348 <HAL_ADC_ConfigChannel+0x4b4>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003324:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003326:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003330:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3301      	adds	r3, #1
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2b09      	cmp	r3, #9
 8003340:	bf94      	ite	ls
 8003342:	2301      	movls	r3, #1
 8003344:	2300      	movhi	r3, #0
 8003346:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003348:	2b00      	cmp	r3, #0
 800334a:	d079      	beq.n	8003440 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x4d4>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0e9b      	lsrs	r3, r3, #26
 800335e:	3301      	adds	r3, #1
 8003360:	069b      	lsls	r3, r3, #26
 8003362:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003366:	e015      	b.n	8003394 <HAL_ADC_ConfigChannel+0x500>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003378:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800337a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003380:	2320      	movs	r3, #32
 8003382:	e003      	b.n	800338c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3301      	adds	r3, #1
 800338e:	069b      	lsls	r3, r3, #26
 8003390:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x520>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0e9b      	lsrs	r3, r3, #26
 80033a6:	3301      	adds	r3, #1
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	e017      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x550>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80033c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80033c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e003      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80033d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	ea42 0103 	orr.w	r1, r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_ADC_ConfigChannel+0x576>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	0e9b      	lsrs	r3, r3, #26
 80033fa:	3301      	adds	r3, #1
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	051b      	lsls	r3, r3, #20
 8003408:	e018      	b.n	800343c <HAL_ADC_ConfigChannel+0x5a8>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800341c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003422:	2320      	movs	r3, #32
 8003424:	e003      	b.n	800342e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	3301      	adds	r3, #1
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343c:	430b      	orrs	r3, r1
 800343e:	e07e      	b.n	800353e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_ADC_ConfigChannel+0x5c8>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	3301      	adds	r3, #1
 8003454:	069b      	lsls	r3, r3, #26
 8003456:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800345a:	e015      	b.n	8003488 <HAL_ADC_ConfigChannel+0x5f4>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e003      	b.n	8003480 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	069b      	lsls	r3, r3, #26
 8003484:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x614>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	3301      	adds	r3, #1
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	e017      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x644>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	61fb      	str	r3, [r7, #28]
  return result;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80034c0:	2320      	movs	r3, #32
 80034c2:	e003      	b.n	80034cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	ea42 0103 	orr.w	r1, r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x670>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	0e9b      	lsrs	r3, r3, #26
 80034ee:	3301      	adds	r3, #1
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	3b1e      	subs	r3, #30
 80034fc:	051b      	lsls	r3, r3, #20
 80034fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003502:	e01b      	b.n	800353c <HAL_ADC_ConfigChannel+0x6a8>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	613b      	str	r3, [r7, #16]
  return result;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e003      	b.n	8003528 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f003 021f 	and.w	r2, r3, #31
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	3b1e      	subs	r3, #30
 8003536:	051b      	lsls	r3, r3, #20
 8003538:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003542:	4619      	mov	r1, r3
 8003544:	f7fe ff78 	bl	8002438 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <HAL_ADC_ConfigChannel+0x6e0>)
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80be 	beq.w	80036d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800355e:	d004      	beq.n	800356a <HAL_ADC_ConfigChannel+0x6d6>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a04      	ldr	r2, [pc, #16]	@ (8003578 <HAL_ADC_ConfigChannel+0x6e4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10a      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x6ec>
 800356a:	4b04      	ldr	r3, [pc, #16]	@ (800357c <HAL_ADC_ConfigChannel+0x6e8>)
 800356c:	e009      	b.n	8003582 <HAL_ADC_ConfigChannel+0x6ee>
 800356e:	bf00      	nop
 8003570:	407f0000 	.word	0x407f0000
 8003574:	80080000 	.word	0x80080000
 8003578:	50000100 	.word	0x50000100
 800357c:	50000300 	.word	0x50000300
 8003580:	4b59      	ldr	r3, [pc, #356]	@ (80036e8 <HAL_ADC_ConfigChannel+0x854>)
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fe5a 	bl	800223c <LL_ADC_GetCommonPathInternalCh>
 8003588:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a56      	ldr	r2, [pc, #344]	@ (80036ec <HAL_ADC_ConfigChannel+0x858>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0x70c>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a55      	ldr	r2, [pc, #340]	@ (80036f0 <HAL_ADC_ConfigChannel+0x85c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d13a      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d134      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b4:	d005      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x72e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a4e      	ldr	r2, [pc, #312]	@ (80036f4 <HAL_ADC_ConfigChannel+0x860>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	f040 8085 	bne.w	80036cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ca:	d004      	beq.n	80035d6 <HAL_ADC_ConfigChannel+0x742>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a49      	ldr	r2, [pc, #292]	@ (80036f8 <HAL_ADC_ConfigChannel+0x864>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_ADC_ConfigChannel+0x746>
 80035d6:	4a49      	ldr	r2, [pc, #292]	@ (80036fc <HAL_ADC_ConfigChannel+0x868>)
 80035d8:	e000      	b.n	80035dc <HAL_ADC_ConfigChannel+0x748>
 80035da:	4a43      	ldr	r2, [pc, #268]	@ (80036e8 <HAL_ADC_ConfigChannel+0x854>)
 80035dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f7fe fe15 	bl	8002216 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ec:	4b44      	ldr	r3, [pc, #272]	@ (8003700 <HAL_ADC_ConfigChannel+0x86c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	4a44      	ldr	r2, [pc, #272]	@ (8003704 <HAL_ADC_ConfigChannel+0x870>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	4613      	mov	r3, r2
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003606:	e002      	b.n	800360e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3b01      	subs	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003614:	e05a      	b.n	80036cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a3b      	ldr	r2, [pc, #236]	@ (8003708 <HAL_ADC_ConfigChannel+0x874>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d125      	bne.n	800366c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11f      	bne.n	800366c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a31      	ldr	r2, [pc, #196]	@ (80036f8 <HAL_ADC_ConfigChannel+0x864>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d104      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x7ac>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a34      	ldr	r2, [pc, #208]	@ (800370c <HAL_ADC_ConfigChannel+0x878>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d047      	beq.n	80036d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003648:	d004      	beq.n	8003654 <HAL_ADC_ConfigChannel+0x7c0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2a      	ldr	r2, [pc, #168]	@ (80036f8 <HAL_ADC_ConfigChannel+0x864>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x7c4>
 8003654:	4a29      	ldr	r2, [pc, #164]	@ (80036fc <HAL_ADC_ConfigChannel+0x868>)
 8003656:	e000      	b.n	800365a <HAL_ADC_ConfigChannel+0x7c6>
 8003658:	4a23      	ldr	r2, [pc, #140]	@ (80036e8 <HAL_ADC_ConfigChannel+0x854>)
 800365a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f7fe fdd6 	bl	8002216 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800366a:	e031      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a27      	ldr	r2, [pc, #156]	@ (8003710 <HAL_ADC_ConfigChannel+0x87c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d12d      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800367a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d127      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <HAL_ADC_ConfigChannel+0x864>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003694:	d004      	beq.n	80036a0 <HAL_ADC_ConfigChannel+0x80c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a17      	ldr	r2, [pc, #92]	@ (80036f8 <HAL_ADC_ConfigChannel+0x864>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x810>
 80036a0:	4a16      	ldr	r2, [pc, #88]	@ (80036fc <HAL_ADC_ConfigChannel+0x868>)
 80036a2:	e000      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x812>
 80036a4:	4a10      	ldr	r2, [pc, #64]	@ (80036e8 <HAL_ADC_ConfigChannel+0x854>)
 80036a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036ae:	4619      	mov	r1, r3
 80036b0:	4610      	mov	r0, r2
 80036b2:	f7fe fdb0 	bl	8002216 <LL_ADC_SetCommonPathInternalCh>
 80036b6:	e00c      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80036ca:	e002      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036cc:	bf00      	nop
 80036ce:	e000      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036de:	4618      	mov	r0, r3
 80036e0:	37d8      	adds	r7, #216	@ 0xd8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	50000700 	.word	0x50000700
 80036ec:	c3210000 	.word	0xc3210000
 80036f0:	90c00010 	.word	0x90c00010
 80036f4:	50000600 	.word	0x50000600
 80036f8:	50000100 	.word	0x50000100
 80036fc:	50000300 	.word	0x50000300
 8003700:	20000030 	.word	0x20000030
 8003704:	053e2d63 	.word	0x053e2d63
 8003708:	c7520000 	.word	0xc7520000
 800370c:	50000500 	.word	0x50000500
 8003710:	cb840000 	.word	0xcb840000

08003714 <LL_ADC_IsEnabled>:
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <LL_ADC_IsEnabled+0x18>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <LL_ADC_IsEnabled+0x1a>
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <LL_ADC_REG_IsConversionOngoing>:
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d101      	bne.n	8003752 <LL_ADC_REG_IsConversionOngoing+0x18>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b0a1      	sub	sp, #132	@ 0x84
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037de:	2302      	movs	r3, #2
 80037e0:	e0e7      	b.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80037ea:	2300      	movs	r3, #0
 80037ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80037ee:	2300      	movs	r3, #0
 80037f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037fa:	d102      	bne.n	8003802 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037fc:	4b6f      	ldr	r3, [pc, #444]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	e009      	b.n	8003816 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a6e      	ldr	r2, [pc, #440]	@ (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d102      	bne.n	8003812 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800380c:	4b6d      	ldr	r3, [pc, #436]	@ (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	e001      	b.n	8003816 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0be      	b.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff ff7f 	bl	800373a <LL_ADC_REG_IsConversionOngoing>
 800383c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff79 	bl	800373a <LL_ADC_REG_IsConversionOngoing>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 80a0 	bne.w	8003990 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 809c 	bne.w	8003990 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003860:	d004      	beq.n	800386c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a55      	ldr	r2, [pc, #340]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d101      	bne.n	8003870 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800386c:	4b56      	ldr	r3, [pc, #344]	@ (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800386e:	e000      	b.n	8003872 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003870:	4b56      	ldr	r3, [pc, #344]	@ (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003872:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d04b      	beq.n	8003914 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800387c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800388e:	035b      	lsls	r3, r3, #13
 8003890:	430b      	orrs	r3, r1
 8003892:	431a      	orrs	r2, r3
 8003894:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003896:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038a0:	d004      	beq.n	80038ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a45      	ldr	r2, [pc, #276]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d10f      	bne.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80038ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038b0:	f7ff ff30 	bl	8003714 <LL_ADC_IsEnabled>
 80038b4:	4604      	mov	r4, r0
 80038b6:	4841      	ldr	r0, [pc, #260]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038b8:	f7ff ff2c 	bl	8003714 <LL_ADC_IsEnabled>
 80038bc:	4603      	mov	r3, r0
 80038be:	4323      	orrs	r3, r4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e012      	b.n	80038f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80038cc:	483c      	ldr	r0, [pc, #240]	@ (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038ce:	f7ff ff21 	bl	8003714 <LL_ADC_IsEnabled>
 80038d2:	4604      	mov	r4, r0
 80038d4:	483b      	ldr	r0, [pc, #236]	@ (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038d6:	f7ff ff1d 	bl	8003714 <LL_ADC_IsEnabled>
 80038da:	4603      	mov	r3, r0
 80038dc:	431c      	orrs	r4, r3
 80038de:	483c      	ldr	r0, [pc, #240]	@ (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80038e0:	f7ff ff18 	bl	8003714 <LL_ADC_IsEnabled>
 80038e4:	4603      	mov	r3, r0
 80038e6:	4323      	orrs	r3, r4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d056      	beq.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038fe:	f023 030f 	bic.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	6811      	ldr	r1, [r2, #0]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	6892      	ldr	r2, [r2, #8]
 800390a:	430a      	orrs	r2, r1
 800390c:	431a      	orrs	r2, r3
 800390e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003910:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003912:	e047      	b.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003914:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800391c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800391e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003928:	d004      	beq.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a23      	ldr	r2, [pc, #140]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d10f      	bne.n	8003954 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003934:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003938:	f7ff feec 	bl	8003714 <LL_ADC_IsEnabled>
 800393c:	4604      	mov	r4, r0
 800393e:	481f      	ldr	r0, [pc, #124]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003940:	f7ff fee8 	bl	8003714 <LL_ADC_IsEnabled>
 8003944:	4603      	mov	r3, r0
 8003946:	4323      	orrs	r3, r4
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e012      	b.n	800397a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003954:	481a      	ldr	r0, [pc, #104]	@ (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003956:	f7ff fedd 	bl	8003714 <LL_ADC_IsEnabled>
 800395a:	4604      	mov	r4, r0
 800395c:	4819      	ldr	r0, [pc, #100]	@ (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800395e:	f7ff fed9 	bl	8003714 <LL_ADC_IsEnabled>
 8003962:	4603      	mov	r3, r0
 8003964:	431c      	orrs	r4, r3
 8003966:	481a      	ldr	r0, [pc, #104]	@ (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003968:	f7ff fed4 	bl	8003714 <LL_ADC_IsEnabled>
 800396c:	4603      	mov	r3, r0
 800396e:	4323      	orrs	r3, r4
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d012      	beq.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800397e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003986:	f023 030f 	bic.w	r3, r3, #15
 800398a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800398c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800398e:	e009      	b.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80039a2:	e000      	b.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80039ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3784      	adds	r7, #132	@ 0x84
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}
 80039ba:	bf00      	nop
 80039bc:	50000100 	.word	0x50000100
 80039c0:	50000400 	.word	0x50000400
 80039c4:	50000500 	.word	0x50000500
 80039c8:	50000300 	.word	0x50000300
 80039cc:	50000700 	.word	0x50000700
 80039d0:	50000600 	.word	0x50000600

080039d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a06:	4a04      	ldr	r2, [pc, #16]	@ (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	60d3      	str	r3, [r2, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <__NVIC_GetPriorityGrouping+0x18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0307 	and.w	r3, r3, #7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db0b      	blt.n	8003a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4907      	ldr	r1, [pc, #28]	@ (8003a70 <__NVIC_EnableIRQ+0x38>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2001      	movs	r0, #1
 8003a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000e100 	.word	0xe000e100

08003a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	db0a      	blt.n	8003a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	490c      	ldr	r1, [pc, #48]	@ (8003ac0 <__NVIC_SetPriority+0x4c>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	440b      	add	r3, r1
 8003a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a9c:	e00a      	b.n	8003ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4908      	ldr	r1, [pc, #32]	@ (8003ac4 <__NVIC_SetPriority+0x50>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	3b04      	subs	r3, #4
 8003aac:	0112      	lsls	r2, r2, #4
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	761a      	strb	r2, [r3, #24]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000e100 	.word	0xe000e100
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	@ 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f1c3 0307 	rsb	r3, r3, #7
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	bf28      	it	cs
 8003ae6:	2304      	movcs	r3, #4
 8003ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3304      	adds	r3, #4
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d902      	bls.n	8003af8 <NVIC_EncodePriority+0x30>
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3b03      	subs	r3, #3
 8003af6:	e000      	b.n	8003afa <NVIC_EncodePriority+0x32>
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b10:	f04f 31ff 	mov.w	r1, #4294967295
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43d9      	mvns	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b20:	4313      	orrs	r3, r2
         );
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3724      	adds	r7, #36	@ 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b40:	d301      	bcc.n	8003b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00f      	b.n	8003b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b46:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <SysTick_Config+0x40>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4e:	210f      	movs	r1, #15
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f7ff ff8e 	bl	8003a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b58:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <SysTick_Config+0x40>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5e:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <SysTick_Config+0x40>)
 8003b60:	2207      	movs	r2, #7
 8003b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	e000e010 	.word	0xe000e010

08003b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff29 	bl	80039d4 <__NVIC_SetPriorityGrouping>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b98:	f7ff ff40 	bl	8003a1c <__NVIC_GetPriorityGrouping>
 8003b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f7ff ff90 	bl	8003ac8 <NVIC_EncodePriority>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff5f 	bl	8003a74 <__NVIC_SetPriority>
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff33 	bl	8003a38 <__NVIC_EnableIRQ>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffa4 	bl	8003b30 <SysTick_Config>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e08d      	b.n	8003d22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4b47      	ldr	r3, [pc, #284]	@ (8003d2c <HAL_DMA_Init+0x138>)
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d80f      	bhi.n	8003c32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	4b45      	ldr	r3, [pc, #276]	@ (8003d30 <HAL_DMA_Init+0x13c>)
 8003c1a:	4413      	add	r3, r2
 8003c1c:	4a45      	ldr	r2, [pc, #276]	@ (8003d34 <HAL_DMA_Init+0x140>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	009a      	lsls	r2, r3, #2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a42      	ldr	r2, [pc, #264]	@ (8003d38 <HAL_DMA_Init+0x144>)
 8003c2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c30:	e00e      	b.n	8003c50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b40      	ldr	r3, [pc, #256]	@ (8003d3c <HAL_DMA_Init+0x148>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d34 <HAL_DMA_Init+0x140>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	009a      	lsls	r2, r3, #2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d40 <HAL_DMA_Init+0x14c>)
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8fe 	bl	8003ea4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cb0:	d102      	bne.n	8003cb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ccc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <HAL_DMA_Init+0x104>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d80c      	bhi.n	8003cf8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f91e 	bl	8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	e008      	b.n	8003d0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40020407 	.word	0x40020407
 8003d30:	bffdfff8 	.word	0xbffdfff8
 8003d34:	cccccccd 	.word	0xcccccccd
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	bffdfbf8 	.word	0xbffdfbf8
 8003d40:	40020400 	.word	0x40020400

08003d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2204      	movs	r2, #4
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d026      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x7a>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d021      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	2104      	movs	r1, #4
 8003da6:	fa01 f202 	lsl.w	r2, r1, r2
 8003daa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d071      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dbc:	e06c      	b.n	8003e98 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d02e      	beq.n	8003e30 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d029      	beq.n	8003e30 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 020a 	bic.w	r2, r2, #10
 8003df8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	f003 021f 	and.w	r2, r3, #31
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	2102      	movs	r1, #2
 8003e10:	fa01 f202 	lsl.w	r2, r1, r2
 8003e14:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d038      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e2e:	e033      	b.n	8003e98 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2208      	movs	r2, #8
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d02a      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d025      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 020e 	bic.w	r2, r2, #14
 8003e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f003 021f 	and.w	r2, r3, #31
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
}
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b16      	ldr	r3, [pc, #88]	@ (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d802      	bhi.n	8003ebe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003eb8:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e001      	b.n	8003ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003ebe:	4b15      	ldr	r3, [pc, #84]	@ (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ec0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	3b08      	subs	r3, #8
 8003ece:	4a12      	ldr	r2, [pc, #72]	@ (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	009a      	lsls	r2, r3, #2
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a0b      	ldr	r2, [pc, #44]	@ (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003eee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40020407 	.word	0x40020407
 8003f10:	40020800 	.word	0x40020800
 8003f14:	40020820 	.word	0x40020820
 8003f18:	cccccccd 	.word	0xcccccccd
 8003f1c:	40020880 	.word	0x40020880

08003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a08      	ldr	r2, [pc, #32]	@ (8003f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f42:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	1000823f 	.word	0x1000823f
 8003f64:	40020940 	.word	0x40020940

08003f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f76:	e15a      	b.n	800422e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	4013      	ands	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 814c 	beq.w	8004228 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d005      	beq.n	8003fa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d130      	bne.n	800400a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fde:	2201      	movs	r2, #1
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	f003 0201 	and.w	r2, r3, #1
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b03      	cmp	r3, #3
 8004014:	d017      	beq.n	8004046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d123      	bne.n	800409a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	08da      	lsrs	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	220f      	movs	r2, #15
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4013      	ands	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	6939      	ldr	r1, [r7, #16]
 8004096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0203 	and.w	r2, r3, #3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80a6 	beq.w	8004228 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040dc:	4b5b      	ldr	r3, [pc, #364]	@ (800424c <HAL_GPIO_Init+0x2e4>)
 80040de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e0:	4a5a      	ldr	r2, [pc, #360]	@ (800424c <HAL_GPIO_Init+0x2e4>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80040e8:	4b58      	ldr	r3, [pc, #352]	@ (800424c <HAL_GPIO_Init+0x2e4>)
 80040ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040f4:	4a56      	ldr	r2, [pc, #344]	@ (8004250 <HAL_GPIO_Init+0x2e8>)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	3302      	adds	r3, #2
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	220f      	movs	r2, #15
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800411e:	d01f      	beq.n	8004160 <HAL_GPIO_Init+0x1f8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a4c      	ldr	r2, [pc, #304]	@ (8004254 <HAL_GPIO_Init+0x2ec>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d019      	beq.n	800415c <HAL_GPIO_Init+0x1f4>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a4b      	ldr	r2, [pc, #300]	@ (8004258 <HAL_GPIO_Init+0x2f0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d013      	beq.n	8004158 <HAL_GPIO_Init+0x1f0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a4a      	ldr	r2, [pc, #296]	@ (800425c <HAL_GPIO_Init+0x2f4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00d      	beq.n	8004154 <HAL_GPIO_Init+0x1ec>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a49      	ldr	r2, [pc, #292]	@ (8004260 <HAL_GPIO_Init+0x2f8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d007      	beq.n	8004150 <HAL_GPIO_Init+0x1e8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a48      	ldr	r2, [pc, #288]	@ (8004264 <HAL_GPIO_Init+0x2fc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_GPIO_Init+0x1e4>
 8004148:	2305      	movs	r3, #5
 800414a:	e00a      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 800414c:	2306      	movs	r3, #6
 800414e:	e008      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 8004150:	2304      	movs	r3, #4
 8004152:	e006      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 8004154:	2303      	movs	r3, #3
 8004156:	e004      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 8004158:	2302      	movs	r3, #2
 800415a:	e002      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 8004160:	2300      	movs	r3, #0
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	f002 0203 	and.w	r2, r2, #3
 8004168:	0092      	lsls	r2, r2, #2
 800416a:	4093      	lsls	r3, r2
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004172:	4937      	ldr	r1, [pc, #220]	@ (8004250 <HAL_GPIO_Init+0x2e8>)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004180:	4b39      	ldr	r3, [pc, #228]	@ (8004268 <HAL_GPIO_Init+0x300>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041a4:	4a30      	ldr	r2, [pc, #192]	@ (8004268 <HAL_GPIO_Init+0x300>)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004268 <HAL_GPIO_Init+0x300>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ce:	4a26      	ldr	r2, [pc, #152]	@ (8004268 <HAL_GPIO_Init+0x300>)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041d4:	4b24      	ldr	r3, [pc, #144]	@ (8004268 <HAL_GPIO_Init+0x300>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004268 <HAL_GPIO_Init+0x300>)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <HAL_GPIO_Init+0x300>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004222:	4a11      	ldr	r2, [pc, #68]	@ (8004268 <HAL_GPIO_Init+0x300>)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3301      	adds	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	f47f ae9d 	bne.w	8003f78 <HAL_GPIO_Init+0x10>
  }
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40021000 	.word	0x40021000
 8004250:	40010000 	.word	0x40010000
 8004254:	48000400 	.word	0x48000400
 8004258:	48000800 	.word	0x48000800
 800425c:	48000c00 	.word	0x48000c00
 8004260:	48001000 	.word	0x48001000
 8004264:	48001400 	.word	0x48001400
 8004268:	40010400 	.word	0x40010400

0800426c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
 8004278:	4613      	mov	r3, r2
 800427a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800427c:	787b      	ldrb	r3, [r7, #1]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004288:	e002      	b.n	8004290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800428a:	887a      	ldrh	r2, [r7, #2]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042a6:	4b08      	ldr	r3, [pc, #32]	@ (80042c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042b2:	4a05      	ldr	r2, [pc, #20]	@ (80042c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fd fc64 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40010400 	.word	0x40010400

080042cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d141      	bne.n	800435e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042da:	4b4b      	ldr	r3, [pc, #300]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042e6:	d131      	bne.n	800434c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042e8:	4b47      	ldr	r3, [pc, #284]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ee:	4a46      	ldr	r2, [pc, #280]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042f8:	4b43      	ldr	r3, [pc, #268]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004300:	4a41      	ldr	r2, [pc, #260]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004308:	4b40      	ldr	r3, [pc, #256]	@ (800440c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2232      	movs	r2, #50	@ 0x32
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	4a3f      	ldr	r2, [pc, #252]	@ (8004410 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004314:	fba2 2303 	umull	r2, r3, r2, r3
 8004318:	0c9b      	lsrs	r3, r3, #18
 800431a:	3301      	adds	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800431e:	e002      	b.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3b01      	subs	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004326:	4b38      	ldr	r3, [pc, #224]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004332:	d102      	bne.n	800433a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f2      	bne.n	8004320 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800433a:	4b33      	ldr	r3, [pc, #204]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004346:	d158      	bne.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e057      	b.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800434c:	4b2e      	ldr	r3, [pc, #184]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004352:	4a2d      	ldr	r2, [pc, #180]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800435c:	e04d      	b.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004364:	d141      	bne.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004366:	4b28      	ldr	r3, [pc, #160]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004372:	d131      	bne.n	80043d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004374:	4b24      	ldr	r3, [pc, #144]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800437a:	4a23      	ldr	r2, [pc, #140]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004380:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004384:	4b20      	ldr	r3, [pc, #128]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800438c:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004392:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004394:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2232      	movs	r2, #50	@ 0x32
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	4a1c      	ldr	r2, [pc, #112]	@ (8004410 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	0c9b      	lsrs	r3, r3, #18
 80043a6:	3301      	adds	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043aa:	e002      	b.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043b2:	4b15      	ldr	r3, [pc, #84]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043be:	d102      	bne.n	80043c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f2      	bne.n	80043ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d2:	d112      	bne.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e011      	b.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043de:	4a0a      	ldr	r2, [pc, #40]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043e8:	e007      	b.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043ea:	4b07      	ldr	r3, [pc, #28]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043f2:	4a05      	ldr	r2, [pc, #20]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40007000 	.word	0x40007000
 800440c:	20000030 	.word	0x20000030
 8004410:	431bde83 	.word	0x431bde83

08004414 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a04      	ldr	r2, [pc, #16]	@ (8004430 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800441e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004422:	6093      	str	r3, [r2, #8]
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40007000 	.word	0x40007000

08004434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e2fe      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d075      	beq.n	800453e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004452:	4b97      	ldr	r3, [pc, #604]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800445c:	4b94      	ldr	r3, [pc, #592]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b0c      	cmp	r3, #12
 800446a:	d102      	bne.n	8004472 <HAL_RCC_OscConfig+0x3e>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d002      	beq.n	8004478 <HAL_RCC_OscConfig+0x44>
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d10b      	bne.n	8004490 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	4b8d      	ldr	r3, [pc, #564]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05b      	beq.n	800453c <HAL_RCC_OscConfig+0x108>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d157      	bne.n	800453c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e2d9      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004498:	d106      	bne.n	80044a8 <HAL_RCC_OscConfig+0x74>
 800449a:	4b85      	ldr	r3, [pc, #532]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a84      	ldr	r2, [pc, #528]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e01d      	b.n	80044e4 <HAL_RCC_OscConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x98>
 80044b2:	4b7f      	ldr	r3, [pc, #508]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a7e      	ldr	r2, [pc, #504]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b7c      	ldr	r3, [pc, #496]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7b      	ldr	r2, [pc, #492]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0xb0>
 80044cc:	4b78      	ldr	r3, [pc, #480]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a77      	ldr	r2, [pc, #476]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b75      	ldr	r3, [pc, #468]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a74      	ldr	r2, [pc, #464]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fe74 	bl	80021d8 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fd fe70 	bl	80021d8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	@ 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e29e      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004506:	4b6a      	ldr	r3, [pc, #424]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0xc0>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd fe60 	bl	80021d8 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fd fe5c 	bl	80021d8 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	@ 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e28a      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800452e:	4b60      	ldr	r3, [pc, #384]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0xe8>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d075      	beq.n	8004636 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800454a:	4b59      	ldr	r3, [pc, #356]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004554:	4b56      	ldr	r3, [pc, #344]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d102      	bne.n	800456a <HAL_RCC_OscConfig+0x136>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d002      	beq.n	8004570 <HAL_RCC_OscConfig+0x13c>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b04      	cmp	r3, #4
 800456e:	d11f      	bne.n	80045b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004570:	4b4f      	ldr	r3, [pc, #316]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_OscConfig+0x154>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e25d      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004588:	4b49      	ldr	r3, [pc, #292]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	4946      	ldr	r1, [pc, #280]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800459c:	4b45      	ldr	r3, [pc, #276]	@ (80046b4 <HAL_RCC_OscConfig+0x280>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fd fdcd 	bl	8002140 <HAL_InitTick>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d043      	beq.n	8004634 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e249      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d023      	beq.n	8004600 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045b8:	4b3d      	ldr	r3, [pc, #244]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3c      	ldr	r2, [pc, #240]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fe08 	bl	80021d8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fd fe04 	bl	80021d8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e232      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045de:	4b34      	ldr	r3, [pc, #208]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	4b31      	ldr	r3, [pc, #196]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	492d      	ldr	r1, [pc, #180]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	604b      	str	r3, [r1, #4]
 80045fe:	e01a      	b.n	8004636 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004600:	4b2b      	ldr	r3, [pc, #172]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2a      	ldr	r2, [pc, #168]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004606:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800460a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd fde4 	bl	80021d8 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004614:	f7fd fde0 	bl	80021d8 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e20e      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004626:	4b22      	ldr	r3, [pc, #136]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x1e0>
 8004632:	e000      	b.n	8004636 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004634:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d041      	beq.n	80046c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01c      	beq.n	8004684 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800464a:	4b19      	ldr	r3, [pc, #100]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 800464c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004650:	4a17      	ldr	r2, [pc, #92]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fd fdbd 	bl	80021d8 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004662:	f7fd fdb9 	bl	80021d8 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e1e7      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004674:	4b0e      	ldr	r3, [pc, #56]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ef      	beq.n	8004662 <HAL_RCC_OscConfig+0x22e>
 8004682:	e020      	b.n	80046c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004684:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 8004686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468a:	4a09      	ldr	r2, [pc, #36]	@ (80046b0 <HAL_RCC_OscConfig+0x27c>)
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fd fda0 	bl	80021d8 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800469a:	e00d      	b.n	80046b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7fd fd9c 	bl	80021d8 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d906      	bls.n	80046b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e1ca      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046b8:	4b8c      	ldr	r3, [pc, #560]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1ea      	bne.n	800469c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80a6 	beq.w	8004820 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d4:	2300      	movs	r3, #0
 80046d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046d8:	4b84      	ldr	r3, [pc, #528]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_OscConfig+0x2b4>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x2b6>
 80046e8:	2300      	movs	r3, #0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	4b7f      	ldr	r3, [pc, #508]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f2:	4a7e      	ldr	r2, [pc, #504]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80046fa:	4b7c      	ldr	r3, [pc, #496]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004706:	2301      	movs	r3, #1
 8004708:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800470a:	4b79      	ldr	r3, [pc, #484]	@ (80048f0 <HAL_RCC_OscConfig+0x4bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004716:	4b76      	ldr	r3, [pc, #472]	@ (80048f0 <HAL_RCC_OscConfig+0x4bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a75      	ldr	r2, [pc, #468]	@ (80048f0 <HAL_RCC_OscConfig+0x4bc>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fd fd59 	bl	80021d8 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fd fd55 	bl	80021d8 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e183      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473c:	4b6c      	ldr	r3, [pc, #432]	@ (80048f0 <HAL_RCC_OscConfig+0x4bc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d108      	bne.n	8004762 <HAL_RCC_OscConfig+0x32e>
 8004750:	4b66      	ldr	r3, [pc, #408]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004756:	4a65      	ldr	r2, [pc, #404]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004760:	e024      	b.n	80047ac <HAL_RCC_OscConfig+0x378>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b05      	cmp	r3, #5
 8004768:	d110      	bne.n	800478c <HAL_RCC_OscConfig+0x358>
 800476a:	4b60      	ldr	r3, [pc, #384]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004770:	4a5e      	ldr	r2, [pc, #376]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800477a:	4b5c      	ldr	r3, [pc, #368]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004780:	4a5a      	ldr	r2, [pc, #360]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800478a:	e00f      	b.n	80047ac <HAL_RCC_OscConfig+0x378>
 800478c:	4b57      	ldr	r3, [pc, #348]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004792:	4a56      	ldr	r2, [pc, #344]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800479c:	4b53      	ldr	r3, [pc, #332]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a2:	4a52      	ldr	r2, [pc, #328]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80047a4:	f023 0304 	bic.w	r3, r3, #4
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d016      	beq.n	80047e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fd fd10 	bl	80021d8 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fd fd0c 	bl	80021d8 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e138      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d2:	4b46      	ldr	r3, [pc, #280]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ed      	beq.n	80047bc <HAL_RCC_OscConfig+0x388>
 80047e0:	e015      	b.n	800480e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e2:	f7fd fcf9 	bl	80021d8 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fd fcf5 	bl	80021d8 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e121      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004800:	4b3a      	ldr	r3, [pc, #232]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ed      	bne.n	80047ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800480e:	7ffb      	ldrb	r3, [r7, #31]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d105      	bne.n	8004820 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004814:	4b35      	ldr	r3, [pc, #212]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004818:	4a34      	ldr	r2, [pc, #208]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 800481a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d03c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01c      	beq.n	800486e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004834:	4b2d      	ldr	r3, [pc, #180]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004836:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800483a:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd fcc8 	bl	80021d8 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800484c:	f7fd fcc4 	bl	80021d8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0f2      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800485e:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004860:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ef      	beq.n	800484c <HAL_RCC_OscConfig+0x418>
 800486c:	e01b      	b.n	80048a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800486e:	4b1f      	ldr	r3, [pc, #124]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004870:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004874:	4a1d      	ldr	r2, [pc, #116]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fd fcab 	bl	80021d8 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004886:	f7fd fca7 	bl	80021d8 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e0d5      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004898:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 800489a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ef      	bne.n	8004886 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80c9 	beq.w	8004a42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b0:	4b0e      	ldr	r3, [pc, #56]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b0c      	cmp	r3, #12
 80048ba:	f000 8083 	beq.w	80049c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d15e      	bne.n	8004984 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a08      	ldr	r2, [pc, #32]	@ (80048ec <HAL_RCC_OscConfig+0x4b8>)
 80048cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d2:	f7fd fc81 	bl	80021d8 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d8:	e00c      	b.n	80048f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048da:	f7fd fc7d 	bl	80021d8 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d905      	bls.n	80048f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e0ab      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f4:	4b55      	ldr	r3, [pc, #340]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1ec      	bne.n	80048da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004900:	4b52      	ldr	r3, [pc, #328]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	4b52      	ldr	r3, [pc, #328]	@ (8004a50 <HAL_RCC_OscConfig+0x61c>)
 8004906:	4013      	ands	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6a11      	ldr	r1, [r2, #32]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004910:	3a01      	subs	r2, #1
 8004912:	0112      	lsls	r2, r2, #4
 8004914:	4311      	orrs	r1, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800491a:	0212      	lsls	r2, r2, #8
 800491c:	4311      	orrs	r1, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004922:	0852      	lsrs	r2, r2, #1
 8004924:	3a01      	subs	r2, #1
 8004926:	0552      	lsls	r2, r2, #21
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800492e:	0852      	lsrs	r2, r2, #1
 8004930:	3a01      	subs	r2, #1
 8004932:	0652      	lsls	r2, r2, #25
 8004934:	4311      	orrs	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800493a:	06d2      	lsls	r2, r2, #27
 800493c:	430a      	orrs	r2, r1
 800493e:	4943      	ldr	r1, [pc, #268]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 8004940:	4313      	orrs	r3, r2
 8004942:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004944:	4b41      	ldr	r3, [pc, #260]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a40      	ldr	r2, [pc, #256]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800494e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004950:	4b3e      	ldr	r3, [pc, #248]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a3d      	ldr	r2, [pc, #244]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800495a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd fc3c 	bl	80021d8 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd fc38 	bl	80021d8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e066      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	4b35      	ldr	r3, [pc, #212]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x530>
 8004982:	e05e      	b.n	8004a42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004984:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a30      	ldr	r2, [pc, #192]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 800498a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800498e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7fd fc22 	bl	80021d8 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004998:	f7fd fc1e 	bl	80021d8 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e04c      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049aa:	4b28      	ldr	r3, [pc, #160]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049b6:	4b25      	ldr	r3, [pc, #148]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	4924      	ldr	r1, [pc, #144]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 80049bc:	4b25      	ldr	r3, [pc, #148]	@ (8004a54 <HAL_RCC_OscConfig+0x620>)
 80049be:	4013      	ands	r3, r2
 80049c0:	60cb      	str	r3, [r1, #12]
 80049c2:	e03e      	b.n	8004a42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e039      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049d0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a4c <HAL_RCC_OscConfig+0x618>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f003 0203 	and.w	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d12c      	bne.n	8004a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	3b01      	subs	r3, #1
 80049f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d123      	bne.n	8004a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d11b      	bne.n	8004a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d113      	bne.n	8004a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	3b01      	subs	r3, #1
 8004a24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d109      	bne.n	8004a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	3b01      	subs	r3, #1
 8004a38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d001      	beq.n	8004a42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	019f800c 	.word	0x019f800c
 8004a54:	feeefffc 	.word	0xfeeefffc

08004a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e11e      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a70:	4b91      	ldr	r3, [pc, #580]	@ (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d910      	bls.n	8004aa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b8e      	ldr	r3, [pc, #568]	@ (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 020f 	bic.w	r2, r3, #15
 8004a86:	498c      	ldr	r1, [pc, #560]	@ (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b8a      	ldr	r3, [pc, #552]	@ (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e106      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d073      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d129      	bne.n	8004b08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab4:	4b81      	ldr	r3, [pc, #516]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0f4      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ac4:	f000 f99e 	bl	8004e04 <RCC_GetSysClockFreqFromPLLSource>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4a7c      	ldr	r2, [pc, #496]	@ (8004cc0 <HAL_RCC_ClockConfig+0x268>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d93f      	bls.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ad2:	4b7a      	ldr	r3, [pc, #488]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d033      	beq.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d12f      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004af2:	4b72      	ldr	r3, [pc, #456]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004afa:	4a70      	ldr	r2, [pc, #448]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b02:	2380      	movs	r3, #128	@ 0x80
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e024      	b.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b10:	4b6a      	ldr	r3, [pc, #424]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0c6      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b20:	4b66      	ldr	r3, [pc, #408]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0be      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b30:	f000 f8ce 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004b34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4a61      	ldr	r2, [pc, #388]	@ (8004cc0 <HAL_RCC_ClockConfig+0x268>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d909      	bls.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b46:	4a5d      	ldr	r2, [pc, #372]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b5a      	ldr	r3, [pc, #360]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4957      	ldr	r1, [pc, #348]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b64:	f7fd fb38 	bl	80021d8 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6c:	f7fd fb34 	bl	80021d8 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e095      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	4b4e      	ldr	r3, [pc, #312]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 020c 	and.w	r2, r3, #12
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1eb      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d023      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bac:	4b43      	ldr	r3, [pc, #268]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4a42      	ldr	r2, [pc, #264]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bcc:	4a3b      	ldr	r2, [pc, #236]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b39      	ldr	r3, [pc, #228]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4936      	ldr	r1, [pc, #216]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b80      	cmp	r3, #128	@ 0x80
 8004bec:	d105      	bne.n	8004bfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bee:	4b33      	ldr	r3, [pc, #204]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4a32      	ldr	r2, [pc, #200]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bf4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d21d      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c08:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 020f 	bic.w	r2, r3, #15
 8004c10:	4929      	ldr	r1, [pc, #164]	@ (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c18:	f7fd fade 	bl	80021d8 <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c20:	f7fd fada 	bl	80021d8 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e03b      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b20      	ldr	r3, [pc, #128]	@ (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d1ed      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4917      	ldr	r1, [pc, #92]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c6e:	4b13      	ldr	r3, [pc, #76]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490f      	ldr	r1, [pc, #60]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c82:	f000 f825 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490c      	ldr	r1, [pc, #48]	@ (8004cc4 <HAL_RCC_ClockConfig+0x26c>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc8 <HAL_RCC_ClockConfig+0x270>)
 8004ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <HAL_RCC_ClockConfig+0x274>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd fa4a 	bl	8002140 <HAL_InitTick>
 8004cac:	4603      	mov	r3, r0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40022000 	.word	0x40022000
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	04c4b400 	.word	0x04c4b400
 8004cc4:	080076e0 	.word	0x080076e0
 8004cc8:	20000030 	.word	0x20000030
 8004ccc:	20000034 	.word	0x20000034

08004cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	e047      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ce8:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cf4:	4b26      	ldr	r3, [pc, #152]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	e03e      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004cfa:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d136      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d06:	4b20      	ldr	r3, [pc, #128]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d10:	4b1d      	ldr	r3, [pc, #116]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d10c      	bne.n	8004d3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d24:	4a1a      	ldr	r2, [pc, #104]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	4a16      	ldr	r2, [pc, #88]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d2e:	68d2      	ldr	r2, [r2, #12]
 8004d30:	0a12      	lsrs	r2, r2, #8
 8004d32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	617b      	str	r3, [r7, #20]
      break;
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d3e:	4a13      	ldr	r2, [pc, #76]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d46:	4a10      	ldr	r2, [pc, #64]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d48:	68d2      	ldr	r2, [r2, #12]
 8004d4a:	0a12      	lsrs	r2, r2, #8
 8004d4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d50:	fb02 f303 	mul.w	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]
      break;
 8004d56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	0e5b      	lsrs	r3, r3, #25
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	3301      	adds	r3, #1
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	e001      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d78:	693b      	ldr	r3, [r7, #16]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	016e3600 	.word	0x016e3600

08004d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d98:	4b03      	ldr	r3, [pc, #12]	@ (8004da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000030 	.word	0x20000030

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004db0:	f7ff fff0 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4904      	ldr	r1, [pc, #16]	@ (8004dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	080076f0 	.word	0x080076f0

08004dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ddc:	f7ff ffda 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	0adb      	lsrs	r3, r3, #11
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	4904      	ldr	r1, [pc, #16]	@ (8004e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dee:	5ccb      	ldrb	r3, [r1, r3]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	080076f0 	.word	0x080076f0

08004e04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e14:	4b1b      	ldr	r3, [pc, #108]	@ (8004e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d10c      	bne.n	8004e42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e28:	4a17      	ldr	r2, [pc, #92]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	4a14      	ldr	r2, [pc, #80]	@ (8004e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e32:	68d2      	ldr	r2, [r2, #12]
 8004e34:	0a12      	lsrs	r2, r2, #8
 8004e36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	617b      	str	r3, [r7, #20]
    break;
 8004e40:	e00c      	b.n	8004e5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e42:	4a12      	ldr	r2, [pc, #72]	@ (8004e8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e4c:	68d2      	ldr	r2, [r2, #12]
 8004e4e:	0a12      	lsrs	r2, r2, #8
 8004e50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e54:	fb02 f303 	mul.w	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
    break;
 8004e5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e5c:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	0e5b      	lsrs	r3, r3, #25
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	3301      	adds	r3, #1
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e76:	687b      	ldr	r3, [r7, #4]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	40021000 	.word	0x40021000
 8004e88:	016e3600 	.word	0x016e3600
 8004e8c:	00f42400 	.word	0x00f42400

08004e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e98:	2300      	movs	r3, #0
 8004e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8098 	beq.w	8004fde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb2:	4b43      	ldr	r3, [pc, #268]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10d      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	4b40      	ldr	r3, [pc, #256]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eca:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eda:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a39      	ldr	r2, [pc, #228]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ee6:	f7fd f977 	bl	80021d8 <HAL_GetTick>
 8004eea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eec:	e009      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eee:	f7fd f973 	bl	80021d8 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d902      	bls.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	74fb      	strb	r3, [r7, #19]
        break;
 8004f00:	e005      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f02:	4b30      	ldr	r3, [pc, #192]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0ef      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f0e:	7cfb      	ldrb	r3, [r7, #19]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d159      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f14:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01e      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d019      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f30:	4b23      	ldr	r3, [pc, #140]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f3c:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f42:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f52:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f5c:	4a18      	ldr	r2, [pc, #96]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d016      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6e:	f7fd f933 	bl	80021d8 <HAL_GetTick>
 8004f72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f74:	e00b      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f76:	f7fd f92f 	bl	80021d8 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d902      	bls.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	74fb      	strb	r3, [r7, #19]
            break;
 8004f8c:	e006      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0ec      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f9c:	7cfb      	ldrb	r3, [r7, #19]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fa2:	4b07      	ldr	r3, [pc, #28]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb0:	4903      	ldr	r1, [pc, #12]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004fb8:	e008      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fba:	7cfb      	ldrb	r3, [r7, #19]
 8004fbc:	74bb      	strb	r3, [r7, #18]
 8004fbe:	e005      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fcc:	7c7b      	ldrb	r3, [r7, #17]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d105      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd2:	4ba7      	ldr	r3, [pc, #668]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd6:	4aa6      	ldr	r2, [pc, #664]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fdc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fea:	4ba1      	ldr	r3, [pc, #644]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff0:	f023 0203 	bic.w	r2, r3, #3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	499d      	ldr	r1, [pc, #628]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800500c:	4b98      	ldr	r3, [pc, #608]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005012:	f023 020c 	bic.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	4995      	ldr	r1, [pc, #596]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800502e:	4b90      	ldr	r3, [pc, #576]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005034:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	498c      	ldr	r1, [pc, #560]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005050:	4b87      	ldr	r3, [pc, #540]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005056:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	4984      	ldr	r1, [pc, #528]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005072:	4b7f      	ldr	r3, [pc, #508]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005078:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	497b      	ldr	r1, [pc, #492]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005094:	4b76      	ldr	r3, [pc, #472]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	4973      	ldr	r1, [pc, #460]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	496a      	ldr	r1, [pc, #424]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050d8:	4b65      	ldr	r3, [pc, #404]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	4962      	ldr	r1, [pc, #392]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	4959      	ldr	r1, [pc, #356]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800511c:	4b54      	ldr	r3, [pc, #336]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	4951      	ldr	r1, [pc, #324]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800513e:	4b4c      	ldr	r3, [pc, #304]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	4948      	ldr	r1, [pc, #288]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005160:	4b43      	ldr	r3, [pc, #268]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	4940      	ldr	r1, [pc, #256]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005180:	4b3b      	ldr	r3, [pc, #236]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a3a      	ldr	r2, [pc, #232]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800518a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005194:	2b00      	cmp	r3, #0
 8005196:	d015      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005198:	4b35      	ldr	r3, [pc, #212]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a6:	4932      	ldr	r1, [pc, #200]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051b6:	d105      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d015      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051d0:	4b27      	ldr	r3, [pc, #156]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051de:	4924      	ldr	r1, [pc, #144]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d015      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005208:	4b19      	ldr	r3, [pc, #100]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	4916      	ldr	r1, [pc, #88]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005226:	d105      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005228:	4b11      	ldr	r3, [pc, #68]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4a10      	ldr	r2, [pc, #64]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005232:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d019      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005240:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005246:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	4908      	ldr	r1, [pc, #32]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800525e:	d109      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005260:	4b03      	ldr	r3, [pc, #12]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4a02      	ldr	r2, [pc, #8]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800526a:	60d3      	str	r3, [r2, #12]
 800526c:	e002      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005280:	4b29      	ldr	r3, [pc, #164]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005286:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528e:	4926      	ldr	r1, [pc, #152]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800529e:	d105      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052a0:	4b21      	ldr	r3, [pc, #132]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a20      	ldr	r2, [pc, #128]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d015      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052be:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c6:	4918      	ldr	r1, [pc, #96]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d6:	d105      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052d8:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a12      	ldr	r2, [pc, #72]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fe:	490a      	ldr	r1, [pc, #40]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800530e:	d105      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a04      	ldr	r2, [pc, #16]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800531a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800531c:	7cbb      	ldrb	r3, [r7, #18]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000

0800532c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e049      	b.n	80053d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc fdda 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 fcde 	bl	8005d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d001      	beq.n	80053f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e04c      	b.n	800548e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a26      	ldr	r2, [pc, #152]	@ (800549c <HAL_TIM_Base_Start+0xc0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d022      	beq.n	800544c <HAL_TIM_Base_Start+0x70>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540e:	d01d      	beq.n	800544c <HAL_TIM_Base_Start+0x70>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a22      	ldr	r2, [pc, #136]	@ (80054a0 <HAL_TIM_Base_Start+0xc4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d018      	beq.n	800544c <HAL_TIM_Base_Start+0x70>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a21      	ldr	r2, [pc, #132]	@ (80054a4 <HAL_TIM_Base_Start+0xc8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d013      	beq.n	800544c <HAL_TIM_Base_Start+0x70>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1f      	ldr	r2, [pc, #124]	@ (80054a8 <HAL_TIM_Base_Start+0xcc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00e      	beq.n	800544c <HAL_TIM_Base_Start+0x70>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1e      	ldr	r2, [pc, #120]	@ (80054ac <HAL_TIM_Base_Start+0xd0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_TIM_Base_Start+0x70>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1c      	ldr	r2, [pc, #112]	@ (80054b0 <HAL_TIM_Base_Start+0xd4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_TIM_Base_Start+0x70>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1b      	ldr	r2, [pc, #108]	@ (80054b4 <HAL_TIM_Base_Start+0xd8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d115      	bne.n	8005478 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	4b19      	ldr	r3, [pc, #100]	@ (80054b8 <HAL_TIM_Base_Start+0xdc>)
 8005454:	4013      	ands	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b06      	cmp	r3, #6
 800545c:	d015      	beq.n	800548a <HAL_TIM_Base_Start+0xae>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005464:	d011      	beq.n	800548a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005476:	e008      	b.n	800548a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	e000      	b.n	800548c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40013400 	.word	0x40013400
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40015000 	.word	0x40015000
 80054b8:	00010007 	.word	0x00010007

080054bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d001      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e054      	b.n	800557e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a26      	ldr	r2, [pc, #152]	@ (800558c <HAL_TIM_Base_Start_IT+0xd0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fe:	d01d      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a22      	ldr	r2, [pc, #136]	@ (8005590 <HAL_TIM_Base_Start_IT+0xd4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a21      	ldr	r2, [pc, #132]	@ (8005594 <HAL_TIM_Base_Start_IT+0xd8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1f      	ldr	r2, [pc, #124]	@ (8005598 <HAL_TIM_Base_Start_IT+0xdc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1e      	ldr	r2, [pc, #120]	@ (800559c <HAL_TIM_Base_Start_IT+0xe0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1c      	ldr	r2, [pc, #112]	@ (80055a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d115      	bne.n	8005568 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <HAL_TIM_Base_Start_IT+0xec>)
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b06      	cmp	r3, #6
 800554c:	d015      	beq.n	800557a <HAL_TIM_Base_Start_IT+0xbe>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005554:	d011      	beq.n	800557a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005566:	e008      	b.n	800557a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e000      	b.n	800557c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40012c00 	.word	0x40012c00
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40013400 	.word	0x40013400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40015000 	.word	0x40015000
 80055a8:	00010007 	.word	0x00010007

080055ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e049      	b.n	8005652 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f841 	bl	800565a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f000 fb9e 	bl	8005d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e097      	b.n	80057b2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc fbf8 	bl	8001e8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80056b2:	f023 0307 	bic.w	r3, r3, #7
 80056b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f000 fb32 	bl	8005d2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f0:	f023 0303 	bic.w	r3, r3, #3
 80056f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	4313      	orrs	r3, r2
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800570e:	f023 030c 	bic.w	r3, r3, #12
 8005712:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800571a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800571e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	4313      	orrs	r3, r2
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	011a      	lsls	r2, r3, #4
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	4313      	orrs	r3, r2
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800574c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005754:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	4313      	orrs	r3, r2
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057ca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057d2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057da:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057e2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d110      	bne.n	800580c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d102      	bne.n	80057f6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f0:	7b7b      	ldrb	r3, [r7, #13]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d001      	beq.n	80057fa <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e069      	b.n	80058ce <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800580a:	e031      	b.n	8005870 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d110      	bne.n	8005834 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005812:	7bbb      	ldrb	r3, [r7, #14]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d102      	bne.n	800581e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005818:	7b3b      	ldrb	r3, [r7, #12]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d001      	beq.n	8005822 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e055      	b.n	80058ce <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005832:	e01d      	b.n	8005870 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d108      	bne.n	800584c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800583a:	7bbb      	ldrb	r3, [r7, #14]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d105      	bne.n	800584c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005840:	7b7b      	ldrb	r3, [r7, #13]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d102      	bne.n	800584c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005846:	7b3b      	ldrb	r3, [r7, #12]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d001      	beq.n	8005850 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e03e      	b.n	80058ce <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_Encoder_Start+0xc4>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b04      	cmp	r3, #4
 800587a:	d008      	beq.n	800588e <HAL_TIM_Encoder_Start+0xd4>
 800587c:	e00f      	b.n	800589e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2201      	movs	r2, #1
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f000 feca 	bl	8006620 <TIM_CCxChannelCmd>
      break;
 800588c:	e016      	b.n	80058bc <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2201      	movs	r2, #1
 8005894:	2104      	movs	r1, #4
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fec2 	bl	8006620 <TIM_CCxChannelCmd>
      break;
 800589c:	e00e      	b.n	80058bc <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2201      	movs	r2, #1
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 feba 	bl	8006620 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2201      	movs	r2, #1
 80058b2:	2104      	movs	r1, #4
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 feb3 	bl	8006620 <TIM_CCxChannelCmd>
      break;
 80058ba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e0ff      	b.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b14      	cmp	r3, #20
 8005902:	f200 80f0 	bhi.w	8005ae6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005906:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005961 	.word	0x08005961
 8005910:	08005ae7 	.word	0x08005ae7
 8005914:	08005ae7 	.word	0x08005ae7
 8005918:	08005ae7 	.word	0x08005ae7
 800591c:	080059a1 	.word	0x080059a1
 8005920:	08005ae7 	.word	0x08005ae7
 8005924:	08005ae7 	.word	0x08005ae7
 8005928:	08005ae7 	.word	0x08005ae7
 800592c:	080059e3 	.word	0x080059e3
 8005930:	08005ae7 	.word	0x08005ae7
 8005934:	08005ae7 	.word	0x08005ae7
 8005938:	08005ae7 	.word	0x08005ae7
 800593c:	08005a23 	.word	0x08005a23
 8005940:	08005ae7 	.word	0x08005ae7
 8005944:	08005ae7 	.word	0x08005ae7
 8005948:	08005ae7 	.word	0x08005ae7
 800594c:	08005a65 	.word	0x08005a65
 8005950:	08005ae7 	.word	0x08005ae7
 8005954:	08005ae7 	.word	0x08005ae7
 8005958:	08005ae7 	.word	0x08005ae7
 800595c:	08005aa5 	.word	0x08005aa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa94 	bl	8005e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0208 	orr.w	r2, r2, #8
 800597a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0204 	bic.w	r2, r2, #4
 800598a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6999      	ldr	r1, [r3, #24]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	619a      	str	r2, [r3, #24]
      break;
 800599e:	e0a5      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fb0e 	bl	8005fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	021a      	lsls	r2, r3, #8
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	619a      	str	r2, [r3, #24]
      break;
 80059e0:	e084      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fb81 	bl	80060f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0208 	orr.w	r2, r2, #8
 80059fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0204 	bic.w	r2, r2, #4
 8005a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69d9      	ldr	r1, [r3, #28]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	61da      	str	r2, [r3, #28]
      break;
 8005a20:	e064      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fbf3 	bl	8006214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69d9      	ldr	r1, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	021a      	lsls	r2, r3, #8
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	61da      	str	r2, [r3, #28]
      break;
 8005a62:	e043      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fc66 	bl	800633c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0208 	orr.w	r2, r2, #8
 8005a7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0204 	bic.w	r2, r2, #4
 8005a8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005aa2:	e023      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fcb0 	bl	8006410 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005abe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ace:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	021a      	lsls	r2, r3, #8
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005ae4:	e002      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop

08005b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_TIM_ConfigClockSource+0x1c>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e0f6      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x20a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005b3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a6f      	ldr	r2, [pc, #444]	@ (8005d14 <HAL_TIM_ConfigClockSource+0x214>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	f000 80c1 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005b5c:	4a6d      	ldr	r2, [pc, #436]	@ (8005d14 <HAL_TIM_ConfigClockSource+0x214>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	f200 80c6 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b64:	4a6c      	ldr	r2, [pc, #432]	@ (8005d18 <HAL_TIM_ConfigClockSource+0x218>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	f000 80b9 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8005d18 <HAL_TIM_ConfigClockSource+0x218>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	f200 80be 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b74:	4a69      	ldr	r2, [pc, #420]	@ (8005d1c <HAL_TIM_ConfigClockSource+0x21c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	f000 80b1 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005b7c:	4a67      	ldr	r2, [pc, #412]	@ (8005d1c <HAL_TIM_ConfigClockSource+0x21c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	f200 80b6 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b84:	4a66      	ldr	r2, [pc, #408]	@ (8005d20 <HAL_TIM_ConfigClockSource+0x220>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	f000 80a9 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005b8c:	4a64      	ldr	r2, [pc, #400]	@ (8005d20 <HAL_TIM_ConfigClockSource+0x220>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	f200 80ae 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b94:	4a63      	ldr	r2, [pc, #396]	@ (8005d24 <HAL_TIM_ConfigClockSource+0x224>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	f000 80a1 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005b9c:	4a61      	ldr	r2, [pc, #388]	@ (8005d24 <HAL_TIM_ConfigClockSource+0x224>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	f200 80a6 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ba4:	4a60      	ldr	r2, [pc, #384]	@ (8005d28 <HAL_TIM_ConfigClockSource+0x228>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f000 8099 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005bac:	4a5e      	ldr	r2, [pc, #376]	@ (8005d28 <HAL_TIM_ConfigClockSource+0x228>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	f200 809e 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005bb8:	f000 8091 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005bbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005bc0:	f200 8096 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bc8:	f000 8089 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005bcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bd0:	f200 808e 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd8:	d03e      	beq.n	8005c58 <HAL_TIM_ConfigClockSource+0x158>
 8005bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bde:	f200 8087 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be6:	f000 8086 	beq.w	8005cf6 <HAL_TIM_ConfigClockSource+0x1f6>
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bee:	d87f      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf0:	2b70      	cmp	r3, #112	@ 0x70
 8005bf2:	d01a      	beq.n	8005c2a <HAL_TIM_ConfigClockSource+0x12a>
 8005bf4:	2b70      	cmp	r3, #112	@ 0x70
 8005bf6:	d87b      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf8:	2b60      	cmp	r3, #96	@ 0x60
 8005bfa:	d050      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x19e>
 8005bfc:	2b60      	cmp	r3, #96	@ 0x60
 8005bfe:	d877      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c00:	2b50      	cmp	r3, #80	@ 0x50
 8005c02:	d03c      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x17e>
 8005c04:	2b50      	cmp	r3, #80	@ 0x50
 8005c06:	d873      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c08:	2b40      	cmp	r3, #64	@ 0x40
 8005c0a:	d058      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x1be>
 8005c0c:	2b40      	cmp	r3, #64	@ 0x40
 8005c0e:	d86f      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c10:	2b30      	cmp	r3, #48	@ 0x30
 8005c12:	d064      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005c14:	2b30      	cmp	r3, #48	@ 0x30
 8005c16:	d86b      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d060      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d867      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d05c      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005c24:	2b10      	cmp	r3, #16
 8005c26:	d05a      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1de>
 8005c28:	e062      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c3a:	f000 fcd1 	bl	80065e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	609a      	str	r2, [r3, #8]
      break;
 8005c56:	e04f      	b.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c68:	f000 fcba 	bl	80065e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c7a:	609a      	str	r2, [r3, #8]
      break;
 8005c7c:	e03c      	b.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f000 fc2c 	bl	80064e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2150      	movs	r1, #80	@ 0x50
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fc85 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8005c9c:	e02c      	b.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005caa:	461a      	mov	r2, r3
 8005cac:	f000 fc4b 	bl	8006546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2160      	movs	r1, #96	@ 0x60
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fc75 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8005cbc:	e01c      	b.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f000 fc0c 	bl	80064e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2140      	movs	r1, #64	@ 0x40
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fc65 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8005cdc:	e00c      	b.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f000 fc5c 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8005cee:	e003      	b.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf4:	e000      	b.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005cf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	00100070 	.word	0x00100070
 8005d18:	00100060 	.word	0x00100060
 8005d1c:	00100050 	.word	0x00100050
 8005d20:	00100040 	.word	0x00100040
 8005d24:	00100030 	.word	0x00100030
 8005d28:	00100020 	.word	0x00100020

08005d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a4c      	ldr	r2, [pc, #304]	@ (8005e70 <TIM_Base_SetConfig+0x144>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d017      	beq.n	8005d74 <TIM_Base_SetConfig+0x48>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4a:	d013      	beq.n	8005d74 <TIM_Base_SetConfig+0x48>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a49      	ldr	r2, [pc, #292]	@ (8005e74 <TIM_Base_SetConfig+0x148>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00f      	beq.n	8005d74 <TIM_Base_SetConfig+0x48>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a48      	ldr	r2, [pc, #288]	@ (8005e78 <TIM_Base_SetConfig+0x14c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <TIM_Base_SetConfig+0x48>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a47      	ldr	r2, [pc, #284]	@ (8005e7c <TIM_Base_SetConfig+0x150>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <TIM_Base_SetConfig+0x48>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a46      	ldr	r2, [pc, #280]	@ (8005e80 <TIM_Base_SetConfig+0x154>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_Base_SetConfig+0x48>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a45      	ldr	r2, [pc, #276]	@ (8005e84 <TIM_Base_SetConfig+0x158>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d108      	bne.n	8005d86 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a39      	ldr	r2, [pc, #228]	@ (8005e70 <TIM_Base_SetConfig+0x144>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d023      	beq.n	8005dd6 <TIM_Base_SetConfig+0xaa>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d94:	d01f      	beq.n	8005dd6 <TIM_Base_SetConfig+0xaa>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a36      	ldr	r2, [pc, #216]	@ (8005e74 <TIM_Base_SetConfig+0x148>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01b      	beq.n	8005dd6 <TIM_Base_SetConfig+0xaa>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a35      	ldr	r2, [pc, #212]	@ (8005e78 <TIM_Base_SetConfig+0x14c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d017      	beq.n	8005dd6 <TIM_Base_SetConfig+0xaa>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a34      	ldr	r2, [pc, #208]	@ (8005e7c <TIM_Base_SetConfig+0x150>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <TIM_Base_SetConfig+0xaa>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a33      	ldr	r2, [pc, #204]	@ (8005e80 <TIM_Base_SetConfig+0x154>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00f      	beq.n	8005dd6 <TIM_Base_SetConfig+0xaa>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a33      	ldr	r2, [pc, #204]	@ (8005e88 <TIM_Base_SetConfig+0x15c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <TIM_Base_SetConfig+0xaa>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a32      	ldr	r2, [pc, #200]	@ (8005e8c <TIM_Base_SetConfig+0x160>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <TIM_Base_SetConfig+0xaa>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a31      	ldr	r2, [pc, #196]	@ (8005e90 <TIM_Base_SetConfig+0x164>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_Base_SetConfig+0xaa>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005e84 <TIM_Base_SetConfig+0x158>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d108      	bne.n	8005de8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a18      	ldr	r2, [pc, #96]	@ (8005e70 <TIM_Base_SetConfig+0x144>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d013      	beq.n	8005e3c <TIM_Base_SetConfig+0x110>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a1a      	ldr	r2, [pc, #104]	@ (8005e80 <TIM_Base_SetConfig+0x154>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00f      	beq.n	8005e3c <TIM_Base_SetConfig+0x110>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e88 <TIM_Base_SetConfig+0x15c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00b      	beq.n	8005e3c <TIM_Base_SetConfig+0x110>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a19      	ldr	r2, [pc, #100]	@ (8005e8c <TIM_Base_SetConfig+0x160>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d007      	beq.n	8005e3c <TIM_Base_SetConfig+0x110>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a18      	ldr	r2, [pc, #96]	@ (8005e90 <TIM_Base_SetConfig+0x164>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_Base_SetConfig+0x110>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a13      	ldr	r2, [pc, #76]	@ (8005e84 <TIM_Base_SetConfig+0x158>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d103      	bne.n	8005e44 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d105      	bne.n	8005e62 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f023 0201 	bic.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	611a      	str	r2, [r3, #16]
  }
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40000800 	.word	0x40000800
 8005e7c:	40000c00 	.word	0x40000c00
 8005e80:	40013400 	.word	0x40013400
 8005e84:	40015000 	.word	0x40015000
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40014400 	.word	0x40014400
 8005e90:	40014800 	.word	0x40014800

08005e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f023 0201 	bic.w	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 0302 	bic.w	r3, r3, #2
 8005ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a30      	ldr	r2, [pc, #192]	@ (8005fb0 <TIM_OC1_SetConfig+0x11c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d013      	beq.n	8005f1c <TIM_OC1_SetConfig+0x88>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb4 <TIM_OC1_SetConfig+0x120>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00f      	beq.n	8005f1c <TIM_OC1_SetConfig+0x88>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb8 <TIM_OC1_SetConfig+0x124>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00b      	beq.n	8005f1c <TIM_OC1_SetConfig+0x88>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a2d      	ldr	r2, [pc, #180]	@ (8005fbc <TIM_OC1_SetConfig+0x128>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d007      	beq.n	8005f1c <TIM_OC1_SetConfig+0x88>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc0 <TIM_OC1_SetConfig+0x12c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_OC1_SetConfig+0x88>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc4 <TIM_OC1_SetConfig+0x130>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d10c      	bne.n	8005f36 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0308 	bic.w	r3, r3, #8
 8005f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 0304 	bic.w	r3, r3, #4
 8005f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb0 <TIM_OC1_SetConfig+0x11c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <TIM_OC1_SetConfig+0xd2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb4 <TIM_OC1_SetConfig+0x120>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00f      	beq.n	8005f66 <TIM_OC1_SetConfig+0xd2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb8 <TIM_OC1_SetConfig+0x124>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00b      	beq.n	8005f66 <TIM_OC1_SetConfig+0xd2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a1a      	ldr	r2, [pc, #104]	@ (8005fbc <TIM_OC1_SetConfig+0x128>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <TIM_OC1_SetConfig+0xd2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a19      	ldr	r2, [pc, #100]	@ (8005fc0 <TIM_OC1_SetConfig+0x12c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC1_SetConfig+0xd2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a18      	ldr	r2, [pc, #96]	@ (8005fc4 <TIM_OC1_SetConfig+0x130>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d111      	bne.n	8005f8a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	621a      	str	r2, [r3, #32]
}
 8005fa4:	bf00      	nop
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40013400 	.word	0x40013400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800
 8005fc4:	40015000 	.word	0x40015000

08005fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	f023 0210 	bic.w	r2, r3, #16
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4313      	orrs	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0320 	bic.w	r3, r3, #32
 8006016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a2c      	ldr	r2, [pc, #176]	@ (80060d8 <TIM_OC2_SetConfig+0x110>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d007      	beq.n	800603c <TIM_OC2_SetConfig+0x74>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a2b      	ldr	r2, [pc, #172]	@ (80060dc <TIM_OC2_SetConfig+0x114>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_OC2_SetConfig+0x74>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a2a      	ldr	r2, [pc, #168]	@ (80060e0 <TIM_OC2_SetConfig+0x118>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d10d      	bne.n	8006058 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006056:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a1f      	ldr	r2, [pc, #124]	@ (80060d8 <TIM_OC2_SetConfig+0x110>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <TIM_OC2_SetConfig+0xc0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a1e      	ldr	r2, [pc, #120]	@ (80060dc <TIM_OC2_SetConfig+0x114>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00f      	beq.n	8006088 <TIM_OC2_SetConfig+0xc0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a1e      	ldr	r2, [pc, #120]	@ (80060e4 <TIM_OC2_SetConfig+0x11c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00b      	beq.n	8006088 <TIM_OC2_SetConfig+0xc0>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <TIM_OC2_SetConfig+0x120>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_OC2_SetConfig+0xc0>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1c      	ldr	r2, [pc, #112]	@ (80060ec <TIM_OC2_SetConfig+0x124>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_OC2_SetConfig+0xc0>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a17      	ldr	r2, [pc, #92]	@ (80060e0 <TIM_OC2_SetConfig+0x118>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d113      	bne.n	80060b0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800608e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	621a      	str	r2, [r3, #32]
}
 80060ca:	bf00      	nop
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40013400 	.word	0x40013400
 80060e0:	40015000 	.word	0x40015000
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800

080060f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800611e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0303 	bic.w	r3, r3, #3
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800613c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2b      	ldr	r2, [pc, #172]	@ (80061fc <TIM_OC3_SetConfig+0x10c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d007      	beq.n	8006162 <TIM_OC3_SetConfig+0x72>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2a      	ldr	r2, [pc, #168]	@ (8006200 <TIM_OC3_SetConfig+0x110>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_OC3_SetConfig+0x72>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a29      	ldr	r2, [pc, #164]	@ (8006204 <TIM_OC3_SetConfig+0x114>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d10d      	bne.n	800617e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800617c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a1e      	ldr	r2, [pc, #120]	@ (80061fc <TIM_OC3_SetConfig+0x10c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <TIM_OC3_SetConfig+0xbe>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1d      	ldr	r2, [pc, #116]	@ (8006200 <TIM_OC3_SetConfig+0x110>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00f      	beq.n	80061ae <TIM_OC3_SetConfig+0xbe>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1d      	ldr	r2, [pc, #116]	@ (8006208 <TIM_OC3_SetConfig+0x118>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00b      	beq.n	80061ae <TIM_OC3_SetConfig+0xbe>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a1c      	ldr	r2, [pc, #112]	@ (800620c <TIM_OC3_SetConfig+0x11c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <TIM_OC3_SetConfig+0xbe>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006210 <TIM_OC3_SetConfig+0x120>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <TIM_OC3_SetConfig+0xbe>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a16      	ldr	r2, [pc, #88]	@ (8006204 <TIM_OC3_SetConfig+0x114>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d113      	bne.n	80061d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	621a      	str	r2, [r3, #32]
}
 80061f0:	bf00      	nop
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40013400 	.word	0x40013400
 8006204:	40015000 	.word	0x40015000
 8006208:	40014000 	.word	0x40014000
 800620c:	40014400 	.word	0x40014400
 8006210:	40014800 	.word	0x40014800

08006214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800624e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a2c      	ldr	r2, [pc, #176]	@ (8006324 <TIM_OC4_SetConfig+0x110>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d007      	beq.n	8006288 <TIM_OC4_SetConfig+0x74>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a2b      	ldr	r2, [pc, #172]	@ (8006328 <TIM_OC4_SetConfig+0x114>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_OC4_SetConfig+0x74>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a2a      	ldr	r2, [pc, #168]	@ (800632c <TIM_OC4_SetConfig+0x118>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d10d      	bne.n	80062a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800628e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	031b      	lsls	r3, r3, #12
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006324 <TIM_OC4_SetConfig+0x110>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d013      	beq.n	80062d4 <TIM_OC4_SetConfig+0xc0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006328 <TIM_OC4_SetConfig+0x114>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00f      	beq.n	80062d4 <TIM_OC4_SetConfig+0xc0>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006330 <TIM_OC4_SetConfig+0x11c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00b      	beq.n	80062d4 <TIM_OC4_SetConfig+0xc0>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a1d      	ldr	r2, [pc, #116]	@ (8006334 <TIM_OC4_SetConfig+0x120>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d007      	beq.n	80062d4 <TIM_OC4_SetConfig+0xc0>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <TIM_OC4_SetConfig+0x124>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_OC4_SetConfig+0xc0>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a17      	ldr	r2, [pc, #92]	@ (800632c <TIM_OC4_SetConfig+0x118>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d113      	bne.n	80062fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40013400 	.word	0x40013400
 800632c:	40015000 	.word	0x40015000
 8006330:	40014000 	.word	0x40014000
 8006334:	40014400 	.word	0x40014400
 8006338:	40014800 	.word	0x40014800

0800633c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006380:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a19      	ldr	r2, [pc, #100]	@ (80063f8 <TIM_OC5_SetConfig+0xbc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <TIM_OC5_SetConfig+0x82>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <TIM_OC5_SetConfig+0xc0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00f      	beq.n	80063be <TIM_OC5_SetConfig+0x82>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a17      	ldr	r2, [pc, #92]	@ (8006400 <TIM_OC5_SetConfig+0xc4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00b      	beq.n	80063be <TIM_OC5_SetConfig+0x82>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a16      	ldr	r2, [pc, #88]	@ (8006404 <TIM_OC5_SetConfig+0xc8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_OC5_SetConfig+0x82>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a15      	ldr	r2, [pc, #84]	@ (8006408 <TIM_OC5_SetConfig+0xcc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC5_SetConfig+0x82>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a14      	ldr	r2, [pc, #80]	@ (800640c <TIM_OC5_SetConfig+0xd0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d109      	bne.n	80063d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40013400 	.word	0x40013400
 8006400:	40014000 	.word	0x40014000
 8006404:	40014400 	.word	0x40014400
 8006408:	40014800 	.word	0x40014800
 800640c:	40015000 	.word	0x40015000

08006410 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800643e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	051b      	lsls	r3, r3, #20
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a1a      	ldr	r2, [pc, #104]	@ (80064d0 <TIM_OC6_SetConfig+0xc0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d013      	beq.n	8006494 <TIM_OC6_SetConfig+0x84>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a19      	ldr	r2, [pc, #100]	@ (80064d4 <TIM_OC6_SetConfig+0xc4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00f      	beq.n	8006494 <TIM_OC6_SetConfig+0x84>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a18      	ldr	r2, [pc, #96]	@ (80064d8 <TIM_OC6_SetConfig+0xc8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00b      	beq.n	8006494 <TIM_OC6_SetConfig+0x84>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a17      	ldr	r2, [pc, #92]	@ (80064dc <TIM_OC6_SetConfig+0xcc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_OC6_SetConfig+0x84>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a16      	ldr	r2, [pc, #88]	@ (80064e0 <TIM_OC6_SetConfig+0xd0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_OC6_SetConfig+0x84>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a15      	ldr	r2, [pc, #84]	@ (80064e4 <TIM_OC6_SetConfig+0xd4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d109      	bne.n	80064a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800649a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	029b      	lsls	r3, r3, #10
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40013400 	.word	0x40013400
 80064d8:	40014000 	.word	0x40014000
 80064dc:	40014400 	.word	0x40014400
 80064e0:	40014800 	.word	0x40014800
 80064e4:	40015000 	.word	0x40015000

080064e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f023 0201 	bic.w	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f023 030a 	bic.w	r3, r3, #10
 8006524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006546:	b480      	push	{r7}
 8006548:	b087      	sub	sp, #28
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f023 0210 	bic.w	r2, r3, #16
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	031b      	lsls	r3, r3, #12
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006582:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80065bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f043 0307 	orr.w	r3, r3, #7
 80065cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	609a      	str	r2, [r3, #8]
}
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	021a      	lsls	r2, r3, #8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	431a      	orrs	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	609a      	str	r2, [r3, #8]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	2201      	movs	r2, #1
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a1a      	ldr	r2, [r3, #32]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	43db      	mvns	r3, r3
 8006642:	401a      	ands	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1a      	ldr	r2, [r3, #32]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	431a      	orrs	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]
}
 800665e:	bf00      	nop
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006680:	2302      	movs	r3, #2
 8006682:	e074      	b.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a34      	ldr	r2, [pc, #208]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a33      	ldr	r2, [pc, #204]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a31      	ldr	r2, [pc, #196]	@ (8006784 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d108      	bne.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80066da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a21      	ldr	r2, [pc, #132]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d022      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006704:	d01d      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1f      	ldr	r2, [pc, #124]	@ (8006788 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d018      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1d      	ldr	r2, [pc, #116]	@ (800678c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1c      	ldr	r2, [pc, #112]	@ (8006790 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00e      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a15      	ldr	r2, [pc, #84]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a18      	ldr	r2, [pc, #96]	@ (8006794 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a11      	ldr	r2, [pc, #68]	@ (8006784 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10c      	bne.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	4313      	orrs	r3, r2
 8006752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40013400 	.word	0x40013400
 8006784:	40015000 	.word	0x40015000
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40014000 	.word	0x40014000

08006798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e042      	b.n	8006830 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fb facd 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2224      	movs	r2, #36	@ 0x24
 80067c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0201 	bic.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fbec 	bl	8006fc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f8ed 	bl	80069c8 <UART_SetConfig>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e01b      	b.n	8006830 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fc6b 	bl	8007104 <UART_CheckIdleState>
 800682e:	4603      	mov	r3, r0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	@ 0x28
 800683c:	af02      	add	r7, sp, #8
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800684e:	2b20      	cmp	r3, #32
 8006850:	f040 80b5 	bne.w	80069be <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_UART_Receive+0x28>
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e0ad      	b.n	80069c0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2222      	movs	r2, #34	@ 0x22
 8006870:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800687a:	f7fb fcad 	bl	80021d8 <HAL_GetTick>
 800687e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006898:	d10e      	bne.n	80068b8 <HAL_UART_Receive+0x80>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <HAL_UART_Receive+0x76>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80068a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068ac:	e02d      	b.n	800690a <HAL_UART_Receive+0xd2>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	22ff      	movs	r2, #255	@ 0xff
 80068b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068b6:	e028      	b.n	800690a <HAL_UART_Receive+0xd2>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10d      	bne.n	80068dc <HAL_UART_Receive+0xa4>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <HAL_UART_Receive+0x9a>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	22ff      	movs	r2, #255	@ 0xff
 80068cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068d0:	e01b      	b.n	800690a <HAL_UART_Receive+0xd2>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	227f      	movs	r2, #127	@ 0x7f
 80068d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068da:	e016      	b.n	800690a <HAL_UART_Receive+0xd2>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e4:	d10d      	bne.n	8006902 <HAL_UART_Receive+0xca>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d104      	bne.n	80068f8 <HAL_UART_Receive+0xc0>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	227f      	movs	r2, #127	@ 0x7f
 80068f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068f6:	e008      	b.n	800690a <HAL_UART_Receive+0xd2>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	223f      	movs	r2, #63	@ 0x3f
 80068fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006900:	e003      	b.n	800690a <HAL_UART_Receive+0xd2>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006910:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800691a:	d108      	bne.n	800692e <HAL_UART_Receive+0xf6>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	e003      	b.n	8006936 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006936:	e036      	b.n	80069a6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2200      	movs	r2, #0
 8006940:	2120      	movs	r1, #32
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fc88 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e032      	b.n	80069c0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10c      	bne.n	800697a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	b29a      	uxth	r2, r3
 8006968:	8a7b      	ldrh	r3, [r7, #18]
 800696a:	4013      	ands	r3, r2
 800696c:	b29a      	uxth	r2, r3
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	3302      	adds	r3, #2
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	e00c      	b.n	8006994 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	b2da      	uxtb	r2, r3
 8006982:	8a7b      	ldrh	r3, [r7, #18]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	4013      	ands	r3, r2
 8006988:	b2da      	uxtb	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	3301      	adds	r3, #1
 8006992:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1c2      	bne.n	8006938 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e000      	b.n	80069c0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069cc:	b08c      	sub	sp, #48	@ 0x30
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4baa      	ldr	r3, [pc, #680]	@ (8006ca0 <UART_SetConfig+0x2d8>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a9f      	ldr	r2, [pc, #636]	@ (8006ca4 <UART_SetConfig+0x2dc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a30:	4313      	orrs	r3, r2
 8006a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a3e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a52:	f023 010f 	bic.w	r1, r3, #15
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a90      	ldr	r2, [pc, #576]	@ (8006ca8 <UART_SetConfig+0x2e0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d125      	bne.n	8006ab8 <UART_SetConfig+0xf0>
 8006a6c:	4b8f      	ldr	r3, [pc, #572]	@ (8006cac <UART_SetConfig+0x2e4>)
 8006a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d81a      	bhi.n	8006ab0 <UART_SetConfig+0xe8>
 8006a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <UART_SetConfig+0xb8>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006a91 	.word	0x08006a91
 8006a84:	08006aa1 	.word	0x08006aa1
 8006a88:	08006a99 	.word	0x08006a99
 8006a8c:	08006aa9 	.word	0x08006aa9
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e116      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9e:	e112      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006aa0:	2304      	movs	r3, #4
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa6:	e10e      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006aa8:	2308      	movs	r3, #8
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e10a      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab6:	e106      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a7c      	ldr	r2, [pc, #496]	@ (8006cb0 <UART_SetConfig+0x2e8>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d138      	bne.n	8006b34 <UART_SetConfig+0x16c>
 8006ac2:	4b7a      	ldr	r3, [pc, #488]	@ (8006cac <UART_SetConfig+0x2e4>)
 8006ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac8:	f003 030c 	and.w	r3, r3, #12
 8006acc:	2b0c      	cmp	r3, #12
 8006ace:	d82d      	bhi.n	8006b2c <UART_SetConfig+0x164>
 8006ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <UART_SetConfig+0x110>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006b0d 	.word	0x08006b0d
 8006adc:	08006b2d 	.word	0x08006b2d
 8006ae0:	08006b2d 	.word	0x08006b2d
 8006ae4:	08006b2d 	.word	0x08006b2d
 8006ae8:	08006b1d 	.word	0x08006b1d
 8006aec:	08006b2d 	.word	0x08006b2d
 8006af0:	08006b2d 	.word	0x08006b2d
 8006af4:	08006b2d 	.word	0x08006b2d
 8006af8:	08006b15 	.word	0x08006b15
 8006afc:	08006b2d 	.word	0x08006b2d
 8006b00:	08006b2d 	.word	0x08006b2d
 8006b04:	08006b2d 	.word	0x08006b2d
 8006b08:	08006b25 	.word	0x08006b25
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b12:	e0d8      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b14:	2302      	movs	r3, #2
 8006b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1a:	e0d4      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b22:	e0d0      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b24:	2308      	movs	r3, #8
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2a:	e0cc      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b2c:	2310      	movs	r3, #16
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b32:	e0c8      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a5e      	ldr	r2, [pc, #376]	@ (8006cb4 <UART_SetConfig+0x2ec>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d125      	bne.n	8006b8a <UART_SetConfig+0x1c2>
 8006b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8006cac <UART_SetConfig+0x2e4>)
 8006b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b48:	2b30      	cmp	r3, #48	@ 0x30
 8006b4a:	d016      	beq.n	8006b7a <UART_SetConfig+0x1b2>
 8006b4c:	2b30      	cmp	r3, #48	@ 0x30
 8006b4e:	d818      	bhi.n	8006b82 <UART_SetConfig+0x1ba>
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d00a      	beq.n	8006b6a <UART_SetConfig+0x1a2>
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d814      	bhi.n	8006b82 <UART_SetConfig+0x1ba>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <UART_SetConfig+0x19a>
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d008      	beq.n	8006b72 <UART_SetConfig+0x1aa>
 8006b60:	e00f      	b.n	8006b82 <UART_SetConfig+0x1ba>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b68:	e0ad      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b70:	e0a9      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b72:	2304      	movs	r3, #4
 8006b74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b78:	e0a5      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b7a:	2308      	movs	r3, #8
 8006b7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b80:	e0a1      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b82:	2310      	movs	r3, #16
 8006b84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b88:	e09d      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a4a      	ldr	r2, [pc, #296]	@ (8006cb8 <UART_SetConfig+0x2f0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d125      	bne.n	8006be0 <UART_SetConfig+0x218>
 8006b94:	4b45      	ldr	r3, [pc, #276]	@ (8006cac <UART_SetConfig+0x2e4>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ba0:	d016      	beq.n	8006bd0 <UART_SetConfig+0x208>
 8006ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ba4:	d818      	bhi.n	8006bd8 <UART_SetConfig+0x210>
 8006ba6:	2b80      	cmp	r3, #128	@ 0x80
 8006ba8:	d00a      	beq.n	8006bc0 <UART_SetConfig+0x1f8>
 8006baa:	2b80      	cmp	r3, #128	@ 0x80
 8006bac:	d814      	bhi.n	8006bd8 <UART_SetConfig+0x210>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <UART_SetConfig+0x1f0>
 8006bb2:	2b40      	cmp	r3, #64	@ 0x40
 8006bb4:	d008      	beq.n	8006bc8 <UART_SetConfig+0x200>
 8006bb6:	e00f      	b.n	8006bd8 <UART_SetConfig+0x210>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e082      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc6:	e07e      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bce:	e07a      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd6:	e076      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bde:	e072      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a35      	ldr	r2, [pc, #212]	@ (8006cbc <UART_SetConfig+0x2f4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d12a      	bne.n	8006c40 <UART_SetConfig+0x278>
 8006bea:	4b30      	ldr	r3, [pc, #192]	@ (8006cac <UART_SetConfig+0x2e4>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bf8:	d01a      	beq.n	8006c30 <UART_SetConfig+0x268>
 8006bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bfe:	d81b      	bhi.n	8006c38 <UART_SetConfig+0x270>
 8006c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c04:	d00c      	beq.n	8006c20 <UART_SetConfig+0x258>
 8006c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c0a:	d815      	bhi.n	8006c38 <UART_SetConfig+0x270>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <UART_SetConfig+0x250>
 8006c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c14:	d008      	beq.n	8006c28 <UART_SetConfig+0x260>
 8006c16:	e00f      	b.n	8006c38 <UART_SetConfig+0x270>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1e:	e052      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006c20:	2302      	movs	r3, #2
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c26:	e04e      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2e:	e04a      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006c30:	2308      	movs	r3, #8
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c36:	e046      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c3e:	e042      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a17      	ldr	r2, [pc, #92]	@ (8006ca4 <UART_SetConfig+0x2dc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d13a      	bne.n	8006cc0 <UART_SetConfig+0x2f8>
 8006c4a:	4b18      	ldr	r3, [pc, #96]	@ (8006cac <UART_SetConfig+0x2e4>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c58:	d01a      	beq.n	8006c90 <UART_SetConfig+0x2c8>
 8006c5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c5e:	d81b      	bhi.n	8006c98 <UART_SetConfig+0x2d0>
 8006c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c64:	d00c      	beq.n	8006c80 <UART_SetConfig+0x2b8>
 8006c66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c6a:	d815      	bhi.n	8006c98 <UART_SetConfig+0x2d0>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <UART_SetConfig+0x2b0>
 8006c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c74:	d008      	beq.n	8006c88 <UART_SetConfig+0x2c0>
 8006c76:	e00f      	b.n	8006c98 <UART_SetConfig+0x2d0>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7e:	e022      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006c80:	2302      	movs	r3, #2
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	e01e      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8e:	e01a      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c96:	e016      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c9e:	e012      	b.n	8006cc6 <UART_SetConfig+0x2fe>
 8006ca0:	cfff69f3 	.word	0xcfff69f3
 8006ca4:	40008000 	.word	0x40008000
 8006ca8:	40013800 	.word	0x40013800
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	40004400 	.word	0x40004400
 8006cb4:	40004800 	.word	0x40004800
 8006cb8:	40004c00 	.word	0x40004c00
 8006cbc:	40005000 	.word	0x40005000
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4aae      	ldr	r2, [pc, #696]	@ (8006f84 <UART_SetConfig+0x5bc>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	f040 8097 	bne.w	8006e00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d823      	bhi.n	8006d22 <UART_SetConfig+0x35a>
 8006cda:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce0 <UART_SetConfig+0x318>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006d05 	.word	0x08006d05
 8006ce4:	08006d23 	.word	0x08006d23
 8006ce8:	08006d0d 	.word	0x08006d0d
 8006cec:	08006d23 	.word	0x08006d23
 8006cf0:	08006d13 	.word	0x08006d13
 8006cf4:	08006d23 	.word	0x08006d23
 8006cf8:	08006d23 	.word	0x08006d23
 8006cfc:	08006d23 	.word	0x08006d23
 8006d00:	08006d1b 	.word	0x08006d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d04:	f7fe f852 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8006d08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d0a:	e010      	b.n	8006d2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d0c:	4b9e      	ldr	r3, [pc, #632]	@ (8006f88 <UART_SetConfig+0x5c0>)
 8006d0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d10:	e00d      	b.n	8006d2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d12:	f7fd ffdd 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006d16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d18:	e009      	b.n	8006d2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d20:	e005      	b.n	8006d2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8130 	beq.w	8006f96 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3a:	4a94      	ldr	r2, [pc, #592]	@ (8006f8c <UART_SetConfig+0x5c4>)
 8006d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	4413      	add	r3, r2
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d305      	bcc.n	8006d66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d903      	bls.n	8006d6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d6c:	e113      	b.n	8006f96 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	2200      	movs	r2, #0
 8006d72:	60bb      	str	r3, [r7, #8]
 8006d74:	60fa      	str	r2, [r7, #12]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	4a84      	ldr	r2, [pc, #528]	@ (8006f8c <UART_SetConfig+0x5c4>)
 8006d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2200      	movs	r2, #0
 8006d84:	603b      	str	r3, [r7, #0]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d90:	f7f9 fe88 	bl	8000aa4 <__aeabi_uldivmod>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4610      	mov	r0, r2
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	020b      	lsls	r3, r1, #8
 8006da6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006daa:	0202      	lsls	r2, r0, #8
 8006dac:	6979      	ldr	r1, [r7, #20]
 8006dae:	6849      	ldr	r1, [r1, #4]
 8006db0:	0849      	lsrs	r1, r1, #1
 8006db2:	2000      	movs	r0, #0
 8006db4:	460c      	mov	r4, r1
 8006db6:	4605      	mov	r5, r0
 8006db8:	eb12 0804 	adds.w	r8, r2, r4
 8006dbc:	eb43 0905 	adc.w	r9, r3, r5
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	469a      	mov	sl, r3
 8006dc8:	4693      	mov	fp, r2
 8006dca:	4652      	mov	r2, sl
 8006dcc:	465b      	mov	r3, fp
 8006dce:	4640      	mov	r0, r8
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	f7f9 fe67 	bl	8000aa4 <__aeabi_uldivmod>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4613      	mov	r3, r2
 8006ddc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006de4:	d308      	bcc.n	8006df8 <UART_SetConfig+0x430>
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dec:	d204      	bcs.n	8006df8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	60da      	str	r2, [r3, #12]
 8006df6:	e0ce      	b.n	8006f96 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dfe:	e0ca      	b.n	8006f96 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e08:	d166      	bne.n	8006ed8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d827      	bhi.n	8006e62 <UART_SetConfig+0x49a>
 8006e12:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <UART_SetConfig+0x450>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	08006e45 	.word	0x08006e45
 8006e20:	08006e4d 	.word	0x08006e4d
 8006e24:	08006e63 	.word	0x08006e63
 8006e28:	08006e53 	.word	0x08006e53
 8006e2c:	08006e63 	.word	0x08006e63
 8006e30:	08006e63 	.word	0x08006e63
 8006e34:	08006e63 	.word	0x08006e63
 8006e38:	08006e5b 	.word	0x08006e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e3c:	f7fd ffb6 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8006e40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e42:	e014      	b.n	8006e6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e44:	f7fd ffc8 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 8006e48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e4a:	e010      	b.n	8006e6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8006f88 <UART_SetConfig+0x5c0>)
 8006e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e50:	e00d      	b.n	8006e6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e52:	f7fd ff3d 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006e56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e58:	e009      	b.n	8006e6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e60:	e005      	b.n	8006e6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8090 	beq.w	8006f96 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	4a44      	ldr	r2, [pc, #272]	@ (8006f8c <UART_SetConfig+0x5c4>)
 8006e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e88:	005a      	lsls	r2, r3, #1
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	441a      	add	r2, r3
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	d916      	bls.n	8006ed0 <UART_SetConfig+0x508>
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea8:	d212      	bcs.n	8006ed0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f023 030f 	bic.w	r3, r3, #15
 8006eb2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	085b      	lsrs	r3, r3, #1
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	8bfb      	ldrh	r3, [r7, #30]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	8bfa      	ldrh	r2, [r7, #30]
 8006ecc:	60da      	str	r2, [r3, #12]
 8006ece:	e062      	b.n	8006f96 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ed6:	e05e      	b.n	8006f96 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d828      	bhi.n	8006f32 <UART_SetConfig+0x56a>
 8006ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee8 <UART_SetConfig+0x520>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006f0d 	.word	0x08006f0d
 8006eec:	08006f15 	.word	0x08006f15
 8006ef0:	08006f1d 	.word	0x08006f1d
 8006ef4:	08006f33 	.word	0x08006f33
 8006ef8:	08006f23 	.word	0x08006f23
 8006efc:	08006f33 	.word	0x08006f33
 8006f00:	08006f33 	.word	0x08006f33
 8006f04:	08006f33 	.word	0x08006f33
 8006f08:	08006f2b 	.word	0x08006f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f0c:	f7fd ff4e 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8006f10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f12:	e014      	b.n	8006f3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f14:	f7fd ff60 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 8006f18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f1a:	e010      	b.n	8006f3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f88 <UART_SetConfig+0x5c0>)
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f20:	e00d      	b.n	8006f3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f22:	f7fd fed5 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006f26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f28:	e009      	b.n	8006f3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f30:	e005      	b.n	8006f3e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d028      	beq.n	8006f96 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	4a10      	ldr	r2, [pc, #64]	@ (8006f8c <UART_SetConfig+0x5c4>)
 8006f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	441a      	add	r2, r3
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2b0f      	cmp	r3, #15
 8006f6c:	d910      	bls.n	8006f90 <UART_SetConfig+0x5c8>
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f74:	d20c      	bcs.n	8006f90 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60da      	str	r2, [r3, #12]
 8006f80:	e009      	b.n	8006f96 <UART_SetConfig+0x5ce>
 8006f82:	bf00      	nop
 8006f84:	40008000 	.word	0x40008000
 8006f88:	00f42400 	.word	0x00f42400
 8006f8c:	080076f8 	.word	0x080076f8
      }
      else
      {
        ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fb2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3730      	adds	r7, #48	@ 0x30
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070be:	d10a      	bne.n	80070d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b098      	sub	sp, #96	@ 0x60
 8007108:	af02      	add	r7, sp, #8
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007114:	f7fb f860 	bl	80021d8 <HAL_GetTick>
 8007118:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b08      	cmp	r3, #8
 8007126:	d12f      	bne.n	8007188 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007128:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007130:	2200      	movs	r2, #0
 8007132:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f88e 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d022      	beq.n	8007188 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007156:	653b      	str	r3, [r7, #80]	@ 0x50
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007160:	647b      	str	r3, [r7, #68]	@ 0x44
 8007162:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800716e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e6      	bne.n	8007142 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e063      	b.n	8007250 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0304 	and.w	r3, r3, #4
 8007192:	2b04      	cmp	r3, #4
 8007194:	d149      	bne.n	800722a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007196:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800719e:	2200      	movs	r2, #0
 80071a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f857 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d03c      	beq.n	800722a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	623b      	str	r3, [r7, #32]
   return(result);
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80071d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e6      	bne.n	80071b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 0301 	bic.w	r3, r3, #1
 80071f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007202:	61fa      	str	r2, [r7, #28]
 8007204:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	69b9      	ldr	r1, [r7, #24]
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	617b      	str	r3, [r7, #20]
   return(result);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e5      	bne.n	80071e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e012      	b.n	8007250 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3758      	adds	r7, #88	@ 0x58
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	4613      	mov	r3, r2
 8007266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007268:	e04f      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d04b      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007272:	f7fa ffb1 	bl	80021d8 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	429a      	cmp	r2, r3
 8007280:	d302      	bcc.n	8007288 <UART_WaitOnFlagUntilTimeout+0x30>
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e04e      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	d037      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b80      	cmp	r3, #128	@ 0x80
 800729e:	d034      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b40      	cmp	r3, #64	@ 0x40
 80072a4:	d031      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d110      	bne.n	80072d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2208      	movs	r2, #8
 80072ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f838 	bl	8007332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2208      	movs	r2, #8
 80072c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e029      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e4:	d111      	bne.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f81e 	bl	8007332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e00f      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4013      	ands	r3, r2
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	429a      	cmp	r2, r3
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	461a      	mov	r2, r3
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	429a      	cmp	r2, r3
 8007326:	d0a0      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007332:	b480      	push	{r7}
 8007334:	b095      	sub	sp, #84	@ 0x54
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800734e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007358:	643b      	str	r3, [r7, #64]	@ 0x40
 800735a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800735e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e6      	bne.n	800733a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	61fb      	str	r3, [r7, #28]
   return(result);
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3308      	adds	r3, #8
 800738e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007390:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007392:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e3      	bne.n	800736c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d118      	bne.n	80073de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f023 0310 	bic.w	r3, r3, #16
 80073c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6979      	ldr	r1, [r7, #20]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	613b      	str	r3, [r7, #16]
   return(result);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e6      	bne.n	80073ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073f2:	bf00      	nop
 80073f4:	3754      	adds	r7, #84	@ 0x54
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_UARTEx_DisableFifoMode+0x16>
 8007410:	2302      	movs	r3, #2
 8007412:	e027      	b.n	8007464 <HAL_UARTEx_DisableFifoMode+0x66>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2224      	movs	r2, #36	@ 0x24
 8007420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0201 	bic.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007442:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007484:	2302      	movs	r3, #2
 8007486:	e02d      	b.n	80074e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2224      	movs	r2, #36	@ 0x24
 8007494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0201 	bic.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f84f 	bl	8007568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007500:	2302      	movs	r3, #2
 8007502:	e02d      	b.n	8007560 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2224      	movs	r2, #36	@ 0x24
 8007510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0201 	bic.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f811 	bl	8007568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007574:	2b00      	cmp	r3, #0
 8007576:	d108      	bne.n	800758a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007588:	e031      	b.n	80075ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800758a:	2308      	movs	r3, #8
 800758c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800758e:	2308      	movs	r3, #8
 8007590:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	0e5b      	lsrs	r3, r3, #25
 800759a:	b2db      	uxtb	r3, r3
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	0f5b      	lsrs	r3, r3, #29
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	7b3a      	ldrb	r2, [r7, #12]
 80075b6:	4911      	ldr	r1, [pc, #68]	@ (80075fc <UARTEx_SetNbDataToProcess+0x94>)
 80075b8:	5c8a      	ldrb	r2, [r1, r2]
 80075ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075be:	7b3a      	ldrb	r2, [r7, #12]
 80075c0:	490f      	ldr	r1, [pc, #60]	@ (8007600 <UARTEx_SetNbDataToProcess+0x98>)
 80075c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	7b7a      	ldrb	r2, [r7, #13]
 80075d4:	4909      	ldr	r1, [pc, #36]	@ (80075fc <UARTEx_SetNbDataToProcess+0x94>)
 80075d6:	5c8a      	ldrb	r2, [r1, r2]
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075dc:	7b7a      	ldrb	r2, [r7, #13]
 80075de:	4908      	ldr	r1, [pc, #32]	@ (8007600 <UARTEx_SetNbDataToProcess+0x98>)
 80075e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	08007710 	.word	0x08007710
 8007600:	08007718 	.word	0x08007718

08007604 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	ed93 7a06 	vldr	s14, [r3, #24]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	edd3 7a07 	vldr	s15, [r3, #28]
 800761a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	edd3 7a08 	vldr	s15, [r3, #32]
 8007624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	edd3 7a06 	vldr	s15, [r3, #24]
 8007634:	eeb1 7a67 	vneg.f32	s14, s15
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	edd3 7a08 	vldr	s15, [r3, #32]
 800763e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1a      	ldr	r2, [r3, #32]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d006      	beq.n	8007668 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	330c      	adds	r3, #12
 800765e:	220c      	movs	r2, #12
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f804 	bl	8007670 <memset>
  }

}
 8007668:	bf00      	nop
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <memset>:
 8007670:	4402      	add	r2, r0
 8007672:	4603      	mov	r3, r0
 8007674:	4293      	cmp	r3, r2
 8007676:	d100      	bne.n	800767a <memset+0xa>
 8007678:	4770      	bx	lr
 800767a:	f803 1b01 	strb.w	r1, [r3], #1
 800767e:	e7f9      	b.n	8007674 <memset+0x4>

08007680 <__libc_init_array>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	4d0d      	ldr	r5, [pc, #52]	@ (80076b8 <__libc_init_array+0x38>)
 8007684:	4c0d      	ldr	r4, [pc, #52]	@ (80076bc <__libc_init_array+0x3c>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	2600      	movs	r6, #0
 800768c:	42a6      	cmp	r6, r4
 800768e:	d109      	bne.n	80076a4 <__libc_init_array+0x24>
 8007690:	4d0b      	ldr	r5, [pc, #44]	@ (80076c0 <__libc_init_array+0x40>)
 8007692:	4c0c      	ldr	r4, [pc, #48]	@ (80076c4 <__libc_init_array+0x44>)
 8007694:	f000 f818 	bl	80076c8 <_init>
 8007698:	1b64      	subs	r4, r4, r5
 800769a:	10a4      	asrs	r4, r4, #2
 800769c:	2600      	movs	r6, #0
 800769e:	42a6      	cmp	r6, r4
 80076a0:	d105      	bne.n	80076ae <__libc_init_array+0x2e>
 80076a2:	bd70      	pop	{r4, r5, r6, pc}
 80076a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a8:	4798      	blx	r3
 80076aa:	3601      	adds	r6, #1
 80076ac:	e7ee      	b.n	800768c <__libc_init_array+0xc>
 80076ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b2:	4798      	blx	r3
 80076b4:	3601      	adds	r6, #1
 80076b6:	e7f2      	b.n	800769e <__libc_init_array+0x1e>
 80076b8:	08007728 	.word	0x08007728
 80076bc:	08007728 	.word	0x08007728
 80076c0:	08007728 	.word	0x08007728
 80076c4:	0800772c 	.word	0x0800772c

080076c8 <_init>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	bf00      	nop
 80076cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ce:	bc08      	pop	{r3}
 80076d0:	469e      	mov	lr, r3
 80076d2:	4770      	bx	lr

080076d4 <_fini>:
 80076d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d6:	bf00      	nop
 80076d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076da:	bc08      	pop	{r3}
 80076dc:	469e      	mov	lr, r3
 80076de:	4770      	bx	lr
