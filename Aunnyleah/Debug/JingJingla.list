
JingJingla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009258  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08009430  08009430  0000a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009518  08009518  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009518  08009518  0000a518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009520  08009520  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009520  08009520  0000a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009524  08009524  0000a524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009528  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  20000078  080095a0  0000b078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014d4  080095a0  0000b4d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef2e  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ea  00000000  00000000  00029fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0002d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101f  00000000  00000000  0002eb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028388  00000000  00000000  0002fb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4ee  00000000  00000000  00057ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffd70  00000000  00000000  000763e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176155  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b94  00000000  00000000  00176198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017bd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009418 	.word	0x08009418

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08009418 	.word	0x08009418

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <Base_init>:

u16u8_t registerFrame[200];

//------------ Function ------------//
void Base_init(BaseStruct* Base)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	Base->bStatus = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	801a      	strh	r2, [r3, #0]
	Base->PositionZ = 0;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
	Base->PositionX = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
	Base->Speed = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
	Base->Acc = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
	Base->Vacuum = 0;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	829a      	strh	r2, [r3, #20]
	Base->Gripper = 0;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	82da      	strh	r2, [r3, #22]
	Base->ShelveMode = 0; 	//for ps2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	831a      	strh	r2, [r3, #24]
	Base->Shelve[5] = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	631a      	str	r2, [r3, #48]	@ 0x30
//	Base-> PointMode;
	Base->GoalPoint = 0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	861a      	strh	r2, [r3, #48]	@ 0x30
	Base->Pick = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	865a      	strh	r2, [r3, #50]	@ 0x32
	Base->Place = 0;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	869a      	strh	r2, [r3, #52]	@ 0x34
	Base->bS = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	86da      	strh	r2, [r3, #54]	@ 0x36
	Base->vS = 0;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	871a      	strh	r2, [r3, #56]	@ 0x38
	Base->gmS = 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	875a      	strh	r2, [r3, #58]	@ 0x3a
	Base->gmaS = 0;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	879a      	strh	r2, [r3, #60]	@ 0x3c
	Base->zmS = 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	87da      	strh	r2, [r3, #62]	@ 0x3e

// for testing
	Base->sw = 0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	Base->swp = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	Base->sh = 0;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	Base->sp = 0;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <AMT_encoder_init>:
int32_t diffPosition;
float diffTime;
float ALPHA = 0.3f;

void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800118a:	213c      	movs	r1, #60	@ 0x3c
 800118c:	4618      	mov	r0, r3
 800118e:	f004 fdf7 	bl	8005d80 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 10.0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	220a      	movs	r2, #10
 8001196:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 10.0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	220a      	movs	r2, #10
 800119c:	605a      	str	r2, [r3, #4]
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <AMT_encoder_update>:

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 80011a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	e9c7 2300 	strd	r2, r3, [r7]
	//collect data
	AMT_data->TimeStamp[QEI_NOW] = current_time;
 80011b8:	68f9      	ldr	r1, [r7, #12]
 80011ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011be:	e9c1 2302 	strd	r2, r3, [r1, #8]
	AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	601a      	str	r2, [r3, #0]

	//Postion 1 turn calculation
	AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a6d      	ldr	r2, [pc, #436]	@ (8001388 <AMT_encoder_update+0x1e0>)
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80011d8:	fb01 f202 	mul.w	r2, r1, r2
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	621a      	str	r2, [r3, #32]

	//calculate dx
	diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b66      	ldr	r3, [pc, #408]	@ (800138c <AMT_encoder_update+0x1e4>)
 80011f2:	601a      	str	r2, [r3, #0]

	//Handle Warp around
	if(diffPosition > 32767)
 80011f4:	4b65      	ldr	r3, [pc, #404]	@ (800138c <AMT_encoder_update+0x1e4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011fc:	db06      	blt.n	800120c <AMT_encoder_update+0x64>
		diffPosition -= 65535;
 80011fe:	4b63      	ldr	r3, [pc, #396]	@ (800138c <AMT_encoder_update+0x1e4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001206:	3bff      	subs	r3, #255	@ 0xff
 8001208:	4a60      	ldr	r2, [pc, #384]	@ (800138c <AMT_encoder_update+0x1e4>)
 800120a:	6013      	str	r3, [r2, #0]
	if(diffPosition < -32767)
 800120c:	4b5f      	ldr	r3, [pc, #380]	@ (800138c <AMT_encoder_update+0x1e4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001214:	dc06      	bgt.n	8001224 <AMT_encoder_update+0x7c>
		diffPosition += 65535;
 8001216:	4b5d      	ldr	r3, [pc, #372]	@ (800138c <AMT_encoder_update+0x1e4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800121e:	33ff      	adds	r3, #255	@ 0xff
 8001220:	4a5a      	ldr	r2, [pc, #360]	@ (800138c <AMT_encoder_update+0x1e4>)
 8001222:	6013      	str	r3, [r2, #0]

	//calculate dt
	diffTime = (AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV] );
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001230:	1a84      	subs	r4, r0, r2
 8001232:	eb61 0503 	sbc.w	r5, r1, r3
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff fd91 	bl	8000d60 <__aeabi_ul2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4a53      	ldr	r2, [pc, #332]	@ (8001390 <AMT_encoder_update+0x1e8>)
 8001242:	6013      	str	r3, [r2, #0]

	//calculate anglar velocity
	float Vin = (PID_velo.out/1000)*24;
 8001244:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <AMT_encoder_update+0x1ec>)
 8001246:	ed93 7a06 	vldr	s14, [r3, #24]
 800124a:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8001398 <AMT_encoder_update+0x1f0>
 800124e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001252:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125a:	edc7 7a05 	vstr	s15, [r7, #20]
//	AMT_data->Angular_Velocity = lowPassFilter(SteadyStateKalmanFilter(&Vel_filtered,Vin, (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6))));	//RPM
	AMT_data->Angular_Velocity = lowPassFilter((&Vel_filtered,Vin, (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6))));	//RPM
 800125e:	4b4b      	ldr	r3, [pc, #300]	@ (800138c <AMT_encoder_update+0x1e4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f92a 	bl	80004bc <__aeabi_i2d>
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b4b      	ldr	r3, [pc, #300]	@ (800139c <AMT_encoder_update+0x1f4>)
 800126e:	f7ff f98f 	bl	8000590 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4690      	mov	r8, r2
 8001278:	4699      	mov	r9, r3
 800127a:	4b43      	ldr	r3, [pc, #268]	@ (8001388 <AMT_encoder_update+0x1e0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f90c 	bl	800049c <__aeabi_ui2d>
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	4b41      	ldr	r3, [pc, #260]	@ (8001390 <AMT_encoder_update+0x1e8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f927 	bl	80004e0 <__aeabi_f2d>
 8001292:	a33b      	add	r3, pc, #236	@ (adr r3, 8001380 <AMT_encoder_update+0x1d8>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff faa4 	bl	80007e4 <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f7ff f974 	bl	8000590 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4640      	mov	r0, r8
 80012ae:	4649      	mov	r1, r9
 80012b0:	f7ff fa98 	bl	80007e4 <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc38 	bl	8000b30 <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	ee00 3a10 	vmov	s0, r3
 80012c6:	f000 f86d 	bl	80013a4 <lowPassFilter>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	AMT_data->Linear_Position += (diffPosition*pulley_cir)/cnt_per_rev;			//mm
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80012da:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <AMT_encoder_update+0x1e4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012e6:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <AMT_encoder_update+0x1f8>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <AMT_encoder_update+0x1e0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012fc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	AMT_data->Linear_Velocity = (AMT_data->Angular_Velocity / 60.0) * pulley_cir;		//mm/s
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f8e6 	bl	80004e0 <__aeabi_f2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b20      	ldr	r3, [pc, #128]	@ (800139c <AMT_encoder_update+0x1f4>)
 800131a:	f7ff fa63 	bl	80007e4 <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4614      	mov	r4, r2
 8001324:	461d      	mov	r5, r3
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <AMT_encoder_update+0x1f8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8d8 	bl	80004e0 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4620      	mov	r0, r4
 8001336:	4629      	mov	r1, r5
 8001338:	f7ff f92a 	bl	8000590 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fbf4 	bl	8000b30 <__aeabi_d2f>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	62da      	str	r2, [r3, #44]	@ 0x2c
	AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity;					//Uodate Velo
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	619a      	str	r2, [r3, #24]
//	AMT_data->Linear_Acceleration = ((AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) *  1000000.0) / (diffTime);		//mm/s^2

	//store value for next loop
	AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]
	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001364:	68f9      	ldr	r1, [r7, #12]
 8001366:	e9c1 2304 	strd	r2, r3, [r1, #16]
	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	699a      	ldr	r2, [r3, #24]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	61da      	str	r2, [r3, #28]
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800137c:	f3af 8000 	nop.w
 8001380:	00000000 	.word	0x00000000
 8001384:	412e8480 	.word	0x412e8480
 8001388:	20000000 	.word	0x20000000
 800138c:	2000026c 	.word	0x2000026c
 8001390:	20000270 	.word	0x20000270
 8001394:	20000af4 	.word	0x20000af4
 8001398:	447a0000 	.word	0x447a0000
 800139c:	404e0000 	.word	0x404e0000
 80013a0:	20000004 	.word	0x20000004

080013a4 <lowPassFilter>:
	AMT_data->Linear_Position = 0;
	AMT_data->Position[QEI_NOW] = 0;

}

float lowPassFilter(float raw_data) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	ed87 0a01 	vstr	s0, [r7, #4]
    // Apply exponential moving average filter
    float filtered_data = ALPHA * raw_data + (1.0f - ALPHA) * filtered_data;
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <lowPassFilter+0x4c>)
 80013b0:	ed93 7a00 	vldr	s14, [r3]
 80013b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <lowPassFilter+0x4c>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80013c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d6:	edc7 7a03 	vstr	s15, [r7, #12]
    return filtered_data;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	ee07 3a90 	vmov	s15, r3
}
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <modbus_1t5_Timeout+0x3c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <modbus_1t5_Timeout+0x3c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <modbus_1t5_Timeout+0x3c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <modbus_1t5_Timeout+0x3c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000274 	.word	0x20000274

08001434 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800143c:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <modbus_3t5_Timeout+0x1c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	755a      	strb	r2, [r3, #21]

}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20000274 	.word	0x20000274

08001454 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f006 fdc3 	bl	8007fe8 <HAL_UART_GetError>
 8001462:	4603      	mov	r3, r0
 8001464:	2b20      	cmp	r3, #32
 8001466:	d101      	bne.n	800146c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001468:	f7ff ffc4 	bl	80013f4 <modbus_1t5_Timeout>

	}
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800147e:	4a25      	ldr	r2, [pc, #148]	@ (8001514 <Modbus_init+0xa0>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <Modbus_init+0xa0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <Modbus_init+0xa4>)
 8001492:	210e      	movs	r1, #14
 8001494:	4618      	mov	r0, r3
 8001496:	f005 f8ff 	bl	8006698 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2110      	movs	r1, #16
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fd4b 	bl	8007f3c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f006 fd62 	bl	8007f74 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a19      	ldr	r2, [pc, #100]	@ (800151c <Modbus_init+0xa8>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 f8a9 	bl	8007610 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <Modbus_init+0xa0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <Modbus_init+0xa0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <Modbus_init+0xa0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80014d0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80014d4:	4413      	add	r3, r2
 80014d6:	3302      	adds	r3, #2
 80014d8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014dc:	4619      	mov	r1, r3
 80014de:	f006 f951 	bl	8007784 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <Modbus_init+0xa0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d10c      	bne.n	800150c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <Modbus_init+0xa0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f004 f851 	bl	80055a0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80014fe:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <Modbus_init+0xa0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f004 faf8 	bl	8005afc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000274 	.word	0x20000274
 8001518:	08001435 	.word	0x08001435
 800151c:	08001455 	.word	0x08001455

08001520 <MOTOR_init>:
 *      Author: napat
 */
#include "Motor.h"

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	460b      	mov	r3, r1
 8001530:	80fb      	strh	r3, [r7, #6]
 8001532:	4613      	mov	r3, r2
 8001534:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	88fa      	ldrh	r2, [r7, #6]
 8001540:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	88ba      	ldrh	r2, [r7, #4]
 8001546:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 8001548:	88bb      	ldrh	r3, [r7, #4]
 800154a:	4619      	mov	r1, r3
 800154c:	68b8      	ldr	r0, [r7, #8]
 800154e:	f004 f90d 	bl	800576c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4619      	mov	r1, r3
 8001556:	68b8      	ldr	r0, [r7, #8]
 8001558:	f004 f908 	bl	800576c <HAL_TIM_PWM_Start_IT>

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	0000      	movs	r0, r0
	...

08001568 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 8001568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800156c:	b089      	sub	sp, #36	@ 0x24
 800156e:	af00      	add	r7, sp, #0
 8001570:	61f8      	str	r0, [r7, #28]
 8001572:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8263 	beq.w	8001a44 <MOTOR_set_duty+0x4dc>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 825e 	beq.w	8001a44 <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 8001588:	69b8      	ldr	r0, [r7, #24]
 800158a:	f7fe ffa9 	bl	80004e0 <__aeabi_f2d>
 800158e:	a394      	add	r3, pc, #592	@ (adr r3, 80017e0 <MOTOR_set_duty+0x278>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7fe fffc 	bl	8000590 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	a395      	add	r3, pc, #596	@ (adr r3, 80017f8 <MOTOR_set_duty+0x290>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff fa79 	bl	8000a9c <__aeabi_dcmpge>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MOTOR_set_duty+0x4c>
 80015b0:	4b8f      	ldr	r3, [pc, #572]	@ (80017f0 <MOTOR_set_duty+0x288>)
 80015b2:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 80015b4:	69b8      	ldr	r0, [r7, #24]
 80015b6:	f7fe ff93 	bl	80004e0 <__aeabi_f2d>
 80015ba:	a389      	add	r3, pc, #548	@ (adr r3, 80017e0 <MOTOR_set_duty+0x278>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe ffe6 	bl	8000590 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	a386      	add	r3, pc, #536	@ (adr r3, 80017e8 <MOTOR_set_duty+0x280>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff fa59 	bl	8000a88 <__aeabi_dcmple>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MOTOR_set_duty+0x78>
 80015dc:	4b85      	ldr	r3, [pc, #532]	@ (80017f4 <MOTOR_set_duty+0x28c>)
 80015de:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 80015e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d16e      	bne.n	80016cc <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d105      	bne.n	8001602 <MOTOR_set_duty+0x9a>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001600:	e02c      	b.n	800165c <MOTOR_set_duty+0xf4>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	889b      	ldrh	r3, [r3, #4]
 8001606:	2b04      	cmp	r3, #4
 8001608:	d105      	bne.n	8001616 <MOTOR_set_duty+0xae>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	6393      	str	r3, [r2, #56]	@ 0x38
 8001614:	e022      	b.n	800165c <MOTOR_set_duty+0xf4>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	889b      	ldrh	r3, [r3, #4]
 800161a:	2b08      	cmp	r3, #8
 800161c:	d105      	bne.n	800162a <MOTOR_set_duty+0xc2>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2300      	movs	r3, #0
 8001626:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001628:	e018      	b.n	800165c <MOTOR_set_duty+0xf4>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	889b      	ldrh	r3, [r3, #4]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d105      	bne.n	800163e <MOTOR_set_duty+0xd6>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
 800163c:	e00e      	b.n	800165c <MOTOR_set_duty+0xf4>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	2b10      	cmp	r3, #16
 8001644:	d105      	bne.n	8001652 <MOTOR_set_duty+0xea>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2300      	movs	r3, #0
 800164e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001650:	e004      	b.n	800165c <MOTOR_set_duty+0xf4>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	88db      	ldrh	r3, [r3, #6]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <MOTOR_set_duty+0x108>
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	635a      	str	r2, [r3, #52]	@ 0x34
 800166e:	e1ea      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	88db      	ldrh	r3, [r3, #6]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d105      	bne.n	8001684 <MOTOR_set_duty+0x11c>
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2300      	movs	r3, #0
 8001680:	6393      	str	r3, [r2, #56]	@ 0x38
 8001682:	e1e0      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	88db      	ldrh	r3, [r3, #6]
 8001688:	2b08      	cmp	r3, #8
 800168a:	d105      	bne.n	8001698 <MOTOR_set_duty+0x130>
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001696:	e1d6      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	88db      	ldrh	r3, [r3, #6]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d105      	bne.n	80016ac <MOTOR_set_duty+0x144>
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2300      	movs	r3, #0
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	e1cc      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	88db      	ldrh	r3, [r3, #6]
 80016b0:	2b10      	cmp	r3, #16
 80016b2:	d105      	bne.n	80016c0 <MOTOR_set_duty+0x158>
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2300      	movs	r3, #0
 80016bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80016be:	e1c2      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ca:	e1bc      	b.n	8001a46 <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 80016cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80016d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	f340 80d6 	ble.w	8001888 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <MOTOR_set_duty+0x188>
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2200      	movs	r2, #0
 80016ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ee:	e02c      	b.n	800174a <MOTOR_set_duty+0x1e2>
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	889b      	ldrh	r3, [r3, #4]
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d105      	bne.n	8001704 <MOTOR_set_duty+0x19c>
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	2300      	movs	r3, #0
 8001700:	6393      	str	r3, [r2, #56]	@ 0x38
 8001702:	e022      	b.n	800174a <MOTOR_set_duty+0x1e2>
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	889b      	ldrh	r3, [r3, #4]
 8001708:	2b08      	cmp	r3, #8
 800170a:	d105      	bne.n	8001718 <MOTOR_set_duty+0x1b0>
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001716:	e018      	b.n	800174a <MOTOR_set_duty+0x1e2>
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	889b      	ldrh	r3, [r3, #4]
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d105      	bne.n	800172c <MOTOR_set_duty+0x1c4>
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	6413      	str	r3, [r2, #64]	@ 0x40
 800172a:	e00e      	b.n	800174a <MOTOR_set_duty+0x1e2>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	889b      	ldrh	r3, [r3, #4]
 8001730:	2b10      	cmp	r3, #16
 8001732:	d105      	bne.n	8001740 <MOTOR_set_duty+0x1d8>
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	6493      	str	r3, [r2, #72]	@ 0x48
 800173e:	e004      	b.n	800174a <MOTOR_set_duty+0x1e2>
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	2300      	movs	r3, #0
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	88db      	ldrh	r3, [r3, #6]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d113      	bne.n	800177a <MOTOR_set_duty+0x212>
 8001752:	69b8      	ldr	r0, [r7, #24]
 8001754:	f7fe fec4 	bl	80004e0 <__aeabi_f2d>
 8001758:	a321      	add	r3, pc, #132	@ (adr r3, 80017e0 <MOTOR_set_duty+0x278>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe ff17 	bl	8000590 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681c      	ldr	r4, [r3, #0]
 8001770:	f7ff f9be 	bl	8000af0 <__aeabi_d2uiz>
 8001774:	4603      	mov	r3, r0
 8001776:	6363      	str	r3, [r4, #52]	@ 0x34
 8001778:	e165      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	88db      	ldrh	r3, [r3, #6]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d113      	bne.n	80017aa <MOTOR_set_duty+0x242>
 8001782:	69b8      	ldr	r0, [r7, #24]
 8001784:	f7fe feac 	bl	80004e0 <__aeabi_f2d>
 8001788:	a315      	add	r3, pc, #84	@ (adr r3, 80017e0 <MOTOR_set_duty+0x278>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe feff 	bl	8000590 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681c      	ldr	r4, [r3, #0]
 80017a0:	f7ff f9a6 	bl	8000af0 <__aeabi_d2uiz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80017a8:	e14d      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	88db      	ldrh	r3, [r3, #6]
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d126      	bne.n	8001800 <MOTOR_set_duty+0x298>
 80017b2:	69b8      	ldr	r0, [r7, #24]
 80017b4:	f7fe fe94 	bl	80004e0 <__aeabi_f2d>
 80017b8:	a309      	add	r3, pc, #36	@ (adr r3, 80017e0 <MOTOR_set_duty+0x278>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe fee7 	bl	8000590 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681c      	ldr	r4, [r3, #0]
 80017d0:	f7ff f98e 	bl	8000af0 <__aeabi_d2uiz>
 80017d4:	4603      	mov	r3, r0
 80017d6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80017d8:	e135      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	3b645a1d 	.word	0x3b645a1d
 80017e4:	40453fdf 	.word	0x40453fdf
 80017e8:	00000000 	.word	0x00000000
 80017ec:	c0e4c060 	.word	0xc0e4c060
 80017f0:	47260300 	.word	0x47260300
 80017f4:	c7260300 	.word	0xc7260300
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40e4c060 	.word	0x40e4c060
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	88db      	ldrh	r3, [r3, #6]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d113      	bne.n	8001830 <MOTOR_set_duty+0x2c8>
 8001808:	69b8      	ldr	r0, [r7, #24]
 800180a:	f7fe fe69 	bl	80004e0 <__aeabi_f2d>
 800180e:	a390      	add	r3, pc, #576	@ (adr r3, 8001a50 <MOTOR_set_duty+0x4e8>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe febc 	bl	8000590 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681c      	ldr	r4, [r3, #0]
 8001826:	f7ff f963 	bl	8000af0 <__aeabi_d2uiz>
 800182a:	4603      	mov	r3, r0
 800182c:	6423      	str	r3, [r4, #64]	@ 0x40
 800182e:	e10a      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	88db      	ldrh	r3, [r3, #6]
 8001834:	2b10      	cmp	r3, #16
 8001836:	d113      	bne.n	8001860 <MOTOR_set_duty+0x2f8>
 8001838:	69b8      	ldr	r0, [r7, #24]
 800183a:	f7fe fe51 	bl	80004e0 <__aeabi_f2d>
 800183e:	a384      	add	r3, pc, #528	@ (adr r3, 8001a50 <MOTOR_set_duty+0x4e8>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fea4 	bl	8000590 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681c      	ldr	r4, [r3, #0]
 8001856:	f7ff f94b 	bl	8000af0 <__aeabi_d2uiz>
 800185a:	4603      	mov	r3, r0
 800185c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800185e:	e0f2      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 8001860:	69b8      	ldr	r0, [r7, #24]
 8001862:	f7fe fe3d 	bl	80004e0 <__aeabi_f2d>
 8001866:	a37a      	add	r3, pc, #488	@ (adr r3, 8001a50 <MOTOR_set_duty+0x4e8>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fe90 	bl	8000590 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681c      	ldr	r4, [r3, #0]
 800187e:	f7ff f937 	bl	8000af0 <__aeabi_d2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001886:	e0de      	b.n	8001a46 <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	889b      	ldrh	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <MOTOR_set_duty+0x336>
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f24a 6203 	movw	r2, #42499	@ 0xa603
 800189a:	635a      	str	r2, [r3, #52]	@ 0x34
 800189c:	e031      	b.n	8001902 <MOTOR_set_duty+0x39a>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	889b      	ldrh	r3, [r3, #4]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d106      	bne.n	80018b4 <MOTOR_set_duty+0x34c>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80018b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80018b2:	e026      	b.n	8001902 <MOTOR_set_duty+0x39a>
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	889b      	ldrh	r3, [r3, #4]
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d106      	bne.n	80018ca <MOTOR_set_duty+0x362>
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80018c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018c8:	e01b      	b.n	8001902 <MOTOR_set_duty+0x39a>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	889b      	ldrh	r3, [r3, #4]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d106      	bne.n	80018e0 <MOTOR_set_duty+0x378>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80018dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018de:	e010      	b.n	8001902 <MOTOR_set_duty+0x39a>
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	889b      	ldrh	r3, [r3, #4]
 80018e4:	2b10      	cmp	r3, #16
 80018e6:	d106      	bne.n	80018f6 <MOTOR_set_duty+0x38e>
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80018f2:	6493      	str	r3, [r2, #72]	@ 0x48
 80018f4:	e005      	b.n	8001902 <MOTOR_set_duty+0x39a>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001900:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	88db      	ldrh	r3, [r3, #6]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d117      	bne.n	800193a <MOTOR_set_duty+0x3d2>
 800190a:	69b8      	ldr	r0, [r7, #24]
 800190c:	f7fe fde8 	bl	80004e0 <__aeabi_f2d>
 8001910:	a34f      	add	r3, pc, #316	@ (adr r3, 8001a50 <MOTOR_set_duty+0x4e8>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fe3b 	bl	8000590 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	613a      	str	r2, [r7, #16]
 8001920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001930:	f7ff f8de 	bl	8000af0 <__aeabi_d2uiz>
 8001934:	4603      	mov	r3, r0
 8001936:	6363      	str	r3, [r4, #52]	@ 0x34
 8001938:	e085      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	88db      	ldrh	r3, [r3, #6]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d117      	bne.n	8001972 <MOTOR_set_duty+0x40a>
 8001942:	69b8      	ldr	r0, [r7, #24]
 8001944:	f7fe fdcc 	bl	80004e0 <__aeabi_f2d>
 8001948:	a341      	add	r3, pc, #260	@ (adr r3, 8001a50 <MOTOR_set_duty+0x4e8>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe1f 	bl	8000590 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	60ba      	str	r2, [r7, #8]
 8001958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681c      	ldr	r4, [r3, #0]
 8001964:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001968:	f7ff f8c2 	bl	8000af0 <__aeabi_d2uiz>
 800196c:	4603      	mov	r3, r0
 800196e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001970:	e069      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	88db      	ldrh	r3, [r3, #6]
 8001976:	2b08      	cmp	r3, #8
 8001978:	d117      	bne.n	80019aa <MOTOR_set_duty+0x442>
 800197a:	69b8      	ldr	r0, [r7, #24]
 800197c:	f7fe fdb0 	bl	80004e0 <__aeabi_f2d>
 8001980:	a333      	add	r3, pc, #204	@ (adr r3, 8001a50 <MOTOR_set_duty+0x4e8>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fe03 	bl	8000590 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	603a      	str	r2, [r7, #0]
 8001990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681c      	ldr	r4, [r3, #0]
 800199c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019a0:	f7ff f8a6 	bl	8000af0 <__aeabi_d2uiz>
 80019a4:	4603      	mov	r3, r0
 80019a6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80019a8:	e04d      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	88db      	ldrh	r3, [r3, #6]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d116      	bne.n	80019e0 <MOTOR_set_duty+0x478>
 80019b2:	69b8      	ldr	r0, [r7, #24]
 80019b4:	f7fe fd94 	bl	80004e0 <__aeabi_f2d>
 80019b8:	a325      	add	r3, pc, #148	@ (adr r3, 8001a50 <MOTOR_set_duty+0x4e8>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fde7 	bl	8000590 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4615      	mov	r5, r2
 80019c8:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681c      	ldr	r4, [r3, #0]
 80019d2:	4628      	mov	r0, r5
 80019d4:	4631      	mov	r1, r6
 80019d6:	f7ff f88b 	bl	8000af0 <__aeabi_d2uiz>
 80019da:	4603      	mov	r3, r0
 80019dc:	6423      	str	r3, [r4, #64]	@ 0x40
 80019de:	e032      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	88db      	ldrh	r3, [r3, #6]
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d116      	bne.n	8001a16 <MOTOR_set_duty+0x4ae>
 80019e8:	69b8      	ldr	r0, [r7, #24]
 80019ea:	f7fe fd79 	bl	80004e0 <__aeabi_f2d>
 80019ee:	a318      	add	r3, pc, #96	@ (adr r3, 8001a50 <MOTOR_set_duty+0x4e8>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fdcc 	bl	8000590 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4692      	mov	sl, r2
 80019fe:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681c      	ldr	r4, [r3, #0]
 8001a08:	4650      	mov	r0, sl
 8001a0a:	4659      	mov	r1, fp
 8001a0c:	f7ff f870 	bl	8000af0 <__aeabi_d2uiz>
 8001a10:	4603      	mov	r3, r0
 8001a12:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001a14:	e017      	b.n	8001a46 <MOTOR_set_duty+0x4de>
 8001a16:	69b8      	ldr	r0, [r7, #24]
 8001a18:	f7fe fd62 	bl	80004e0 <__aeabi_f2d>
 8001a1c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001a50 <MOTOR_set_duty+0x4e8>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fdb5 	bl	8000590 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4690      	mov	r8, r2
 8001a2c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681c      	ldr	r4, [r3, #0]
 8001a36:	4640      	mov	r0, r8
 8001a38:	4649      	mov	r1, r9
 8001a3a:	f7ff f859 	bl	8000af0 <__aeabi_d2uiz>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001a42:	e000      	b.n	8001a46 <MOTOR_set_duty+0x4de>
        return;
 8001a44:	bf00      	nop
    }
}
 8001a46:	3724      	adds	r7, #36	@ 0x24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a4e:	bf00      	nop
 8001a50:	3b645a1d 	.word	0x3b645a1d
 8001a54:	40453fdf 	.word	0x40453fdf

08001a58 <PID_controller_init>:

extern Trap_Traj Traj;

float boundary = 0.05;
void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a64:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a68:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <PID_controller_calculate_pos>:
void PID_controller_calculate_pos(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output velocity in boundary of 550mm/s
 PID->Error[n] = setpoint - Feedback->Linear_Position;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001ac0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 550 && PID->Error[n] > 0) || (PID->out <= -550 && PID->Error[n] < 0))) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ad4:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001bdc <PID_controller_calculate_pos+0x130>
 8001ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	bfac      	ite	ge
 8001ae2:	2301      	movge	r3, #1
 8001ae4:	2300      	movlt	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <PID_controller_calculate_pos+0x66>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	bfcc      	ite	gt
 8001b02:	2301      	movgt	r3, #1
 8001b04:	2300      	movle	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d056      	beq.n	8001bc0 <PID_controller_calculate_pos+0x114>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b18:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001be0 <PID_controller_calculate_pos+0x134>
 8001b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	bf94      	ite	ls
 8001b26:	2301      	movls	r3, #1
 8001b28:	2300      	movhi	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f083 0301 	eor.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <PID_controller_calculate_pos+0xaa>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b44:	bf4c      	ite	mi
 8001b46:	2301      	movmi	r3, #1
 8001b48:	2300      	movpl	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f083 0301 	eor.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d034      	beq.n	8001bc0 <PID_controller_calculate_pos+0x114>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	edd3 6a00 	vldr	s13, [r3]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	ed93 6a00 	vldr	s12, [r3]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b9e:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	ed93 6a02 	vldr	s12, [r3, #8]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	611a      	str	r2, [r3, #16]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	44098000 	.word	0x44098000
 8001be0:	c4098000 	.word	0xc4098000

08001be4 <PID_controller_calculate_velo>:

void PID_controller_calculate_velo(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output pwm to drive the motor
 PID->Error[n] = setpoint - Feedback->Linear_Velocity;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001bf8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 1000 && PID->Error[n] > 0) || (PID->out <= -1000 && PID->Error[n] < 0))) {
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c0c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001d14 <PID_controller_calculate_velo+0x130>
 8001c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	bfac      	ite	ge
 8001c1a:	2301      	movge	r3, #1
 8001c1c:	2300      	movlt	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <PID_controller_calculate_velo+0x66>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c38:	bfcc      	ite	gt
 8001c3a:	2301      	movgt	r3, #1
 8001c3c:	2300      	movle	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d056      	beq.n	8001cf8 <PID_controller_calculate_velo+0x114>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c50:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d18 <PID_controller_calculate_velo+0x134>
 8001c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	bf94      	ite	ls
 8001c5e:	2301      	movls	r3, #1
 8001c60:	2300      	movhi	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f083 0301 	eor.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10f      	bne.n	8001c8e <PID_controller_calculate_velo+0xaa>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	bf4c      	ite	mi
 8001c7e:	2301      	movmi	r3, #1
 8001c80:	2300      	movpl	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d034      	beq.n	8001cf8 <PID_controller_calculate_velo+0x114>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	edd3 6a00 	vldr	s13, [r3]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ca0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001caa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	ed93 6a00 	vldr	s12, [r3]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cd6:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ce6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8001cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	611a      	str	r2, [r3, #16]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	447a0000 	.word	0x447a0000
 8001d18:	c47a0000 	.word	0xc47a0000

08001d1c <PID_controller_cascade>:

void PID_controller_cascade(PID_struct* PID_pos, PID_struct* PID_vel, AMT_Encoder* QEI, float setpoint)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	ed87 0a00 	vstr	s0, [r7]
	PID_controller_calculate_pos(PID_pos, QEI , setpoint);
 8001d2c:	ed97 0a00 	vldr	s0, [r7]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff feba 	bl	8001aac <PID_controller_calculate_pos>
	PID_controller_calculate_velo(PID_vel, QEI, ((PID_pos->out)));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	68b8      	ldr	r0, [r7, #8]
 8001d46:	f7ff ff4d 	bl	8001be4 <PID_controller_calculate_velo>
//	PID_controller_calculate_velo(PID_vel, QEI, Traj.currentVelocity);
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <Traject_init>:
float Time_acc;
float Time_dec;


void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d5e:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <Traject>:

void Traject(Trap_Traj* Traj, float Pos_initial, float Pos_final)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001da0:	edc7 0a01 	vstr	s1, [r7, #4]

	  Distance = Pos_final - Pos_initial;
 8001da4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001da8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db0:	4bb1      	ldr	r3, [pc, #708]	@ (8002078 <Traject+0x2e4>)
 8001db2:	edc3 7a00 	vstr	s15, [r3]
	  Time_acc = Traj->Velo_max / Traj->Accel_max;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	edd3 6a00 	vldr	s13, [r3]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc6:	4bad      	ldr	r3, [pc, #692]	@ (800207c <Traject+0x2e8>)
 8001dc8:	edc3 7a00 	vstr	s15, [r3]
	  Time_dec = Time_acc;
 8001dcc:	4bab      	ldr	r3, [pc, #684]	@ (800207c <Traject+0x2e8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4aab      	ldr	r2, [pc, #684]	@ (8002080 <Traject+0x2ec>)
 8001dd2:	6013      	str	r3, [r2, #0]


	  if (Distance >0)
 8001dd4:	4ba8      	ldr	r3, [pc, #672]	@ (8002078 <Traject+0x2e4>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	dd23      	ble.n	8001e2c <Traject+0x98>
			{
		  Acc_max = Traj->Accel_max;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4aa6      	ldr	r2, [pc, #664]	@ (8002084 <Traject+0x2f0>)
 8001dea:	6013      	str	r3, [r2, #0]
		  Vel_max = Traj->Velo_max;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4aa5      	ldr	r2, [pc, #660]	@ (8002088 <Traject+0x2f4>)
 8001df2:	6013      	str	r3, [r2, #0]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8001df4:	4ba0      	ldr	r3, [pc, #640]	@ (8002078 <Traject+0x2e4>)
 8001df6:	ed93 7a00 	vldr	s14, [r3]
 8001dfa:	4ba3      	ldr	r3, [pc, #652]	@ (8002088 <Traject+0x2f4>)
 8001dfc:	edd3 6a00 	vldr	s13, [r3]
 8001e00:	4b9e      	ldr	r3, [pc, #632]	@ (800207c <Traject+0x2e8>)
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0e:	4b9f      	ldr	r3, [pc, #636]	@ (800208c <Traject+0x2f8>)
 8001e10:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 8001e14:	4b9d      	ldr	r3, [pc, #628]	@ (800208c <Traject+0x2f8>)
 8001e16:	edd3 6a00 	vldr	s13, [r3]
 8001e1a:	4b9b      	ldr	r3, [pc, #620]	@ (8002088 <Traject+0x2f4>)
 8001e1c:	ed93 7a00 	vldr	s14, [r3]
 8001e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e24:	4b9a      	ldr	r3, [pc, #616]	@ (8002090 <Traject+0x2fc>)
 8001e26:	edc3 7a00 	vstr	s15, [r3]
 8001e2a:	e032      	b.n	8001e92 <Traject+0xfe>
			}
	  else if(Distance < 0)
 8001e2c:	4b92      	ldr	r3, [pc, #584]	@ (8002078 <Traject+0x2e4>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	d52a      	bpl.n	8001e92 <Traject+0xfe>
	  {
		  Acc_max = -Traj->Accel_max;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e42:	eef1 7a67 	vneg.f32	s15, s15
 8001e46:	4b8f      	ldr	r3, [pc, #572]	@ (8002084 <Traject+0x2f0>)
 8001e48:	edc3 7a00 	vstr	s15, [r3]
		  Vel_max = -Traj->Velo_max;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	eef1 7a67 	vneg.f32	s15, s15
 8001e56:	4b8c      	ldr	r3, [pc, #560]	@ (8002088 <Traject+0x2f4>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8001e5c:	4b86      	ldr	r3, [pc, #536]	@ (8002078 <Traject+0x2e4>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	4b89      	ldr	r3, [pc, #548]	@ (8002088 <Traject+0x2f4>)
 8001e64:	edd3 6a00 	vldr	s13, [r3]
 8001e68:	4b84      	ldr	r3, [pc, #528]	@ (800207c <Traject+0x2e8>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e76:	4b85      	ldr	r3, [pc, #532]	@ (800208c <Traject+0x2f8>)
 8001e78:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 8001e7c:	4b83      	ldr	r3, [pc, #524]	@ (800208c <Traject+0x2f8>)
 8001e7e:	edd3 6a00 	vldr	s13, [r3]
 8001e82:	4b81      	ldr	r3, [pc, #516]	@ (8002088 <Traject+0x2f4>)
 8001e84:	ed93 7a00 	vldr	s14, [r3]
 8001e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8c:	4b80      	ldr	r3, [pc, #512]	@ (8002090 <Traject+0x2fc>)
 8001e8e:	edc3 7a00 	vstr	s15, [r3]
	}
	// Update trajectory phase
	time_ref1 = Time_acc + Time_Velo_const;
 8001e92:	4b7a      	ldr	r3, [pc, #488]	@ (800207c <Traject+0x2e8>)
 8001e94:	ed93 7a00 	vldr	s14, [r3]
 8001e98:	4b7d      	ldr	r3, [pc, #500]	@ (8002090 <Traject+0x2fc>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8002094 <Traject+0x300>)
 8001ea4:	edc3 7a00 	vstr	s15, [r3]
	time_ref2 = time_ref1 + Time_dec;
 8001ea8:	4b7a      	ldr	r3, [pc, #488]	@ (8002094 <Traject+0x300>)
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	4b74      	ldr	r3, [pc, #464]	@ (8002080 <Traject+0x2ec>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb8:	4b77      	ldr	r3, [pc, #476]	@ (8002098 <Traject+0x304>)
 8001eba:	edc3 7a00 	vstr	s15, [r3]
	if(Time_Velo_const >0)
 8001ebe:	4b74      	ldr	r3, [pc, #464]	@ (8002090 <Traject+0x2fc>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	f340 80cb 	ble.w	8002066 <Traject+0x2d2>
	{
//		Time_acc_under = sqrt(Distance/Acc_max);
		if (elapsedTime < Time_acc)
 8001ed0:	4b72      	ldr	r3, [pc, #456]	@ (800209c <Traject+0x308>)
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	4b69      	ldr	r3, [pc, #420]	@ (800207c <Traject+0x2e8>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee4:	d52f      	bpl.n	8001f46 <Traject+0x1b2>
		{
			// Acceleration phase
			Traj->currentAcceleration = Acc_max;
 8001ee6:	4b67      	ldr	r3, [pc, #412]	@ (8002084 <Traject+0x2f0>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 8001eee:	4b65      	ldr	r3, [pc, #404]	@ (8002084 <Traject+0x2f0>)
 8001ef0:	ed93 7a00 	vldr	s14, [r3]
 8001ef4:	4b69      	ldr	r3, [pc, #420]	@ (800209c <Traject+0x308>)
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = 0.5f * Acc_max * elapsedTime * elapsedTime + Pos_initial;
 8001f04:	4b5f      	ldr	r3, [pc, #380]	@ (8002084 <Traject+0x2f0>)
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f12:	4b62      	ldr	r3, [pc, #392]	@ (800209c <Traject+0x308>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1c:	4b5f      	ldr	r3, [pc, #380]	@ (800209c <Traject+0x308>)
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a59      	ldr	r2, [pc, #356]	@ (80020a0 <Traject+0x30c>)
 8001f3a:	6013      	str	r3, [r2, #0]
			temp_pos_const = Traj->currentPosition;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a58      	ldr	r2, [pc, #352]	@ (80020a4 <Traject+0x310>)
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e08f      	b.n	8002066 <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref1 )
 8001f46:	4b55      	ldr	r3, [pc, #340]	@ (800209c <Traject+0x308>)
 8001f48:	ed93 7a00 	vldr	s14, [r3]
 8001f4c:	4b51      	ldr	r3, [pc, #324]	@ (8002094 <Traject+0x300>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5a:	d521      	bpl.n	8001fa0 <Traject+0x20c>
		{
			// Constant velocity phase
			Traj->currentAcceleration = 0;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Vel_max;
 8001f64:	4b48      	ldr	r3, [pc, #288]	@ (8002088 <Traject+0x2f4>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	60da      	str	r2, [r3, #12]
			Traj->currentPosition = (Vel_max * (elapsedTime-Time_acc)) + temp_pos_acc;
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800209c <Traject+0x308>)
 8001f6e:	ed93 7a00 	vldr	s14, [r3]
 8001f72:	4b42      	ldr	r3, [pc, #264]	@ (800207c <Traject+0x2e8>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f7c:	4b42      	ldr	r3, [pc, #264]	@ (8002088 <Traject+0x2f4>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f86:	4b46      	ldr	r3, [pc, #280]	@ (80020a0 <Traject+0x30c>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_const = Traj->currentPosition;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a42      	ldr	r2, [pc, #264]	@ (80020a4 <Traject+0x310>)
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e062      	b.n	8002066 <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref2)
 8001fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800209c <Traject+0x308>)
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8002098 <Traject+0x304>)
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	d54f      	bpl.n	8002056 <Traject+0x2c2>
		{
			// Deceleration phase
			Traj->currentAcceleration = -Acc_max;
 8001fb6:	4b33      	ldr	r3, [pc, #204]	@ (8002084 <Traject+0x2f0>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eef1 7a67 	vneg.f32	s15, s15
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = -(Acc_max * (elapsedTime-time_ref1)) + Vel_max;
 8001fc6:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <Traject+0x2f4>)
 8001fc8:	ed93 7a00 	vldr	s14, [r3]
 8001fcc:	4b33      	ldr	r3, [pc, #204]	@ (800209c <Traject+0x308>)
 8001fce:	edd3 6a00 	vldr	s13, [r3]
 8001fd2:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <Traject+0x300>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fdc:	4b29      	ldr	r3, [pc, #164]	@ (8002084 <Traject+0x2f0>)
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Traj->currentVelocity*(elapsedTime-time_ref1)+(0.5f*Acc_max*(elapsedTime-time_ref1)*(elapsedTime-time_ref1))+temp_pos_const ;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ff6:	4b29      	ldr	r3, [pc, #164]	@ (800209c <Traject+0x308>)
 8001ff8:	edd3 6a00 	vldr	s13, [r3]
 8001ffc:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <Traject+0x300>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <Traject+0x2f0>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002014:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002018:	4b20      	ldr	r3, [pc, #128]	@ (800209c <Traject+0x308>)
 800201a:	ed93 6a00 	vldr	s12, [r3]
 800201e:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <Traject+0x300>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002028:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800202c:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <Traject+0x308>)
 800202e:	ed93 6a00 	vldr	s12, [r3]
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <Traject+0x300>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ee76 7a67 	vsub.f32	s15, s12, s15
 800203c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002040:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002044:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <Traject+0x310>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	edc3 7a02 	vstr	s15, [r3, #8]
 8002054:	e007      	b.n	8002066 <Traject+0x2d2>
		}
		else {
			// Trajectory complete
			Traj->currentAcceleration = 0.0f;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
//			elapsedTime = 0.0f;
		}
	}
	if (Time_Velo_const <= 0)
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <Traject+0x2fc>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002074:	d918      	bls.n	80020a8 <Traject+0x314>

		}


	}
}
 8002076:	e0d2      	b.n	800221e <Traject+0x48a>
 8002078:	200002a0 	.word	0x200002a0
 800207c:	200002a4 	.word	0x200002a4
 8002080:	200002a8 	.word	0x200002a8
 8002084:	20000278 	.word	0x20000278
 8002088:	2000027c 	.word	0x2000027c
 800208c:	20000280 	.word	0x20000280
 8002090:	20000284 	.word	0x20000284
 8002094:	20000298 	.word	0x20000298
 8002098:	2000029c 	.word	0x2000029c
 800209c:	2000138c 	.word	0x2000138c
 80020a0:	2000028c 	.word	0x2000028c
 80020a4:	20000290 	.word	0x20000290
		Time_acc_under = sqrt(Distance/Acc_max);
 80020a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <Traject+0x494>)
 80020aa:	ed93 7a00 	vldr	s14, [r3]
 80020ae:	4b5f      	ldr	r3, [pc, #380]	@ (800222c <Traject+0x498>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020b8:	ee16 0a90 	vmov	r0, s13
 80020bc:	f7fe fa10 	bl	80004e0 <__aeabi_f2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	ec43 2b10 	vmov	d0, r2, r3
 80020c8:	f007 f8a0 	bl	800920c <sqrt>
 80020cc:	ec53 2b10 	vmov	r2, r3, d0
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7fe fd2c 	bl	8000b30 <__aeabi_d2f>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a55      	ldr	r2, [pc, #340]	@ (8002230 <Traject+0x49c>)
 80020dc:	6013      	str	r3, [r2, #0]
		if (elapsedTime < Time_acc_under)
 80020de:	4b55      	ldr	r3, [pc, #340]	@ (8002234 <Traject+0x4a0>)
 80020e0:	ed93 7a00 	vldr	s14, [r3]
 80020e4:	4b52      	ldr	r3, [pc, #328]	@ (8002230 <Traject+0x49c>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	d52f      	bpl.n	8002154 <Traject+0x3c0>
			Traj->currentAcceleration = Acc_max;
 80020f4:	4b4d      	ldr	r3, [pc, #308]	@ (800222c <Traject+0x498>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 80020fc:	4b4b      	ldr	r3, [pc, #300]	@ (800222c <Traject+0x498>)
 80020fe:	ed93 7a00 	vldr	s14, [r3]
 8002102:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <Traject+0x4a0>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Pos_initial + 0.5f * Acc_max * elapsedTime * elapsedTime;
 8002112:	4b46      	ldr	r3, [pc, #280]	@ (800222c <Traject+0x498>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800211c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002120:	4b44      	ldr	r3, [pc, #272]	@ (8002234 <Traject+0x4a0>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212a:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <Traject+0x4a0>)
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002134:	edd7 7a02 	vldr	s15, [r7, #8]
 8002138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4a3c      	ldr	r2, [pc, #240]	@ (8002238 <Traject+0x4a4>)
 8002148:	6013      	str	r3, [r2, #0]
			temp_velo_acc = Traj->currentVelocity;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4a3b      	ldr	r2, [pc, #236]	@ (800223c <Traject+0x4a8>)
 8002150:	6013      	str	r3, [r2, #0]
}
 8002152:	e064      	b.n	800221e <Traject+0x48a>
		else if (elapsedTime < 2*Time_acc_under)
 8002154:	4b36      	ldr	r3, [pc, #216]	@ (8002230 <Traject+0x49c>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800215e:	4b35      	ldr	r3, [pc, #212]	@ (8002234 <Traject+0x4a0>)
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	dd4f      	ble.n	800220e <Traject+0x47a>
			Traj->currentAcceleration = -Acc_max;
 800216e:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <Traject+0x498>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	eef1 7a67 	vneg.f32	s15, s15
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = temp_velo_acc - Acc_max*(elapsedTime-Time_acc_under);
 800217e:	4b2f      	ldr	r3, [pc, #188]	@ (800223c <Traject+0x4a8>)
 8002180:	ed93 7a00 	vldr	s14, [r3]
 8002184:	4b2b      	ldr	r3, [pc, #172]	@ (8002234 <Traject+0x4a0>)
 8002186:	edd3 6a00 	vldr	s13, [r3]
 800218a:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <Traject+0x49c>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002194:	4b25      	ldr	r3, [pc, #148]	@ (800222c <Traject+0x498>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = temp_pos_acc + Traj->currentVelocity *(elapsedTime-Time_acc_under)+(0.5f*Acc_max*(elapsedTime-Time_acc_under)*(elapsedTime-Time_acc_under));
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80021ae:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <Traject+0x4a0>)
 80021b0:	edd3 6a00 	vldr	s13, [r3]
 80021b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <Traject+0x49c>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <Traject+0x4a4>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021cc:	4b17      	ldr	r3, [pc, #92]	@ (800222c <Traject+0x498>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80021d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021da:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <Traject+0x4a0>)
 80021dc:	ed93 6a00 	vldr	s12, [r3]
 80021e0:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <Traject+0x49c>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <Traject+0x4a0>)
 80021f0:	ed93 6a00 	vldr	s12, [r3]
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <Traject+0x49c>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800220c:	e007      	b.n	800221e <Traject+0x48a>
			Traj->currentAcceleration = 0.0f;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002a0 	.word	0x200002a0
 800222c:	20000278 	.word	0x20000278
 8002230:	20000288 	.word	0x20000288
 8002234:	2000138c 	.word	0x2000138c
 8002238:	2000028c 	.word	0x2000028c
 800223c:	20000294 	.word	0x20000294

08002240 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter){
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	b0b4      	sub	sp, #208	@ 0xd0
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	filter->Q = 0.8f; //0.05
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a42      	ldr	r2, [pc, #264]	@ (8002354 <Kalman_Start+0x114>)
 800224c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002256:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t a[16] = {1.0f, 0.000982689988788924f, -0.644498552609241f, 0.00685085398621353f,
 800225a:	4b3f      	ldr	r3, [pc, #252]	@ (8002358 <Kalman_Start+0x118>)
 800225c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8002260:	461d      	mov	r5, r3
 8002262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                   0.0f, 0.952182328510902f,   -1278.31254883175f, 11.5838211960474f,
	                   0.0f, 0.0f   ,   1.0f  , 0.0f,
	                   0.0f,-0.00424045081249977f, 3.26231142200644f, 0.322011138740237f};

	float32_t b[4] = {0.00117912763553818f,
 8002276:	4b39      	ldr	r3, [pc, #228]	@ (800235c <Kalman_Start+0x11c>)
 8002278:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800227c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						3.26231142200644f,
						0.0f,
						0.290474685267255f};

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002288:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800228c:	673b      	str	r3, [r7, #112]	@ 0x70
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	677b      	str	r3, [r7, #116]	@ 0x74
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	67bb      	str	r3, [r7, #120]	@ 0x78

	float32_t g[4] = {0.0f,
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80022a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	66bb      	str	r3, [r7, #104]	@ 0x68
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80022b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <Kalman_Start+0x120>)
 80022b4:	f107 041c 	add.w	r4, r7, #28
 80022b8:	461d      	mov	r5, r3
 80022ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80022ec:	e029      	b.n	8002342 <Kalman_Start+0x102>
	{
		filter->A[i] = a[i];
 80022ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	33d0      	adds	r3, #208	@ 0xd0
 80022f6:	443b      	add	r3, r7
 80022f8:	3b44      	subs	r3, #68	@ 0x44
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002302:	3314      	adds	r3, #20
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800230a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	33d0      	adds	r3, #208	@ 0xd0
 8002312:	443b      	add	r3, r7
 8002314:	3bb4      	subs	r3, #180	@ 0xb4
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800231e:	3398      	adds	r3, #152	@ 0x98
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800232c:	3304      	adds	r3, #4
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800233c:	3301      	adds	r3, #1
 800233e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002346:	2b0f      	cmp	r3, #15
 8002348:	ddd1      	ble.n	80022ee <Kalman_Start+0xae>
	}

	for(i=0;i<4;i++)
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002350:	e044      	b.n	80023dc <Kalman_Start+0x19c>
 8002352:	bf00      	nop
 8002354:	3f4ccccd 	.word	0x3f4ccccd
 8002358:	08009430 	.word	0x08009430
 800235c:	08009470 	.word	0x08009470
 8002360:	08009480 	.word	0x08009480
	{
		filter->X_k[i] = x_k[i];
 8002364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	33d0      	adds	r3, #208	@ 0xd0
 800236c:	443b      	add	r3, r7
 800236e:	3bc4      	subs	r3, #196	@ 0xc4
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	601a      	str	r2, [r3, #0]
		filter->B[i] = b[i];
 800237e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	33d0      	adds	r3, #208	@ 0xd0
 8002386:	443b      	add	r3, r7
 8002388:	3b54      	subs	r3, #84	@ 0x54
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002392:	3324      	adds	r3, #36	@ 0x24
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800239a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	33d0      	adds	r3, #208	@ 0xd0
 80023a2:	443b      	add	r3, r7
 80023a4:	3b64      	subs	r3, #100	@ 0x64
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023ae:	3328      	adds	r3, #40	@ 0x28
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80023b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	33d0      	adds	r3, #208	@ 0xd0
 80023be:	443b      	add	r3, r7
 80023c0:	3b74      	subs	r3, #116	@ 0x74
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023ca:	332c      	adds	r3, #44	@ 0x2c
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80023d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023d6:	3301      	adds	r3, #1
 80023d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	ddbf      	ble.n	8002364 <Kalman_Start+0x124>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	2104      	movs	r1, #4
 80023f0:	f006 fec2 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3310      	adds	r3, #16
 80023fe:	2204      	movs	r2, #4
 8002400:	2104      	movs	r1, #4
 8002402:	f006 feb9 	bl	8009178 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3350      	adds	r3, #80	@ 0x50
 8002410:	2204      	movs	r2, #4
 8002412:	2104      	movs	r1, #4
 8002414:	f006 feb0 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3390      	adds	r3, #144	@ 0x90
 8002422:	2201      	movs	r2, #1
 8002424:	2104      	movs	r1, #4
 8002426:	f006 fea7 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	33a0      	adds	r3, #160	@ 0xa0
 8002434:	2204      	movs	r2, #4
 8002436:	2101      	movs	r1, #1
 8002438:	f006 fe9e 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	33b0      	adds	r3, #176	@ 0xb0
 8002446:	2201      	movs	r2, #1
 8002448:	2104      	movs	r1, #4
 800244a:	f006 fe95 	bl	8009178 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	33c8      	adds	r3, #200	@ 0xc8
 8002458:	2204      	movs	r2, #4
 800245a:	2104      	movs	r1, #4
 800245c:	f006 fe8c 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800246c:	2201      	movs	r2, #1
 800246e:	2104      	movs	r1, #4
 8002470:	f006 fe82 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002480:	2204      	movs	r2, #4
 8002482:	2101      	movs	r1, #1
 8002484:	f006 fe78 	bl	8009178 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002494:	2204      	movs	r2, #4
 8002496:	2104      	movs	r1, #4
 8002498:	f006 fe6e 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80024a8:	2204      	movs	r2, #4
 80024aa:	2104      	movs	r1, #4
 80024ac:	f006 fe64 	bl	8009178 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80024bc:	2201      	movs	r2, #1
 80024be:	2104      	movs	r1, #4
 80024c0:	f006 fe5a 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80024d0:	2201      	movs	r2, #1
 80024d2:	2104      	movs	r1, #4
 80024d4:	f006 fe50 	bl	8009178 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80024e4:	2204      	movs	r2, #4
 80024e6:	2101      	movs	r1, #1
 80024e8:	f006 fe46 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80024f8:	2201      	movs	r2, #1
 80024fa:	2101      	movs	r1, #1
 80024fc:	f006 fe3c 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800250c:	2201      	movs	r2, #1
 800250e:	2101      	movs	r1, #1
 8002510:	f006 fe32 	bl	8009178 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002520:	2201      	movs	r2, #1
 8002522:	2104      	movs	r1, #4
 8002524:	f006 fe28 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002534:	2201      	movs	r2, #1
 8002536:	2104      	movs	r1, #4
 8002538:	f006 fe1e 	bl	8009178 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002548:	2201      	movs	r2, #1
 800254a:	2101      	movs	r1, #1
 800254c:	f006 fe14 	bl	8009178 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800255c:	2201      	movs	r2, #1
 800255e:	2101      	movs	r1, #1
 8002560:	f006 fe0a 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002570:	2201      	movs	r2, #1
 8002572:	2101      	movs	r1, #1
 8002574:	f006 fe00 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002584:	2201      	movs	r2, #1
 8002586:	2104      	movs	r1, #4
 8002588:	f006 fdf6 	bl	8009178 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002598:	2201      	movs	r2, #1
 800259a:	2101      	movs	r1, #1
 800259c:	f006 fdec 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025ac:	2204      	movs	r2, #4
 80025ae:	2104      	movs	r1, #4
 80025b0:	f006 fde2 	bl	8009178 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	33c4      	adds	r3, #196	@ 0xc4
 80025be:	2201      	movs	r2, #1
 80025c0:	2101      	movs	r1, #1
 80025c2:	f006 fdd9 	bl	8009178 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80025d2:	2201      	movs	r2, #1
 80025d4:	2101      	movs	r1, #1
 80025d6:	f006 fdcf 	bl	8009178 <arm_mat_init_f32>
}
 80025da:	bf00      	nop
 80025dc:	37d0      	adds	r7, #208	@ 0xd0
 80025de:	46bd      	mov	sp, r7
 80025e0:	bdb0      	pop	{r4, r5, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	0000      	movs	r0, r0
	...

080025e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025ec:	b088      	sub	sp, #32
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025f0:	f001 f855 	bl	800369e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025f4:	f000 f8fa 	bl	80027ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025f8:	f000 fc42 	bl	8002e80 <MX_GPIO_Init>
  MX_DMA_Init();
 80025fc:	f000 fc0e 	bl	8002e1c <MX_DMA_Init>
  MX_TIM2_Init();
 8002600:	f000 f994 	bl	800292c <MX_TIM2_Init>
  MX_TIM5_Init();
 8002604:	f000 faba 	bl	8002b7c <MX_TIM5_Init>
  MX_TIM3_Init();
 8002608:	f000 f9e4 	bl	80029d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800260c:	f000 fa68 	bl	8002ae0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002610:	f000 f938 	bl	8002884 <MX_TIM1_Init>
  MX_TIM6_Init();
 8002614:	f000 fb00 	bl	8002c18 <MX_TIM6_Init>
  MX_TIM16_Init();
 8002618:	f000 fb34 	bl	8002c84 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800261c:	f000 fbb0 	bl	8002d80 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002620:	f000 fb60 	bl	8002ce4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

HAL_TIM_Base_Start_IT(&htim5);
 8002624:	4858      	ldr	r0, [pc, #352]	@ (8002788 <main+0x1a0>)
 8002626:	f002 ffbb 	bl	80055a0 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim4);
 800262a:	4858      	ldr	r0, [pc, #352]	@ (800278c <main+0x1a4>)
 800262c:	f002 ffb8 	bl	80055a0 <HAL_TIM_Base_Start_IT>

HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 8002630:	4857      	ldr	r0, [pc, #348]	@ (8002790 <main+0x1a8>)
 8002632:	f002 ff45 	bl	80054c0 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim3);					// Output compare
 8002636:	4857      	ldr	r0, [pc, #348]	@ (8002794 <main+0x1ac>)
 8002638:	f002 ff42 	bl	80054c0 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim6);					// Trajectory trigger
 800263c:	4856      	ldr	r0, [pc, #344]	@ (8002798 <main+0x1b0>)
 800263e:	f002 ff3f 	bl	80054c0 <HAL_TIM_Base_Start>


//float PID_pos_K[3] = {0.01 ,0.0, 0};
float PID_pos_K[3] = {4.5 ,0.00000000495, 0};
 8002642:	4a56      	ldr	r2, [pc, #344]	@ (800279c <main+0x1b4>)
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	ca07      	ldmia	r2, {r0, r1, r2}
 800264a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

//float PID_velo_K[3] = {3.35 ,0.050, 0.001};
float PID_velo_K[3] = {3.35 ,0.050, 0.001};
 800264e:	4a54      	ldr	r2, [pc, #336]	@ (80027a0 <main+0x1b8>)
 8002650:	463b      	mov	r3, r7
 8002652:	ca07      	ldmia	r2, {r0, r1, r2}
 8002654:	e883 0007 	stmia.w	r3, {r0, r1, r2}

// Initialize ASRS
Traject_init(&Traj,450, 500);				// V_max, A_max
 8002658:	eddf 0a52 	vldr	s1, [pc, #328]	@ 80027a4 <main+0x1bc>
 800265c:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80027a8 <main+0x1c0>
 8002660:	4852      	ldr	r0, [pc, #328]	@ (80027ac <main+0x1c4>)
 8002662:	f7ff fb76 	bl	8001d52 <Traject_init>
Kalman_Start(&Vel_filtered);
 8002666:	4852      	ldr	r0, [pc, #328]	@ (80027b0 <main+0x1c8>)
 8002668:	f7ff fdea 	bl	8002240 <Kalman_Start>
AMT_encoder_init(&AMT, &htim2);
 800266c:	4948      	ldr	r1, [pc, #288]	@ (8002790 <main+0x1a8>)
 800266e:	4851      	ldr	r0, [pc, #324]	@ (80027b4 <main+0x1cc>)
 8002670:	f7fe fd81 	bl	8001176 <AMT_encoder_init>
MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 8002674:	2300      	movs	r3, #0
 8002676:	2204      	movs	r2, #4
 8002678:	4946      	ldr	r1, [pc, #280]	@ (8002794 <main+0x1ac>)
 800267a:	484f      	ldr	r0, [pc, #316]	@ (80027b8 <main+0x1d0>)
 800267c:	f7fe ff50 	bl	8001520 <MOTOR_init>
PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 8002680:	edd7 7a03 	vldr	s15, [r7, #12]
 8002684:	ed97 7a04 	vldr	s14, [r7, #16]
 8002688:	edd7 6a05 	vldr	s13, [r7, #20]
 800268c:	eeb0 1a66 	vmov.f32	s2, s13
 8002690:	eef0 0a47 	vmov.f32	s1, s14
 8002694:	eeb0 0a67 	vmov.f32	s0, s15
 8002698:	4848      	ldr	r0, [pc, #288]	@ (80027bc <main+0x1d4>)
 800269a:	f7ff f9dd 	bl	8001a58 <PID_controller_init>
PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 800269e:	edd7 7a00 	vldr	s15, [r7]
 80026a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80026a6:	edd7 6a03 	vldr	s13, [r7, #12]
 80026aa:	eeb0 1a66 	vmov.f32	s2, s13
 80026ae:	eef0 0a47 	vmov.f32	s1, s14
 80026b2:	eeb0 0a67 	vmov.f32	s0, s15
 80026b6:	4842      	ldr	r0, [pc, #264]	@ (80027c0 <main+0x1d8>)
 80026b8:	f7ff f9ce 	bl	8001a58 <PID_controller_init>
Base_init(&base);
 80026bc:	4841      	ldr	r0, [pc, #260]	@ (80027c4 <main+0x1dc>)
 80026be:	f7fe fd0d 	bl	80010dc <Base_init>

// Modbus & Joystick
hmodbus.huart = &huart2;
 80026c2:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <main+0x1e0>)
 80026c4:	4a41      	ldr	r2, [pc, #260]	@ (80027cc <main+0x1e4>)
 80026c6:	60da      	str	r2, [r3, #12]
hmodbus.htim = &htim16;
 80026c8:	4b3f      	ldr	r3, [pc, #252]	@ (80027c8 <main+0x1e0>)
 80026ca:	4a41      	ldr	r2, [pc, #260]	@ (80027d0 <main+0x1e8>)
 80026cc:	611a      	str	r2, [r3, #16]
hmodbus.slaveAddress = 0x15;
 80026ce:	4b3e      	ldr	r3, [pc, #248]	@ (80027c8 <main+0x1e0>)
 80026d0:	2215      	movs	r2, #21
 80026d2:	701a      	strb	r2, [r3, #0]
hmodbus.RegisterSize =200;
 80026d4:	4b3c      	ldr	r3, [pc, #240]	@ (80027c8 <main+0x1e0>)
 80026d6:	22c8      	movs	r2, #200	@ 0xc8
 80026d8:	609a      	str	r2, [r3, #8]
Modbus_init(&hmodbus, registerFrame);
 80026da:	493e      	ldr	r1, [pc, #248]	@ (80027d4 <main+0x1ec>)
 80026dc:	483a      	ldr	r0, [pc, #232]	@ (80027c8 <main+0x1e0>)
 80026de:	f7fe fec9 	bl	8001474 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp =0;
	  int64_t currentTime = HAL_GetTick();
 80026e2:	f001 f841 	bl	8003768 <HAL_GetTick>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2200      	movs	r2, #0
 80026ea:	4698      	mov	r8, r3
 80026ec:	4691      	mov	r9, r2
 80026ee:	e9c7 8906 	strd	r8, r9, [r7, #24]
	  if(currentTime > timestamp)
 80026f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f6:	4938      	ldr	r1, [pc, #224]	@ (80027d8 <main+0x1f0>)
 80026f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026fc:	4290      	cmp	r0, r2
 80026fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8002702:	d211      	bcs.n	8002728 <main+0x140>
	  {
	  timestamp =currentTime + 1;//ms
 8002704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002708:	1c54      	adds	r4, r2, #1
 800270a:	f143 0500 	adc.w	r5, r3, #0
 800270e:	4622      	mov	r2, r4
 8002710:	462b      	mov	r3, r5
 8002712:	4931      	ldr	r1, [pc, #196]	@ (80027d8 <main+0x1f0>)
 8002714:	e9c1 2300 	strd	r2, r3, [r1]
	  AMT_encoder_update(&AMT, &htim2, micros());
 8002718:	f000 fc3e 	bl	8002f98 <micros>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	491b      	ldr	r1, [pc, #108]	@ (8002790 <main+0x1a8>)
 8002722:	4824      	ldr	r0, [pc, #144]	@ (80027b4 <main+0x1cc>)
 8002724:	f7fe fd40 	bl	80011a8 <AMT_encoder_update>
	  }
	  if(ppp == 1)
 8002728:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <main+0x1f4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d1d8      	bne.n	80026e2 <main+0xfa>
	  {
		  if (__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET)
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <main+0x1b0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d1d1      	bne.n	80026e2 <main+0xfa>
			 {
				 // Clear the update flag
				 __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 800273e:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <main+0x1b0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f06f 0201 	mvn.w	r2, #1
 8002746:	611a      	str	r2, [r3, #16]
				 elapsedTime += 0.00001;
 8002748:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <main+0x1f8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fec7 	bl	80004e0 <__aeabi_f2d>
 8002752:	a30b      	add	r3, pc, #44	@ (adr r3, 8002780 <main+0x198>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f7fd fd64 	bl	8000224 <__adddf3>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe f9e4 	bl	8000b30 <__aeabi_d2f>
 8002768:	4603      	mov	r3, r0
 800276a:	4a1d      	ldr	r2, [pc, #116]	@ (80027e0 <main+0x1f8>)
 800276c:	6013      	str	r3, [r2, #0]
				 Traject(&Traj, 0.0, 600.0);
 800276e:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80027e4 <main+0x1fc>
 8002772:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80027e8 <main+0x200>
 8002776:	480d      	ldr	r0, [pc, #52]	@ (80027ac <main+0x1c4>)
 8002778:	f7ff fb0c 	bl	8001d94 <Traject>
  {
 800277c:	e7b1      	b.n	80026e2 <main+0xfa>
 800277e:	bf00      	nop
 8002780:	88e368f1 	.word	0x88e368f1
 8002784:	3ee4f8b5 	.word	0x3ee4f8b5
 8002788:	200005dc 	.word	0x200005dc
 800278c:	20000510 	.word	0x20000510
 8002790:	20000378 	.word	0x20000378
 8002794:	20000444 	.word	0x20000444
 8002798:	200006a8 	.word	0x200006a8
 800279c:	080094c0 	.word	0x080094c0
 80027a0:	080094cc 	.word	0x080094cc
 80027a4:	43fa0000 	.word	0x43fa0000
 80027a8:	43e10000 	.word	0x43e10000
 80027ac:	20000b10 	.word	0x20000b10
 80027b0:	20000b24 	.word	0x20000b24
 80027b4:	20000a98 	.word	0x20000a98
 80027b8:	20000ad0 	.word	0x20000ad0
 80027bc:	20000ad8 	.word	0x20000ad8
 80027c0:	20000af4 	.word	0x20000af4
 80027c4:	20000094 	.word	0x20000094
 80027c8:	20000ea4 	.word	0x20000ea4
 80027cc:	2000090c 	.word	0x2000090c
 80027d0:	20000774 	.word	0x20000774
 80027d4:	200000dc 	.word	0x200000dc
 80027d8:	20001390 	.word	0x20001390
 80027dc:	20001388 	.word	0x20001388
 80027e0:	2000138c 	.word	0x2000138c
 80027e4:	44160000 	.word	0x44160000
 80027e8:	00000000 	.word	0x00000000

080027ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b094      	sub	sp, #80	@ 0x50
 80027f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f2:	f107 0318 	add.w	r3, r7, #24
 80027f6:	2238      	movs	r2, #56	@ 0x38
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f006 fcd4 	bl	80091a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800280e:	2000      	movs	r0, #0
 8002810:	f001 fdc2 	bl	8004398 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002814:	2302      	movs	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800281e:	2340      	movs	r3, #64	@ 0x40
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002822:	2302      	movs	r3, #2
 8002824:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002826:	2302      	movs	r3, #2
 8002828:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800282a:	2304      	movs	r3, #4
 800282c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800282e:	2355      	movs	r3, #85	@ 0x55
 8002830:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002832:	2302      	movs	r3, #2
 8002834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002836:	2302      	movs	r3, #2
 8002838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800283a:	2302      	movs	r3, #2
 800283c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283e:	f107 0318 	add.w	r3, r7, #24
 8002842:	4618      	mov	r0, r3
 8002844:	f001 fe5c 	bl	8004500 <HAL_RCC_OscConfig>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800284e:	f000 fc25 	bl	800309c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002852:	230f      	movs	r3, #15
 8002854:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002856:	2303      	movs	r3, #3
 8002858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	2104      	movs	r1, #4
 800286a:	4618      	mov	r0, r3
 800286c:	f002 f95a 	bl	8004b24 <HAL_RCC_ClockConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002876:	f000 fc11 	bl	800309c <Error_Handler>
  }
}
 800287a:	bf00      	nop
 800287c:	3750      	adds	r7, #80	@ 0x50
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <MX_TIM1_Init+0xa0>)
 80028a4:	4a20      	ldr	r2, [pc, #128]	@ (8002928 <MX_TIM1_Init+0xa4>)
 80028a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <MX_TIM1_Init+0xa0>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002924 <MX_TIM1_Init+0xa0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <MX_TIM1_Init+0xa0>)
 80028b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <MX_TIM1_Init+0xa0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028c2:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <MX_TIM1_Init+0xa0>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c8:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <MX_TIM1_Init+0xa0>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028ce:	4815      	ldr	r0, [pc, #84]	@ (8002924 <MX_TIM1_Init+0xa0>)
 80028d0:	f002 fd92 	bl	80053f8 <HAL_TIM_Base_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80028da:	f000 fbdf 	bl	800309c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	4619      	mov	r1, r3
 80028ea:	480e      	ldr	r0, [pc, #56]	@ (8002924 <MX_TIM1_Init+0xa0>)
 80028ec:	f003 fd64 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80028f6:	f000 fbd1 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4806      	ldr	r0, [pc, #24]	@ (8002924 <MX_TIM1_Init+0xa0>)
 800290c:	f004 fd3a 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002916:	f000 fbc1 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200002ac 	.word	0x200002ac
 8002928:	40012c00 	.word	0x40012c00

0800292c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	@ 0x30
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	2224      	movs	r2, #36	@ 0x24
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f006 fc34 	bl	80091a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	463b      	mov	r3, r7
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800294a:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <MX_TIM2_Init+0xa4>)
 800294c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002952:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <MX_TIM2_Init+0xa4>)
 8002954:	2200      	movs	r2, #0
 8002956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002958:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <MX_TIM2_Init+0xa4>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 800295e:	4b1c      	ldr	r3, [pc, #112]	@ (80029d0 <MX_TIM2_Init+0xa4>)
 8002960:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002964:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002966:	4b1a      	ldr	r3, [pc, #104]	@ (80029d0 <MX_TIM2_Init+0xa4>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296c:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <MX_TIM2_Init+0xa4>)
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002972:	2303      	movs	r3, #3
 8002974:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800297a:	2301      	movs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800298a:	2301      	movs	r3, #1
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4619      	mov	r1, r3
 800299c:	480c      	ldr	r0, [pc, #48]	@ (80029d0 <MX_TIM2_Init+0xa4>)
 800299e:	f003 f93b 	bl	8005c18 <HAL_TIM_Encoder_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80029a8:	f000 fb78 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ac:	2300      	movs	r3, #0
 80029ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029b4:	463b      	mov	r3, r7
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	@ (80029d0 <MX_TIM2_Init+0xa4>)
 80029ba:	f004 fce3 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80029c4:	f000 fb6a 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029c8:	bf00      	nop
 80029ca:	3730      	adds	r7, #48	@ 0x30
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000378 	.word	0x20000378

080029d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	@ 0x38
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f4:	463b      	mov	r3, r7
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	615a      	str	r2, [r3, #20]
 8002a04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a06:	4b34      	ldr	r3, [pc, #208]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a08:	4a34      	ldr	r2, [pc, #208]	@ (8002adc <MX_TIM3_Init+0x108>)
 8002a0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002a0c:	4b32      	ldr	r3, [pc, #200]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 8002a18:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a1a:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8002a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a20:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a26:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a2c:	482a      	ldr	r0, [pc, #168]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a2e:	f002 fce3 	bl	80053f8 <HAL_TIM_Base_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002a38:	f000 fb30 	bl	800309c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a46:	4619      	mov	r1, r3
 8002a48:	4823      	ldr	r0, [pc, #140]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a4a:	f003 fcb5 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002a54:	f000 fb22 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a58:	481f      	ldr	r0, [pc, #124]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a5a:	f002 fe19 	bl	8005690 <HAL_TIM_PWM_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002a64:	f000 fb1a 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4619      	mov	r1, r3
 8002a76:	4818      	ldr	r0, [pc, #96]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002a78:	f004 fc84 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002a82:	f000 fb0b 	bl	800309c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a86:	2360      	movs	r3, #96	@ 0x60
 8002a88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a98:	463b      	mov	r3, r7
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	480e      	ldr	r0, [pc, #56]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002aa0:	f003 fb76 	bl	8006190 <HAL_TIM_PWM_ConfigChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002aaa:	f000 faf7 	bl	800309c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4807      	ldr	r0, [pc, #28]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002aba:	f003 fb69 	bl	8006190 <HAL_TIM_PWM_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8002ac4:	f000 faea 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ac8:	4803      	ldr	r0, [pc, #12]	@ (8002ad8 <MX_TIM3_Init+0x104>)
 8002aca:	f000 fbf3 	bl	80032b4 <HAL_TIM_MspPostInit>

}
 8002ace:	bf00      	nop
 8002ad0:	3738      	adds	r7, #56	@ 0x38
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000444 	.word	0x20000444
 8002adc:	40000400 	.word	0x40000400

08002ae0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ae6:	f107 0310 	add.w	r3, r7, #16
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002afe:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <MX_TIM4_Init+0x94>)
 8002b00:	4a1d      	ldr	r2, [pc, #116]	@ (8002b78 <MX_TIM4_Init+0x98>)
 8002b02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <MX_TIM4_Init+0x94>)
 8002b06:	22a9      	movs	r2, #169	@ 0xa9
 8002b08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <MX_TIM4_Init+0x94>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <MX_TIM4_Init+0x94>)
 8002b12:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002b16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b18:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <MX_TIM4_Init+0x94>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <MX_TIM4_Init+0x94>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b24:	4813      	ldr	r0, [pc, #76]	@ (8002b74 <MX_TIM4_Init+0x94>)
 8002b26:	f002 fc67 	bl	80053f8 <HAL_TIM_Base_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b30:	f000 fab4 	bl	800309c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480c      	ldr	r0, [pc, #48]	@ (8002b74 <MX_TIM4_Init+0x94>)
 8002b42:	f003 fc39 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002b4c:	f000 faa6 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4805      	ldr	r0, [pc, #20]	@ (8002b74 <MX_TIM4_Init+0x94>)
 8002b5e:	f004 fc11 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002b68:	f000 fa98 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b6c:	bf00      	nop
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000510 	.word	0x20000510
 8002b78:	40000800 	.word	0x40000800

08002b7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b82:	f107 0310 	add.w	r3, r7, #16
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <MX_TIM5_Init+0x94>)
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <MX_TIM5_Init+0x98>)
 8002b9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <MX_TIM5_Init+0x94>)
 8002ba2:	22a9      	movs	r2, #169	@ 0xa9
 8002ba4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c10 <MX_TIM5_Init+0x94>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002bac:	4b18      	ldr	r3, [pc, #96]	@ (8002c10 <MX_TIM5_Init+0x94>)
 8002bae:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb4:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <MX_TIM5_Init+0x94>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bba:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <MX_TIM5_Init+0x94>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002bc0:	4813      	ldr	r0, [pc, #76]	@ (8002c10 <MX_TIM5_Init+0x94>)
 8002bc2:	f002 fc19 	bl	80053f8 <HAL_TIM_Base_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002bcc:	f000 fa66 	bl	800309c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480c      	ldr	r0, [pc, #48]	@ (8002c10 <MX_TIM5_Init+0x94>)
 8002bde:	f003 fbeb 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002be8:	f000 fa58 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bec:	2300      	movs	r3, #0
 8002bee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4805      	ldr	r0, [pc, #20]	@ (8002c10 <MX_TIM5_Init+0x94>)
 8002bfa:	f004 fbc3 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002c04:	f000 fa4a 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200005dc 	.word	0x200005dc
 8002c14:	40000c00 	.word	0x40000c00

08002c18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c28:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <MX_TIM6_Init+0x64>)
 8002c2a:	4a15      	ldr	r2, [pc, #84]	@ (8002c80 <MX_TIM6_Init+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8002c2e:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <MX_TIM6_Init+0x64>)
 8002c30:	22a9      	movs	r2, #169	@ 0xa9
 8002c32:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <MX_TIM6_Init+0x64>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <MX_TIM6_Init+0x64>)
 8002c3c:	220a      	movs	r2, #10
 8002c3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c40:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <MX_TIM6_Init+0x64>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c46:	480d      	ldr	r0, [pc, #52]	@ (8002c7c <MX_TIM6_Init+0x64>)
 8002c48:	f002 fbd6 	bl	80053f8 <HAL_TIM_Base_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002c52:	f000 fa23 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c56:	2320      	movs	r3, #32
 8002c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4806      	ldr	r0, [pc, #24]	@ (8002c7c <MX_TIM6_Init+0x64>)
 8002c64:	f004 fb8e 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002c6e:	f000 fa15 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200006a8 	.word	0x200006a8
 8002c80:	40001000 	.word	0x40001000

08002c84 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002c88:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <MX_TIM16_Init+0x58>)
 8002c8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ce0 <MX_TIM16_Init+0x5c>)
 8002c8c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002c8e:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <MX_TIM16_Init+0x58>)
 8002c90:	22a9      	movs	r2, #169	@ 0xa9
 8002c92:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <MX_TIM16_Init+0x58>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <MX_TIM16_Init+0x58>)
 8002c9c:	f240 4279 	movw	r2, #1145	@ 0x479
 8002ca0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <MX_TIM16_Init+0x58>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <MX_TIM16_Init+0x58>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <MX_TIM16_Init+0x58>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002cb4:	4809      	ldr	r0, [pc, #36]	@ (8002cdc <MX_TIM16_Init+0x58>)
 8002cb6:	f002 fb9f 	bl	80053f8 <HAL_TIM_Base_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002cc0:	f000 f9ec 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002cc4:	2108      	movs	r1, #8
 8002cc6:	4805      	ldr	r0, [pc, #20]	@ (8002cdc <MX_TIM16_Init+0x58>)
 8002cc8:	f002 feb0 	bl	8005a2c <HAL_TIM_OnePulse_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002cd2:	f000 f9e3 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000774 	.word	0x20000774
 8002ce0:	40014400 	.word	0x40014400

08002ce4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ce8:	4b23      	ldr	r3, [pc, #140]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002cea:	4a24      	ldr	r2, [pc, #144]	@ (8002d7c <MX_UART4_Init+0x98>)
 8002cec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9700;
 8002cee:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002cf0:	f242 52e4 	movw	r2, #9700	@ 0x25e4
 8002cf4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002cf6:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d02:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d14:	4b18      	ldr	r3, [pc, #96]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d1a:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d20:	4b15      	ldr	r3, [pc, #84]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d26:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d2c:	4812      	ldr	r0, [pc, #72]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d2e:	f004 fc0f 	bl	8007550 <HAL_UART_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002d38:	f000 f9b0 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	480e      	ldr	r0, [pc, #56]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d40:	f006 f950 	bl	8008fe4 <HAL_UARTEx_SetTxFifoThreshold>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002d4a:	f000 f9a7 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002d4e:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8002d52:	4809      	ldr	r0, [pc, #36]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d54:	f006 f984 	bl	8009060 <HAL_UARTEx_SetRxFifoThreshold>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8002d5e:	f000 f99d 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <MX_UART4_Init+0x94>)
 8002d64:	f006 f905 	bl	8008f72 <HAL_UARTEx_DisableFifoMode>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8002d6e:	f000 f995 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000840 	.word	0x20000840
 8002d7c:	40004c00 	.word	0x40004c00

08002d80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d84:	4b23      	ldr	r3, [pc, #140]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002d86:	4a24      	ldr	r2, [pc, #144]	@ (8002e18 <MX_USART2_UART_Init+0x98>)
 8002d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002d8a:	4b22      	ldr	r3, [pc, #136]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002d8c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002d92:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002d94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d98:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002da0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002da2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002da8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002daa:	220c      	movs	r2, #12
 8002dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dae:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db4:	4b17      	ldr	r3, [pc, #92]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dba:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dc6:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dcc:	4811      	ldr	r0, [pc, #68]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002dce:	f004 fbbf 	bl	8007550 <HAL_UART_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002dd8:	f000 f960 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	480d      	ldr	r0, [pc, #52]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002de0:	f006 f900 	bl	8008fe4 <HAL_UARTEx_SetTxFifoThreshold>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002dea:	f000 f957 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dee:	2100      	movs	r1, #0
 8002df0:	4808      	ldr	r0, [pc, #32]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002df2:	f006 f935 	bl	8009060 <HAL_UARTEx_SetRxFifoThreshold>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002dfc:	f000 f94e 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e00:	4804      	ldr	r0, [pc, #16]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002e02:	f006 f8b6 	bl	8008f72 <HAL_UARTEx_DisableFifoMode>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002e0c:	f000 f946 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2000090c 	.word	0x2000090c
 8002e18:	40004400 	.word	0x40004400

08002e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002e22:	4b16      	ldr	r3, [pc, #88]	@ (8002e7c <MX_DMA_Init+0x60>)
 8002e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e26:	4a15      	ldr	r2, [pc, #84]	@ (8002e7c <MX_DMA_Init+0x60>)
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <MX_DMA_Init+0x60>)
 8002e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <MX_DMA_Init+0x60>)
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e7c <MX_DMA_Init+0x60>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <MX_DMA_Init+0x60>)
 8002e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	200b      	movs	r0, #11
 8002e58:	f000 fd6d 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002e5c:	200b      	movs	r0, #11
 8002e5e:	f000 fd84 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	200c      	movs	r0, #12
 8002e68:	f000 fd65 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002e6c:	200c      	movs	r0, #12
 8002e6e:	f000 fd7c 	bl	800396a <HAL_NVIC_EnableIRQ>

}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000

08002e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	@ 0x28
 8002e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e96:	4b3e      	ldr	r3, [pc, #248]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eae:	4b38      	ldr	r3, [pc, #224]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb2:	4a37      	ldr	r2, [pc, #220]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002eb4:	f043 0320 	orr.w	r3, r3, #32
 8002eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eba:	4b35      	ldr	r3, [pc, #212]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	4b32      	ldr	r3, [pc, #200]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	4a31      	ldr	r2, [pc, #196]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	4b2c      	ldr	r3, [pc, #176]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002ee4:	f043 0302 	orr.w	r3, r3, #2
 8002ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eea:	4b29      	ldr	r3, [pc, #164]	@ (8002f90 <MX_GPIO_Init+0x110>)
 8002eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2120      	movs	r1, #32
 8002efa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002efe:	f001 fa1b 	bl	8004338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	4619      	mov	r1, r3
 8002f18:	481e      	ldr	r0, [pc, #120]	@ (8002f94 <MX_GPIO_Init+0x114>)
 8002f1a:	f001 f873 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pins : Photo_top_Pin Photo_Base_Pin */
  GPIO_InitStruct.Pin = Photo_top_Pin|Photo_Base_Pin;
 8002f1e:	2350      	movs	r3, #80	@ 0x50
 8002f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4619      	mov	r1, r3
 8002f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f36:	f001 f865 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f46:	2300      	movs	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f54:	f001 f856 	bl	8004004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	200a      	movs	r0, #10
 8002f5e:	f000 fcea 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002f62:	200a      	movs	r0, #10
 8002f64:	f000 fd01 	bl	800396a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	2017      	movs	r0, #23
 8002f6e:	f000 fce2 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f72:	2017      	movs	r0, #23
 8002f74:	f000 fcf9 	bl	800396a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2028      	movs	r0, #40	@ 0x28
 8002f7e:	f000 fcda 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f82:	2028      	movs	r0, #40	@ 0x28
 8002f84:	f000 fcf1 	bl	800396a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f88:	bf00      	nop
 8002f8a:	3728      	adds	r7, #40	@ 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	48000800 	.word	0x48000800

08002f98 <micros>:

/* USER CODE BEGIN 4 */

uint64_t micros() 							// Microsecond
{
 8002f98:	b4b0      	push	{r4, r5, r7}
 8002f9a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8002f9c:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <micros+0x2c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <micros+0x30>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	1884      	adds	r4, r0, r2
 8002fb0:	eb41 0503 	adc.w	r5, r1, r3
 8002fb4:	4622      	mov	r2, r4
 8002fb6:	462b      	mov	r3, r5
}
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bcb0      	pop	{r4, r5, r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	200005dc 	.word	0x200005dc
 8002fc8:	20001380 	.word	0x20001380

08002fcc <HAL_TIM_PeriodElapsedCallback>:

// Timer Interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)			// Timer Interrupt
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)				// 1 MHz
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	6809      	ldr	r1, [r1, #0]
 8002fd8:	4812      	ldr	r0, [pc, #72]	@ (8003024 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002fda:	4281      	cmp	r1, r0
 8002fdc:	d107      	bne.n	8002fee <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 4294967296ULL;
 8002fde:	4912      	ldr	r1, [pc, #72]	@ (8003028 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fe4:	1c4b      	adds	r3, r1, #1
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	490f      	ldr	r1, [pc, #60]	@ (8003028 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002fea:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(htim->Instance == TIM4)				// 2000 Hz
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800302c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002ffa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	4a0c      	ldr	r2, [pc, #48]	@ (8003034 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003004:	490c      	ldr	r1, [pc, #48]	@ (8003038 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003006:	480d      	ldr	r0, [pc, #52]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003008:	f7fe fe88 	bl	8001d1c <PID_controller_cascade>
		MOTOR_set_duty(&MT, PID_velo.out);
 800300c:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800300e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003012:	eeb0 0a67 	vmov.f32	s0, s15
 8003016:	480a      	ldr	r0, [pc, #40]	@ (8003040 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003018:	f7fe faa6 	bl	8001568 <MOTOR_set_duty>

	}

}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40000c00 	.word	0x40000c00
 8003028:	20001380 	.word	0x20001380
 800302c:	40000800 	.word	0x40000800
 8003030:	20000b10 	.word	0x20000b10
 8003034:	20000a98 	.word	0x20000a98
 8003038:	20000af4 	.word	0x20000af4
 800303c:	20000ad8 	.word	0x20000ad8
 8003040:	20000ad0 	.word	0x20000ad0

08003044 <HAL_GPIO_EXTI_Callback>:

// Photo Limit Condition
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_6)				// Interrupt for Top Photo
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2b40      	cmp	r3, #64	@ 0x40
 8003052:	d10e      	bne.n	8003072 <HAL_GPIO_EXTI_Callback+0x2e>
    {
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)
 8003054:	2140      	movs	r1, #64	@ 0x40
 8003056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800305a:	f001 f955 	bl	8004308 <HAL_GPIO_ReadPin>
 800305e:	4603      	mov	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d117      	bne.n	8003094 <HAL_GPIO_EXTI_Callback+0x50>
    	{
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8003064:	2201      	movs	r2, #1
 8003066:	2120      	movs	r1, #32
 8003068:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800306c:	f001 f964 	bl	8004338 <HAL_GPIO_WritePin>
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
    	{
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
    	}
    }
}
 8003070:	e010      	b.n	8003094 <HAL_GPIO_EXTI_Callback+0x50>
    else if (GPIO_Pin == GPIO_PIN_4)		// Interrupt for Base Photo
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	2b10      	cmp	r3, #16
 8003076:	d10d      	bne.n	8003094 <HAL_GPIO_EXTI_Callback+0x50>
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 8003078:	2110      	movs	r1, #16
 800307a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800307e:	f001 f943 	bl	8004308 <HAL_GPIO_ReadPin>
 8003082:	4603      	mov	r3, r0
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_GPIO_EXTI_Callback+0x50>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8003088:	2201      	movs	r2, #1
 800308a:	2120      	movs	r1, #32
 800308c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003090:	f001 f952 	bl	8004338 <HAL_GPIO_WritePin>
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a0:	b672      	cpsid	i
}
 80030a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <Error_Handler+0x8>

080030a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <HAL_MspInit+0x44>)
 80030b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b2:	4a0e      	ldr	r2, [pc, #56]	@ (80030ec <HAL_MspInit+0x44>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ba:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <HAL_MspInit+0x44>)
 80030bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_MspInit+0x44>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	4a08      	ldr	r2, [pc, #32]	@ (80030ec <HAL_MspInit+0x44>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <HAL_MspInit+0x44>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80030de:	f001 f9ff 	bl	80044e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a46      	ldr	r2, [pc, #280]	@ (8003218 <HAL_TIM_Base_MspInit+0x128>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d114      	bne.n	800312c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003102:	4b46      	ldr	r3, [pc, #280]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 8003104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003106:	4a45      	ldr	r2, [pc, #276]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 8003108:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800310c:	6613      	str	r3, [r2, #96]	@ 0x60
 800310e:	4b43      	ldr	r3, [pc, #268]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 8003110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003112:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	2019      	movs	r0, #25
 8003120:	f000 fc09 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003124:	2019      	movs	r0, #25
 8003126:	f000 fc20 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800312a:	e070      	b.n	800320e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a3b      	ldr	r2, [pc, #236]	@ (8003220 <HAL_TIM_Base_MspInit+0x130>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10c      	bne.n	8003150 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003136:	4b39      	ldr	r3, [pc, #228]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	4a38      	ldr	r2, [pc, #224]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	6593      	str	r3, [r2, #88]	@ 0x58
 8003142:	4b36      	ldr	r3, [pc, #216]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	69bb      	ldr	r3, [r7, #24]
}
 800314e:	e05e      	b.n	800320e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a33      	ldr	r2, [pc, #204]	@ (8003224 <HAL_TIM_Base_MspInit+0x134>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d114      	bne.n	8003184 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800315a:	4b30      	ldr	r3, [pc, #192]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	4a2f      	ldr	r2, [pc, #188]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6593      	str	r3, [r2, #88]	@ 0x58
 8003166:	4b2d      	ldr	r3, [pc, #180]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	201e      	movs	r0, #30
 8003178:	f000 fbdd 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800317c:	201e      	movs	r0, #30
 800317e:	f000 fbf4 	bl	800396a <HAL_NVIC_EnableIRQ>
}
 8003182:	e044      	b.n	800320e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM5)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a27      	ldr	r2, [pc, #156]	@ (8003228 <HAL_TIM_Base_MspInit+0x138>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d114      	bne.n	80031b8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800318e:	4b23      	ldr	r3, [pc, #140]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003192:	4a22      	ldr	r2, [pc, #136]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 8003194:	f043 0308 	orr.w	r3, r3, #8
 8003198:	6593      	str	r3, [r2, #88]	@ 0x58
 800319a:	4b20      	ldr	r3, [pc, #128]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2100      	movs	r1, #0
 80031aa:	2032      	movs	r0, #50	@ 0x32
 80031ac:	f000 fbc3 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031b0:	2032      	movs	r0, #50	@ 0x32
 80031b2:	f000 fbda 	bl	800396a <HAL_NVIC_EnableIRQ>
}
 80031b6:	e02a      	b.n	800320e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM6)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <HAL_TIM_Base_MspInit+0x13c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10c      	bne.n	80031dc <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031c2:	4b16      	ldr	r3, [pc, #88]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	4a15      	ldr	r2, [pc, #84]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 80031c8:	f043 0310 	orr.w	r3, r3, #16
 80031cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ce:	4b13      	ldr	r3, [pc, #76]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	e018      	b.n	800320e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM16)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a13      	ldr	r2, [pc, #76]	@ (8003230 <HAL_TIM_Base_MspInit+0x140>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d113      	bne.n	800320e <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80031e6:	4b0d      	ldr	r3, [pc, #52]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 80031e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ea:	4a0c      	ldr	r2, [pc, #48]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 80031ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80031f2:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <HAL_TIM_Base_MspInit+0x12c>)
 80031f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2100      	movs	r1, #0
 8003202:	2019      	movs	r0, #25
 8003204:	f000 fb97 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003208:	2019      	movs	r0, #25
 800320a:	f000 fbae 	bl	800396a <HAL_NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40012c00 	.word	0x40012c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800
 8003228:	40000c00 	.word	0x40000c00
 800322c:	40001000 	.word	0x40001000
 8003230:	40014400 	.word	0x40014400

08003234 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	@ 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003254:	d128      	bne.n	80032a8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003256:	4b16      	ldr	r3, [pc, #88]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	4a15      	ldr	r2, [pc, #84]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6593      	str	r3, [r2, #88]	@ 0x58
 8003262:	4b13      	ldr	r3, [pc, #76]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	4a0f      	ldr	r2, [pc, #60]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003286:	2303      	movs	r3, #3
 8003288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003296:	2301      	movs	r3, #1
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	4619      	mov	r1, r3
 80032a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032a4:	f000 feae 	bl	8004004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032a8:	bf00      	nop
 80032aa:	3728      	adds	r7, #40	@ 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000

080032b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a11      	ldr	r2, [pc, #68]	@ (8003318 <HAL_TIM_MspPostInit+0x64>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d11b      	bne.n	800330e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	4b11      	ldr	r3, [pc, #68]	@ (800331c <HAL_TIM_MspPostInit+0x68>)
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	4a10      	ldr	r2, [pc, #64]	@ (800331c <HAL_TIM_MspPostInit+0x68>)
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032e2:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <HAL_TIM_MspPostInit+0x68>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032ee:	2330      	movs	r3, #48	@ 0x30
 80032f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032fe:	2302      	movs	r3, #2
 8003300:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003302:	f107 030c 	add.w	r3, r7, #12
 8003306:	4619      	mov	r1, r3
 8003308:	4805      	ldr	r0, [pc, #20]	@ (8003320 <HAL_TIM_MspPostInit+0x6c>)
 800330a:	f000 fe7b 	bl	8004004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800330e:	bf00      	nop
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40000400 	.word	0x40000400
 800331c:	40021000 	.word	0x40021000
 8003320:	48000400 	.word	0x48000400

08003324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b0a0      	sub	sp, #128	@ 0x80
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800333c:	f107 0318 	add.w	r3, r7, #24
 8003340:	2254      	movs	r2, #84	@ 0x54
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f005 ff2f 	bl	80091a8 <memset>
  if(huart->Instance==UART4)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6b      	ldr	r2, [pc, #428]	@ (80034fc <HAL_UART_MspInit+0x1d8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d137      	bne.n	80033c4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003354:	2308      	movs	r3, #8
 8003356:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003358:	2300      	movs	r3, #0
 800335a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800335c:	f107 0318 	add.w	r3, r7, #24
 8003360:	4618      	mov	r0, r3
 8003362:	f001 fdfb 	bl	8004f5c <HAL_RCCEx_PeriphCLKConfig>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800336c:	f7ff fe96 	bl	800309c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003370:	4b63      	ldr	r3, [pc, #396]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	4a62      	ldr	r2, [pc, #392]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 8003376:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800337a:	6593      	str	r3, [r2, #88]	@ 0x58
 800337c:	4b60      	ldr	r3, [pc, #384]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003388:	4b5d      	ldr	r3, [pc, #372]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 800338a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338c:	4a5c      	ldr	r2, [pc, #368]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 800338e:	f043 0304 	orr.w	r3, r3, #4
 8003392:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003394:	4b5a      	ldr	r3, [pc, #360]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 8003396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80033b2:	2305      	movs	r3, #5
 80033b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80033ba:	4619      	mov	r1, r3
 80033bc:	4851      	ldr	r0, [pc, #324]	@ (8003504 <HAL_UART_MspInit+0x1e0>)
 80033be:	f000 fe21 	bl	8004004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033c2:	e097      	b.n	80034f4 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003508 <HAL_UART_MspInit+0x1e4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f040 8092 	bne.w	80034f4 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033d0:	2302      	movs	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033d4:	2300      	movs	r3, #0
 80033d6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033d8:	f107 0318 	add.w	r3, r7, #24
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fdbd 	bl	8004f5c <HAL_RCCEx_PeriphCLKConfig>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80033e8:	f7ff fe58 	bl	800309c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ec:	4b44      	ldr	r3, [pc, #272]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	4a43      	ldr	r2, [pc, #268]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 80033f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033f8:	4b41      	ldr	r3, [pc, #260]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003404:	4b3e      	ldr	r3, [pc, #248]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 8003406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003408:	4a3d      	ldr	r2, [pc, #244]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003410:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <HAL_UART_MspInit+0x1dc>)
 8003412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800341c:	230c      	movs	r3, #12
 800341e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800342c:	2307      	movs	r3, #7
 800342e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003430:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003434:	4619      	mov	r1, r3
 8003436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800343a:	f000 fde3 	bl	8004004 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800343e:	4b33      	ldr	r3, [pc, #204]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 8003440:	4a33      	ldr	r2, [pc, #204]	@ (8003510 <HAL_UART_MspInit+0x1ec>)
 8003442:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003444:	4b31      	ldr	r3, [pc, #196]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 8003446:	221b      	movs	r2, #27
 8003448:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800344a:	4b30      	ldr	r3, [pc, #192]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 800344c:	2210      	movs	r2, #16
 800344e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003450:	4b2e      	ldr	r3, [pc, #184]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 8003452:	2200      	movs	r2, #0
 8003454:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003456:	4b2d      	ldr	r3, [pc, #180]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 8003458:	2280      	movs	r2, #128	@ 0x80
 800345a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800345c:	4b2b      	ldr	r3, [pc, #172]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 800345e:	2200      	movs	r2, #0
 8003460:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003462:	4b2a      	ldr	r3, [pc, #168]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003468:	4b28      	ldr	r3, [pc, #160]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800346e:	4b27      	ldr	r3, [pc, #156]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003474:	4825      	ldr	r0, [pc, #148]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 8003476:	f000 fa93 	bl	80039a0 <HAL_DMA_Init>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_UART_MspInit+0x160>
      Error_Handler();
 8003480:	f7ff fe0c 	bl	800309c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a21      	ldr	r2, [pc, #132]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 8003488:	67da      	str	r2, [r3, #124]	@ 0x7c
 800348a:	4a20      	ldr	r2, [pc, #128]	@ (800350c <HAL_UART_MspInit+0x1e8>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003490:	4b20      	ldr	r3, [pc, #128]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 8003492:	4a21      	ldr	r2, [pc, #132]	@ (8003518 <HAL_UART_MspInit+0x1f4>)
 8003494:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003496:	4b1f      	ldr	r3, [pc, #124]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 8003498:	221a      	movs	r2, #26
 800349a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800349c:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 80034aa:	2280      	movs	r2, #128	@ 0x80
 80034ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ae:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034b4:	4b17      	ldr	r3, [pc, #92]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80034ba:	4b16      	ldr	r3, [pc, #88]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034c0:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80034c6:	4813      	ldr	r0, [pc, #76]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 80034c8:	f000 fa6a 	bl	80039a0 <HAL_DMA_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 80034d2:	f7ff fde3 	bl	800309c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 80034da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80034de:	4a0d      	ldr	r2, [pc, #52]	@ (8003514 <HAL_UART_MspInit+0x1f0>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034e4:	2200      	movs	r2, #0
 80034e6:	2100      	movs	r1, #0
 80034e8:	2026      	movs	r0, #38	@ 0x26
 80034ea:	f000 fa24 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034ee:	2026      	movs	r0, #38	@ 0x26
 80034f0:	f000 fa3b 	bl	800396a <HAL_NVIC_EnableIRQ>
}
 80034f4:	bf00      	nop
 80034f6:	3780      	adds	r7, #128	@ 0x80
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40004c00 	.word	0x40004c00
 8003500:	40021000 	.word	0x40021000
 8003504:	48000800 	.word	0x48000800
 8003508:	40004400 	.word	0x40004400
 800350c:	200009d8 	.word	0x200009d8
 8003510:	40020008 	.word	0x40020008
 8003514:	20000a38 	.word	0x20000a38
 8003518:	4002001c 	.word	0x4002001c

0800351c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <NMI_Handler+0x4>

08003524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003528:	bf00      	nop
 800352a:	e7fd      	b.n	8003528 <HardFault_Handler+0x4>

0800352c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <MemManage_Handler+0x4>

08003534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <BusFault_Handler+0x4>

0800353c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <UsageFault_Handler+0x4>

08003544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003572:	f000 f8e7 	bl	8003744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}

0800357a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photo_top_Pin);
 800357e:	2010      	movs	r0, #16
 8003580:	f000 fef2 	bl	8004368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	bd80      	pop	{r7, pc}

08003588 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800358c:	4802      	ldr	r0, [pc, #8]	@ (8003598 <DMA1_Channel1_IRQHandler+0x10>)
 800358e:	f000 fbea 	bl	8003d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200009d8 	.word	0x200009d8

0800359c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80035a0:	4802      	ldr	r0, [pc, #8]	@ (80035ac <DMA1_Channel2_IRQHandler+0x10>)
 80035a2:	f000 fbe0 	bl	8003d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000a38 	.word	0x20000a38

080035b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photo_Base_Pin);
 80035b4:	2040      	movs	r0, #64	@ 0x40
 80035b6:	f000 fed7 	bl	8004368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035c4:	4803      	ldr	r0, [pc, #12]	@ (80035d4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80035c6:	f002 fc69 	bl	8005e9c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80035ca:	4803      	ldr	r0, [pc, #12]	@ (80035d8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80035cc:	f002 fc66 	bl	8005e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200002ac 	.word	0x200002ac
 80035d8:	20000774 	.word	0x20000774

080035dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035e0:	4802      	ldr	r0, [pc, #8]	@ (80035ec <TIM4_IRQHandler+0x10>)
 80035e2:	f002 fc5b 	bl	8005e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000510 	.word	0x20000510

080035f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035f4:	4802      	ldr	r0, [pc, #8]	@ (8003600 <USART2_IRQHandler+0x10>)
 80035f6:	f004 f911 	bl	800781c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	2000090c 	.word	0x2000090c

08003604 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003608:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800360c:	f000 feac 	bl	8004368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}

08003614 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003618:	4802      	ldr	r0, [pc, #8]	@ (8003624 <TIM5_IRQHandler+0x10>)
 800361a:	f002 fc3f 	bl	8005e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200005dc 	.word	0x200005dc

08003628 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800362c:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <SystemInit+0x20>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003632:	4a05      	ldr	r2, [pc, #20]	@ (8003648 <SystemInit+0x20>)
 8003634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800364c:	480d      	ldr	r0, [pc, #52]	@ (8003684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800364e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003650:	f7ff ffea 	bl	8003628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003654:	480c      	ldr	r0, [pc, #48]	@ (8003688 <LoopForever+0x6>)
  ldr r1, =_edata
 8003656:	490d      	ldr	r1, [pc, #52]	@ (800368c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003658:	4a0d      	ldr	r2, [pc, #52]	@ (8003690 <LoopForever+0xe>)
  movs r3, #0
 800365a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800365c:	e002      	b.n	8003664 <LoopCopyDataInit>

0800365e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800365e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003662:	3304      	adds	r3, #4

08003664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003668:	d3f9      	bcc.n	800365e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800366a:	4a0a      	ldr	r2, [pc, #40]	@ (8003694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800366c:	4c0a      	ldr	r4, [pc, #40]	@ (8003698 <LoopForever+0x16>)
  movs r3, #0
 800366e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003670:	e001      	b.n	8003676 <LoopFillZerobss>

08003672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003674:	3204      	adds	r2, #4

08003676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003678:	d3fb      	bcc.n	8003672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800367a:	f005 fda3 	bl	80091c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800367e:	f7fe ffb3 	bl	80025e8 <main>

08003682 <LoopForever>:

LoopForever:
    b LoopForever
 8003682:	e7fe      	b.n	8003682 <LoopForever>
  ldr   r0, =_estack
 8003684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800368c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003690:	08009528 	.word	0x08009528
  ldr r2, =_sbss
 8003694:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003698:	200014d4 	.word	0x200014d4

0800369c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800369c:	e7fe      	b.n	800369c <ADC1_2_IRQHandler>

0800369e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a8:	2003      	movs	r0, #3
 80036aa:	f000 f939 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036ae:	2000      	movs	r0, #0
 80036b0:	f000 f80e 	bl	80036d0 <HAL_InitTick>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	71fb      	strb	r3, [r7, #7]
 80036be:	e001      	b.n	80036c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036c0:	f7ff fcf2 	bl	80030a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036c4:	79fb      	ldrb	r3, [r7, #7]

}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80036dc:	4b16      	ldr	r3, [pc, #88]	@ (8003738 <HAL_InitTick+0x68>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d022      	beq.n	800372a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80036e4:	4b15      	ldr	r3, [pc, #84]	@ (800373c <HAL_InitTick+0x6c>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b13      	ldr	r3, [pc, #76]	@ (8003738 <HAL_InitTick+0x68>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80036f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f944 	bl	8003986 <HAL_SYSTICK_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10f      	bne.n	8003724 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b0f      	cmp	r3, #15
 8003708:	d809      	bhi.n	800371e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800370a:	2200      	movs	r2, #0
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	f04f 30ff 	mov.w	r0, #4294967295
 8003712:	f000 f910 	bl	8003936 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003716:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <HAL_InitTick+0x70>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	e007      	b.n	800372e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	e004      	b.n	800372e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e001      	b.n	800372e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000014 	.word	0x20000014
 800373c:	2000000c 	.word	0x2000000c
 8003740:	20000010 	.word	0x20000010

08003744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003748:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <HAL_IncTick+0x1c>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <HAL_IncTick+0x20>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4413      	add	r3, r2
 8003752:	4a03      	ldr	r2, [pc, #12]	@ (8003760 <HAL_IncTick+0x1c>)
 8003754:	6013      	str	r3, [r2, #0]
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	20001398 	.word	0x20001398
 8003764:	20000014 	.word	0x20000014

08003768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return uwTick;
 800376c:	4b03      	ldr	r3, [pc, #12]	@ (800377c <HAL_GetTick+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20001398 	.word	0x20001398

08003780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800379c:	4013      	ands	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b2:	4a04      	ldr	r2, [pc, #16]	@ (80037c4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	60d3      	str	r3, [r2, #12]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037cc:	4b04      	ldr	r3, [pc, #16]	@ (80037e0 <__NVIC_GetPriorityGrouping+0x18>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	f003 0307 	and.w	r3, r3, #7
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	db0b      	blt.n	800380e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	4907      	ldr	r1, [pc, #28]	@ (800381c <__NVIC_EnableIRQ+0x38>)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2001      	movs	r0, #1
 8003806:	fa00 f202 	lsl.w	r2, r0, r2
 800380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000e100 	.word	0xe000e100

08003820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	2b00      	cmp	r3, #0
 8003832:	db0a      	blt.n	800384a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	490c      	ldr	r1, [pc, #48]	@ (800386c <__NVIC_SetPriority+0x4c>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	440b      	add	r3, r1
 8003844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003848:	e00a      	b.n	8003860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4908      	ldr	r1, [pc, #32]	@ (8003870 <__NVIC_SetPriority+0x50>)
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	3b04      	subs	r3, #4
 8003858:	0112      	lsls	r2, r2, #4
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	440b      	add	r3, r1
 800385e:	761a      	strb	r2, [r3, #24]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	@ 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f1c3 0307 	rsb	r3, r3, #7
 800388e:	2b04      	cmp	r3, #4
 8003890:	bf28      	it	cs
 8003892:	2304      	movcs	r3, #4
 8003894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3304      	adds	r3, #4
 800389a:	2b06      	cmp	r3, #6
 800389c:	d902      	bls.n	80038a4 <NVIC_EncodePriority+0x30>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3b03      	subs	r3, #3
 80038a2:	e000      	b.n	80038a6 <NVIC_EncodePriority+0x32>
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	401a      	ands	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43d9      	mvns	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	4313      	orrs	r3, r2
         );
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	@ 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ec:	d301      	bcc.n	80038f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f2:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <SysTick_Config+0x40>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fa:	210f      	movs	r1, #15
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f7ff ff8e 	bl	8003820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <SysTick_Config+0x40>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390a:	4b04      	ldr	r3, [pc, #16]	@ (800391c <SysTick_Config+0x40>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000e010 	.word	0xe000e010

08003920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff29 	bl	8003780 <__NVIC_SetPriorityGrouping>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003944:	f7ff ff40 	bl	80037c8 <__NVIC_GetPriorityGrouping>
 8003948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff90 	bl	8003874 <NVIC_EncodePriority>
 8003954:	4602      	mov	r2, r0
 8003956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff5f 	bl	8003820 <__NVIC_SetPriority>
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff33 	bl	80037e4 <__NVIC_EnableIRQ>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ffa4 	bl	80038dc <SysTick_Config>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e08d      	b.n	8003ace <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b47      	ldr	r3, [pc, #284]	@ (8003ad8 <HAL_DMA_Init+0x138>)
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d80f      	bhi.n	80039de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b45      	ldr	r3, [pc, #276]	@ (8003adc <HAL_DMA_Init+0x13c>)
 80039c6:	4413      	add	r3, r2
 80039c8:	4a45      	ldr	r2, [pc, #276]	@ (8003ae0 <HAL_DMA_Init+0x140>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	009a      	lsls	r2, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a42      	ldr	r2, [pc, #264]	@ (8003ae4 <HAL_DMA_Init+0x144>)
 80039da:	641a      	str	r2, [r3, #64]	@ 0x40
 80039dc:	e00e      	b.n	80039fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	4b40      	ldr	r3, [pc, #256]	@ (8003ae8 <HAL_DMA_Init+0x148>)
 80039e6:	4413      	add	r3, r2
 80039e8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ae0 <HAL_DMA_Init+0x140>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	009a      	lsls	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a3c      	ldr	r2, [pc, #240]	@ (8003aec <HAL_DMA_Init+0x14c>)
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa76 	bl	8003f40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a5c:	d102      	bne.n	8003a64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a78:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_DMA_Init+0x104>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d80c      	bhi.n	8003aa4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa96 	bl	8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	e008      	b.n	8003ab6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40020407 	.word	0x40020407
 8003adc:	bffdfff8 	.word	0xbffdfff8
 8003ae0:	cccccccd 	.word	0xcccccccd
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	bffdfbf8 	.word	0xbffdfbf8
 8003aec:	40020400 	.word	0x40020400

08003af0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_DMA_Start_IT+0x20>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e066      	b.n	8003bde <HAL_DMA_Start_IT+0xee>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d155      	bne.n	8003bd0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f9bb 	bl	8003ec4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 020e 	orr.w	r2, r2, #14
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e00f      	b.n	8003b88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 020a 	orr.w	r2, r2, #10
 8003b86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ba4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e005      	b.n	8003bdc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d005      	beq.n	8003c0a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2204      	movs	r2, #4
 8003c02:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e037      	b.n	8003c7a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 020e 	bic.w	r2, r2, #14
 8003c18:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c28:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	f003 021f 	and.w	r2, r3, #31
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c56:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00c      	beq.n	8003c7a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c6e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c78:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d00d      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
 8003cca:	e047      	b.n	8003d5c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 020e 	bic.w	r2, r2, #14
 8003cda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	2101      	movs	r1, #1
 8003d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00c      	beq.n	8003d3c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
    }
  }
  return status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2204      	movs	r2, #4
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d026      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x7a>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d021      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d107      	bne.n	8003dba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0204 	bic.w	r2, r2, #4
 8003db8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	f003 021f 	and.w	r2, r3, #31
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	2104      	movs	r1, #4
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d071      	beq.n	8003eba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dde:	e06c      	b.n	8003eba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2202      	movs	r2, #2
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d02e      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d029      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10b      	bne.n	8003e24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 020a 	bic.w	r2, r2, #10
 8003e1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	2102      	movs	r1, #2
 8003e32:	fa01 f202 	lsl.w	r2, r1, r2
 8003e36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d038      	beq.n	8003eba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e50:	e033      	b.n	8003eba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02a      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d025      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 020e 	bic.w	r2, r2, #14
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	f003 021f 	and.w	r2, r3, #31
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
}
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eda:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003eec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f003 021f 	and.w	r2, r3, #31
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	2101      	movs	r1, #1
 8003efc:	fa01 f202 	lsl.w	r2, r1, r2
 8003f00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d108      	bne.n	8003f24 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f22:	e007      	b.n	8003f34 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b16      	ldr	r3, [pc, #88]	@ (8003fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d802      	bhi.n	8003f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f54:	4b15      	ldr	r3, [pc, #84]	@ (8003fac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e001      	b.n	8003f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f5c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	3b08      	subs	r3, #8
 8003f6a:	4a12      	ldr	r2, [pc, #72]	@ (8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	009a      	lsls	r2, r3, #2
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	461a      	mov	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2201      	movs	r2, #1
 8003f94:	409a      	lsls	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40020407 	.word	0x40020407
 8003fac:	40020800 	.word	0x40020800
 8003fb0:	40020820 	.word	0x40020820
 8003fb4:	cccccccd 	.word	0xcccccccd
 8003fb8:	40020880 	.word	0x40020880

08003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a08      	ldr	r2, [pc, #32]	@ (8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fde:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	1000823f 	.word	0x1000823f
 8004000:	40020940 	.word	0x40020940

08004004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004012:	e15a      	b.n	80042ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2101      	movs	r1, #1
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 814c 	beq.w	80042c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d005      	beq.n	8004044 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004040:	2b02      	cmp	r3, #2
 8004042:	d130      	bne.n	80040a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800407a:	2201      	movs	r2, #1
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0201 	and.w	r2, r3, #1
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d017      	beq.n	80040e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2203      	movs	r2, #3
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d123      	bne.n	8004136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	08da      	lsrs	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3208      	adds	r2, #8
 80040f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	08da      	lsrs	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3208      	adds	r2, #8
 8004130:	6939      	ldr	r1, [r7, #16]
 8004132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	2203      	movs	r2, #3
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0203 	and.w	r2, r3, #3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80a6 	beq.w	80042c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004178:	4b5b      	ldr	r3, [pc, #364]	@ (80042e8 <HAL_GPIO_Init+0x2e4>)
 800417a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417c:	4a5a      	ldr	r2, [pc, #360]	@ (80042e8 <HAL_GPIO_Init+0x2e4>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6613      	str	r3, [r2, #96]	@ 0x60
 8004184:	4b58      	ldr	r3, [pc, #352]	@ (80042e8 <HAL_GPIO_Init+0x2e4>)
 8004186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004190:	4a56      	ldr	r2, [pc, #344]	@ (80042ec <HAL_GPIO_Init+0x2e8>)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3302      	adds	r3, #2
 8004198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	220f      	movs	r2, #15
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041ba:	d01f      	beq.n	80041fc <HAL_GPIO_Init+0x1f8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a4c      	ldr	r2, [pc, #304]	@ (80042f0 <HAL_GPIO_Init+0x2ec>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d019      	beq.n	80041f8 <HAL_GPIO_Init+0x1f4>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a4b      	ldr	r2, [pc, #300]	@ (80042f4 <HAL_GPIO_Init+0x2f0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <HAL_GPIO_Init+0x1f0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a4a      	ldr	r2, [pc, #296]	@ (80042f8 <HAL_GPIO_Init+0x2f4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00d      	beq.n	80041f0 <HAL_GPIO_Init+0x1ec>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a49      	ldr	r2, [pc, #292]	@ (80042fc <HAL_GPIO_Init+0x2f8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <HAL_GPIO_Init+0x1e8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a48      	ldr	r2, [pc, #288]	@ (8004300 <HAL_GPIO_Init+0x2fc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d101      	bne.n	80041e8 <HAL_GPIO_Init+0x1e4>
 80041e4:	2305      	movs	r3, #5
 80041e6:	e00a      	b.n	80041fe <HAL_GPIO_Init+0x1fa>
 80041e8:	2306      	movs	r3, #6
 80041ea:	e008      	b.n	80041fe <HAL_GPIO_Init+0x1fa>
 80041ec:	2304      	movs	r3, #4
 80041ee:	e006      	b.n	80041fe <HAL_GPIO_Init+0x1fa>
 80041f0:	2303      	movs	r3, #3
 80041f2:	e004      	b.n	80041fe <HAL_GPIO_Init+0x1fa>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e002      	b.n	80041fe <HAL_GPIO_Init+0x1fa>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_GPIO_Init+0x1fa>
 80041fc:	2300      	movs	r3, #0
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	f002 0203 	and.w	r2, r2, #3
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	4093      	lsls	r3, r2
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800420e:	4937      	ldr	r1, [pc, #220]	@ (80042ec <HAL_GPIO_Init+0x2e8>)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	3302      	adds	r3, #2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800421c:	4b39      	ldr	r3, [pc, #228]	@ (8004304 <HAL_GPIO_Init+0x300>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004240:	4a30      	ldr	r2, [pc, #192]	@ (8004304 <HAL_GPIO_Init+0x300>)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004246:	4b2f      	ldr	r3, [pc, #188]	@ (8004304 <HAL_GPIO_Init+0x300>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800426a:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <HAL_GPIO_Init+0x300>)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004270:	4b24      	ldr	r3, [pc, #144]	@ (8004304 <HAL_GPIO_Init+0x300>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	43db      	mvns	r3, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004294:	4a1b      	ldr	r2, [pc, #108]	@ (8004304 <HAL_GPIO_Init+0x300>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800429a:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <HAL_GPIO_Init+0x300>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042be:	4a11      	ldr	r2, [pc, #68]	@ (8004304 <HAL_GPIO_Init+0x300>)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3301      	adds	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f ae9d 	bne.w	8004014 <HAL_GPIO_Init+0x10>
  }
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40010000 	.word	0x40010000
 80042f0:	48000400 	.word	0x48000400
 80042f4:	48000800 	.word	0x48000800
 80042f8:	48000c00 	.word	0x48000c00
 80042fc:	48001000 	.word	0x48001000
 8004300:	48001400 	.word	0x48001400
 8004304:	40010400 	.word	0x40010400

08004308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	887b      	ldrh	r3, [r7, #2]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
 8004324:	e001      	b.n	800432a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	807b      	strh	r3, [r7, #2]
 8004344:	4613      	mov	r3, r2
 8004346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004348:	787b      	ldrb	r3, [r7, #1]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004354:	e002      	b.n	800435c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004372:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	4013      	ands	r3, r2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d006      	beq.n	800438c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800437e:	4a05      	ldr	r2, [pc, #20]	@ (8004394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe fe5c 	bl	8003044 <HAL_GPIO_EXTI_Callback>
  }
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40010400 	.word	0x40010400

08004398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d141      	bne.n	800442a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043a6:	4b4b      	ldr	r3, [pc, #300]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b2:	d131      	bne.n	8004418 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043b4:	4b47      	ldr	r3, [pc, #284]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ba:	4a46      	ldr	r2, [pc, #280]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043c4:	4b43      	ldr	r3, [pc, #268]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043cc:	4a41      	ldr	r2, [pc, #260]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043d4:	4b40      	ldr	r3, [pc, #256]	@ (80044d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2232      	movs	r2, #50	@ 0x32
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	4a3f      	ldr	r2, [pc, #252]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	0c9b      	lsrs	r3, r3, #18
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ea:	e002      	b.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f2:	4b38      	ldr	r3, [pc, #224]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fe:	d102      	bne.n	8004406 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f2      	bne.n	80043ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004406:	4b33      	ldr	r3, [pc, #204]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004412:	d158      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e057      	b.n	80044c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004418:	4b2e      	ldr	r3, [pc, #184]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800441e:	4a2d      	ldr	r2, [pc, #180]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004424:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004428:	e04d      	b.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004430:	d141      	bne.n	80044b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004432:	4b28      	ldr	r3, [pc, #160]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800443e:	d131      	bne.n	80044a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004440:	4b24      	ldr	r3, [pc, #144]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004446:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004450:	4b20      	ldr	r3, [pc, #128]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004458:	4a1e      	ldr	r2, [pc, #120]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800445e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004460:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2232      	movs	r2, #50	@ 0x32
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	0c9b      	lsrs	r3, r3, #18
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004476:	e002      	b.n	800447e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b01      	subs	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800447e:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448a:	d102      	bne.n	8004492 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f2      	bne.n	8004478 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004492:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d112      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e011      	b.n	80044c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044a4:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044aa:	4a0a      	ldr	r2, [pc, #40]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044b4:	e007      	b.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044b6:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044be:	4a05      	ldr	r2, [pc, #20]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40007000 	.word	0x40007000
 80044d8:	2000000c 	.word	0x2000000c
 80044dc:	431bde83 	.word	0x431bde83

080044e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044e4:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a04      	ldr	r2, [pc, #16]	@ (80044fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044ee:	6093      	str	r3, [r2, #8]
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40007000 	.word	0x40007000

08004500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e2fe      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d075      	beq.n	800460a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	4b97      	ldr	r3, [pc, #604]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004528:	4b94      	ldr	r3, [pc, #592]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b0c      	cmp	r3, #12
 8004536:	d102      	bne.n	800453e <HAL_RCC_OscConfig+0x3e>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d002      	beq.n	8004544 <HAL_RCC_OscConfig+0x44>
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d10b      	bne.n	800455c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	4b8d      	ldr	r3, [pc, #564]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05b      	beq.n	8004608 <HAL_RCC_OscConfig+0x108>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d157      	bne.n	8004608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e2d9      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004564:	d106      	bne.n	8004574 <HAL_RCC_OscConfig+0x74>
 8004566:	4b85      	ldr	r3, [pc, #532]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a84      	ldr	r2, [pc, #528]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e01d      	b.n	80045b0 <HAL_RCC_OscConfig+0xb0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x98>
 800457e:	4b7f      	ldr	r3, [pc, #508]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7e      	ldr	r2, [pc, #504]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b7c      	ldr	r3, [pc, #496]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a7b      	ldr	r2, [pc, #492]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0xb0>
 8004598:	4b78      	ldr	r3, [pc, #480]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a77      	ldr	r2, [pc, #476]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b75      	ldr	r3, [pc, #468]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a74      	ldr	r2, [pc, #464]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d013      	beq.n	80045e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7ff f8d6 	bl	8003768 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7ff f8d2 	bl	8003768 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	@ 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e29e      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d2:	4b6a      	ldr	r3, [pc, #424]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0xc0>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7ff f8c2 	bl	8003768 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7ff f8be 	bl	8003768 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	@ 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e28a      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045fa:	4b60      	ldr	r3, [pc, #384]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0xe8>
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d075      	beq.n	8004702 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004616:	4b59      	ldr	r3, [pc, #356]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004620:	4b56      	ldr	r3, [pc, #344]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d102      	bne.n	8004636 <HAL_RCC_OscConfig+0x136>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d002      	beq.n	800463c <HAL_RCC_OscConfig+0x13c>
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d11f      	bne.n	800467c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800463c:	4b4f      	ldr	r3, [pc, #316]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_OscConfig+0x154>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e25d      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004654:	4b49      	ldr	r3, [pc, #292]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	4946      	ldr	r1, [pc, #280]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004668:	4b45      	ldr	r3, [pc, #276]	@ (8004780 <HAL_RCC_OscConfig+0x280>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff f82f 	bl	80036d0 <HAL_InitTick>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d043      	beq.n	8004700 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e249      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d023      	beq.n	80046cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b3d      	ldr	r3, [pc, #244]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3c      	ldr	r2, [pc, #240]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7ff f86a 	bl	8003768 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7ff f866 	bl	8003768 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e232      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046aa:	4b34      	ldr	r3, [pc, #208]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b6:	4b31      	ldr	r3, [pc, #196]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	061b      	lsls	r3, r3, #24
 80046c4:	492d      	ldr	r1, [pc, #180]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
 80046ca:	e01a      	b.n	8004702 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046cc:	4b2b      	ldr	r3, [pc, #172]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2a      	ldr	r2, [pc, #168]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7ff f846 	bl	8003768 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e0:	f7ff f842 	bl	8003768 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e20e      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046f2:	4b22      	ldr	r3, [pc, #136]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x1e0>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d041      	beq.n	8004792 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01c      	beq.n	8004750 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004716:	4b19      	ldr	r3, [pc, #100]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471c:	4a17      	ldr	r2, [pc, #92]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004726:	f7ff f81f 	bl	8003768 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472e:	f7ff f81b 	bl	8003768 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e1e7      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004740:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ef      	beq.n	800472e <HAL_RCC_OscConfig+0x22e>
 800474e:	e020      	b.n	8004792 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004756:	4a09      	ldr	r2, [pc, #36]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004760:	f7ff f802 	bl	8003768 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004766:	e00d      	b.n	8004784 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004768:	f7fe fffe 	bl	8003768 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d906      	bls.n	8004784 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e1ca      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004784:	4b8c      	ldr	r3, [pc, #560]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ea      	bne.n	8004768 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80a6 	beq.w	80048ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a0:	2300      	movs	r3, #0
 80047a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047a4:	4b84      	ldr	r3, [pc, #528]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2b4>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x2b6>
 80047b4:	2300      	movs	r3, #0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	4b7f      	ldr	r3, [pc, #508]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	4a7e      	ldr	r2, [pc, #504]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047c6:	4b7c      	ldr	r3, [pc, #496]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047d2:	2301      	movs	r3, #1
 80047d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d6:	4b79      	ldr	r3, [pc, #484]	@ (80049bc <HAL_RCC_OscConfig+0x4bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d118      	bne.n	8004814 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e2:	4b76      	ldr	r3, [pc, #472]	@ (80049bc <HAL_RCC_OscConfig+0x4bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a75      	ldr	r2, [pc, #468]	@ (80049bc <HAL_RCC_OscConfig+0x4bc>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ee:	f7fe ffbb 	bl	8003768 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f6:	f7fe ffb7 	bl	8003768 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e183      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004808:	4b6c      	ldr	r3, [pc, #432]	@ (80049bc <HAL_RCC_OscConfig+0x4bc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d108      	bne.n	800482e <HAL_RCC_OscConfig+0x32e>
 800481c:	4b66      	ldr	r3, [pc, #408]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	4a65      	ldr	r2, [pc, #404]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800482c:	e024      	b.n	8004878 <HAL_RCC_OscConfig+0x378>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d110      	bne.n	8004858 <HAL_RCC_OscConfig+0x358>
 8004836:	4b60      	ldr	r3, [pc, #384]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483c:	4a5e      	ldr	r2, [pc, #376]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800483e:	f043 0304 	orr.w	r3, r3, #4
 8004842:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004846:	4b5c      	ldr	r3, [pc, #368]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	4a5a      	ldr	r2, [pc, #360]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004856:	e00f      	b.n	8004878 <HAL_RCC_OscConfig+0x378>
 8004858:	4b57      	ldr	r3, [pc, #348]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485e:	4a56      	ldr	r2, [pc, #344]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004868:	4b53      	ldr	r3, [pc, #332]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486e:	4a52      	ldr	r2, [pc, #328]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d016      	beq.n	80048ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fe ff72 	bl	8003768 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fe ff6e 	bl	8003768 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e138      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489e:	4b46      	ldr	r3, [pc, #280]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ed      	beq.n	8004888 <HAL_RCC_OscConfig+0x388>
 80048ac:	e015      	b.n	80048da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fe ff5b 	bl	8003768 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fe ff57 	bl	8003768 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e121      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048cc:	4b3a      	ldr	r3, [pc, #232]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ed      	bne.n	80048b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048da:	7ffb      	ldrb	r3, [r7, #31]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b35      	ldr	r3, [pc, #212]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e4:	4a34      	ldr	r2, [pc, #208]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80048e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d03c      	beq.n	8004972 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01c      	beq.n	800493a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004900:	4b2d      	ldr	r3, [pc, #180]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004902:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004906:	4a2c      	ldr	r2, [pc, #176]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fe ff2a 	bl	8003768 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004918:	f7fe ff26 	bl	8003768 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0f2      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800492a:	4b23      	ldr	r3, [pc, #140]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800492c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ef      	beq.n	8004918 <HAL_RCC_OscConfig+0x418>
 8004938:	e01b      	b.n	8004972 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493a:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800493c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004940:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fe ff0d 	bl	8003768 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004952:	f7fe ff09 	bl	8003768 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e0d5      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004964:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ef      	bne.n	8004952 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80c9 	beq.w	8004b0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800497c:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b0c      	cmp	r3, #12
 8004986:	f000 8083 	beq.w	8004a90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d15e      	bne.n	8004a50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004992:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a08      	ldr	r2, [pc, #32]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004998:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800499c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499e:	f7fe fee3 	bl	8003768 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a4:	e00c      	b.n	80049c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fe fedf 	bl	8003768 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d905      	bls.n	80049c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e0ab      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c0:	4b55      	ldr	r3, [pc, #340]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1ec      	bne.n	80049a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049cc:	4b52      	ldr	r3, [pc, #328]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	4b52      	ldr	r3, [pc, #328]	@ (8004b1c <HAL_RCC_OscConfig+0x61c>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6a11      	ldr	r1, [r2, #32]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049dc:	3a01      	subs	r2, #1
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049e6:	0212      	lsls	r2, r2, #8
 80049e8:	4311      	orrs	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049ee:	0852      	lsrs	r2, r2, #1
 80049f0:	3a01      	subs	r2, #1
 80049f2:	0552      	lsls	r2, r2, #21
 80049f4:	4311      	orrs	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049fa:	0852      	lsrs	r2, r2, #1
 80049fc:	3a01      	subs	r2, #1
 80049fe:	0652      	lsls	r2, r2, #25
 8004a00:	4311      	orrs	r1, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a06:	06d2      	lsls	r2, r2, #27
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	4943      	ldr	r1, [pc, #268]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a10:	4b41      	ldr	r3, [pc, #260]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a40      	ldr	r2, [pc, #256]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a3d      	ldr	r2, [pc, #244]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fe fe9e 	bl	8003768 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a30:	f7fe fe9a 	bl	8003768 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e066      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	4b35      	ldr	r3, [pc, #212]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x530>
 8004a4e:	e05e      	b.n	8004b0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a50:	4b31      	ldr	r3, [pc, #196]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a30      	ldr	r2, [pc, #192]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fe fe84 	bl	8003768 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fe fe80 	bl	8003768 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e04c      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a76:	4b28      	ldr	r3, [pc, #160]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a82:	4b25      	ldr	r3, [pc, #148]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	4924      	ldr	r1, [pc, #144]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a88:	4b25      	ldr	r3, [pc, #148]	@ (8004b20 <HAL_RCC_OscConfig+0x620>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60cb      	str	r3, [r1, #12]
 8004a8e:	e03e      	b.n	8004b0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e039      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f003 0203 	and.w	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d12c      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	3b01      	subs	r3, #1
 8004abc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d123      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d11b      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d113      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	3b01      	subs	r3, #1
 8004af0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	019f800c 	.word	0x019f800c
 8004b20:	feeefffc 	.word	0xfeeefffc

08004b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e11e      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b91      	ldr	r3, [pc, #580]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d910      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b8e      	ldr	r3, [pc, #568]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 020f 	bic.w	r2, r3, #15
 8004b52:	498c      	ldr	r1, [pc, #560]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e106      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d073      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d129      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b80:	4b81      	ldr	r3, [pc, #516]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0f4      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b90:	f000 f99e 	bl	8004ed0 <RCC_GetSysClockFreqFromPLLSource>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4a7c      	ldr	r2, [pc, #496]	@ (8004d8c <HAL_RCC_ClockConfig+0x268>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d93f      	bls.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d033      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d12f      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bbe:	4b72      	ldr	r3, [pc, #456]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bc6:	4a70      	ldr	r2, [pc, #448]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bce:	2380      	movs	r3, #128	@ 0x80
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e024      	b.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0c6      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bec:	4b66      	ldr	r3, [pc, #408]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0be      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004bfc:	f000 f8ce 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4a61      	ldr	r2, [pc, #388]	@ (8004d8c <HAL_RCC_ClockConfig+0x268>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d909      	bls.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c12:	4a5d      	ldr	r2, [pc, #372]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c1a:	2380      	movs	r3, #128	@ 0x80
 8004c1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 0203 	bic.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4957      	ldr	r1, [pc, #348]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c30:	f7fe fd9a 	bl	8003768 <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c38:	f7fe fd96 	bl	8003768 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e095      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 020c 	and.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d1eb      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d023      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c78:	4b43      	ldr	r3, [pc, #268]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a42      	ldr	r2, [pc, #264]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c90:	4b3d      	ldr	r3, [pc, #244]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c98:	4a3b      	ldr	r2, [pc, #236]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca0:	4b39      	ldr	r3, [pc, #228]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4936      	ldr	r1, [pc, #216]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b80      	cmp	r3, #128	@ 0x80
 8004cb8:	d105      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cba:	4b33      	ldr	r3, [pc, #204]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4a32      	ldr	r2, [pc, #200]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d21d      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f023 020f 	bic.w	r2, r3, #15
 8004cdc:	4929      	ldr	r1, [pc, #164]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ce4:	f7fe fd40 	bl	8003768 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7fe fd3c 	bl	8003768 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e03b      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b20      	ldr	r3, [pc, #128]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1ed      	bne.n	8004cec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4917      	ldr	r1, [pc, #92]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3a:	4b13      	ldr	r3, [pc, #76]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	490f      	ldr	r1, [pc, #60]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d4e:	f000 f825 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d52:	4602      	mov	r2, r0
 8004d54:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	490c      	ldr	r1, [pc, #48]	@ (8004d90 <HAL_RCC_ClockConfig+0x26c>)
 8004d60:	5ccb      	ldrb	r3, [r1, r3]
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d94 <HAL_RCC_ClockConfig+0x270>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <HAL_RCC_ClockConfig+0x274>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe fcac 	bl	80036d0 <HAL_InitTick>
 8004d78:	4603      	mov	r3, r0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40022000 	.word	0x40022000
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	04c4b400 	.word	0x04c4b400
 8004d90:	080094d8 	.word	0x080094d8
 8004d94:	2000000c 	.word	0x2000000c
 8004d98:	20000010 	.word	0x20000010

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004da2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d102      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dae:	4b2a      	ldr	r3, [pc, #168]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e047      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004db4:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc0:	4b26      	ldr	r3, [pc, #152]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e03e      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dc6:	4b23      	ldr	r3, [pc, #140]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b0c      	cmp	r3, #12
 8004dd0:	d136      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dd2:	4b20      	ldr	r3, [pc, #128]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	3301      	adds	r3, #1
 8004de8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d10c      	bne.n	8004e0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	4a16      	ldr	r2, [pc, #88]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dfa:	68d2      	ldr	r2, [r2, #12]
 8004dfc:	0a12      	lsrs	r2, r2, #8
 8004dfe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	617b      	str	r3, [r7, #20]
      break;
 8004e08:	e00c      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e0a:	4a13      	ldr	r2, [pc, #76]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	4a10      	ldr	r2, [pc, #64]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e14:	68d2      	ldr	r2, [r2, #12]
 8004e16:	0a12      	lsrs	r2, r2, #8
 8004e18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
      break;
 8004e22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0e5b      	lsrs	r3, r3, #25
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e001      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e44:	693b      	ldr	r3, [r7, #16]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	016e3600 	.word	0x016e3600

08004e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	2000000c 	.word	0x2000000c

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e7c:	f7ff fff0 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4904      	ldr	r1, [pc, #16]	@ (8004ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	080094e8 	.word	0x080094e8

08004ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ea8:	f7ff ffda 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0adb      	lsrs	r3, r3, #11
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4904      	ldr	r1, [pc, #16]	@ (8004ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	080094e8 	.word	0x080094e8

08004ed0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d10c      	bne.n	8004f0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ef4:	4a17      	ldr	r2, [pc, #92]	@ (8004f54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	4a14      	ldr	r2, [pc, #80]	@ (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004efe:	68d2      	ldr	r2, [r2, #12]
 8004f00:	0a12      	lsrs	r2, r2, #8
 8004f02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	617b      	str	r3, [r7, #20]
    break;
 8004f0c:	e00c      	b.n	8004f28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f0e:	4a12      	ldr	r2, [pc, #72]	@ (8004f58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	4a0e      	ldr	r2, [pc, #56]	@ (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f18:	68d2      	ldr	r2, [r2, #12]
 8004f1a:	0a12      	lsrs	r2, r2, #8
 8004f1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
    break;
 8004f26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f28:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	0e5b      	lsrs	r3, r3, #25
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f42:	687b      	ldr	r3, [r7, #4]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40021000 	.word	0x40021000
 8004f54:	016e3600 	.word	0x016e3600
 8004f58:	00f42400 	.word	0x00f42400

08004f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f64:	2300      	movs	r3, #0
 8004f66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8098 	beq.w	80050aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7e:	4b43      	ldr	r3, [pc, #268]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10d      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8a:	4b40      	ldr	r3, [pc, #256]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f96:	4b3d      	ldr	r3, [pc, #244]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a39      	ldr	r2, [pc, #228]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb2:	f7fe fbd9 	bl	8003768 <HAL_GetTick>
 8004fb6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb8:	e009      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fba:	f7fe fbd5 	bl	8003768 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d902      	bls.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	74fb      	strb	r3, [r7, #19]
        break;
 8004fcc:	e005      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fce:	4b30      	ldr	r3, [pc, #192]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0ef      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d159      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01e      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d019      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ffc:	4b23      	ldr	r3, [pc, #140]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005006:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005008:	4b20      	ldr	r3, [pc, #128]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500e:	4a1f      	ldr	r2, [pc, #124]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005018:	4b1c      	ldr	r3, [pc, #112]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501e:	4a1b      	ldr	r2, [pc, #108]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005028:	4a18      	ldr	r2, [pc, #96]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fe fb95 	bl	8003768 <HAL_GetTick>
 800503e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005040:	e00b      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fe fb91 	bl	8003768 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d902      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	74fb      	strb	r3, [r7, #19]
            break;
 8005058:	e006      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505a:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0ec      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800506e:	4b07      	ldr	r3, [pc, #28]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005074:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800507c:	4903      	ldr	r1, [pc, #12]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005084:	e008      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005086:	7cfb      	ldrb	r3, [r7, #19]
 8005088:	74bb      	strb	r3, [r7, #18]
 800508a:	e005      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800508c:	40021000 	.word	0x40021000
 8005090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005098:	7c7b      	ldrb	r3, [r7, #17]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d105      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509e:	4ba7      	ldr	r3, [pc, #668]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a2:	4aa6      	ldr	r2, [pc, #664]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050b6:	4ba1      	ldr	r3, [pc, #644]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	f023 0203 	bic.w	r2, r3, #3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	499d      	ldr	r1, [pc, #628]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050d8:	4b98      	ldr	r3, [pc, #608]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050de:	f023 020c 	bic.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	4995      	ldr	r1, [pc, #596]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050fa:	4b90      	ldr	r3, [pc, #576]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	498c      	ldr	r1, [pc, #560]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800511c:	4b87      	ldr	r3, [pc, #540]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005122:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	4984      	ldr	r1, [pc, #528]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800513e:	4b7f      	ldr	r3, [pc, #508]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	497b      	ldr	r1, [pc, #492]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005160:	4b76      	ldr	r3, [pc, #472]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	4973      	ldr	r1, [pc, #460]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005182:	4b6e      	ldr	r3, [pc, #440]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	496a      	ldr	r1, [pc, #424]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051a4:	4b65      	ldr	r3, [pc, #404]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	4962      	ldr	r1, [pc, #392]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051c6:	4b5d      	ldr	r3, [pc, #372]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	4959      	ldr	r1, [pc, #356]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051e8:	4b54      	ldr	r3, [pc, #336]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051ee:	f023 0203 	bic.w	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	4951      	ldr	r1, [pc, #324]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800520a:	4b4c      	ldr	r3, [pc, #304]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005210:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	4948      	ldr	r1, [pc, #288]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005228:	2b00      	cmp	r3, #0
 800522a:	d015      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800522c:	4b43      	ldr	r3, [pc, #268]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005232:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523a:	4940      	ldr	r1, [pc, #256]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800524a:	d105      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800524c:	4b3b      	ldr	r3, [pc, #236]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a3a      	ldr	r2, [pc, #232]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005256:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005264:	4b35      	ldr	r3, [pc, #212]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005272:	4932      	ldr	r1, [pc, #200]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005282:	d105      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005284:	4b2d      	ldr	r3, [pc, #180]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a2c      	ldr	r2, [pc, #176]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800528e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d015      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800529c:	4b27      	ldr	r3, [pc, #156]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	4924      	ldr	r1, [pc, #144]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052ba:	d105      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052bc:	4b1f      	ldr	r3, [pc, #124]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4a1e      	ldr	r2, [pc, #120]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d015      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e2:	4916      	ldr	r1, [pc, #88]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052f2:	d105      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f4:	4b11      	ldr	r3, [pc, #68]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a10      	ldr	r2, [pc, #64]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d019      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800530c:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005312:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	4908      	ldr	r1, [pc, #32]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800532a:	d109      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800532c:	4b03      	ldr	r3, [pc, #12]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4a02      	ldr	r2, [pc, #8]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005336:	60d3      	str	r3, [r2, #12]
 8005338:	e002      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d015      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800534c:	4b29      	ldr	r3, [pc, #164]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535a:	4926      	ldr	r1, [pc, #152]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800536a:	d105      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800536c:	4b21      	ldr	r3, [pc, #132]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4a20      	ldr	r2, [pc, #128]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005376:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d015      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005384:	4b1b      	ldr	r3, [pc, #108]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005392:	4918      	ldr	r1, [pc, #96]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a2:	d105      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053a4:	4b13      	ldr	r3, [pc, #76]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4a12      	ldr	r2, [pc, #72]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d015      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053bc:	4b0d      	ldr	r3, [pc, #52]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ca:	490a      	ldr	r1, [pc, #40]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053da:	d105      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053dc:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	4a04      	ldr	r2, [pc, #16]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000

080053f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e054      	b.n	80054b4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d111      	bne.n	800543a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 ff3a 	bl	8007298 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a23      	ldr	r2, [pc, #140]	@ (80054bc <HAL_TIM_Base_Init+0xc4>)
 8005430:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f001 fa83 	bl	8006958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	080030f1 	.word	0x080030f1

080054c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d001      	beq.n	80054d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e04c      	b.n	8005572 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a26      	ldr	r2, [pc, #152]	@ (8005580 <HAL_TIM_Base_Start+0xc0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d022      	beq.n	8005530 <HAL_TIM_Base_Start+0x70>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f2:	d01d      	beq.n	8005530 <HAL_TIM_Base_Start+0x70>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a22      	ldr	r2, [pc, #136]	@ (8005584 <HAL_TIM_Base_Start+0xc4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_TIM_Base_Start+0x70>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a21      	ldr	r2, [pc, #132]	@ (8005588 <HAL_TIM_Base_Start+0xc8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <HAL_TIM_Base_Start+0x70>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <HAL_TIM_Base_Start+0xcc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_TIM_Base_Start+0x70>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <HAL_TIM_Base_Start+0xd0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_TIM_Base_Start+0x70>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <HAL_TIM_Base_Start+0xd4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_TIM_Base_Start+0x70>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1b      	ldr	r2, [pc, #108]	@ (8005598 <HAL_TIM_Base_Start+0xd8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d115      	bne.n	800555c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	4b19      	ldr	r3, [pc, #100]	@ (800559c <HAL_TIM_Base_Start+0xdc>)
 8005538:	4013      	ands	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b06      	cmp	r3, #6
 8005540:	d015      	beq.n	800556e <HAL_TIM_Base_Start+0xae>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005548:	d011      	beq.n	800556e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	e008      	b.n	800556e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e000      	b.n	8005570 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40013400 	.word	0x40013400
 8005594:	40014000 	.word	0x40014000
 8005598:	40015000 	.word	0x40015000
 800559c:	00010007 	.word	0x00010007

080055a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d001      	beq.n	80055b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e054      	b.n	8005662 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a26      	ldr	r2, [pc, #152]	@ (8005670 <HAL_TIM_Base_Start_IT+0xd0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d022      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x80>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e2:	d01d      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x80>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a22      	ldr	r2, [pc, #136]	@ (8005674 <HAL_TIM_Base_Start_IT+0xd4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d018      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x80>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a21      	ldr	r2, [pc, #132]	@ (8005678 <HAL_TIM_Base_Start_IT+0xd8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d013      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x80>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1f      	ldr	r2, [pc, #124]	@ (800567c <HAL_TIM_Base_Start_IT+0xdc>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00e      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x80>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1e      	ldr	r2, [pc, #120]	@ (8005680 <HAL_TIM_Base_Start_IT+0xe0>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d009      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x80>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <HAL_TIM_Base_Start_IT+0xe4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d004      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x80>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1b      	ldr	r2, [pc, #108]	@ (8005688 <HAL_TIM_Base_Start_IT+0xe8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d115      	bne.n	800564c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	4b19      	ldr	r3, [pc, #100]	@ (800568c <HAL_TIM_Base_Start_IT+0xec>)
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b06      	cmp	r3, #6
 8005630:	d015      	beq.n	800565e <HAL_TIM_Base_Start_IT+0xbe>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005638:	d011      	beq.n	800565e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0201 	orr.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564a:	e008      	b.n	800565e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e000      	b.n	8005660 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40013400 	.word	0x40013400
 8005684:	40014000 	.word	0x40014000
 8005688:	40015000 	.word	0x40015000
 800568c:	00010007 	.word	0x00010007

08005690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e054      	b.n	800574c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d111      	bne.n	80056d2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fdee 	bl	8007298 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a23      	ldr	r2, [pc, #140]	@ (8005754 <HAL_TIM_PWM_Init+0xc4>)
 80056c8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f001 f937 	bl	8006958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	08005759 	.word	0x08005759

08005758 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <HAL_TIM_PWM_Start_IT+0x28>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	e03c      	b.n	800580e <HAL_TIM_PWM_Start_IT+0xa2>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b04      	cmp	r3, #4
 8005798:	d109      	bne.n	80057ae <HAL_TIM_PWM_Start_IT+0x42>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	bf14      	ite	ne
 80057a6:	2301      	movne	r3, #1
 80057a8:	2300      	moveq	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	e02f      	b.n	800580e <HAL_TIM_PWM_Start_IT+0xa2>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d109      	bne.n	80057c8 <HAL_TIM_PWM_Start_IT+0x5c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	e022      	b.n	800580e <HAL_TIM_PWM_Start_IT+0xa2>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b0c      	cmp	r3, #12
 80057cc:	d109      	bne.n	80057e2 <HAL_TIM_PWM_Start_IT+0x76>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	e015      	b.n	800580e <HAL_TIM_PWM_Start_IT+0xa2>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d109      	bne.n	80057fc <HAL_TIM_PWM_Start_IT+0x90>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e008      	b.n	800580e <HAL_TIM_PWM_Start_IT+0xa2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0f1      	b.n	80059fa <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start_IT+0xba>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005824:	e023      	b.n	800586e <HAL_TIM_PWM_Start_IT+0x102>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d104      	bne.n	8005836 <HAL_TIM_PWM_Start_IT+0xca>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005834:	e01b      	b.n	800586e <HAL_TIM_PWM_Start_IT+0x102>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d104      	bne.n	8005846 <HAL_TIM_PWM_Start_IT+0xda>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005844:	e013      	b.n	800586e <HAL_TIM_PWM_Start_IT+0x102>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b0c      	cmp	r3, #12
 800584a:	d104      	bne.n	8005856 <HAL_TIM_PWM_Start_IT+0xea>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005854:	e00b      	b.n	800586e <HAL_TIM_PWM_Start_IT+0x102>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b10      	cmp	r3, #16
 800585a:	d104      	bne.n	8005866 <HAL_TIM_PWM_Start_IT+0xfa>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005864:	e003      	b.n	800586e <HAL_TIM_PWM_Start_IT+0x102>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b0c      	cmp	r3, #12
 8005872:	d841      	bhi.n	80058f8 <HAL_TIM_PWM_Start_IT+0x18c>
 8005874:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <HAL_TIM_PWM_Start_IT+0x110>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	080058b1 	.word	0x080058b1
 8005880:	080058f9 	.word	0x080058f9
 8005884:	080058f9 	.word	0x080058f9
 8005888:	080058f9 	.word	0x080058f9
 800588c:	080058c3 	.word	0x080058c3
 8005890:	080058f9 	.word	0x080058f9
 8005894:	080058f9 	.word	0x080058f9
 8005898:	080058f9 	.word	0x080058f9
 800589c:	080058d5 	.word	0x080058d5
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	080058f9 	.word	0x080058f9
 80058a8:	080058f9 	.word	0x080058f9
 80058ac:	080058e7 	.word	0x080058e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0202 	orr.w	r2, r2, #2
 80058be:	60da      	str	r2, [r3, #12]
      break;
 80058c0:	e01d      	b.n	80058fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0204 	orr.w	r2, r2, #4
 80058d0:	60da      	str	r2, [r3, #12]
      break;
 80058d2:	e014      	b.n	80058fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0208 	orr.w	r2, r2, #8
 80058e2:	60da      	str	r2, [r3, #12]
      break;
 80058e4:	e00b      	b.n	80058fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0210 	orr.w	r2, r2, #16
 80058f4:	60da      	str	r2, [r3, #12]
      break;
 80058f6:	e002      	b.n	80058fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
      break;
 80058fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d179      	bne.n	80059f8 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2201      	movs	r2, #1
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f001 fc9d 	bl	800724c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a3b      	ldr	r2, [pc, #236]	@ (8005a04 <HAL_TIM_PWM_Start_IT+0x298>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d018      	beq.n	800594e <HAL_TIM_PWM_Start_IT+0x1e2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a39      	ldr	r2, [pc, #228]	@ (8005a08 <HAL_TIM_PWM_Start_IT+0x29c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <HAL_TIM_PWM_Start_IT+0x1e2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a38      	ldr	r2, [pc, #224]	@ (8005a0c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00e      	beq.n	800594e <HAL_TIM_PWM_Start_IT+0x1e2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a36      	ldr	r2, [pc, #216]	@ (8005a10 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d009      	beq.n	800594e <HAL_TIM_PWM_Start_IT+0x1e2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a35      	ldr	r2, [pc, #212]	@ (8005a14 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d004      	beq.n	800594e <HAL_TIM_PWM_Start_IT+0x1e2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a33      	ldr	r2, [pc, #204]	@ (8005a18 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d101      	bne.n	8005952 <HAL_TIM_PWM_Start_IT+0x1e6>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <HAL_TIM_PWM_Start_IT+0x1e8>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005966:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a25      	ldr	r2, [pc, #148]	@ (8005a04 <HAL_TIM_PWM_Start_IT+0x298>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d022      	beq.n	80059b8 <HAL_TIM_PWM_Start_IT+0x24c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597a:	d01d      	beq.n	80059b8 <HAL_TIM_PWM_Start_IT+0x24c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a26      	ldr	r2, [pc, #152]	@ (8005a1c <HAL_TIM_PWM_Start_IT+0x2b0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d018      	beq.n	80059b8 <HAL_TIM_PWM_Start_IT+0x24c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a25      	ldr	r2, [pc, #148]	@ (8005a20 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <HAL_TIM_PWM_Start_IT+0x24c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a23      	ldr	r2, [pc, #140]	@ (8005a24 <HAL_TIM_PWM_Start_IT+0x2b8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00e      	beq.n	80059b8 <HAL_TIM_PWM_Start_IT+0x24c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a08 <HAL_TIM_PWM_Start_IT+0x29c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d009      	beq.n	80059b8 <HAL_TIM_PWM_Start_IT+0x24c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <HAL_TIM_PWM_Start_IT+0x2a0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_TIM_PWM_Start_IT+0x24c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a19      	ldr	r2, [pc, #100]	@ (8005a18 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d115      	bne.n	80059e4 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	4b1a      	ldr	r3, [pc, #104]	@ (8005a28 <HAL_TIM_PWM_Start_IT+0x2bc>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d015      	beq.n	80059f6 <HAL_TIM_PWM_Start_IT+0x28a>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d0:	d011      	beq.n	80059f6 <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	e008      	b.n	80059f6 <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e000      	b.n	80059f8 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40013400 	.word	0x40013400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40014400 	.word	0x40014400
 8005a14:	40014800 	.word	0x40014800
 8005a18:	40015000 	.word	0x40015000
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	00010007 	.word	0x00010007

08005a2c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e04c      	b.n	8005ada <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d111      	bne.n	8005a70 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fc1f 	bl	8007298 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d102      	bne.n	8005a68 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae4 <HAL_TIM_OnePulse_Init+0xb8>)
 8005a66:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f000 ff68 	bl	8006958 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0208 	bic.w	r2, r2, #8
 8005a96:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6819      	ldr	r1, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08005ae9 	.word	0x08005ae9

08005ae8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b24:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d108      	bne.n	8005b3e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b2c:	7bbb      	ldrb	r3, [r7, #14]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d105      	bne.n	8005b3e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b32:	7b7b      	ldrb	r3, [r7, #13]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d102      	bne.n	8005b3e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b38:	7b3b      	ldrb	r3, [r7, #12]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d001      	beq.n	8005b42 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e059      	b.n	8005bf6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0202 	orr.w	r2, r2, #2
 8005b70:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0204 	orr.w	r2, r2, #4
 8005b80:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2201      	movs	r2, #1
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f001 fb5e 	bl	800724c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2201      	movs	r2, #1
 8005b96:	2104      	movs	r1, #4
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 fb57 	bl	800724c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a17      	ldr	r2, [pc, #92]	@ (8005c00 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d018      	beq.n	8005bda <HAL_TIM_OnePulse_Start_IT+0xde>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a15      	ldr	r2, [pc, #84]	@ (8005c04 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_TIM_OnePulse_Start_IT+0xde>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a14      	ldr	r2, [pc, #80]	@ (8005c08 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_TIM_OnePulse_Start_IT+0xde>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a12      	ldr	r2, [pc, #72]	@ (8005c0c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_TIM_OnePulse_Start_IT+0xde>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a11      	ldr	r2, [pc, #68]	@ (8005c10 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_TIM_OnePulse_Start_IT+0xde>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c14 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d101      	bne.n	8005bde <HAL_TIM_OnePulse_Start_IT+0xe2>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40013400 	.word	0x40013400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800
 8005c14:	40015000 	.word	0x40015000

08005c18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0a2      	b.n	8005d72 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d111      	bne.n	8005c5c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 fb29 	bl	8007298 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a4a      	ldr	r2, [pc, #296]	@ (8005d7c <HAL_TIM_Encoder_Init+0x164>)
 8005c52:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005c72:	f023 0307 	bic.w	r3, r3, #7
 8005c76:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f000 fe68 	bl	8006958 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb0:	f023 0303 	bic.w	r3, r3, #3
 8005cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005cce:	f023 030c 	bic.w	r3, r3, #12
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	4313      	orrs	r3, r2
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	011a      	lsls	r2, r3, #4
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	031b      	lsls	r3, r3, #12
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d0c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d14:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	4313      	orrs	r3, r2
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08003235 	.word	0x08003235

08005d80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005da0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005da8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d110      	bne.n	8005dd2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d102      	bne.n	8005dbc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005db6:	7b7b      	ldrb	r3, [r7, #13]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d001      	beq.n	8005dc0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e069      	b.n	8005e94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dd0:	e031      	b.n	8005e36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d110      	bne.n	8005dfa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dd8:	7bbb      	ldrb	r3, [r7, #14]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d102      	bne.n	8005de4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dde:	7b3b      	ldrb	r3, [r7, #12]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e055      	b.n	8005e94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005df8:	e01d      	b.n	8005e36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d108      	bne.n	8005e12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d105      	bne.n	8005e12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e06:	7b7b      	ldrb	r3, [r7, #13]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d102      	bne.n	8005e12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e0c:	7b3b      	ldrb	r3, [r7, #12]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d001      	beq.n	8005e16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e03e      	b.n	8005e94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_TIM_Encoder_Start+0xc4>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d008      	beq.n	8005e54 <HAL_TIM_Encoder_Start+0xd4>
 8005e42:	e00f      	b.n	8005e64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 f9fd 	bl	800724c <TIM_CCxChannelCmd>
      break;
 8005e52:	e016      	b.n	8005e82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	2104      	movs	r1, #4
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 f9f5 	bl	800724c <TIM_CCxChannelCmd>
      break;
 8005e62:	e00e      	b.n	8005e82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 f9ed 	bl	800724c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2201      	movs	r2, #1
 8005e78:	2104      	movs	r1, #4
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 f9e6 	bl	800724c <TIM_CCxChannelCmd>
      break;
 8005e80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d026      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d021      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0202 	mvn.w	r2, #2
 8005ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
 8005ef0:	e009      	b.n	8005f06 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d026      	beq.n	8005f64 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d021      	beq.n	8005f64 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0204 	mvn.w	r2, #4
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
 8005f48:	e009      	b.n	8005f5e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d026      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d021      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0208 	mvn.w	r2, #8
 8005f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2204      	movs	r2, #4
 8005f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
 8005fa0:	e009      	b.n	8005fb6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d026      	beq.n	8006014 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0310 	and.w	r3, r3, #16
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d021      	beq.n	8006014 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0210 	mvn.w	r2, #16
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d005      	beq.n	8005ffa <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3
 8005ff8:	e009      	b.n	800600e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00e      	beq.n	800603c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0201 	mvn.w	r2, #1
 8006030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00e      	beq.n	800606e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00e      	beq.n	8006096 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800608a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00e      	beq.n	80060be <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00e      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f06f 0220 	mvn.w	r2, #32
 80060da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00e      	beq.n	800610e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00e      	beq.n	8006136 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800612a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d009      	beq.n	800615e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00e      	beq.n	8006186 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800617a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e0ff      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b14      	cmp	r3, #20
 80061ba:	f200 80f0 	bhi.w	800639e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061be:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	08006219 	.word	0x08006219
 80061c8:	0800639f 	.word	0x0800639f
 80061cc:	0800639f 	.word	0x0800639f
 80061d0:	0800639f 	.word	0x0800639f
 80061d4:	08006259 	.word	0x08006259
 80061d8:	0800639f 	.word	0x0800639f
 80061dc:	0800639f 	.word	0x0800639f
 80061e0:	0800639f 	.word	0x0800639f
 80061e4:	0800629b 	.word	0x0800629b
 80061e8:	0800639f 	.word	0x0800639f
 80061ec:	0800639f 	.word	0x0800639f
 80061f0:	0800639f 	.word	0x0800639f
 80061f4:	080062db 	.word	0x080062db
 80061f8:	0800639f 	.word	0x0800639f
 80061fc:	0800639f 	.word	0x0800639f
 8006200:	0800639f 	.word	0x0800639f
 8006204:	0800631d 	.word	0x0800631d
 8006208:	0800639f 	.word	0x0800639f
 800620c:	0800639f 	.word	0x0800639f
 8006210:	0800639f 	.word	0x0800639f
 8006214:	0800635d 	.word	0x0800635d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fc4e 	bl	8006ac0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0208 	orr.w	r2, r2, #8
 8006232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0204 	bic.w	r2, r2, #4
 8006242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	619a      	str	r2, [r3, #24]
      break;
 8006256:	e0a5      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fcc8 	bl	8006bf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	619a      	str	r2, [r3, #24]
      break;
 8006298:	e084      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fd3b 	bl	8006d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0208 	orr.w	r2, r2, #8
 80062b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0204 	bic.w	r2, r2, #4
 80062c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	61da      	str	r2, [r3, #28]
      break;
 80062d8:	e064      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fdad 	bl	8006e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	021a      	lsls	r2, r3, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	61da      	str	r2, [r3, #28]
      break;
 800631a:	e043      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fe20 	bl	8006f68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0208 	orr.w	r2, r2, #8
 8006336:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0204 	bic.w	r2, r2, #4
 8006346:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800635a:	e023      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fe6a 	bl	800703c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006376:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006386:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	021a      	lsls	r2, r3, #8
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800639c:	e002      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
      break;
 80063a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop

080063b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIM_ConfigClockSource+0x1c>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e0f6      	b.n	80065c2 <HAL_TIM_ConfigClockSource+0x20a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80063f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a6f      	ldr	r2, [pc, #444]	@ (80065cc <HAL_TIM_ConfigClockSource+0x214>)
 800640e:	4293      	cmp	r3, r2
 8006410:	f000 80c1 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 8006414:	4a6d      	ldr	r2, [pc, #436]	@ (80065cc <HAL_TIM_ConfigClockSource+0x214>)
 8006416:	4293      	cmp	r3, r2
 8006418:	f200 80c6 	bhi.w	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800641c:	4a6c      	ldr	r2, [pc, #432]	@ (80065d0 <HAL_TIM_ConfigClockSource+0x218>)
 800641e:	4293      	cmp	r3, r2
 8006420:	f000 80b9 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 8006424:	4a6a      	ldr	r2, [pc, #424]	@ (80065d0 <HAL_TIM_ConfigClockSource+0x218>)
 8006426:	4293      	cmp	r3, r2
 8006428:	f200 80be 	bhi.w	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800642c:	4a69      	ldr	r2, [pc, #420]	@ (80065d4 <HAL_TIM_ConfigClockSource+0x21c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	f000 80b1 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 8006434:	4a67      	ldr	r2, [pc, #412]	@ (80065d4 <HAL_TIM_ConfigClockSource+0x21c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	f200 80b6 	bhi.w	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800643c:	4a66      	ldr	r2, [pc, #408]	@ (80065d8 <HAL_TIM_ConfigClockSource+0x220>)
 800643e:	4293      	cmp	r3, r2
 8006440:	f000 80a9 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 8006444:	4a64      	ldr	r2, [pc, #400]	@ (80065d8 <HAL_TIM_ConfigClockSource+0x220>)
 8006446:	4293      	cmp	r3, r2
 8006448:	f200 80ae 	bhi.w	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800644c:	4a63      	ldr	r2, [pc, #396]	@ (80065dc <HAL_TIM_ConfigClockSource+0x224>)
 800644e:	4293      	cmp	r3, r2
 8006450:	f000 80a1 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 8006454:	4a61      	ldr	r2, [pc, #388]	@ (80065dc <HAL_TIM_ConfigClockSource+0x224>)
 8006456:	4293      	cmp	r3, r2
 8006458:	f200 80a6 	bhi.w	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800645c:	4a60      	ldr	r2, [pc, #384]	@ (80065e0 <HAL_TIM_ConfigClockSource+0x228>)
 800645e:	4293      	cmp	r3, r2
 8006460:	f000 8099 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 8006464:	4a5e      	ldr	r2, [pc, #376]	@ (80065e0 <HAL_TIM_ConfigClockSource+0x228>)
 8006466:	4293      	cmp	r3, r2
 8006468:	f200 809e 	bhi.w	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800646c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006470:	f000 8091 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 8006474:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006478:	f200 8096 	bhi.w	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800647c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006480:	f000 8089 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 8006484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006488:	f200 808e 	bhi.w	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800648c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006490:	d03e      	beq.n	8006510 <HAL_TIM_ConfigClockSource+0x158>
 8006492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006496:	f200 8087 	bhi.w	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649e:	f000 8086 	beq.w	80065ae <HAL_TIM_ConfigClockSource+0x1f6>
 80064a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a6:	d87f      	bhi.n	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80064a8:	2b70      	cmp	r3, #112	@ 0x70
 80064aa:	d01a      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x12a>
 80064ac:	2b70      	cmp	r3, #112	@ 0x70
 80064ae:	d87b      	bhi.n	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80064b0:	2b60      	cmp	r3, #96	@ 0x60
 80064b2:	d050      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x19e>
 80064b4:	2b60      	cmp	r3, #96	@ 0x60
 80064b6:	d877      	bhi.n	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80064b8:	2b50      	cmp	r3, #80	@ 0x50
 80064ba:	d03c      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x17e>
 80064bc:	2b50      	cmp	r3, #80	@ 0x50
 80064be:	d873      	bhi.n	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80064c0:	2b40      	cmp	r3, #64	@ 0x40
 80064c2:	d058      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0x1be>
 80064c4:	2b40      	cmp	r3, #64	@ 0x40
 80064c6:	d86f      	bhi.n	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80064c8:	2b30      	cmp	r3, #48	@ 0x30
 80064ca:	d064      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 80064cc:	2b30      	cmp	r3, #48	@ 0x30
 80064ce:	d86b      	bhi.n	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d060      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d867      	bhi.n	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d05c      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 80064dc:	2b10      	cmp	r3, #16
 80064de:	d05a      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x1de>
 80064e0:	e062      	b.n	80065a8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064f2:	f000 fe8b 	bl	800720c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	609a      	str	r2, [r3, #8]
      break;
 800650e:	e04f      	b.n	80065b0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006520:	f000 fe74 	bl	800720c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006532:	609a      	str	r2, [r3, #8]
      break;
 8006534:	e03c      	b.n	80065b0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006542:	461a      	mov	r2, r3
 8006544:	f000 fde6 	bl	8007114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2150      	movs	r1, #80	@ 0x50
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fe3f 	bl	80071d2 <TIM_ITRx_SetConfig>
      break;
 8006554:	e02c      	b.n	80065b0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006562:	461a      	mov	r2, r3
 8006564:	f000 fe05 	bl	8007172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2160      	movs	r1, #96	@ 0x60
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fe2f 	bl	80071d2 <TIM_ITRx_SetConfig>
      break;
 8006574:	e01c      	b.n	80065b0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006582:	461a      	mov	r2, r3
 8006584:	f000 fdc6 	bl	8007114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2140      	movs	r1, #64	@ 0x40
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fe1f 	bl	80071d2 <TIM_ITRx_SetConfig>
      break;
 8006594:	e00c      	b.n	80065b0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f000 fe16 	bl	80071d2 <TIM_ITRx_SetConfig>
      break;
 80065a6:	e003      	b.n	80065b0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	73fb      	strb	r3, [r7, #15]
      break;
 80065ac:	e000      	b.n	80065b0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80065ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	00100070 	.word	0x00100070
 80065d0:	00100060 	.word	0x00100060
 80065d4:	00100050 	.word	0x00100050
 80065d8:	00100040 	.word	0x00100040
 80065dc:	00100030 	.word	0x00100030
 80065e0:	00100020 	.word	0x00100020

080065e4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	460b      	mov	r3, r1
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e14a      	b.n	800694a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	f040 80dd 	bne.w	800687c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80066c2:	7afb      	ldrb	r3, [r7, #11]
 80066c4:	2b1f      	cmp	r3, #31
 80066c6:	f200 80d6 	bhi.w	8006876 <HAL_TIM_RegisterCallback+0x1de>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <HAL_TIM_RegisterCallback+0x38>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	08006751 	.word	0x08006751
 80066d4:	08006759 	.word	0x08006759
 80066d8:	08006761 	.word	0x08006761
 80066dc:	08006769 	.word	0x08006769
 80066e0:	08006771 	.word	0x08006771
 80066e4:	08006779 	.word	0x08006779
 80066e8:	08006781 	.word	0x08006781
 80066ec:	08006789 	.word	0x08006789
 80066f0:	08006791 	.word	0x08006791
 80066f4:	08006799 	.word	0x08006799
 80066f8:	080067a1 	.word	0x080067a1
 80066fc:	080067a9 	.word	0x080067a9
 8006700:	080067b1 	.word	0x080067b1
 8006704:	080067b9 	.word	0x080067b9
 8006708:	080067c3 	.word	0x080067c3
 800670c:	080067cd 	.word	0x080067cd
 8006710:	080067d7 	.word	0x080067d7
 8006714:	080067e1 	.word	0x080067e1
 8006718:	080067eb 	.word	0x080067eb
 800671c:	080067f5 	.word	0x080067f5
 8006720:	080067ff 	.word	0x080067ff
 8006724:	08006809 	.word	0x08006809
 8006728:	08006813 	.word	0x08006813
 800672c:	0800681d 	.word	0x0800681d
 8006730:	08006827 	.word	0x08006827
 8006734:	08006831 	.word	0x08006831
 8006738:	0800683b 	.word	0x0800683b
 800673c:	08006845 	.word	0x08006845
 8006740:	0800684f 	.word	0x0800684f
 8006744:	08006859 	.word	0x08006859
 8006748:	08006863 	.word	0x08006863
 800674c:	0800686d 	.word	0x0800686d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006756:	e0f7      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800675e:	e0f3      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006766:	e0ef      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800676e:	e0eb      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006776:	e0e7      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800677e:	e0e3      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006786:	e0df      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800678e:	e0db      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006796:	e0d7      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800679e:	e0d3      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80067a6:	e0cf      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80067ae:	e0cb      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80067b6:	e0c7      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80067c0:	e0c2      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80067ca:	e0bd      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80067d4:	e0b8      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80067de:	e0b3      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80067e8:	e0ae      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80067f2:	e0a9      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80067fc:	e0a4      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8006806:	e09f      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006810:	e09a      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800681a:	e095      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006824:	e090      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800682e:	e08b      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8006838:	e086      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8006842:	e081      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800684c:	e07c      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8006856:	e077      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8006860:	e072      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800686a:	e06d      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006874:	e068      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	75fb      	strb	r3, [r7, #23]
        break;
 800687a:	e065      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d15d      	bne.n	8006944 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	2b0d      	cmp	r3, #13
 800688c:	d857      	bhi.n	800693e <HAL_TIM_RegisterCallback+0x2a6>
 800688e:	a201      	add	r2, pc, #4	@ (adr r2, 8006894 <HAL_TIM_RegisterCallback+0x1fc>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068cd 	.word	0x080068cd
 8006898:	080068d5 	.word	0x080068d5
 800689c:	080068dd 	.word	0x080068dd
 80068a0:	080068e5 	.word	0x080068e5
 80068a4:	080068ed 	.word	0x080068ed
 80068a8:	080068f5 	.word	0x080068f5
 80068ac:	080068fd 	.word	0x080068fd
 80068b0:	08006905 	.word	0x08006905
 80068b4:	0800690d 	.word	0x0800690d
 80068b8:	08006915 	.word	0x08006915
 80068bc:	0800691d 	.word	0x0800691d
 80068c0:	08006925 	.word	0x08006925
 80068c4:	0800692d 	.word	0x0800692d
 80068c8:	08006935 	.word	0x08006935
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80068d2:	e039      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80068da:	e035      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80068e2:	e031      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80068ea:	e02d      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80068f2:	e029      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80068fa:	e025      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006902:	e021      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800690a:	e01d      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006912:	e019      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800691a:	e015      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006922:	e011      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800692a:	e00d      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006932:	e009      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800693c:	e004      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]
        break;
 8006942:	e001      	b.n	8006948 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
}
 800694a:	4618      	mov	r0, r3
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop

08006958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a4c      	ldr	r2, [pc, #304]	@ (8006a9c <TIM_Base_SetConfig+0x144>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d017      	beq.n	80069a0 <TIM_Base_SetConfig+0x48>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006976:	d013      	beq.n	80069a0 <TIM_Base_SetConfig+0x48>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a49      	ldr	r2, [pc, #292]	@ (8006aa0 <TIM_Base_SetConfig+0x148>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00f      	beq.n	80069a0 <TIM_Base_SetConfig+0x48>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a48      	ldr	r2, [pc, #288]	@ (8006aa4 <TIM_Base_SetConfig+0x14c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00b      	beq.n	80069a0 <TIM_Base_SetConfig+0x48>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a47      	ldr	r2, [pc, #284]	@ (8006aa8 <TIM_Base_SetConfig+0x150>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d007      	beq.n	80069a0 <TIM_Base_SetConfig+0x48>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a46      	ldr	r2, [pc, #280]	@ (8006aac <TIM_Base_SetConfig+0x154>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_Base_SetConfig+0x48>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a45      	ldr	r2, [pc, #276]	@ (8006ab0 <TIM_Base_SetConfig+0x158>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d108      	bne.n	80069b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a39      	ldr	r2, [pc, #228]	@ (8006a9c <TIM_Base_SetConfig+0x144>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d023      	beq.n	8006a02 <TIM_Base_SetConfig+0xaa>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c0:	d01f      	beq.n	8006a02 <TIM_Base_SetConfig+0xaa>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a36      	ldr	r2, [pc, #216]	@ (8006aa0 <TIM_Base_SetConfig+0x148>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01b      	beq.n	8006a02 <TIM_Base_SetConfig+0xaa>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a35      	ldr	r2, [pc, #212]	@ (8006aa4 <TIM_Base_SetConfig+0x14c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d017      	beq.n	8006a02 <TIM_Base_SetConfig+0xaa>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a34      	ldr	r2, [pc, #208]	@ (8006aa8 <TIM_Base_SetConfig+0x150>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <TIM_Base_SetConfig+0xaa>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a33      	ldr	r2, [pc, #204]	@ (8006aac <TIM_Base_SetConfig+0x154>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00f      	beq.n	8006a02 <TIM_Base_SetConfig+0xaa>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a33      	ldr	r2, [pc, #204]	@ (8006ab4 <TIM_Base_SetConfig+0x15c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00b      	beq.n	8006a02 <TIM_Base_SetConfig+0xaa>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a32      	ldr	r2, [pc, #200]	@ (8006ab8 <TIM_Base_SetConfig+0x160>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d007      	beq.n	8006a02 <TIM_Base_SetConfig+0xaa>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a31      	ldr	r2, [pc, #196]	@ (8006abc <TIM_Base_SetConfig+0x164>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_Base_SetConfig+0xaa>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2c      	ldr	r2, [pc, #176]	@ (8006ab0 <TIM_Base_SetConfig+0x158>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d108      	bne.n	8006a14 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a18      	ldr	r2, [pc, #96]	@ (8006a9c <TIM_Base_SetConfig+0x144>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <TIM_Base_SetConfig+0x110>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a1a      	ldr	r2, [pc, #104]	@ (8006aac <TIM_Base_SetConfig+0x154>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00f      	beq.n	8006a68 <TIM_Base_SetConfig+0x110>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab4 <TIM_Base_SetConfig+0x15c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00b      	beq.n	8006a68 <TIM_Base_SetConfig+0x110>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a19      	ldr	r2, [pc, #100]	@ (8006ab8 <TIM_Base_SetConfig+0x160>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d007      	beq.n	8006a68 <TIM_Base_SetConfig+0x110>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a18      	ldr	r2, [pc, #96]	@ (8006abc <TIM_Base_SetConfig+0x164>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_Base_SetConfig+0x110>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a13      	ldr	r2, [pc, #76]	@ (8006ab0 <TIM_Base_SetConfig+0x158>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d103      	bne.n	8006a70 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d105      	bne.n	8006a8e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f023 0201 	bic.w	r2, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	611a      	str	r2, [r3, #16]
  }
}
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40000400 	.word	0x40000400
 8006aa4:	40000800 	.word	0x40000800
 8006aa8:	40000c00 	.word	0x40000c00
 8006aac:	40013400 	.word	0x40013400
 8006ab0:	40015000 	.word	0x40015000
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800

08006ac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	f023 0201 	bic.w	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0303 	bic.w	r3, r3, #3
 8006afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f023 0302 	bic.w	r3, r3, #2
 8006b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a30      	ldr	r2, [pc, #192]	@ (8006bdc <TIM_OC1_SetConfig+0x11c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d013      	beq.n	8006b48 <TIM_OC1_SetConfig+0x88>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a2f      	ldr	r2, [pc, #188]	@ (8006be0 <TIM_OC1_SetConfig+0x120>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00f      	beq.n	8006b48 <TIM_OC1_SetConfig+0x88>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8006be4 <TIM_OC1_SetConfig+0x124>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00b      	beq.n	8006b48 <TIM_OC1_SetConfig+0x88>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a2d      	ldr	r2, [pc, #180]	@ (8006be8 <TIM_OC1_SetConfig+0x128>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <TIM_OC1_SetConfig+0x88>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bec <TIM_OC1_SetConfig+0x12c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC1_SetConfig+0x88>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a2b      	ldr	r2, [pc, #172]	@ (8006bf0 <TIM_OC1_SetConfig+0x130>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d10c      	bne.n	8006b62 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f023 0308 	bic.w	r3, r3, #8
 8006b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 0304 	bic.w	r3, r3, #4
 8006b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a1d      	ldr	r2, [pc, #116]	@ (8006bdc <TIM_OC1_SetConfig+0x11c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d013      	beq.n	8006b92 <TIM_OC1_SetConfig+0xd2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006be0 <TIM_OC1_SetConfig+0x120>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00f      	beq.n	8006b92 <TIM_OC1_SetConfig+0xd2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a1b      	ldr	r2, [pc, #108]	@ (8006be4 <TIM_OC1_SetConfig+0x124>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00b      	beq.n	8006b92 <TIM_OC1_SetConfig+0xd2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8006be8 <TIM_OC1_SetConfig+0x128>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d007      	beq.n	8006b92 <TIM_OC1_SetConfig+0xd2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a19      	ldr	r2, [pc, #100]	@ (8006bec <TIM_OC1_SetConfig+0x12c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <TIM_OC1_SetConfig+0xd2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a18      	ldr	r2, [pc, #96]	@ (8006bf0 <TIM_OC1_SetConfig+0x130>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d111      	bne.n	8006bb6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	621a      	str	r2, [r3, #32]
}
 8006bd0:	bf00      	nop
 8006bd2:	371c      	adds	r7, #28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800
 8006bf0:	40015000 	.word	0x40015000

08006bf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f023 0210 	bic.w	r2, r3, #16
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	021b      	lsls	r3, r3, #8
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f023 0320 	bic.w	r3, r3, #32
 8006c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a2c      	ldr	r2, [pc, #176]	@ (8006d04 <TIM_OC2_SetConfig+0x110>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d007      	beq.n	8006c68 <TIM_OC2_SetConfig+0x74>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a2b      	ldr	r2, [pc, #172]	@ (8006d08 <TIM_OC2_SetConfig+0x114>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_OC2_SetConfig+0x74>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a2a      	ldr	r2, [pc, #168]	@ (8006d0c <TIM_OC2_SetConfig+0x118>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d10d      	bne.n	8006c84 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a1f      	ldr	r2, [pc, #124]	@ (8006d04 <TIM_OC2_SetConfig+0x110>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d013      	beq.n	8006cb4 <TIM_OC2_SetConfig+0xc0>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006d08 <TIM_OC2_SetConfig+0x114>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00f      	beq.n	8006cb4 <TIM_OC2_SetConfig+0xc0>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a1e      	ldr	r2, [pc, #120]	@ (8006d10 <TIM_OC2_SetConfig+0x11c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00b      	beq.n	8006cb4 <TIM_OC2_SetConfig+0xc0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8006d14 <TIM_OC2_SetConfig+0x120>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d007      	beq.n	8006cb4 <TIM_OC2_SetConfig+0xc0>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d18 <TIM_OC2_SetConfig+0x124>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_OC2_SetConfig+0xc0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <TIM_OC2_SetConfig+0x118>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d113      	bne.n	8006cdc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40013400 	.word	0x40013400
 8006d0c:	40015000 	.word	0x40015000
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40014400 	.word	0x40014400
 8006d18:	40014800 	.word	0x40014800

08006d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a2b      	ldr	r2, [pc, #172]	@ (8006e28 <TIM_OC3_SetConfig+0x10c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d007      	beq.n	8006d8e <TIM_OC3_SetConfig+0x72>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a2a      	ldr	r2, [pc, #168]	@ (8006e2c <TIM_OC3_SetConfig+0x110>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d003      	beq.n	8006d8e <TIM_OC3_SetConfig+0x72>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a29      	ldr	r2, [pc, #164]	@ (8006e30 <TIM_OC3_SetConfig+0x114>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d10d      	bne.n	8006daa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a1e      	ldr	r2, [pc, #120]	@ (8006e28 <TIM_OC3_SetConfig+0x10c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <TIM_OC3_SetConfig+0xbe>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e2c <TIM_OC3_SetConfig+0x110>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00f      	beq.n	8006dda <TIM_OC3_SetConfig+0xbe>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e34 <TIM_OC3_SetConfig+0x118>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00b      	beq.n	8006dda <TIM_OC3_SetConfig+0xbe>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e38 <TIM_OC3_SetConfig+0x11c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d007      	beq.n	8006dda <TIM_OC3_SetConfig+0xbe>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e3c <TIM_OC3_SetConfig+0x120>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d003      	beq.n	8006dda <TIM_OC3_SetConfig+0xbe>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a16      	ldr	r2, [pc, #88]	@ (8006e30 <TIM_OC3_SetConfig+0x114>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d113      	bne.n	8006e02 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	621a      	str	r2, [r3, #32]
}
 8006e1c:	bf00      	nop
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40015000 	.word	0x40015000
 8006e34:	40014000 	.word	0x40014000
 8006e38:	40014400 	.word	0x40014400
 8006e3c:	40014800 	.word	0x40014800

08006e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	031b      	lsls	r3, r3, #12
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8006f50 <TIM_OC4_SetConfig+0x110>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d007      	beq.n	8006eb4 <TIM_OC4_SetConfig+0x74>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8006f54 <TIM_OC4_SetConfig+0x114>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_OC4_SetConfig+0x74>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a2a      	ldr	r2, [pc, #168]	@ (8006f58 <TIM_OC4_SetConfig+0x118>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d10d      	bne.n	8006ed0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	031b      	lsls	r3, r3, #12
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8006f50 <TIM_OC4_SetConfig+0x110>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <TIM_OC4_SetConfig+0xc0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a1e      	ldr	r2, [pc, #120]	@ (8006f54 <TIM_OC4_SetConfig+0x114>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00f      	beq.n	8006f00 <TIM_OC4_SetConfig+0xc0>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8006f5c <TIM_OC4_SetConfig+0x11c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00b      	beq.n	8006f00 <TIM_OC4_SetConfig+0xc0>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a1d      	ldr	r2, [pc, #116]	@ (8006f60 <TIM_OC4_SetConfig+0x120>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_OC4_SetConfig+0xc0>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f64 <TIM_OC4_SetConfig+0x124>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_OC4_SetConfig+0xc0>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a17      	ldr	r2, [pc, #92]	@ (8006f58 <TIM_OC4_SetConfig+0x118>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d113      	bne.n	8006f28 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	019b      	lsls	r3, r3, #6
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	019b      	lsls	r3, r3, #6
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	621a      	str	r2, [r3, #32]
}
 8006f42:	bf00      	nop
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40012c00 	.word	0x40012c00
 8006f54:	40013400 	.word	0x40013400
 8006f58:	40015000 	.word	0x40015000
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800

08006f68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006fac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	041b      	lsls	r3, r3, #16
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a19      	ldr	r2, [pc, #100]	@ (8007024 <TIM_OC5_SetConfig+0xbc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <TIM_OC5_SetConfig+0x82>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a18      	ldr	r2, [pc, #96]	@ (8007028 <TIM_OC5_SetConfig+0xc0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00f      	beq.n	8006fea <TIM_OC5_SetConfig+0x82>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a17      	ldr	r2, [pc, #92]	@ (800702c <TIM_OC5_SetConfig+0xc4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00b      	beq.n	8006fea <TIM_OC5_SetConfig+0x82>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a16      	ldr	r2, [pc, #88]	@ (8007030 <TIM_OC5_SetConfig+0xc8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d007      	beq.n	8006fea <TIM_OC5_SetConfig+0x82>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a15      	ldr	r2, [pc, #84]	@ (8007034 <TIM_OC5_SetConfig+0xcc>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d003      	beq.n	8006fea <TIM_OC5_SetConfig+0x82>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a14      	ldr	r2, [pc, #80]	@ (8007038 <TIM_OC5_SetConfig+0xd0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d109      	bne.n	8006ffe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	621a      	str	r2, [r3, #32]
}
 8007018:	bf00      	nop
 800701a:	371c      	adds	r7, #28
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	40012c00 	.word	0x40012c00
 8007028:	40013400 	.word	0x40013400
 800702c:	40014000 	.word	0x40014000
 8007030:	40014400 	.word	0x40014400
 8007034:	40014800 	.word	0x40014800
 8007038:	40015000 	.word	0x40015000

0800703c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800706a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4313      	orrs	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	051b      	lsls	r3, r3, #20
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1a      	ldr	r2, [pc, #104]	@ (80070fc <TIM_OC6_SetConfig+0xc0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d013      	beq.n	80070c0 <TIM_OC6_SetConfig+0x84>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a19      	ldr	r2, [pc, #100]	@ (8007100 <TIM_OC6_SetConfig+0xc4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00f      	beq.n	80070c0 <TIM_OC6_SetConfig+0x84>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a18      	ldr	r2, [pc, #96]	@ (8007104 <TIM_OC6_SetConfig+0xc8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00b      	beq.n	80070c0 <TIM_OC6_SetConfig+0x84>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a17      	ldr	r2, [pc, #92]	@ (8007108 <TIM_OC6_SetConfig+0xcc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d007      	beq.n	80070c0 <TIM_OC6_SetConfig+0x84>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a16      	ldr	r2, [pc, #88]	@ (800710c <TIM_OC6_SetConfig+0xd0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d003      	beq.n	80070c0 <TIM_OC6_SetConfig+0x84>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a15      	ldr	r2, [pc, #84]	@ (8007110 <TIM_OC6_SetConfig+0xd4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d109      	bne.n	80070d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	029b      	lsls	r3, r3, #10
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40012c00 	.word	0x40012c00
 8007100:	40013400 	.word	0x40013400
 8007104:	40014000 	.word	0x40014000
 8007108:	40014400 	.word	0x40014400
 800710c:	40014800 	.word	0x40014800
 8007110:	40015000 	.word	0x40015000

08007114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	f023 0201 	bic.w	r2, r3, #1
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800713e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f023 030a 	bic.w	r3, r3, #10
 8007150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007172:	b480      	push	{r7}
 8007174:	b087      	sub	sp, #28
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f023 0210 	bic.w	r2, r3, #16
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800719c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	031b      	lsls	r3, r3, #12
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	621a      	str	r2, [r3, #32]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80071e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f043 0307 	orr.w	r3, r3, #7
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	609a      	str	r2, [r3, #8]
}
 8007200:	bf00      	nop
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	021a      	lsls	r2, r3, #8
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	431a      	orrs	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	4313      	orrs	r3, r2
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	609a      	str	r2, [r3, #8]
}
 8007240:	bf00      	nop
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f003 031f 	and.w	r3, r3, #31
 800725e:	2201      	movs	r2, #1
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1a      	ldr	r2, [r3, #32]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	43db      	mvns	r3, r3
 800726e:	401a      	ands	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a1a      	ldr	r2, [r3, #32]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	fa01 f303 	lsl.w	r3, r1, r3
 8007284:	431a      	orrs	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	621a      	str	r2, [r3, #32]
}
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a26      	ldr	r2, [pc, #152]	@ (800733c <TIM_ResetCallback+0xa4>)
 80072a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a25      	ldr	r2, [pc, #148]	@ (8007340 <TIM_ResetCallback+0xa8>)
 80072ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a24      	ldr	r2, [pc, #144]	@ (8007344 <TIM_ResetCallback+0xac>)
 80072b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a23      	ldr	r2, [pc, #140]	@ (8007348 <TIM_ResetCallback+0xb0>)
 80072bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a22      	ldr	r2, [pc, #136]	@ (800734c <TIM_ResetCallback+0xb4>)
 80072c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a21      	ldr	r2, [pc, #132]	@ (8007350 <TIM_ResetCallback+0xb8>)
 80072cc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a20      	ldr	r2, [pc, #128]	@ (8007354 <TIM_ResetCallback+0xbc>)
 80072d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a1f      	ldr	r2, [pc, #124]	@ (8007358 <TIM_ResetCallback+0xc0>)
 80072dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a1e      	ldr	r2, [pc, #120]	@ (800735c <TIM_ResetCallback+0xc4>)
 80072e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007360 <TIM_ResetCallback+0xc8>)
 80072ec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007364 <TIM_ResetCallback+0xcc>)
 80072f4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007368 <TIM_ResetCallback+0xd0>)
 80072fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a1a      	ldr	r2, [pc, #104]	@ (800736c <TIM_ResetCallback+0xd4>)
 8007304:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a19      	ldr	r2, [pc, #100]	@ (8007370 <TIM_ResetCallback+0xd8>)
 800730c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a18      	ldr	r2, [pc, #96]	@ (8007374 <TIM_ResetCallback+0xdc>)
 8007314:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a17      	ldr	r2, [pc, #92]	@ (8007378 <TIM_ResetCallback+0xe0>)
 800731c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a16      	ldr	r2, [pc, #88]	@ (800737c <TIM_ResetCallback+0xe4>)
 8007324:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a15      	ldr	r2, [pc, #84]	@ (8007380 <TIM_ResetCallback+0xe8>)
 800732c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	08002fcd 	.word	0x08002fcd
 8007340:	080065e5 	.word	0x080065e5
 8007344:	0800665d 	.word	0x0800665d
 8007348:	08006671 	.word	0x08006671
 800734c:	0800660d 	.word	0x0800660d
 8007350:	08006621 	.word	0x08006621
 8007354:	080065f9 	.word	0x080065f9
 8007358:	08006635 	.word	0x08006635
 800735c:	08006649 	.word	0x08006649
 8007360:	08006685 	.word	0x08006685
 8007364:	080074b1 	.word	0x080074b1
 8007368:	080074c5 	.word	0x080074c5
 800736c:	080074d9 	.word	0x080074d9
 8007370:	080074ed 	.word	0x080074ed
 8007374:	08007501 	.word	0x08007501
 8007378:	08007515 	.word	0x08007515
 800737c:	08007529 	.word	0x08007529
 8007380:	0800753d 	.word	0x0800753d

08007384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007398:	2302      	movs	r3, #2
 800739a:	e074      	b.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a34      	ldr	r2, [pc, #208]	@ (8007494 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d009      	beq.n	80073da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a33      	ldr	r2, [pc, #204]	@ (8007498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d004      	beq.n	80073da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a31      	ldr	r2, [pc, #196]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d108      	bne.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80073f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a21      	ldr	r2, [pc, #132]	@ (8007494 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d022      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800741c:	d01d      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a1f      	ldr	r2, [pc, #124]	@ (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d018      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1d      	ldr	r2, [pc, #116]	@ (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d013      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1c      	ldr	r2, [pc, #112]	@ (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00e      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a15      	ldr	r2, [pc, #84]	@ (8007498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d009      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a18      	ldr	r2, [pc, #96]	@ (80074ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d004      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a11      	ldr	r2, [pc, #68]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d10c      	bne.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	4313      	orrs	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40013400 	.word	0x40013400
 800749c:	40015000 	.word	0x40015000
 80074a0:	40000400 	.word	0x40000400
 80074a4:	40000800 	.word	0x40000800
 80074a8:	40000c00 	.word	0x40000c00
 80074ac:	40014000 	.word	0x40014000

080074b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e050      	b.n	8007604 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007568:	2b00      	cmp	r3, #0
 800756a:	d114      	bne.n	8007596 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fd45 	bl	8008004 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a21      	ldr	r2, [pc, #132]	@ (800760c <HAL_UART_Init+0xbc>)
 8007588:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2224      	movs	r2, #36	@ 0x24
 800759a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0201 	bic.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 f872 	bl	80086a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fd73 	bl	80080a8 <UART_SetConfig>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e01b      	b.n	8007604 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f8f1 	bl	80087e4 <UART_CheckIdleState>
 8007602:	4603      	mov	r3, r0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	08003325 	.word	0x08003325

08007610 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	460b      	mov	r3, r1
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d109      	bne.n	800763c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e09c      	b.n	8007776 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007642:	2b20      	cmp	r3, #32
 8007644:	d16c      	bne.n	8007720 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	2b0c      	cmp	r3, #12
 800764a:	d85e      	bhi.n	800770a <HAL_UART_RegisterCallback+0xfa>
 800764c:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <HAL_UART_RegisterCallback+0x44>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	08007689 	.word	0x08007689
 8007658:	08007693 	.word	0x08007693
 800765c:	0800769d 	.word	0x0800769d
 8007660:	080076a7 	.word	0x080076a7
 8007664:	080076b1 	.word	0x080076b1
 8007668:	080076bb 	.word	0x080076bb
 800766c:	080076c5 	.word	0x080076c5
 8007670:	080076cf 	.word	0x080076cf
 8007674:	080076d9 	.word	0x080076d9
 8007678:	080076e3 	.word	0x080076e3
 800767c:	080076ed 	.word	0x080076ed
 8007680:	080076f7 	.word	0x080076f7
 8007684:	08007701 	.word	0x08007701
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007690:	e070      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800769a:	e06b      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80076a4:	e066      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80076ae:	e061      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80076b8:	e05c      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80076c2:	e057      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80076cc:	e052      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80076d6:	e04d      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80076e0:	e048      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80076ea:	e043      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80076f4:	e03e      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80076fe:	e039      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007708:	e034      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007710:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	75fb      	strb	r3, [r7, #23]
        break;
 800771e:	e029      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007726:	2b00      	cmp	r3, #0
 8007728:	d11a      	bne.n	8007760 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	2b0b      	cmp	r3, #11
 800772e:	d002      	beq.n	8007736 <HAL_UART_RegisterCallback+0x126>
 8007730:	2b0c      	cmp	r3, #12
 8007732:	d005      	beq.n	8007740 <HAL_UART_RegisterCallback+0x130>
 8007734:	e009      	b.n	800774a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800773e:	e019      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007748:	e014      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007750:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	75fb      	strb	r3, [r7, #23]
        break;
 800775e:	e009      	b.n	8007774 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007766:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007774:	7dfb      	ldrb	r3, [r7, #23]
}
 8007776:	4618      	mov	r0, r3
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop

08007784 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08a      	sub	sp, #40	@ 0x28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007798:	2b20      	cmp	r3, #32
 800779a:	d137      	bne.n	800780c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_UART_Receive_DMA+0x24>
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e030      	b.n	800780e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a18      	ldr	r2, [pc, #96]	@ (8007818 <HAL_UART_Receive_DMA+0x94>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d01f      	beq.n	80077fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d018      	beq.n	80077fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	613b      	str	r3, [r7, #16]
   return(result);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	623b      	str	r3, [r7, #32]
 80077ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	69f9      	ldr	r1, [r7, #28]
 80077ee:	6a3a      	ldr	r2, [r7, #32]
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e6      	bne.n	80077ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80077fc:	88fb      	ldrh	r3, [r7, #6]
 80077fe:	461a      	mov	r2, r3
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f001 f906 	bl	8008a14 <UART_Start_Receive_DMA>
 8007808:	4603      	mov	r3, r0
 800780a:	e000      	b.n	800780e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800780c:	2302      	movs	r3, #2
  }
}
 800780e:	4618      	mov	r0, r3
 8007810:	3728      	adds	r7, #40	@ 0x28
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	40008000 	.word	0x40008000

0800781c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b0ba      	sub	sp, #232	@ 0xe8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007842:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007846:	f640 030f 	movw	r3, #2063	@ 0x80f
 800784a:	4013      	ands	r3, r2
 800784c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007854:	2b00      	cmp	r3, #0
 8007856:	d11b      	bne.n	8007890 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800785c:	f003 0320 	and.w	r3, r3, #32
 8007860:	2b00      	cmp	r3, #0
 8007862:	d015      	beq.n	8007890 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d009      	beq.n	8007890 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 82f3 	beq.w	8007e6c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
      }
      return;
 800788e:	e2ed      	b.n	8007e6c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8129 	beq.w	8007aec <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800789a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800789e:	4b90      	ldr	r3, [pc, #576]	@ (8007ae0 <HAL_UART_IRQHandler+0x2c4>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80078aa:	4b8e      	ldr	r3, [pc, #568]	@ (8007ae4 <HAL_UART_IRQHandler+0x2c8>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 811c 	beq.w	8007aec <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d011      	beq.n	80078e4 <HAL_UART_IRQHandler+0xc8>
 80078c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2201      	movs	r2, #1
 80078d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078da:	f043 0201 	orr.w	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d011      	beq.n	8007914 <HAL_UART_IRQHandler+0xf8>
 80078f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2202      	movs	r2, #2
 8007902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790a:	f043 0204 	orr.w	r2, r3, #4
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d011      	beq.n	8007944 <HAL_UART_IRQHandler+0x128>
 8007920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2204      	movs	r2, #4
 8007932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793a:	f043 0202 	orr.w	r2, r3, #2
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d017      	beq.n	8007980 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800795c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007960:	4b5f      	ldr	r3, [pc, #380]	@ (8007ae0 <HAL_UART_IRQHandler+0x2c4>)
 8007962:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2208      	movs	r2, #8
 800796e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007976:	f043 0208 	orr.w	r2, r3, #8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007988:	2b00      	cmp	r3, #0
 800798a:	d012      	beq.n	80079b2 <HAL_UART_IRQHandler+0x196>
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007990:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00c      	beq.n	80079b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a8:	f043 0220 	orr.w	r2, r3, #32
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8259 	beq.w	8007e70 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d013      	beq.n	80079f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d105      	bne.n	80079e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a06:	2b40      	cmp	r3, #64	@ 0x40
 8007a08:	d005      	beq.n	8007a16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d058      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 f8e3 	bl	8008be2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a26:	2b40      	cmp	r3, #64	@ 0x40
 8007a28:	d148      	bne.n	8007abc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3308      	adds	r3, #8
 8007a30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3308      	adds	r3, #8
 8007a52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1d9      	bne.n	8007a2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d017      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a86:	4a18      	ldr	r2, [pc, #96]	@ (8007ae8 <HAL_UART_IRQHandler+0x2cc>)
 8007a88:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fc f901 	bl	8003c98 <HAL_DMA_Abort_IT>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01f      	beq.n	8007adc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007aaa:	4610      	mov	r0, r2
 8007aac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aae:	e015      	b.n	8007adc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aba:	e00f      	b.n	8007adc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ac6:	e009      	b.n	8007adc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007ada:	e1c9      	b.n	8007e70 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007adc:	bf00      	nop
    return;
 8007ade:	e1c7      	b.n	8007e70 <HAL_UART_IRQHandler+0x654>
 8007ae0:	10000001 	.word	0x10000001
 8007ae4:	04000120 	.word	0x04000120
 8007ae8:	08008ead 	.word	0x08008ead

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	f040 8157 	bne.w	8007da4 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afa:	f003 0310 	and.w	r3, r3, #16
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 8150 	beq.w	8007da4 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8149 	beq.w	8007da4 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2210      	movs	r2, #16
 8007b18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b24:	2b40      	cmp	r3, #64	@ 0x40
 8007b26:	f040 80bd 	bne.w	8007ca4 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8199 	beq.w	8007e74 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	f080 8191 	bcs.w	8007e74 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f040 8087 	bne.w	8007c7e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1da      	bne.n	8007b70 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bcc:	f023 0301 	bic.w	r3, r3, #1
 8007bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007bde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007bf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e1      	bne.n	8007bba <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3308      	adds	r3, #8
 8007c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e3      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c4c:	f023 0310 	bic.w	r3, r3, #16
 8007c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e4      	bne.n	8007c3c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fb ffb4 	bl	8003be6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2202      	movs	r2, #2
 8007c82:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8007c96:	b292      	uxth	r2, r2
 8007c98:	1a8a      	subs	r2, r1, r2
 8007c9a:	b292      	uxth	r2, r2
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ca2:	e0e7      	b.n	8007e74 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 80d9 	beq.w	8007e78 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8007cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80d4 	beq.w	8007e78 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cf4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e4      	bne.n	8007cd0 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	623b      	str	r3, [r7, #32]
   return(result);
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d1c:	f023 0301 	bic.w	r3, r3, #1
 8007d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3308      	adds	r3, #8
 8007d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e1      	bne.n	8007d06 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0310 	bic.w	r3, r3, #16
 8007d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	69b9      	ldr	r1, [r7, #24]
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	617b      	str	r3, [r7, #20]
   return(result);
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e4      	bne.n	8007d56 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d98:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007da2:	e069      	b.n	8007e78 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d010      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x5b6>
 8007db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007dc4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dd0:	e055      	b.n	8007e7e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d014      	beq.n	8007e08 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d03e      	beq.n	8007e7c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
    }
    return;
 8007e06:	e039      	b.n	8007e7c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <HAL_UART_IRQHandler+0x60c>
 8007e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 f85b 	bl	8008edc <UART_EndTransmit_IT>
    return;
 8007e26:	e02a      	b.n	8007e7e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <HAL_UART_IRQHandler+0x630>
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e4a:	e018      	b.n	8007e7e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d012      	beq.n	8007e7e <HAL_UART_IRQHandler+0x662>
 8007e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	da0e      	bge.n	8007e7e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e6a:	e008      	b.n	8007e7e <HAL_UART_IRQHandler+0x662>
      return;
 8007e6c:	bf00      	nop
 8007e6e:	e006      	b.n	8007e7e <HAL_UART_IRQHandler+0x662>
    return;
 8007e70:	bf00      	nop
 8007e72:	e004      	b.n	8007e7e <HAL_UART_IRQHandler+0x662>
      return;
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <HAL_UART_IRQHandler+0x662>
      return;
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <HAL_UART_IRQHandler+0x662>
    return;
 8007e7c:	bf00      	nop
  }
}
 8007e7e:	37e8      	adds	r7, #232	@ 0xe8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a09      	ldr	r2, [pc, #36]	@ (8007f70 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d009      	beq.n	8007f64 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	615a      	str	r2, [r3, #20]
  }
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	40008000 	.word	0x40008000

08007f74 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a18      	ldr	r2, [pc, #96]	@ (8007fe4 <HAL_UART_EnableReceiverTimeout+0x70>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d027      	beq.n	8007fd6 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d120      	bne.n	8007fd2 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d101      	bne.n	8007f9e <HAL_UART_EnableReceiverTimeout+0x2a>
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	e01c      	b.n	8007fd8 <HAL_UART_EnableReceiverTimeout+0x64>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2224      	movs	r2, #36	@ 0x24
 8007faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007fbc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e002      	b.n	8007fd8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e000      	b.n	8007fd8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
  }
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	40008000 	.word	0x40008000

08007fe8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
	...

08008004 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1a      	ldr	r2, [pc, #104]	@ (8008078 <UART_InitCallbacksToDefault+0x74>)
 8008010:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a19      	ldr	r2, [pc, #100]	@ (800807c <UART_InitCallbacksToDefault+0x78>)
 8008018:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a18      	ldr	r2, [pc, #96]	@ (8008080 <UART_InitCallbacksToDefault+0x7c>)
 8008020:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a17      	ldr	r2, [pc, #92]	@ (8008084 <UART_InitCallbacksToDefault+0x80>)
 8008028:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a16      	ldr	r2, [pc, #88]	@ (8008088 <UART_InitCallbacksToDefault+0x84>)
 8008030:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a15      	ldr	r2, [pc, #84]	@ (800808c <UART_InitCallbacksToDefault+0x88>)
 8008038:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a14      	ldr	r2, [pc, #80]	@ (8008090 <UART_InitCallbacksToDefault+0x8c>)
 8008040:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a13      	ldr	r2, [pc, #76]	@ (8008094 <UART_InitCallbacksToDefault+0x90>)
 8008048:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a12      	ldr	r2, [pc, #72]	@ (8008098 <UART_InitCallbacksToDefault+0x94>)
 8008050:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a11      	ldr	r2, [pc, #68]	@ (800809c <UART_InitCallbacksToDefault+0x98>)
 8008058:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a10      	ldr	r2, [pc, #64]	@ (80080a0 <UART_InitCallbacksToDefault+0x9c>)
 8008060:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a0f      	ldr	r2, [pc, #60]	@ (80080a4 <UART_InitCallbacksToDefault+0xa0>)
 8008068:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	08007e99 	.word	0x08007e99
 800807c:	08007e85 	.word	0x08007e85
 8008080:	08007ec1 	.word	0x08007ec1
 8008084:	08007ead 	.word	0x08007ead
 8008088:	08007ed5 	.word	0x08007ed5
 800808c:	08007ee9 	.word	0x08007ee9
 8008090:	08007efd 	.word	0x08007efd
 8008094:	08007f11 	.word	0x08007f11
 8008098:	08008f37 	.word	0x08008f37
 800809c:	08008f4b 	.word	0x08008f4b
 80080a0:	08008f5f 	.word	0x08008f5f
 80080a4:	08007f25 	.word	0x08007f25

080080a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080ac:	b08c      	sub	sp, #48	@ 0x30
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	431a      	orrs	r2, r3
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	431a      	orrs	r2, r3
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4baa      	ldr	r3, [pc, #680]	@ (8008380 <UART_SetConfig+0x2d8>)
 80080d8:	4013      	ands	r3, r2
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080e0:	430b      	orrs	r3, r1
 80080e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a9f      	ldr	r2, [pc, #636]	@ (8008384 <UART_SetConfig+0x2dc>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d004      	beq.n	8008114 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008110:	4313      	orrs	r3, r2
 8008112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800811e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008128:	430b      	orrs	r3, r1
 800812a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008132:	f023 010f 	bic.w	r1, r3, #15
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a90      	ldr	r2, [pc, #576]	@ (8008388 <UART_SetConfig+0x2e0>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d125      	bne.n	8008198 <UART_SetConfig+0xf0>
 800814c:	4b8f      	ldr	r3, [pc, #572]	@ (800838c <UART_SetConfig+0x2e4>)
 800814e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b03      	cmp	r3, #3
 8008158:	d81a      	bhi.n	8008190 <UART_SetConfig+0xe8>
 800815a:	a201      	add	r2, pc, #4	@ (adr r2, 8008160 <UART_SetConfig+0xb8>)
 800815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008160:	08008171 	.word	0x08008171
 8008164:	08008181 	.word	0x08008181
 8008168:	08008179 	.word	0x08008179
 800816c:	08008189 	.word	0x08008189
 8008170:	2301      	movs	r3, #1
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008176:	e116      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008178:	2302      	movs	r3, #2
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817e:	e112      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008180:	2304      	movs	r3, #4
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008186:	e10e      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008188:	2308      	movs	r3, #8
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818e:	e10a      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008190:	2310      	movs	r3, #16
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008196:	e106      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a7c      	ldr	r2, [pc, #496]	@ (8008390 <UART_SetConfig+0x2e8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d138      	bne.n	8008214 <UART_SetConfig+0x16c>
 80081a2:	4b7a      	ldr	r3, [pc, #488]	@ (800838c <UART_SetConfig+0x2e4>)
 80081a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081a8:	f003 030c 	and.w	r3, r3, #12
 80081ac:	2b0c      	cmp	r3, #12
 80081ae:	d82d      	bhi.n	800820c <UART_SetConfig+0x164>
 80081b0:	a201      	add	r2, pc, #4	@ (adr r2, 80081b8 <UART_SetConfig+0x110>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	080081ed 	.word	0x080081ed
 80081bc:	0800820d 	.word	0x0800820d
 80081c0:	0800820d 	.word	0x0800820d
 80081c4:	0800820d 	.word	0x0800820d
 80081c8:	080081fd 	.word	0x080081fd
 80081cc:	0800820d 	.word	0x0800820d
 80081d0:	0800820d 	.word	0x0800820d
 80081d4:	0800820d 	.word	0x0800820d
 80081d8:	080081f5 	.word	0x080081f5
 80081dc:	0800820d 	.word	0x0800820d
 80081e0:	0800820d 	.word	0x0800820d
 80081e4:	0800820d 	.word	0x0800820d
 80081e8:	08008205 	.word	0x08008205
 80081ec:	2300      	movs	r3, #0
 80081ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f2:	e0d8      	b.n	80083a6 <UART_SetConfig+0x2fe>
 80081f4:	2302      	movs	r3, #2
 80081f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081fa:	e0d4      	b.n	80083a6 <UART_SetConfig+0x2fe>
 80081fc:	2304      	movs	r3, #4
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008202:	e0d0      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008204:	2308      	movs	r3, #8
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800820a:	e0cc      	b.n	80083a6 <UART_SetConfig+0x2fe>
 800820c:	2310      	movs	r3, #16
 800820e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008212:	e0c8      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a5e      	ldr	r2, [pc, #376]	@ (8008394 <UART_SetConfig+0x2ec>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d125      	bne.n	800826a <UART_SetConfig+0x1c2>
 800821e:	4b5b      	ldr	r3, [pc, #364]	@ (800838c <UART_SetConfig+0x2e4>)
 8008220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008224:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008228:	2b30      	cmp	r3, #48	@ 0x30
 800822a:	d016      	beq.n	800825a <UART_SetConfig+0x1b2>
 800822c:	2b30      	cmp	r3, #48	@ 0x30
 800822e:	d818      	bhi.n	8008262 <UART_SetConfig+0x1ba>
 8008230:	2b20      	cmp	r3, #32
 8008232:	d00a      	beq.n	800824a <UART_SetConfig+0x1a2>
 8008234:	2b20      	cmp	r3, #32
 8008236:	d814      	bhi.n	8008262 <UART_SetConfig+0x1ba>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <UART_SetConfig+0x19a>
 800823c:	2b10      	cmp	r3, #16
 800823e:	d008      	beq.n	8008252 <UART_SetConfig+0x1aa>
 8008240:	e00f      	b.n	8008262 <UART_SetConfig+0x1ba>
 8008242:	2300      	movs	r3, #0
 8008244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008248:	e0ad      	b.n	80083a6 <UART_SetConfig+0x2fe>
 800824a:	2302      	movs	r3, #2
 800824c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008250:	e0a9      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008252:	2304      	movs	r3, #4
 8008254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008258:	e0a5      	b.n	80083a6 <UART_SetConfig+0x2fe>
 800825a:	2308      	movs	r3, #8
 800825c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008260:	e0a1      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008262:	2310      	movs	r3, #16
 8008264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008268:	e09d      	b.n	80083a6 <UART_SetConfig+0x2fe>
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a4a      	ldr	r2, [pc, #296]	@ (8008398 <UART_SetConfig+0x2f0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d125      	bne.n	80082c0 <UART_SetConfig+0x218>
 8008274:	4b45      	ldr	r3, [pc, #276]	@ (800838c <UART_SetConfig+0x2e4>)
 8008276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800827a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800827e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008280:	d016      	beq.n	80082b0 <UART_SetConfig+0x208>
 8008282:	2bc0      	cmp	r3, #192	@ 0xc0
 8008284:	d818      	bhi.n	80082b8 <UART_SetConfig+0x210>
 8008286:	2b80      	cmp	r3, #128	@ 0x80
 8008288:	d00a      	beq.n	80082a0 <UART_SetConfig+0x1f8>
 800828a:	2b80      	cmp	r3, #128	@ 0x80
 800828c:	d814      	bhi.n	80082b8 <UART_SetConfig+0x210>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <UART_SetConfig+0x1f0>
 8008292:	2b40      	cmp	r3, #64	@ 0x40
 8008294:	d008      	beq.n	80082a8 <UART_SetConfig+0x200>
 8008296:	e00f      	b.n	80082b8 <UART_SetConfig+0x210>
 8008298:	2300      	movs	r3, #0
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800829e:	e082      	b.n	80083a6 <UART_SetConfig+0x2fe>
 80082a0:	2302      	movs	r3, #2
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a6:	e07e      	b.n	80083a6 <UART_SetConfig+0x2fe>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ae:	e07a      	b.n	80083a6 <UART_SetConfig+0x2fe>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b6:	e076      	b.n	80083a6 <UART_SetConfig+0x2fe>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082be:	e072      	b.n	80083a6 <UART_SetConfig+0x2fe>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a35      	ldr	r2, [pc, #212]	@ (800839c <UART_SetConfig+0x2f4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d12a      	bne.n	8008320 <UART_SetConfig+0x278>
 80082ca:	4b30      	ldr	r3, [pc, #192]	@ (800838c <UART_SetConfig+0x2e4>)
 80082cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082d8:	d01a      	beq.n	8008310 <UART_SetConfig+0x268>
 80082da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082de:	d81b      	bhi.n	8008318 <UART_SetConfig+0x270>
 80082e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082e4:	d00c      	beq.n	8008300 <UART_SetConfig+0x258>
 80082e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ea:	d815      	bhi.n	8008318 <UART_SetConfig+0x270>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <UART_SetConfig+0x250>
 80082f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082f4:	d008      	beq.n	8008308 <UART_SetConfig+0x260>
 80082f6:	e00f      	b.n	8008318 <UART_SetConfig+0x270>
 80082f8:	2300      	movs	r3, #0
 80082fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fe:	e052      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008300:	2302      	movs	r3, #2
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008306:	e04e      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008308:	2304      	movs	r3, #4
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800830e:	e04a      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008310:	2308      	movs	r3, #8
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008316:	e046      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008318:	2310      	movs	r3, #16
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800831e:	e042      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a17      	ldr	r2, [pc, #92]	@ (8008384 <UART_SetConfig+0x2dc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d13a      	bne.n	80083a0 <UART_SetConfig+0x2f8>
 800832a:	4b18      	ldr	r3, [pc, #96]	@ (800838c <UART_SetConfig+0x2e4>)
 800832c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008330:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008334:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008338:	d01a      	beq.n	8008370 <UART_SetConfig+0x2c8>
 800833a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800833e:	d81b      	bhi.n	8008378 <UART_SetConfig+0x2d0>
 8008340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008344:	d00c      	beq.n	8008360 <UART_SetConfig+0x2b8>
 8008346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800834a:	d815      	bhi.n	8008378 <UART_SetConfig+0x2d0>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <UART_SetConfig+0x2b0>
 8008350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008354:	d008      	beq.n	8008368 <UART_SetConfig+0x2c0>
 8008356:	e00f      	b.n	8008378 <UART_SetConfig+0x2d0>
 8008358:	2300      	movs	r3, #0
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800835e:	e022      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008360:	2302      	movs	r3, #2
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008366:	e01e      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008368:	2304      	movs	r3, #4
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800836e:	e01a      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008370:	2308      	movs	r3, #8
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008376:	e016      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008378:	2310      	movs	r3, #16
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800837e:	e012      	b.n	80083a6 <UART_SetConfig+0x2fe>
 8008380:	cfff69f3 	.word	0xcfff69f3
 8008384:	40008000 	.word	0x40008000
 8008388:	40013800 	.word	0x40013800
 800838c:	40021000 	.word	0x40021000
 8008390:	40004400 	.word	0x40004400
 8008394:	40004800 	.word	0x40004800
 8008398:	40004c00 	.word	0x40004c00
 800839c:	40005000 	.word	0x40005000
 80083a0:	2310      	movs	r3, #16
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4aae      	ldr	r2, [pc, #696]	@ (8008664 <UART_SetConfig+0x5bc>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	f040 8097 	bne.w	80084e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d823      	bhi.n	8008402 <UART_SetConfig+0x35a>
 80083ba:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <UART_SetConfig+0x318>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	080083e5 	.word	0x080083e5
 80083c4:	08008403 	.word	0x08008403
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	08008403 	.word	0x08008403
 80083d0:	080083f3 	.word	0x080083f3
 80083d4:	08008403 	.word	0x08008403
 80083d8:	08008403 	.word	0x08008403
 80083dc:	08008403 	.word	0x08008403
 80083e0:	080083fb 	.word	0x080083fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e4:	f7fc fd48 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 80083e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ea:	e010      	b.n	800840e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083ec:	4b9e      	ldr	r3, [pc, #632]	@ (8008668 <UART_SetConfig+0x5c0>)
 80083ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083f0:	e00d      	b.n	800840e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083f2:	f7fc fcd3 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 80083f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083f8:	e009      	b.n	800840e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008400:	e005      	b.n	800840e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800840c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8130 	beq.w	8008676 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	4a94      	ldr	r2, [pc, #592]	@ (800866c <UART_SetConfig+0x5c4>)
 800841c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008420:	461a      	mov	r2, r3
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	fbb3 f3f2 	udiv	r3, r3, r2
 8008428:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	4613      	mov	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4413      	add	r3, r2
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	429a      	cmp	r2, r3
 8008438:	d305      	bcc.n	8008446 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	429a      	cmp	r2, r3
 8008444:	d903      	bls.n	800844e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800844c:	e113      	b.n	8008676 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	2200      	movs	r2, #0
 8008452:	60bb      	str	r3, [r7, #8]
 8008454:	60fa      	str	r2, [r7, #12]
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845a:	4a84      	ldr	r2, [pc, #528]	@ (800866c <UART_SetConfig+0x5c4>)
 800845c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008460:	b29b      	uxth	r3, r3
 8008462:	2200      	movs	r2, #0
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800846c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008470:	f7f8 fcbc 	bl	8000dec <__aeabi_uldivmod>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4610      	mov	r0, r2
 800847a:	4619      	mov	r1, r3
 800847c:	f04f 0200 	mov.w	r2, #0
 8008480:	f04f 0300 	mov.w	r3, #0
 8008484:	020b      	lsls	r3, r1, #8
 8008486:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800848a:	0202      	lsls	r2, r0, #8
 800848c:	6979      	ldr	r1, [r7, #20]
 800848e:	6849      	ldr	r1, [r1, #4]
 8008490:	0849      	lsrs	r1, r1, #1
 8008492:	2000      	movs	r0, #0
 8008494:	460c      	mov	r4, r1
 8008496:	4605      	mov	r5, r0
 8008498:	eb12 0804 	adds.w	r8, r2, r4
 800849c:	eb43 0905 	adc.w	r9, r3, r5
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	469a      	mov	sl, r3
 80084a8:	4693      	mov	fp, r2
 80084aa:	4652      	mov	r2, sl
 80084ac:	465b      	mov	r3, fp
 80084ae:	4640      	mov	r0, r8
 80084b0:	4649      	mov	r1, r9
 80084b2:	f7f8 fc9b 	bl	8000dec <__aeabi_uldivmod>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4613      	mov	r3, r2
 80084bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084c4:	d308      	bcc.n	80084d8 <UART_SetConfig+0x430>
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084cc:	d204      	bcs.n	80084d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6a3a      	ldr	r2, [r7, #32]
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	e0ce      	b.n	8008676 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084de:	e0ca      	b.n	8008676 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084e8:	d166      	bne.n	80085b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80084ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d827      	bhi.n	8008542 <UART_SetConfig+0x49a>
 80084f2:	a201      	add	r2, pc, #4	@ (adr r2, 80084f8 <UART_SetConfig+0x450>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008525 	.word	0x08008525
 8008500:	0800852d 	.word	0x0800852d
 8008504:	08008543 	.word	0x08008543
 8008508:	08008533 	.word	0x08008533
 800850c:	08008543 	.word	0x08008543
 8008510:	08008543 	.word	0x08008543
 8008514:	08008543 	.word	0x08008543
 8008518:	0800853b 	.word	0x0800853b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800851c:	f7fc fcac 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8008520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008522:	e014      	b.n	800854e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008524:	f7fc fcbe 	bl	8004ea4 <HAL_RCC_GetPCLK2Freq>
 8008528:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800852a:	e010      	b.n	800854e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800852c:	4b4e      	ldr	r3, [pc, #312]	@ (8008668 <UART_SetConfig+0x5c0>)
 800852e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008530:	e00d      	b.n	800854e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008532:	f7fc fc33 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8008536:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008538:	e009      	b.n	800854e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800853a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800853e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008540:	e005      	b.n	800854e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800854c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800854e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 8090 	beq.w	8008676 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855a:	4a44      	ldr	r2, [pc, #272]	@ (800866c <UART_SetConfig+0x5c4>)
 800855c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008560:	461a      	mov	r2, r3
 8008562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008564:	fbb3 f3f2 	udiv	r3, r3, r2
 8008568:	005a      	lsls	r2, r3, #1
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	085b      	lsrs	r3, r3, #1
 8008570:	441a      	add	r2, r3
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	fbb2 f3f3 	udiv	r3, r2, r3
 800857a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	2b0f      	cmp	r3, #15
 8008580:	d916      	bls.n	80085b0 <UART_SetConfig+0x508>
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008588:	d212      	bcs.n	80085b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	b29b      	uxth	r3, r3
 800858e:	f023 030f 	bic.w	r3, r3, #15
 8008592:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	085b      	lsrs	r3, r3, #1
 8008598:	b29b      	uxth	r3, r3
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	b29a      	uxth	r2, r3
 80085a0:	8bfb      	ldrh	r3, [r7, #30]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	8bfa      	ldrh	r2, [r7, #30]
 80085ac:	60da      	str	r2, [r3, #12]
 80085ae:	e062      	b.n	8008676 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085b6:	e05e      	b.n	8008676 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d828      	bhi.n	8008612 <UART_SetConfig+0x56a>
 80085c0:	a201      	add	r2, pc, #4	@ (adr r2, 80085c8 <UART_SetConfig+0x520>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085ed 	.word	0x080085ed
 80085cc:	080085f5 	.word	0x080085f5
 80085d0:	080085fd 	.word	0x080085fd
 80085d4:	08008613 	.word	0x08008613
 80085d8:	08008603 	.word	0x08008603
 80085dc:	08008613 	.word	0x08008613
 80085e0:	08008613 	.word	0x08008613
 80085e4:	08008613 	.word	0x08008613
 80085e8:	0800860b 	.word	0x0800860b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085ec:	f7fc fc44 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 80085f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085f2:	e014      	b.n	800861e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085f4:	f7fc fc56 	bl	8004ea4 <HAL_RCC_GetPCLK2Freq>
 80085f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085fa:	e010      	b.n	800861e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008668 <UART_SetConfig+0x5c0>)
 80085fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008600:	e00d      	b.n	800861e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008602:	f7fc fbcb 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8008606:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008608:	e009      	b.n	800861e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800860a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800860e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008610:	e005      	b.n	800861e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800861c:	bf00      	nop
    }

    if (pclk != 0U)
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d028      	beq.n	8008676 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008628:	4a10      	ldr	r2, [pc, #64]	@ (800866c <UART_SetConfig+0x5c4>)
 800862a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800862e:	461a      	mov	r2, r3
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	fbb3 f2f2 	udiv	r2, r3, r2
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	441a      	add	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	fbb2 f3f3 	udiv	r3, r2, r3
 8008646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	2b0f      	cmp	r3, #15
 800864c:	d910      	bls.n	8008670 <UART_SetConfig+0x5c8>
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008654:	d20c      	bcs.n	8008670 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	b29a      	uxth	r2, r3
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60da      	str	r2, [r3, #12]
 8008660:	e009      	b.n	8008676 <UART_SetConfig+0x5ce>
 8008662:	bf00      	nop
 8008664:	40008000 	.word	0x40008000
 8008668:	00f42400 	.word	0x00f42400
 800866c:	080094f0 	.word	0x080094f0
      }
      else
      {
        ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2201      	movs	r2, #1
 800867a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2201      	movs	r2, #1
 8008682:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2200      	movs	r2, #0
 800868a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2200      	movs	r2, #0
 8008690:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008692:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008696:	4618      	mov	r0, r3
 8008698:	3730      	adds	r7, #48	@ 0x30
 800869a:	46bd      	mov	sp, r7
 800869c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080086a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ac:	f003 0308 	and.w	r3, r3, #8
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00a      	beq.n	800870e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01a      	beq.n	80087b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800879e:	d10a      	bne.n	80087b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	605a      	str	r2, [r3, #4]
  }
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b098      	sub	sp, #96	@ 0x60
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087f4:	f7fa ffb8 	bl	8003768 <HAL_GetTick>
 80087f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b08      	cmp	r3, #8
 8008806:	d12f      	bne.n	8008868 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008810:	2200      	movs	r2, #0
 8008812:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f88e 	bl	8008938 <UART_WaitOnFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d022      	beq.n	8008868 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008836:	653b      	str	r3, [r7, #80]	@ 0x50
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	461a      	mov	r2, r3
 800883e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008840:	647b      	str	r3, [r7, #68]	@ 0x44
 8008842:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800884e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e6      	bne.n	8008822 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e063      	b.n	8008930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b04      	cmp	r3, #4
 8008874:	d149      	bne.n	800890a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008876:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800887e:	2200      	movs	r2, #0
 8008880:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f857 	bl	8008938 <UART_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d03c      	beq.n	800890a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	623b      	str	r3, [r7, #32]
   return(result);
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80088b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e6      	bne.n	8008890 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088e2:	61fa      	str	r2, [r7, #28]
 80088e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	69b9      	ldr	r1, [r7, #24]
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	617b      	str	r3, [r7, #20]
   return(result);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e5      	bne.n	80088c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e012      	b.n	8008930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3758      	adds	r7, #88	@ 0x58
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4613      	mov	r3, r2
 8008946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008948:	e04f      	b.n	80089ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008950:	d04b      	beq.n	80089ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008952:	f7fa ff09 	bl	8003768 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	429a      	cmp	r2, r3
 8008960:	d302      	bcc.n	8008968 <UART_WaitOnFlagUntilTimeout+0x30>
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e04e      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0304 	and.w	r3, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	d037      	beq.n	80089ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b80      	cmp	r3, #128	@ 0x80
 800897e:	d034      	beq.n	80089ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b40      	cmp	r3, #64	@ 0x40
 8008984:	d031      	beq.n	80089ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b08      	cmp	r3, #8
 8008992:	d110      	bne.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2208      	movs	r2, #8
 800899a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f920 	bl	8008be2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2208      	movs	r2, #8
 80089a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e029      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089c4:	d111      	bne.n	80089ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f906 	bl	8008be2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2220      	movs	r2, #32
 80089da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e00f      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4013      	ands	r3, r2
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	bf0c      	ite	eq
 80089fa:	2301      	moveq	r3, #1
 80089fc:	2300      	movne	r3, #0
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	461a      	mov	r2, r3
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d0a0      	beq.n	800894a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b096      	sub	sp, #88	@ 0x58
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	88fa      	ldrh	r2, [r7, #6]
 8008a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2222      	movs	r2, #34	@ 0x22
 8008a3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d02d      	beq.n	8008aa6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a50:	4a40      	ldr	r2, [pc, #256]	@ (8008b54 <UART_Start_Receive_DMA+0x140>)
 8008a52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8008b58 <UART_Start_Receive_DMA+0x144>)
 8008a5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a64:	4a3d      	ldr	r2, [pc, #244]	@ (8008b5c <UART_Start_Receive_DMA+0x148>)
 8008a66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a6e:	2200      	movs	r2, #0
 8008a70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3324      	adds	r3, #36	@ 0x24
 8008a7e:	4619      	mov	r1, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a84:	461a      	mov	r2, r3
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	f7fb f832 	bl	8003af0 <HAL_DMA_Start_IT>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d009      	beq.n	8008aa6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2210      	movs	r2, #16
 8008a96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e051      	b.n	8008b4a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d018      	beq.n	8008ae0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ac2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008acc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ace:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ad2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e6      	bne.n	8008aae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	f043 0301 	orr.w	r3, r3, #1
 8008af6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b00:	637a      	str	r2, [r7, #52]	@ 0x34
 8008b02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e5      	bne.n	8008ae0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3308      	adds	r3, #8
 8008b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	613b      	str	r3, [r7, #16]
   return(result);
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3308      	adds	r3, #8
 8008b32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b34:	623a      	str	r2, [r7, #32]
 8008b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	69f9      	ldr	r1, [r7, #28]
 8008b3a:	6a3a      	ldr	r2, [r7, #32]
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e5      	bne.n	8008b14 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3758      	adds	r7, #88	@ 0x58
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	08008caf 	.word	0x08008caf
 8008b58:	08008de3 	.word	0x08008de3
 8008b5c:	08008e29 	.word	0x08008e29

08008b60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b08f      	sub	sp, #60	@ 0x3c
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b88:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e6      	bne.n	8008b68 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bba:	61ba      	str	r2, [r7, #24]
 8008bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6979      	ldr	r1, [r7, #20]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e5      	bne.n	8008b9a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008bd6:	bf00      	nop
 8008bd8:	373c      	adds	r7, #60	@ 0x3c
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b095      	sub	sp, #84	@ 0x54
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e6      	bne.n	8008bea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3308      	adds	r3, #8
 8008c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c32:	f023 0301 	bic.w	r3, r3, #1
 8008c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c48:	e841 2300 	strex	r3, r2, [r1]
 8008c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1e3      	bne.n	8008c1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d118      	bne.n	8008c8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f023 0310 	bic.w	r3, r3, #16
 8008c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	6979      	ldr	r1, [r7, #20]
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	613b      	str	r3, [r7, #16]
   return(result);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e6      	bne.n	8008c5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2220      	movs	r2, #32
 8008c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ca2:	bf00      	nop
 8008ca4:	3754      	adds	r7, #84	@ 0x54
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b09c      	sub	sp, #112	@ 0x70
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d171      	bne.n	8008dae <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ce2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ce6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cf2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e6      	bne.n	8008cd2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3308      	adds	r3, #8
 8008d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d16:	f023 0301 	bic.w	r3, r3, #1
 8008d1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3308      	adds	r3, #8
 8008d22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d24:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e5      	bne.n	8008d04 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	623b      	str	r3, [r7, #32]
   return(result);
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3308      	adds	r3, #8
 8008d56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d58:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e5      	bne.n	8008d38 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d118      	bne.n	8008dae <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f023 0310 	bic.w	r3, r3, #16
 8008d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	69b9      	ldr	r1, [r7, #24]
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	617b      	str	r3, [r7, #20]
   return(result);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1e6      	bne.n	8008d7c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008db0:	2200      	movs	r2, #0
 8008db2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d109      	bne.n	8008dd0 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008dc2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dc4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008dc8:	4611      	mov	r1, r2
 8008dca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008dcc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008dce:	e004      	b.n	8008dda <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8008dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008dd6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008dd8:	4798      	blx	r3
}
 8008dda:	bf00      	nop
 8008ddc:	3770      	adds	r7, #112	@ 0x70
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d10b      	bne.n	8008e16 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008e0a:	0852      	lsrs	r2, r2, #1
 8008e0c:	b292      	uxth	r2, r2
 8008e0e:	4611      	mov	r1, r2
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e14:	e004      	b.n	8008e20 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	4798      	blx	r3
}
 8008e20:	bf00      	nop
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e50:	2b80      	cmp	r3, #128	@ 0x80
 8008e52:	d109      	bne.n	8008e68 <UART_DMAError+0x40>
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	2b21      	cmp	r3, #33	@ 0x21
 8008e58:	d106      	bne.n	8008e68 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008e62:	6978      	ldr	r0, [r7, #20]
 8008e64:	f7ff fe7c 	bl	8008b60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e72:	2b40      	cmp	r3, #64	@ 0x40
 8008e74:	d109      	bne.n	8008e8a <UART_DMAError+0x62>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b22      	cmp	r3, #34	@ 0x22
 8008e7a:	d106      	bne.n	8008e8a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008e84:	6978      	ldr	r0, [r7, #20]
 8008e86:	f7ff feac 	bl	8008be2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e90:	f043 0210 	orr.w	r2, r3, #16
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ea0:	6978      	ldr	r0, [r7, #20]
 8008ea2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ea4:	bf00      	nop
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ed4:	bf00      	nop
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef8:	61fb      	str	r3, [r7, #28]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	61bb      	str	r3, [r7, #24]
 8008f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6979      	ldr	r1, [r7, #20]
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e6      	bne.n	8008ee4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f2e:	bf00      	nop
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f3e:	bf00      	nop
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f66:	bf00      	nop
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b085      	sub	sp, #20
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e027      	b.n	8008fd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2224      	movs	r2, #36	@ 0x24
 8008f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 0201 	bic.w	r2, r2, #1
 8008fae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008fb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e02d      	b.n	8009058 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2224      	movs	r2, #36	@ 0x24
 8009008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f022 0201 	bic.w	r2, r2, #1
 8009022:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f84f 	bl	80090dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009074:	2302      	movs	r3, #2
 8009076:	e02d      	b.n	80090d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2224      	movs	r2, #36	@ 0x24
 8009084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0201 	bic.w	r2, r2, #1
 800909e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f811 	bl	80090dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d108      	bne.n	80090fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090fc:	e031      	b.n	8009162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090fe:	2308      	movs	r3, #8
 8009100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009102:	2308      	movs	r3, #8
 8009104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	0e5b      	lsrs	r3, r3, #25
 800910e:	b2db      	uxtb	r3, r3
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	0f5b      	lsrs	r3, r3, #29
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	7b3a      	ldrb	r2, [r7, #12]
 800912a:	4911      	ldr	r1, [pc, #68]	@ (8009170 <UARTEx_SetNbDataToProcess+0x94>)
 800912c:	5c8a      	ldrb	r2, [r1, r2]
 800912e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009132:	7b3a      	ldrb	r2, [r7, #12]
 8009134:	490f      	ldr	r1, [pc, #60]	@ (8009174 <UARTEx_SetNbDataToProcess+0x98>)
 8009136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009138:	fb93 f3f2 	sdiv	r3, r3, r2
 800913c:	b29a      	uxth	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	7b7a      	ldrb	r2, [r7, #13]
 8009148:	4909      	ldr	r1, [pc, #36]	@ (8009170 <UARTEx_SetNbDataToProcess+0x94>)
 800914a:	5c8a      	ldrb	r2, [r1, r2]
 800914c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009150:	7b7a      	ldrb	r2, [r7, #13]
 8009152:	4908      	ldr	r1, [pc, #32]	@ (8009174 <UARTEx_SetNbDataToProcess+0x98>)
 8009154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009156:	fb93 f3f2 	sdiv	r3, r3, r2
 800915a:	b29a      	uxth	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	08009508 	.word	0x08009508
 8009174:	08009510 	.word	0x08009510

08009178 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	817b      	strh	r3, [r7, #10]
 8009186:	4613      	mov	r3, r2
 8009188:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	897a      	ldrh	r2, [r7, #10]
 800918e:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	893a      	ldrh	r2, [r7, #8]
 8009194:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	605a      	str	r2, [r3, #4]
}
 800919c:	bf00      	nop
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <memset>:
 80091a8:	4402      	add	r2, r0
 80091aa:	4603      	mov	r3, r0
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d100      	bne.n	80091b2 <memset+0xa>
 80091b0:	4770      	bx	lr
 80091b2:	f803 1b01 	strb.w	r1, [r3], #1
 80091b6:	e7f9      	b.n	80091ac <memset+0x4>

080091b8 <__errno>:
 80091b8:	4b01      	ldr	r3, [pc, #4]	@ (80091c0 <__errno+0x8>)
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	20000018 	.word	0x20000018

080091c4 <__libc_init_array>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4d0d      	ldr	r5, [pc, #52]	@ (80091fc <__libc_init_array+0x38>)
 80091c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009200 <__libc_init_array+0x3c>)
 80091ca:	1b64      	subs	r4, r4, r5
 80091cc:	10a4      	asrs	r4, r4, #2
 80091ce:	2600      	movs	r6, #0
 80091d0:	42a6      	cmp	r6, r4
 80091d2:	d109      	bne.n	80091e8 <__libc_init_array+0x24>
 80091d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009204 <__libc_init_array+0x40>)
 80091d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009208 <__libc_init_array+0x44>)
 80091d8:	f000 f91e 	bl	8009418 <_init>
 80091dc:	1b64      	subs	r4, r4, r5
 80091de:	10a4      	asrs	r4, r4, #2
 80091e0:	2600      	movs	r6, #0
 80091e2:	42a6      	cmp	r6, r4
 80091e4:	d105      	bne.n	80091f2 <__libc_init_array+0x2e>
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ec:	4798      	blx	r3
 80091ee:	3601      	adds	r6, #1
 80091f0:	e7ee      	b.n	80091d0 <__libc_init_array+0xc>
 80091f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f6:	4798      	blx	r3
 80091f8:	3601      	adds	r6, #1
 80091fa:	e7f2      	b.n	80091e2 <__libc_init_array+0x1e>
 80091fc:	08009520 	.word	0x08009520
 8009200:	08009520 	.word	0x08009520
 8009204:	08009520 	.word	0x08009520
 8009208:	08009524 	.word	0x08009524

0800920c <sqrt>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	ed2d 8b02 	vpush	{d8}
 8009212:	ec55 4b10 	vmov	r4, r5, d0
 8009216:	f000 f825 	bl	8009264 <__ieee754_sqrt>
 800921a:	4622      	mov	r2, r4
 800921c:	462b      	mov	r3, r5
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	eeb0 8a40 	vmov.f32	s16, s0
 8009226:	eef0 8a60 	vmov.f32	s17, s1
 800922a:	f7f7 fc4b 	bl	8000ac4 <__aeabi_dcmpun>
 800922e:	b990      	cbnz	r0, 8009256 <sqrt+0x4a>
 8009230:	2200      	movs	r2, #0
 8009232:	2300      	movs	r3, #0
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 fc1c 	bl	8000a74 <__aeabi_dcmplt>
 800923c:	b158      	cbz	r0, 8009256 <sqrt+0x4a>
 800923e:	f7ff ffbb 	bl	80091b8 <__errno>
 8009242:	2321      	movs	r3, #33	@ 0x21
 8009244:	6003      	str	r3, [r0, #0]
 8009246:	2200      	movs	r2, #0
 8009248:	2300      	movs	r3, #0
 800924a:	4610      	mov	r0, r2
 800924c:	4619      	mov	r1, r3
 800924e:	f7f7 fac9 	bl	80007e4 <__aeabi_ddiv>
 8009252:	ec41 0b18 	vmov	d8, r0, r1
 8009256:	eeb0 0a48 	vmov.f32	s0, s16
 800925a:	eef0 0a68 	vmov.f32	s1, s17
 800925e:	ecbd 8b02 	vpop	{d8}
 8009262:	bd38      	pop	{r3, r4, r5, pc}

08009264 <__ieee754_sqrt>:
 8009264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	4a68      	ldr	r2, [pc, #416]	@ (800940c <__ieee754_sqrt+0x1a8>)
 800926a:	ec55 4b10 	vmov	r4, r5, d0
 800926e:	43aa      	bics	r2, r5
 8009270:	462b      	mov	r3, r5
 8009272:	4621      	mov	r1, r4
 8009274:	d110      	bne.n	8009298 <__ieee754_sqrt+0x34>
 8009276:	4622      	mov	r2, r4
 8009278:	4620      	mov	r0, r4
 800927a:	4629      	mov	r1, r5
 800927c:	f7f7 f988 	bl	8000590 <__aeabi_dmul>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	4620      	mov	r0, r4
 8009286:	4629      	mov	r1, r5
 8009288:	f7f6 ffcc 	bl	8000224 <__adddf3>
 800928c:	4604      	mov	r4, r0
 800928e:	460d      	mov	r5, r1
 8009290:	ec45 4b10 	vmov	d0, r4, r5
 8009294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009298:	2d00      	cmp	r5, #0
 800929a:	dc0e      	bgt.n	80092ba <__ieee754_sqrt+0x56>
 800929c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80092a0:	4322      	orrs	r2, r4
 80092a2:	d0f5      	beq.n	8009290 <__ieee754_sqrt+0x2c>
 80092a4:	b19d      	cbz	r5, 80092ce <__ieee754_sqrt+0x6a>
 80092a6:	4622      	mov	r2, r4
 80092a8:	4620      	mov	r0, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f6 ffb8 	bl	8000220 <__aeabi_dsub>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	f7f7 fa96 	bl	80007e4 <__aeabi_ddiv>
 80092b8:	e7e8      	b.n	800928c <__ieee754_sqrt+0x28>
 80092ba:	152a      	asrs	r2, r5, #20
 80092bc:	d115      	bne.n	80092ea <__ieee754_sqrt+0x86>
 80092be:	2000      	movs	r0, #0
 80092c0:	e009      	b.n	80092d6 <__ieee754_sqrt+0x72>
 80092c2:	0acb      	lsrs	r3, r1, #11
 80092c4:	3a15      	subs	r2, #21
 80092c6:	0549      	lsls	r1, r1, #21
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d0fa      	beq.n	80092c2 <__ieee754_sqrt+0x5e>
 80092cc:	e7f7      	b.n	80092be <__ieee754_sqrt+0x5a>
 80092ce:	462a      	mov	r2, r5
 80092d0:	e7fa      	b.n	80092c8 <__ieee754_sqrt+0x64>
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	3001      	adds	r0, #1
 80092d6:	02dc      	lsls	r4, r3, #11
 80092d8:	d5fb      	bpl.n	80092d2 <__ieee754_sqrt+0x6e>
 80092da:	1e44      	subs	r4, r0, #1
 80092dc:	1b12      	subs	r2, r2, r4
 80092de:	f1c0 0420 	rsb	r4, r0, #32
 80092e2:	fa21 f404 	lsr.w	r4, r1, r4
 80092e6:	4323      	orrs	r3, r4
 80092e8:	4081      	lsls	r1, r0
 80092ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80092f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092f6:	07d2      	lsls	r2, r2, #31
 80092f8:	bf5c      	itt	pl
 80092fa:	005b      	lslpl	r3, r3, #1
 80092fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009300:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009304:	bf58      	it	pl
 8009306:	0049      	lslpl	r1, r1, #1
 8009308:	2600      	movs	r6, #0
 800930a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800930e:	106d      	asrs	r5, r5, #1
 8009310:	0049      	lsls	r1, r1, #1
 8009312:	2016      	movs	r0, #22
 8009314:	4632      	mov	r2, r6
 8009316:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800931a:	1917      	adds	r7, r2, r4
 800931c:	429f      	cmp	r7, r3
 800931e:	bfde      	ittt	le
 8009320:	193a      	addle	r2, r7, r4
 8009322:	1bdb      	suble	r3, r3, r7
 8009324:	1936      	addle	r6, r6, r4
 8009326:	0fcf      	lsrs	r7, r1, #31
 8009328:	3801      	subs	r0, #1
 800932a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800932e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009332:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009336:	d1f0      	bne.n	800931a <__ieee754_sqrt+0xb6>
 8009338:	4604      	mov	r4, r0
 800933a:	2720      	movs	r7, #32
 800933c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009340:	429a      	cmp	r2, r3
 8009342:	eb00 0e0c 	add.w	lr, r0, ip
 8009346:	db02      	blt.n	800934e <__ieee754_sqrt+0xea>
 8009348:	d113      	bne.n	8009372 <__ieee754_sqrt+0x10e>
 800934a:	458e      	cmp	lr, r1
 800934c:	d811      	bhi.n	8009372 <__ieee754_sqrt+0x10e>
 800934e:	f1be 0f00 	cmp.w	lr, #0
 8009352:	eb0e 000c 	add.w	r0, lr, ip
 8009356:	da42      	bge.n	80093de <__ieee754_sqrt+0x17a>
 8009358:	2800      	cmp	r0, #0
 800935a:	db40      	blt.n	80093de <__ieee754_sqrt+0x17a>
 800935c:	f102 0801 	add.w	r8, r2, #1
 8009360:	1a9b      	subs	r3, r3, r2
 8009362:	458e      	cmp	lr, r1
 8009364:	bf88      	it	hi
 8009366:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800936a:	eba1 010e 	sub.w	r1, r1, lr
 800936e:	4464      	add	r4, ip
 8009370:	4642      	mov	r2, r8
 8009372:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009376:	3f01      	subs	r7, #1
 8009378:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800937c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009380:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009384:	d1dc      	bne.n	8009340 <__ieee754_sqrt+0xdc>
 8009386:	4319      	orrs	r1, r3
 8009388:	d01b      	beq.n	80093c2 <__ieee754_sqrt+0x15e>
 800938a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009410 <__ieee754_sqrt+0x1ac>
 800938e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009414 <__ieee754_sqrt+0x1b0>
 8009392:	e9da 0100 	ldrd	r0, r1, [sl]
 8009396:	e9db 2300 	ldrd	r2, r3, [fp]
 800939a:	f7f6 ff41 	bl	8000220 <__aeabi_dsub>
 800939e:	e9da 8900 	ldrd	r8, r9, [sl]
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4640      	mov	r0, r8
 80093a8:	4649      	mov	r1, r9
 80093aa:	f7f7 fb6d 	bl	8000a88 <__aeabi_dcmple>
 80093ae:	b140      	cbz	r0, 80093c2 <__ieee754_sqrt+0x15e>
 80093b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80093b4:	e9da 0100 	ldrd	r0, r1, [sl]
 80093b8:	e9db 2300 	ldrd	r2, r3, [fp]
 80093bc:	d111      	bne.n	80093e2 <__ieee754_sqrt+0x17e>
 80093be:	3601      	adds	r6, #1
 80093c0:	463c      	mov	r4, r7
 80093c2:	1072      	asrs	r2, r6, #1
 80093c4:	0863      	lsrs	r3, r4, #1
 80093c6:	07f1      	lsls	r1, r6, #31
 80093c8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80093cc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80093d0:	bf48      	it	mi
 80093d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80093d6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80093da:	4618      	mov	r0, r3
 80093dc:	e756      	b.n	800928c <__ieee754_sqrt+0x28>
 80093de:	4690      	mov	r8, r2
 80093e0:	e7be      	b.n	8009360 <__ieee754_sqrt+0xfc>
 80093e2:	f7f6 ff1f 	bl	8000224 <__adddf3>
 80093e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4640      	mov	r0, r8
 80093f0:	4649      	mov	r1, r9
 80093f2:	f7f7 fb3f 	bl	8000a74 <__aeabi_dcmplt>
 80093f6:	b120      	cbz	r0, 8009402 <__ieee754_sqrt+0x19e>
 80093f8:	1ca0      	adds	r0, r4, #2
 80093fa:	bf08      	it	eq
 80093fc:	3601      	addeq	r6, #1
 80093fe:	3402      	adds	r4, #2
 8009400:	e7df      	b.n	80093c2 <__ieee754_sqrt+0x15e>
 8009402:	1c63      	adds	r3, r4, #1
 8009404:	f023 0401 	bic.w	r4, r3, #1
 8009408:	e7db      	b.n	80093c2 <__ieee754_sqrt+0x15e>
 800940a:	bf00      	nop
 800940c:	7ff00000 	.word	0x7ff00000
 8009410:	20000070 	.word	0x20000070
 8009414:	20000068 	.word	0x20000068

08009418 <_init>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	bf00      	nop
 800941c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941e:	bc08      	pop	{r3}
 8009420:	469e      	mov	lr, r3
 8009422:	4770      	bx	lr

08009424 <_fini>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	bf00      	nop
 8009428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942a:	bc08      	pop	{r3}
 800942c:	469e      	mov	lr, r3
 800942e:	4770      	bx	lr
