
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa60  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ac38  0800ac38  0000bc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac90  0800ac90  0000c23c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac90  0800ac90  0000bc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac98  0800ac98  0000c23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac98  0800ac98  0000bc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac9c  0800ac9c  0000bc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  0800aca0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f94  20000240  0800aedc  0000c240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011d4  0800aedc  0000d1d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c23c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef2f  00000000  00000000  0000c26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b35  00000000  00000000  0002b19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0002ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b9  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a15c  00000000  00000000  00031559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d361  00000000  00000000  0005b6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001153f4  00000000  00000000  00078a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018de0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ac  00000000  00000000  0018de50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001941fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000240 	.word	0x20000240
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ac20 	.word	0x0800ac20

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000244 	.word	0x20000244
 8000214:	0800ac20 	.word	0x0800ac20

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_uldivmod>:
 8000e10:	b953      	cbnz	r3, 8000e28 <__aeabi_uldivmod+0x18>
 8000e12:	b94a      	cbnz	r2, 8000e28 <__aeabi_uldivmod+0x18>
 8000e14:	2900      	cmp	r1, #0
 8000e16:	bf08      	it	eq
 8000e18:	2800      	cmpeq	r0, #0
 8000e1a:	bf1c      	itt	ne
 8000e1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e20:	f04f 30ff 	movne.w	r0, #4294967295
 8000e24:	f000 b96a 	b.w	80010fc <__aeabi_idiv0>
 8000e28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e30:	f000 f806 	bl	8000e40 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4770      	bx	lr

08000e40 <__udivmoddi4>:
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	9d08      	ldr	r5, [sp, #32]
 8000e46:	460c      	mov	r4, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d14e      	bne.n	8000eea <__udivmoddi4+0xaa>
 8000e4c:	4694      	mov	ip, r2
 8000e4e:	458c      	cmp	ip, r1
 8000e50:	4686      	mov	lr, r0
 8000e52:	fab2 f282 	clz	r2, r2
 8000e56:	d962      	bls.n	8000f1e <__udivmoddi4+0xde>
 8000e58:	b14a      	cbz	r2, 8000e6e <__udivmoddi4+0x2e>
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	fa20 f303 	lsr.w	r3, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f f68c 	uxth.w	r6, ip
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb04 f106 	mul.w	r1, r4, r6
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x64>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e96:	f080 8112 	bcs.w	80010be <__udivmoddi4+0x27e>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 810f 	bls.w	80010be <__udivmoddi4+0x27e>
 8000ea0:	3c02      	subs	r4, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a59      	subs	r1, r3, r1
 8000ea6:	fa1f f38e 	uxth.w	r3, lr
 8000eaa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eae:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f606 	mul.w	r6, r0, r6
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d90a      	bls.n	8000ed4 <__udivmoddi4+0x94>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec6:	f080 80fc 	bcs.w	80010c2 <__udivmoddi4+0x282>
 8000eca:	429e      	cmp	r6, r3
 8000ecc:	f240 80f9 	bls.w	80010c2 <__udivmoddi4+0x282>
 8000ed0:	4463      	add	r3, ip
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	1b9b      	subs	r3, r3, r6
 8000ed6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eda:	2100      	movs	r1, #0
 8000edc:	b11d      	cbz	r5, 8000ee6 <__udivmoddi4+0xa6>
 8000ede:	40d3      	lsrs	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d905      	bls.n	8000efa <__udivmoddi4+0xba>
 8000eee:	b10d      	cbz	r5, 8000ef4 <__udivmoddi4+0xb4>
 8000ef0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e7f5      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000efa:	fab3 f183 	clz	r1, r3
 8000efe:	2900      	cmp	r1, #0
 8000f00:	d146      	bne.n	8000f90 <__udivmoddi4+0x150>
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	d302      	bcc.n	8000f0c <__udivmoddi4+0xcc>
 8000f06:	4290      	cmp	r0, r2
 8000f08:	f0c0 80f0 	bcc.w	80010ec <__udivmoddi4+0x2ac>
 8000f0c:	1a86      	subs	r6, r0, r2
 8000f0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d0e6      	beq.n	8000ee6 <__udivmoddi4+0xa6>
 8000f18:	e9c5 6300 	strd	r6, r3, [r5]
 8000f1c:	e7e3      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	f040 8090 	bne.w	8001044 <__udivmoddi4+0x204>
 8000f24:	eba1 040c 	sub.w	r4, r1, ip
 8000f28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f2c:	fa1f f78c 	uxth.w	r7, ip
 8000f30:	2101      	movs	r1, #1
 8000f32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f42:	fb07 f006 	mul.w	r0, r7, r6
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d908      	bls.n	8000f5c <__udivmoddi4+0x11c>
 8000f4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f52:	d202      	bcs.n	8000f5a <__udivmoddi4+0x11a>
 8000f54:	4298      	cmp	r0, r3
 8000f56:	f200 80cd 	bhi.w	80010f4 <__udivmoddi4+0x2b4>
 8000f5a:	4626      	mov	r6, r4
 8000f5c:	1a1c      	subs	r4, r3, r0
 8000f5e:	fa1f f38e 	uxth.w	r3, lr
 8000f62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f66:	fb08 4410 	mls	r4, r8, r0, r4
 8000f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6e:	fb00 f707 	mul.w	r7, r0, r7
 8000f72:	429f      	cmp	r7, r3
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x148>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7e:	d202      	bcs.n	8000f86 <__udivmoddi4+0x146>
 8000f80:	429f      	cmp	r7, r3
 8000f82:	f200 80b0 	bhi.w	80010e6 <__udivmoddi4+0x2a6>
 8000f86:	4620      	mov	r0, r4
 8000f88:	1bdb      	subs	r3, r3, r7
 8000f8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8e:	e7a5      	b.n	8000edc <__udivmoddi4+0x9c>
 8000f90:	f1c1 0620 	rsb	r6, r1, #32
 8000f94:	408b      	lsls	r3, r1
 8000f96:	fa22 f706 	lsr.w	r7, r2, r6
 8000f9a:	431f      	orrs	r7, r3
 8000f9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa0:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa4:	ea43 030c 	orr.w	r3, r3, ip
 8000fa8:	40f4      	lsrs	r4, r6
 8000faa:	fa00 f801 	lsl.w	r8, r0, r1
 8000fae:	0c38      	lsrs	r0, r7, #16
 8000fb0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb4:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb8:	fa1f fc87 	uxth.w	ip, r7
 8000fbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc8:	45a1      	cmp	r9, r4
 8000fca:	fa02 f201 	lsl.w	r2, r2, r1
 8000fce:	d90a      	bls.n	8000fe6 <__udivmoddi4+0x1a6>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd6:	f080 8084 	bcs.w	80010e2 <__udivmoddi4+0x2a2>
 8000fda:	45a1      	cmp	r9, r4
 8000fdc:	f240 8081 	bls.w	80010e2 <__udivmoddi4+0x2a2>
 8000fe0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe4:	443c      	add	r4, r7
 8000fe6:	eba4 0409 	sub.w	r4, r4, r9
 8000fea:	fa1f f983 	uxth.w	r9, r3
 8000fee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ff2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffe:	45a4      	cmp	ip, r4
 8001000:	d907      	bls.n	8001012 <__udivmoddi4+0x1d2>
 8001002:	193c      	adds	r4, r7, r4
 8001004:	f103 30ff 	add.w	r0, r3, #4294967295
 8001008:	d267      	bcs.n	80010da <__udivmoddi4+0x29a>
 800100a:	45a4      	cmp	ip, r4
 800100c:	d965      	bls.n	80010da <__udivmoddi4+0x29a>
 800100e:	3b02      	subs	r3, #2
 8001010:	443c      	add	r4, r7
 8001012:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001016:	fba0 9302 	umull	r9, r3, r0, r2
 800101a:	eba4 040c 	sub.w	r4, r4, ip
 800101e:	429c      	cmp	r4, r3
 8001020:	46ce      	mov	lr, r9
 8001022:	469c      	mov	ip, r3
 8001024:	d351      	bcc.n	80010ca <__udivmoddi4+0x28a>
 8001026:	d04e      	beq.n	80010c6 <__udivmoddi4+0x286>
 8001028:	b155      	cbz	r5, 8001040 <__udivmoddi4+0x200>
 800102a:	ebb8 030e 	subs.w	r3, r8, lr
 800102e:	eb64 040c 	sbc.w	r4, r4, ip
 8001032:	fa04 f606 	lsl.w	r6, r4, r6
 8001036:	40cb      	lsrs	r3, r1
 8001038:	431e      	orrs	r6, r3
 800103a:	40cc      	lsrs	r4, r1
 800103c:	e9c5 6400 	strd	r6, r4, [r5]
 8001040:	2100      	movs	r1, #0
 8001042:	e750      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8001044:	f1c2 0320 	rsb	r3, r2, #32
 8001048:	fa20 f103 	lsr.w	r1, r0, r3
 800104c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001050:	fa24 f303 	lsr.w	r3, r4, r3
 8001054:	4094      	lsls	r4, r2
 8001056:	430c      	orrs	r4, r1
 8001058:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800105c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	fbb3 f0f8 	udiv	r0, r3, r8
 8001068:	fb08 3110 	mls	r1, r8, r0, r3
 800106c:	0c23      	lsrs	r3, r4, #16
 800106e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001072:	fb00 f107 	mul.w	r1, r0, r7
 8001076:	4299      	cmp	r1, r3
 8001078:	d908      	bls.n	800108c <__udivmoddi4+0x24c>
 800107a:	eb1c 0303 	adds.w	r3, ip, r3
 800107e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001082:	d22c      	bcs.n	80010de <__udivmoddi4+0x29e>
 8001084:	4299      	cmp	r1, r3
 8001086:	d92a      	bls.n	80010de <__udivmoddi4+0x29e>
 8001088:	3802      	subs	r0, #2
 800108a:	4463      	add	r3, ip
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb3 f1f8 	udiv	r1, r3, r8
 8001094:	fb08 3311 	mls	r3, r8, r1, r3
 8001098:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800109c:	fb01 f307 	mul.w	r3, r1, r7
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0x276>
 80010a4:	eb1c 0404 	adds.w	r4, ip, r4
 80010a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80010ac:	d213      	bcs.n	80010d6 <__udivmoddi4+0x296>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d911      	bls.n	80010d6 <__udivmoddi4+0x296>
 80010b2:	3902      	subs	r1, #2
 80010b4:	4464      	add	r4, ip
 80010b6:	1ae4      	subs	r4, r4, r3
 80010b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010bc:	e739      	b.n	8000f32 <__udivmoddi4+0xf2>
 80010be:	4604      	mov	r4, r0
 80010c0:	e6f0      	b.n	8000ea4 <__udivmoddi4+0x64>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e706      	b.n	8000ed4 <__udivmoddi4+0x94>
 80010c6:	45c8      	cmp	r8, r9
 80010c8:	d2ae      	bcs.n	8001028 <__udivmoddi4+0x1e8>
 80010ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80010d2:	3801      	subs	r0, #1
 80010d4:	e7a8      	b.n	8001028 <__udivmoddi4+0x1e8>
 80010d6:	4631      	mov	r1, r6
 80010d8:	e7ed      	b.n	80010b6 <__udivmoddi4+0x276>
 80010da:	4603      	mov	r3, r0
 80010dc:	e799      	b.n	8001012 <__udivmoddi4+0x1d2>
 80010de:	4630      	mov	r0, r6
 80010e0:	e7d4      	b.n	800108c <__udivmoddi4+0x24c>
 80010e2:	46d6      	mov	lr, sl
 80010e4:	e77f      	b.n	8000fe6 <__udivmoddi4+0x1a6>
 80010e6:	4463      	add	r3, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e74d      	b.n	8000f88 <__udivmoddi4+0x148>
 80010ec:	4606      	mov	r6, r0
 80010ee:	4623      	mov	r3, r4
 80010f0:	4608      	mov	r0, r1
 80010f2:	e70f      	b.n	8000f14 <__udivmoddi4+0xd4>
 80010f4:	3e02      	subs	r6, #2
 80010f6:	4463      	add	r3, ip
 80010f8:	e730      	b.n	8000f5c <__udivmoddi4+0x11c>
 80010fa:	bf00      	nop

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <easyCase>:
void Reset(){
	registerFrame[0x01].U16 = 0;
	registerFrame[0x10].U16 = 0;
}

void easyCase(){
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	base.Base_case = registerFrame[0x01].U16;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <easyCase+0x28>)
 8001106:	885a      	ldrh	r2, [r3, #2]
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <easyCase+0x2c>)
 800110a:	86da      	strh	r2, [r3, #54]	@ 0x36
	base.Vacuum_case = registerFrame[0x02].U16;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <easyCase+0x28>)
 800110e:	889a      	ldrh	r2, [r3, #4]
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <easyCase+0x2c>)
 8001112:	871a      	strh	r2, [r3, #56]	@ 0x38
	base.Gripper_case = registerFrame[0x03].U16;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <easyCase+0x28>)
 8001116:	88da      	ldrh	r2, [r3, #6]
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <easyCase+0x2c>)
 800111a:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20001030 	.word	0x20001030
 800112c:	20000284 	.word	0x20000284

08001130 <Heartbeat>:

void Heartbeat(){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <Heartbeat+0x18>)
 8001136:	f645 1261 	movw	r2, #22881	@ 0x5961
 800113a:	801a      	strh	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20001030 	.word	0x20001030

0800114c <Routine>:

void Routine(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <Routine+0xa8>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001158:	4293      	cmp	r3, r2
 800115a:	d149      	bne.n	80011f0 <Routine+0xa4>
	{
		//Gripper 0x04 not sure!?!?
		registerFrame[0x04].U16 = base.ReedStatus;   					//Gripper status 0b0010 = 0000 0000 0000 0010
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <Routine+0xac>)
 800115e:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <Routine+0xa8>)
 8001162:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = base.BaseStatus;							//Z-axis status 0010 = 1
 8001164:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <Routine+0xac>)
 8001166:	881a      	ldrh	r2, [r3, #0]
 8001168:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <Routine+0xa8>)
 800116a:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = AMT.Linear_Position			*10;	//Z-axis position
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Routine+0xb0>)
 800116e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001172:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117e:	ee17 3a90 	vmov	r3, s15
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <Routine+0xa8>)
 8001186:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = fabs(AMT.Linear_Velocity)		*10;	//Z-axis speed
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <Routine+0xb0>)
 800118a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800118e:	eef0 7ae7 	vabs.f32	s15, s15
 8001192:	ee17 0a90 	vmov	r0, s15
 8001196:	f7ff f9a3 	bl	80004e0 <__aeabi_f2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <Routine+0xb4>)
 80011a0:	f7ff f9f6 	bl	8000590 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fcb2 	bl	8000b14 <__aeabi_d2uiz>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <Routine+0xa8>)
 80011b6:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = fabs(AMT.Linear_Acceleration)	*10;	//Z-axis acceleration
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <Routine+0xb0>)
 80011ba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80011be:	eef0 7ae7 	vabs.f32	s15, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f98b 	bl	80004e0 <__aeabi_f2d>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <Routine+0xb4>)
 80011d0:	f7ff f9de 	bl	8000590 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fc9a 	bl	8000b14 <__aeabi_d2uiz>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <Routine+0xa8>)
 80011e6:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = 4								*10;	//X-axis position
 80011e8:	4b02      	ldr	r3, [pc, #8]	@ (80011f4 <Routine+0xa8>)
 80011ea:	2228      	movs	r2, #40	@ 0x28
 80011ec:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20001030 	.word	0x20001030
 80011f8:	20000284 	.word	0x20000284
 80011fc:	20000a78 	.word	0x20000a78
 8001200:	40240000 	.word	0x40240000

08001204 <Vacuum>:

void Vacuum(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <Vacuum+0x3c>)
 800120a:	889b      	ldrh	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d108      	bne.n	8001222 <Vacuum+0x1e>
		base.Vacuum = 0;			//Vacuum status: Off
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <Vacuum+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	829a      	strh	r2, [r3, #20]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);			// Vacuum off
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <Vacuum+0x44>)
 800121c:	f004 fbf2 	bl	8005a04 <HAL_GPIO_WritePin>
	else if(registerFrame[0x02].U16 == 0b0001){
		base.Vacuum = 1;			//Vacuum status: On
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on

	}
}
 8001220:	e00b      	b.n	800123a <Vacuum+0x36>
	else if(registerFrame[0x02].U16 == 0b0001){
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <Vacuum+0x3c>)
 8001224:	889b      	ldrh	r3, [r3, #4]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d107      	bne.n	800123a <Vacuum+0x36>
		base.Vacuum = 1;			//Vacuum status: On
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <Vacuum+0x40>)
 800122c:	2201      	movs	r2, #1
 800122e:	829a      	strh	r2, [r3, #20]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on
 8001230:	2201      	movs	r2, #1
 8001232:	2120      	movs	r1, #32
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <Vacuum+0x44>)
 8001236:	f004 fbe5 	bl	8005a04 <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20001030 	.word	0x20001030
 8001244:	20000284 	.word	0x20000284
 8001248:	48000800 	.word	0x48000800

0800124c <GripperMovement>:

void GripperMovement(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <GripperMovement+0x58>)
 8001252:	88db      	ldrh	r3, [r3, #6]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10f      	bne.n	8001278 <GripperMovement+0x2c>
		base.Gripper = 0;			//Gripper Movement: Backward
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <GripperMovement+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 800125e:	2201      	movs	r2, #1
 8001260:	2110      	movs	r1, #16
 8001262:	4812      	ldr	r0, [pc, #72]	@ (80012ac <GripperMovement+0x60>)
 8001264:	f004 fbce 	bl	8005a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001272:	f004 fbc7 	bl	8005a04 <HAL_GPIO_WritePin>
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
	}
}
 8001276:	e012      	b.n	800129e <GripperMovement+0x52>
	else if(registerFrame[0x03].U16 == 0b0001){
 8001278:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <GripperMovement+0x58>)
 800127a:	88db      	ldrh	r3, [r3, #6]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d10e      	bne.n	800129e <GripperMovement+0x52>
		base.Gripper = 1;			//Gripper Movement: Forward
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <GripperMovement+0x5c>)
 8001282:	2201      	movs	r2, #1
 8001284:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
 8001286:	2200      	movs	r2, #0
 8001288:	2110      	movs	r1, #16
 800128a:	4808      	ldr	r0, [pc, #32]	@ (80012ac <GripperMovement+0x60>)
 800128c:	f004 fbba 	bl	8005a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129a:	f004 fbb3 	bl	8005a04 <HAL_GPIO_WritePin>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20001030 	.word	0x20001030
 80012a8:	20000284 	.word	0x20000284
 80012ac:	48000800 	.word	0x48000800

080012b0 <SetShelves>:



void SetShelves(){
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 1; 		//Z-axis update z-xis moving status to "Set Shelves"
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <SetShelves+0x64>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	841a      	strh	r2, [r3, #32]
	// save Position = floor[0] for moving to that position
	// set shelves 1 = 100 mm shelves 2 = 250 mm
	registerFrame[0x23].U16 = 10 *10; 	//0 = Position Shelve 1
 80012ba:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <SetShelves+0x64>)
 80012bc:	2264      	movs	r2, #100	@ 0x64
 80012be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	registerFrame[0x24].U16 = 20 *10;
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <SetShelves+0x64>)
 80012c4:	22c8      	movs	r2, #200	@ 0xc8
 80012c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	registerFrame[0x25].U16 = 30 *10;
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <SetShelves+0x64>)
 80012cc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	registerFrame[0x26].U16 = 40 *10;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <SetShelves+0x64>)
 80012d6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	registerFrame[0x27].U16 = 50 *10;
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <SetShelves+0x64>)
 80012e0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012e4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	//finish
	if (base.sw == 1){
 80012e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <SetShelves+0x68>)
 80012ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10c      	bne.n	800130a <SetShelves+0x5a>
		base.BaseStatus = 0;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <SetShelves+0x68>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.BaseStatus;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <SetShelves+0x68>)
 80012f8:	881a      	ldrh	r2, [r3, #0]
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <SetShelves+0x64>)
 80012fc:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <SetShelves+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	841a      	strh	r2, [r3, #32]
		base.sw = 0;
 8001304:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <SetShelves+0x68>)
 8001306:	2200      	movs	r2, #0
 8001308:	87da      	strh	r2, [r3, #62]	@ 0x3e
	}
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20001030 	.word	0x20001030
 8001318:	20000284 	.word	0x20000284

0800131c <RunPoint>:

void RunPoint(){
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <RunPoint+0x50>)
 8001322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <RunPoint+0x54>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <RunPoint+0x58>)
 8001332:	861a      	strh	r2, [r3, #48]	@ 0x30
	registerFrame[0x10].U16 = 16;
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <RunPoint+0x50>)
 8001336:	2210      	movs	r2, #16
 8001338:	841a      	strh	r2, [r3, #32]
//	Traject(j);
	//finish
	if(base.swp == 1){
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <RunPoint+0x58>)
 800133c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10d      	bne.n	8001360 <RunPoint+0x44>
		base.BaseStatus = 0;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <RunPoint+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.BaseStatus;
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <RunPoint+0x58>)
 800134c:	881a      	ldrh	r2, [r3, #0]
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <RunPoint+0x50>)
 8001350:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <RunPoint+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	841a      	strh	r2, [r3, #32]
		base.swp = 0;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <RunPoint+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	}
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20001030 	.word	0x20001030
 8001370:	cccccccd 	.word	0xcccccccd
 8001374:	20000284 	.word	0x20000284

08001378 <SetHome>:

void SetHome(){
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 2;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <SetHome+0x4c>)
 800137e:	2202      	movs	r2, #2
 8001380:	841a      	strh	r2, [r3, #32]
	base.MotorHome = 350;		// Set duty cycle to go upward at slowest speed
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <SetHome+0x50>)
 8001384:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001388:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)		// Top photo limit was triggered
 800138c:	2140      	movs	r1, #64	@ 0x40
 800138e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001392:	f004 fb1f 	bl	80059d4 <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	2b01      	cmp	r3, #1
 800139a:	d110      	bne.n	80013be <SetHome+0x46>
		{
			base.MotorHome = 150;		// Set duty cycle to hold position gripper
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <SetHome+0x50>)
 800139e:	2296      	movs	r2, #150	@ 0x96
 80013a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			AMT_encoder_reset(&AMT);	// Set linear position to ...
 80013a4:	4809      	ldr	r0, [pc, #36]	@ (80013cc <SetHome+0x54>)
 80013a6:	f000 f951 	bl	800164c <AMT_encoder_reset>
			base.BaseStatus = 0;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <SetHome+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
			registerFrame[0x01].U16 = base.BaseStatus;
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <SetHome+0x50>)
 80013b2:	881a      	ldrh	r2, [r3, #0]
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <SetHome+0x4c>)
 80013b6:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0;
 80013b8:	4b02      	ldr	r3, [pc, #8]	@ (80013c4 <SetHome+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	841a      	strh	r2, [r3, #32]
		}
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20001030 	.word	0x20001030
 80013c8:	20000284 	.word	0x20000284
 80013cc:	20000a78 	.word	0x20000a78

080013d0 <RunJog>:

void RunJog(){
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	base.Pick = registerFrame[0x21].U16 ; 	//Get Pick from BaseSystem
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <RunJog+0x54>)
 80013d6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80013da:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <RunJog+0x58>)
 80013dc:	865a      	strh	r2, [r3, #50]	@ 0x32
	base.Place = registerFrame[0x22].U16 ;	//Get Place from BaseSystem
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <RunJog+0x54>)
 80013e0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <RunJog+0x58>)
 80013e6:	869a      	strh	r2, [r3, #52]	@ 0x34
	registerFrame[0x10].U16 = 4;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <RunJog+0x54>)
 80013ea:	2204      	movs	r2, #4
 80013ec:	841a      	strh	r2, [r3, #32]
	registerFrame[0x10].U16 = 8;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <RunJog+0x54>)
 80013f0:	2208      	movs	r2, #8
 80013f2:	841a      	strh	r2, [r3, #32]
	//pick place 5 time
	if(base.sp == 1){
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <RunJog+0x58>)
 80013f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10d      	bne.n	800141a <RunJog+0x4a>
		base.BaseStatus = 0;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <RunJog+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.BaseStatus;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <RunJog+0x58>)
 8001406:	881a      	ldrh	r2, [r3, #0]
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <RunJog+0x54>)
 800140a:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <RunJog+0x54>)
 800140e:	2200      	movs	r2, #0
 8001410:	841a      	strh	r2, [r3, #32]
		base.sp = 0;
 8001412:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <RunJog+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	20001030 	.word	0x20001030
 8001428:	20000284 	.word	0x20000284

0800142c <AMT_encoder_init>:
float ALPHA = 0.3f;									// smoothing param

//-------------------------------------------Function Code-------------------------------------------------------//

void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001440:	213c      	movs	r1, #60	@ 0x3c
 8001442:	4618      	mov	r0, r3
 8001444:	f006 f80e 	bl	8007464 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 0.0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 0.0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	0000      	movs	r0, r0
	...

08001460 <AMT_encoder_update>:

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 8001460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	e9c7 2300 	strd	r2, r3, [r7]
	//collect data
	AMT_data->TimeStamp[QEI_NOW] = current_time;
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001476:	e9c1 2302 	strd	r2, r3, [r1, #8]
	AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	601a      	str	r2, [r3, #0]

	//Postion 1 turn calculation
	AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a69      	ldr	r2, [pc, #420]	@ (8001630 <AMT_encoder_update+0x1d0>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001490:	fb01 f202 	mul.w	r2, r1, r2
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	621a      	str	r2, [r3, #32]

	//calculate dx
	diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b62      	ldr	r3, [pc, #392]	@ (8001634 <AMT_encoder_update+0x1d4>)
 80014aa:	601a      	str	r2, [r3, #0]

	//Handle Warp around
	if(diffPosition > 32767)
 80014ac:	4b61      	ldr	r3, [pc, #388]	@ (8001634 <AMT_encoder_update+0x1d4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014b4:	db06      	blt.n	80014c4 <AMT_encoder_update+0x64>
		diffPosition -= 65535;
 80014b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001634 <AMT_encoder_update+0x1d4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 80014be:	3bff      	subs	r3, #255	@ 0xff
 80014c0:	4a5c      	ldr	r2, [pc, #368]	@ (8001634 <AMT_encoder_update+0x1d4>)
 80014c2:	6013      	str	r3, [r2, #0]
	if(diffPosition < -32767)
 80014c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001634 <AMT_encoder_update+0x1d4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80014cc:	dc06      	bgt.n	80014dc <AMT_encoder_update+0x7c>
		diffPosition += 65535;
 80014ce:	4b59      	ldr	r3, [pc, #356]	@ (8001634 <AMT_encoder_update+0x1d4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80014d6:	33ff      	adds	r3, #255	@ 0xff
 80014d8:	4a56      	ldr	r2, [pc, #344]	@ (8001634 <AMT_encoder_update+0x1d4>)
 80014da:	6013      	str	r3, [r2, #0]

	//calculate dt
	diffTime = (AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV] );
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014e8:	1a84      	subs	r4, r0, r2
 80014ea:	eb61 0503 	sbc.w	r5, r1, r3
 80014ee:	4620      	mov	r0, r4
 80014f0:	4629      	mov	r1, r5
 80014f2:	f7ff fc47 	bl	8000d84 <__aeabi_ul2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001638 <AMT_encoder_update+0x1d8>)
 80014fa:	6013      	str	r3, [r2, #0]

	//calculate anglar velocity
	float Vin = (PID_velo.out/1000)*24;
 80014fc:	4b4f      	ldr	r3, [pc, #316]	@ (800163c <AMT_encoder_update+0x1dc>)
 80014fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8001502:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001640 <AMT_encoder_update+0x1e0>
 8001506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 800150e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001512:	edc7 7a05 	vstr	s15, [r7, #20]
//	AMT_data->Angular_Velocity = lowPassFilter(SteadyStateKalmanFilter(&Vel_filtered,Vin, (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6))));	//RPM
	AMT_data->Angular_Velocity = (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6));	//RPM
 8001516:	4b47      	ldr	r3, [pc, #284]	@ (8001634 <AMT_encoder_update+0x1d4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe ffce 	bl	80004bc <__aeabi_i2d>
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <AMT_encoder_update+0x1e4>)
 8001526:	f7ff f833 	bl	8000590 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4690      	mov	r8, r2
 8001530:	4699      	mov	r9, r3
 8001532:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <AMT_encoder_update+0x1d0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ffb0 	bl	800049c <__aeabi_ui2d>
 800153c:	4604      	mov	r4, r0
 800153e:	460d      	mov	r5, r1
 8001540:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <AMT_encoder_update+0x1d8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffcb 	bl	80004e0 <__aeabi_f2d>
 800154a:	a337      	add	r3, pc, #220	@ (adr r3, 8001628 <AMT_encoder_update+0x1c8>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f948 	bl	80007e4 <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7ff f818 	bl	8000590 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4640      	mov	r0, r8
 8001566:	4649      	mov	r1, r9
 8001568:	f7ff f93c 	bl	80007e4 <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff faee 	bl	8000b54 <__aeabi_d2f>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24

	// Calculate Linear
	AMT_data->Linear_Position += (diffPosition*pulley_cir)/cnt_per_rev;			//mm
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001584:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <AMT_encoder_update+0x1d4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001590:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <AMT_encoder_update+0x1e8>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800159a:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <AMT_encoder_update+0x1d0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	AMT_data->Linear_Velocity = (AMT_data->Angular_Velocity / 60.0) * pulley_cir;		//mm/s
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff91 	bl	80004e0 <__aeabi_f2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <AMT_encoder_update+0x1e4>)
 80015c4:	f7ff f90e 	bl	80007e4 <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4614      	mov	r4, r2
 80015ce:	461d      	mov	r5, r3
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <AMT_encoder_update+0x1e8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff83 	bl	80004e0 <__aeabi_f2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4620      	mov	r0, r4
 80015e0:	4629      	mov	r1, r5
 80015e2:	f7fe ffd5 	bl	8000590 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fab1 	bl	8000b54 <__aeabi_d2f>
 80015f2:	4602      	mov	r2, r0
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity;					//Uodate Velo
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	619a      	str	r2, [r3, #24]
//	AMT_data->Linear_Acceleration = ((AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) *  1e6) / (diffTime);		//mm/s^2

	//store value for next loop
	AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800160e:	68f9      	ldr	r1, [r7, #12]
 8001610:	e9c1 2304 	strd	r2, r3, [r1, #16]
	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	699a      	ldr	r2, [r3, #24]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	61da      	str	r2, [r3, #28]
}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001626:	bf00      	nop
 8001628:	00000000 	.word	0x00000000
 800162c:	412e8480 	.word	0x412e8480
 8001630:	20000000 	.word	0x20000000
 8001634:	2000025c 	.word	0x2000025c
 8001638:	20000260 	.word	0x20000260
 800163c:	20000b30 	.word	0x20000b30
 8001640:	447a0000 	.word	0x447a0000
 8001644:	404e0000 	.word	0x404e0000
 8001648:	20000004 	.word	0x20000004

0800164c <AMT_encoder_reset>:

void AMT_encoder_reset(AMT_Encoder *AMT_data)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	AMT_data->Linear_Position = 600;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <AMT_encoder_reset+0x1c>)
 8001658:	631a      	str	r2, [r3, #48]	@ 0x30
//	AMT_data->Position[QEI_NOW] = 0;

}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	44160000 	.word	0x44160000

0800166c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001670:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <modbus_1t5_Timeout+0x3c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <modbus_1t5_Timeout+0x3c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <modbus_1t5_Timeout+0x3c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <modbus_1t5_Timeout+0x3c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000264 	.word	0x20000264

080016ac <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <modbus_3t5_Timeout+0x1c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	755a      	strb	r2, [r3, #21]

}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	20000264 	.word	0x20000264

080016cc <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f008 f941 	bl	800995c <HAL_UART_GetError>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b20      	cmp	r3, #32
 80016de:	d101      	bne.n	80016e4 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80016e0:	f7ff ffc4 	bl	800166c <modbus_1t5_Timeout>

	}
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80016f6:	4a25      	ldr	r2, [pc, #148]	@ (800178c <Modbus_init+0xa0>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <Modbus_init+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	4a21      	ldr	r2, [pc, #132]	@ (8001790 <Modbus_init+0xa4>)
 800170a:	210e      	movs	r1, #14
 800170c:	4618      	mov	r0, r3
 800170e:	f006 fb35 	bl	8007d7c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2110      	movs	r1, #16
 8001718:	4618      	mov	r0, r3
 800171a:	f008 f8c9 	bl	80098b0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4618      	mov	r0, r3
 8001724:	f008 f8e0 	bl	80098e8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a19      	ldr	r2, [pc, #100]	@ (8001794 <Modbus_init+0xa8>)
 800172e:	2104      	movs	r1, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f007 fadf 	bl	8008cf4 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <Modbus_init+0xa0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <Modbus_init+0xa0>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <Modbus_init+0xa0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001748:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800174c:	4413      	add	r3, r2
 800174e:	3302      	adds	r3, #2
 8001750:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001754:	4619      	mov	r1, r3
 8001756:	f007 fccf 	bl	80090f8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <Modbus_init+0xa0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10c      	bne.n	8001784 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800176a:	4b08      	ldr	r3, [pc, #32]	@ (800178c <Modbus_init+0xa0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	4618      	mov	r0, r3
 8001772:	f005 fa87 	bl	8006c84 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <Modbus_init+0xa0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f005 fd2e 	bl	80071e0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000264 	.word	0x20000264
 8001790:	080016ad 	.word	0x080016ad
 8001794:	080016cd 	.word	0x080016cd

08001798 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80017a4:	23ff      	movs	r3, #255	@ 0xff
 80017a6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80017a8:	23ff      	movs	r3, #255	@ 0xff
 80017aa:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80017ac:	e013      	b.n	80017d6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	4053      	eors	r3, r2
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80017be:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <CRC16+0x64>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	4053      	eors	r3, r2
 80017ca:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80017cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001800 <CRC16+0x68>)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80017d6:	883b      	ldrh	r3, [r7, #0]
 80017d8:	1e5a      	subs	r2, r3, #1
 80017da:	803a      	strh	r2, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e6      	bne.n	80017ae <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	b29b      	uxth	r3, r3
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	20000108 	.word	0x20000108
 8001800:	20000008 	.word	0x20000008

08001804 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800180a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	7ddb      	ldrb	r3, [r3, #23]
 8001810:	3b01      	subs	r3, #1
 8001812:	2b03      	cmp	r3, #3
 8001814:	d80a      	bhi.n	800182c <Modbus_Protocal_Worker+0x28>
 8001816:	a201      	add	r2, pc, #4	@ (adr r2, 800181c <Modbus_Protocal_Worker+0x18>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	08001837 	.word	0x08001837
 8001820:	080019cb 	.word	0x080019cb
 8001824:	080018c3 	.word	0x080018c3
 8001828:	08001907 	.word	0x08001907
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800182c:	4b75      	ldr	r3, [pc, #468]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	75da      	strb	r2, [r3, #23]
		break;
 8001834:	e0e1      	b.n	80019fa <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001836:	4b73      	ldr	r3, [pc, #460]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001842:	4b70      	ldr	r3, [pc, #448]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2202      	movs	r2, #2
 8001848:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800184a:	f000 f9cd 	bl	8001be8 <Modbus_Emission>
 800184e:	e018      	b.n	8001882 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001850:	4b6c      	ldr	r3, [pc, #432]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800185a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001864:	b29b      	uxth	r3, r3
 8001866:	429a      	cmp	r2, r3
 8001868:	d00b      	beq.n	8001882 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800186a:	4b66      	ldr	r3, [pc, #408]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001872:	4b64      	ldr	r3, [pc, #400]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800187a:	4b62      	ldr	r3, [pc, #392]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2203      	movs	r2, #3
 8001880:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001882:	4b60      	ldr	r3, [pc, #384]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188c:	2b20      	cmp	r3, #32
 800188e:	f040 80ad 	bne.w	80019ec <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001892:	4b5c      	ldr	r3, [pc, #368]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800189c:	4b59      	ldr	r3, [pc, #356]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80018a2:	4b58      	ldr	r3, [pc, #352]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b57      	ldr	r3, [pc, #348]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80018ae:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80018b2:	4413      	add	r3, r2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018ba:	4619      	mov	r1, r3
 80018bc:	f007 fc1c 	bl	80090f8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80018c0:	e094      	b.n	80019ec <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80018c2:	4b50      	ldr	r3, [pc, #320]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	7d1b      	ldrb	r3, [r3, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8091 	beq.w	80019f0 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80018ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	22fe      	movs	r2, #254	@ 0xfe
 80018d4:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80018d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80018e0:	4b48      	ldr	r3, [pc, #288]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80018f0:	4b44      	ldr	r3, [pc, #272]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80018f2:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80018f4:	1a8a      	subs	r2, r1, r2
 80018f6:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80018f8:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80018fc:	4b41      	ldr	r3, [pc, #260]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2204      	movs	r2, #4
 8001902:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001904:	e074      	b.n	80019f0 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001906:	4b3f      	ldr	r3, [pc, #252]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800190e:	f113 0f02 	cmn.w	r3, #2
 8001912:	d150      	bne.n	80019b6 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001914:	4b3b      	ldr	r3, [pc, #236]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2200      	movs	r2, #0
 800191a:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800191c:	4b39      	ldr	r3, [pc, #228]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001924:	4b37      	ldr	r3, [pc, #220]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800192c:	3b02      	subs	r3, #2
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f7ff ff31 	bl	8001798 <CRC16>
 8001936:	4603      	mov	r3, r0
 8001938:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800193a:	793a      	ldrb	r2, [r7, #4]
 800193c:	4b31      	ldr	r3, [pc, #196]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	4b30      	ldr	r3, [pc, #192]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001948:	3b02      	subs	r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001950:	429a      	cmp	r2, r3
 8001952:	d10c      	bne.n	800196e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001954:	797a      	ldrb	r2, [r7, #5]
 8001956:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001958:	6819      	ldr	r1, [r3, #0]
 800195a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001962:	3b01      	subs	r3, #1
 8001964:	440b      	add	r3, r1
 8001966:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800196a:	429a      	cmp	r2, r3
 800196c:	d004      	beq.n	8001978 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800196e:	4b25      	ldr	r3, [pc, #148]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	22ff      	movs	r2, #255	@ 0xff
 8001974:	759a      	strb	r2, [r3, #22]
				break;
 8001976:	e040      	b.n	80019fa <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001978:	4b22      	ldr	r3, [pc, #136]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001980:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d113      	bne.n	80019b2 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800198a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001992:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800199a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80019a4:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80019a6:	461a      	mov	r2, r3
 80019a8:	f009 f92c 	bl	800ac04 <memcpy>

			//execute command
			Modbus_frame_response();
 80019ac:	f000 f904 	bl	8001bb8 <Modbus_frame_response>
 80019b0:	e001      	b.n	80019b6 <Modbus_Protocal_Worker+0x1b2>
				break;
 80019b2:	bf00      	nop
					}
		break;


	}
}
 80019b4:	e021      	b.n	80019fa <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	7d5b      	ldrb	r3, [r3, #21]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d019      	beq.n	80019f4 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80019c0:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	75da      	strb	r2, [r3, #23]
		break;
 80019c8:	e014      	b.n	80019f4 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d10f      	bne.n	80019f8 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <Modbus_Protocal_Worker+0x200>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	75da      	strb	r2, [r3, #23]
		break;
 80019ea:	e005      	b.n	80019f8 <Modbus_Protocal_Worker+0x1f4>
		break;
 80019ec:	bf00      	nop
 80019ee:	e004      	b.n	80019fa <Modbus_Protocal_Worker+0x1f6>
		break;
 80019f0:	bf00      	nop
 80019f2:	e002      	b.n	80019fa <Modbus_Protocal_Worker+0x1f6>
		break;
 80019f4:	bf00      	nop
 80019f6:	e000      	b.n	80019fa <Modbus_Protocal_Worker+0x1f6>
		break;
 80019f8:	bf00      	nop
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000264 	.word	0x20000264

08001a08 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	7e5b      	ldrb	r3, [r3, #25]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4a1a      	ldr	r2, [pc, #104]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	7e92      	ldrb	r2, [r2, #26]
 8001a1e:	4413      	add	r3, r2
 8001a20:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001a22:	88fa      	ldrh	r2, [r7, #6]
 8001a24:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d903      	bls.n	8001a36 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f000 f8a0 	bl	8001b74 <ModbusErrorReply>
			 return;
 8001a34:	e023      	b.n	8001a7e <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001a36:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	440b      	add	r3, r1
 8001a46:	7ed2      	ldrb	r2, [r2, #27]
 8001a48:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	440b      	add	r3, r1
 8001a5a:	7f12      	ldrb	r2, [r2, #28]
 8001a5c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001a66:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f009 f8c8 	bl	800ac04 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <modbusWrite1Register+0x7c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000264 	.word	0x20000264

08001a88 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001a8e:	4b38      	ldr	r3, [pc, #224]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	7edb      	ldrb	r3, [r3, #27]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4a35      	ldr	r2, [pc, #212]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	7f12      	ldrb	r2, [r2, #28]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001aa2:	4b33      	ldr	r3, [pc, #204]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	7e5b      	ldrb	r3, [r3, #25]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4a30      	ldr	r2, [pc, #192]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	7e92      	ldrb	r2, [r2, #26]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <modbusRead1Register+0x3a>
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ac0:	d903      	bls.n	8001aca <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	f000 f856 	bl	8001b74 <ModbusErrorReply>
		 return;
 8001ac8:	e04e      	b.n	8001b68 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001aca:	88ba      	ldrh	r2, [r7, #4]
 8001acc:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d808      	bhi.n	8001ae8 <modbusRead1Register+0x60>
 8001ad6:	88ba      	ldrh	r2, [r7, #4]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4413      	add	r3, r2
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d903      	bls.n	8001af0 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f000 f843 	bl	8001b74 <ModbusErrorReply>
		 return;
 8001aee:	e03b      	b.n	8001b68 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2203      	movs	r2, #3
 8001af6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0052      	lsls	r2, r2, #1
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	e020      	b.n	8001b50 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001b0e:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	4423      	add	r3, r4
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	18d1      	adds	r1, r2, r3
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	1c63      	adds	r3, r4, #1
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	7849      	ldrb	r1, [r1, #1]
 8001b26:	4413      	add	r3, r2
 8001b28:	460a      	mov	r2, r1
 8001b2a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	88bb      	ldrh	r3, [r7, #4]
 8001b36:	4423      	add	r3, r4
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	18d1      	adds	r1, r2, r3
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	0063      	lsls	r3, r4, #1
 8001b42:	3303      	adds	r3, #3
 8001b44:	7809      	ldrb	r1, [r1, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	460a      	mov	r2, r1
 8001b4a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001b4e:	3401      	adds	r4, #1
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	429c      	cmp	r4, r3
 8001b54:	dbdb      	blt.n	8001b0e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <modbusRead1Register+0xe8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0052      	lsls	r2, r2, #1
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000264 	.word	0x20000264

08001b74 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <ModbusErrorReply+0x40>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	7e1a      	ldrb	r2, [r3, #24]
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <ModbusErrorReply+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <ModbusErrorReply+0x40>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <ModbusErrorReply+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000264 	.word	0x20000264

08001bb8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <Modbus_frame_response+0x2c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	7e1b      	ldrb	r3, [r3, #24]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d004      	beq.n	8001bd0 <Modbus_frame_response+0x18>
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d105      	bne.n	8001bd6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001bca:	f7ff ff1d 	bl	8001a08 <modbusWrite1Register>
		break;
 8001bce:	e006      	b.n	8001bde <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001bd0:	f7ff ff5a 	bl	8001a88 <modbusRead1Register>
		break;
 8001bd4:	e003      	b.n	8001bde <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff ffcc 	bl	8001b74 <ModbusErrorReply>
		break;
 8001bdc:	bf00      	nop

	}
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000264 	.word	0x20000264

08001be8 <Modbus_Emission>:

void Modbus_Emission()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001bee:	4b38      	ldr	r3, [pc, #224]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d15d      	bne.n	8001cb8 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001bfc:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b33      	ldr	r3, [pc, #204]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	7812      	ldrb	r2, [r2, #0]
 8001c06:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001c0a:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001c12:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001c14:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001c24:	461a      	mov	r2, r3
 8001c26:	f008 ffed 	bl	800ac04 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3203      	adds	r2, #3
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001c40:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001c48:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001c50:	3b02      	subs	r3, #2
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f7ff fd9f 	bl	8001798 <CRC16>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001c6a:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001c6c:	7939      	ldrb	r1, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	460a      	mov	r2, r1
 8001c72:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001c76:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001c82:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001c84:	7979      	ldrb	r1, [r7, #5]
 8001c86:	4413      	add	r3, r2
 8001c88:	460a      	mov	r2, r1
 8001c8a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d10d      	bne.n	8001cb8 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001cae:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f007 f9a0 	bl	8008ff8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <Modbus_Emission+0xe8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	755a      	strb	r2, [r3, #21]

}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000264 	.word	0x20000264

08001cd4 <MOTOR_init>:
#include "Motor.h"

//-------------------------------------------Function Code-------------------------------------------------------//

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	88ba      	ldrh	r2, [r7, #4]
 8001cfa:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 8001cfc:	88bb      	ldrh	r3, [r7, #4]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	68b8      	ldr	r0, [r7, #8]
 8001d02:	f005 f8a5 	bl	8006e50 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	68b8      	ldr	r0, [r7, #8]
 8001d0c:	f005 f8a0 	bl	8006e50 <HAL_TIM_PWM_Start_IT>

}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 8001d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d1c:	b089      	sub	sp, #36	@ 0x24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	61f8      	str	r0, [r7, #28]
 8001d22:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8263 	beq.w	80021f4 <MOTOR_set_duty+0x4dc>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 825e 	beq.w	80021f4 <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 8001d38:	69b8      	ldr	r0, [r7, #24]
 8001d3a:	f7fe fbd1 	bl	80004e0 <__aeabi_f2d>
 8001d3e:	a394      	add	r3, pc, #592	@ (adr r3, 8001f90 <MOTOR_set_duty+0x278>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fc24 	bl	8000590 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	a395      	add	r3, pc, #596	@ (adr r3, 8001fa8 <MOTOR_set_duty+0x290>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fea1 	bl	8000a9c <__aeabi_dcmpge>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MOTOR_set_duty+0x4c>
 8001d60:	4b8f      	ldr	r3, [pc, #572]	@ (8001fa0 <MOTOR_set_duty+0x288>)
 8001d62:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 8001d64:	69b8      	ldr	r0, [r7, #24]
 8001d66:	f7fe fbbb 	bl	80004e0 <__aeabi_f2d>
 8001d6a:	a389      	add	r3, pc, #548	@ (adr r3, 8001f90 <MOTOR_set_duty+0x278>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fc0e 	bl	8000590 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	a386      	add	r3, pc, #536	@ (adr r3, 8001f98 <MOTOR_set_duty+0x280>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fe81 	bl	8000a88 <__aeabi_dcmple>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MOTOR_set_duty+0x78>
 8001d8c:	4b85      	ldr	r3, [pc, #532]	@ (8001fa4 <MOTOR_set_duty+0x28c>)
 8001d8e:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 8001d90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	d16e      	bne.n	8001e7c <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	889b      	ldrh	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <MOTOR_set_duty+0x9a>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	635a      	str	r2, [r3, #52]	@ 0x34
 8001db0:	e02c      	b.n	8001e0c <MOTOR_set_duty+0xf4>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d105      	bne.n	8001dc6 <MOTOR_set_duty+0xae>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6393      	str	r3, [r2, #56]	@ 0x38
 8001dc4:	e022      	b.n	8001e0c <MOTOR_set_duty+0xf4>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	889b      	ldrh	r3, [r3, #4]
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d105      	bne.n	8001dda <MOTOR_set_duty+0xc2>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001dd8:	e018      	b.n	8001e0c <MOTOR_set_duty+0xf4>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	889b      	ldrh	r3, [r3, #4]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d105      	bne.n	8001dee <MOTOR_set_duty+0xd6>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2300      	movs	r3, #0
 8001dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dec:	e00e      	b.n	8001e0c <MOTOR_set_duty+0xf4>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	889b      	ldrh	r3, [r3, #4]
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	d105      	bne.n	8001e02 <MOTOR_set_duty+0xea>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e00:	e004      	b.n	8001e0c <MOTOR_set_duty+0xf4>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	88db      	ldrh	r3, [r3, #6]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <MOTOR_set_duty+0x108>
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e1e:	e1ea      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	88db      	ldrh	r3, [r3, #6]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d105      	bne.n	8001e34 <MOTOR_set_duty+0x11c>
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e32:	e1e0      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	88db      	ldrh	r3, [r3, #6]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d105      	bne.n	8001e48 <MOTOR_set_duty+0x130>
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2300      	movs	r3, #0
 8001e44:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e46:	e1d6      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	88db      	ldrh	r3, [r3, #6]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d105      	bne.n	8001e5c <MOTOR_set_duty+0x144>
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5a:	e1cc      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	88db      	ldrh	r3, [r3, #6]
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d105      	bne.n	8001e70 <MOTOR_set_duty+0x158>
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e6e:	e1c2      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2300      	movs	r3, #0
 8001e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e7a:	e1bc      	b.n	80021f6 <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 8001e7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	f340 80d6 	ble.w	8002038 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	889b      	ldrh	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <MOTOR_set_duty+0x188>
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e9e:	e02c      	b.n	8001efa <MOTOR_set_duty+0x1e2>
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	889b      	ldrh	r3, [r3, #4]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d105      	bne.n	8001eb4 <MOTOR_set_duty+0x19c>
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	6393      	str	r3, [r2, #56]	@ 0x38
 8001eb2:	e022      	b.n	8001efa <MOTOR_set_duty+0x1e2>
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	889b      	ldrh	r3, [r3, #4]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d105      	bne.n	8001ec8 <MOTOR_set_duty+0x1b0>
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001ec6:	e018      	b.n	8001efa <MOTOR_set_duty+0x1e2>
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	889b      	ldrh	r3, [r3, #4]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d105      	bne.n	8001edc <MOTOR_set_duty+0x1c4>
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	e00e      	b.n	8001efa <MOTOR_set_duty+0x1e2>
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	889b      	ldrh	r3, [r3, #4]
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d105      	bne.n	8001ef0 <MOTOR_set_duty+0x1d8>
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	6493      	str	r3, [r2, #72]	@ 0x48
 8001eee:	e004      	b.n	8001efa <MOTOR_set_duty+0x1e2>
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	88db      	ldrh	r3, [r3, #6]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d113      	bne.n	8001f2a <MOTOR_set_duty+0x212>
 8001f02:	69b8      	ldr	r0, [r7, #24]
 8001f04:	f7fe faec 	bl	80004e0 <__aeabi_f2d>
 8001f08:	a321      	add	r3, pc, #132	@ (adr r3, 8001f90 <MOTOR_set_duty+0x278>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb3f 	bl	8000590 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681c      	ldr	r4, [r3, #0]
 8001f20:	f7fe fdf8 	bl	8000b14 <__aeabi_d2uiz>
 8001f24:	4603      	mov	r3, r0
 8001f26:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f28:	e165      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	88db      	ldrh	r3, [r3, #6]
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d113      	bne.n	8001f5a <MOTOR_set_duty+0x242>
 8001f32:	69b8      	ldr	r0, [r7, #24]
 8001f34:	f7fe fad4 	bl	80004e0 <__aeabi_f2d>
 8001f38:	a315      	add	r3, pc, #84	@ (adr r3, 8001f90 <MOTOR_set_duty+0x278>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fb27 	bl	8000590 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681c      	ldr	r4, [r3, #0]
 8001f50:	f7fe fde0 	bl	8000b14 <__aeabi_d2uiz>
 8001f54:	4603      	mov	r3, r0
 8001f56:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001f58:	e14d      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	88db      	ldrh	r3, [r3, #6]
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d126      	bne.n	8001fb0 <MOTOR_set_duty+0x298>
 8001f62:	69b8      	ldr	r0, [r7, #24]
 8001f64:	f7fe fabc 	bl	80004e0 <__aeabi_f2d>
 8001f68:	a309      	add	r3, pc, #36	@ (adr r3, 8001f90 <MOTOR_set_duty+0x278>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fb0f 	bl	8000590 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681c      	ldr	r4, [r3, #0]
 8001f80:	f7fe fdc8 	bl	8000b14 <__aeabi_d2uiz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001f88:	e135      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8001f8a:	bf00      	nop
 8001f8c:	f3af 8000 	nop.w
 8001f90:	3b645a1d 	.word	0x3b645a1d
 8001f94:	40453fdf 	.word	0x40453fdf
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	c0e4c060 	.word	0xc0e4c060
 8001fa0:	47260300 	.word	0x47260300
 8001fa4:	c7260300 	.word	0xc7260300
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	40e4c060 	.word	0x40e4c060
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	88db      	ldrh	r3, [r3, #6]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d113      	bne.n	8001fe0 <MOTOR_set_duty+0x2c8>
 8001fb8:	69b8      	ldr	r0, [r7, #24]
 8001fba:	f7fe fa91 	bl	80004e0 <__aeabi_f2d>
 8001fbe:	a390      	add	r3, pc, #576	@ (adr r3, 8002200 <MOTOR_set_duty+0x4e8>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe fae4 	bl	8000590 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681c      	ldr	r4, [r3, #0]
 8001fd6:	f7fe fd9d 	bl	8000b14 <__aeabi_d2uiz>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6423      	str	r3, [r4, #64]	@ 0x40
 8001fde:	e10a      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	88db      	ldrh	r3, [r3, #6]
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d113      	bne.n	8002010 <MOTOR_set_duty+0x2f8>
 8001fe8:	69b8      	ldr	r0, [r7, #24]
 8001fea:	f7fe fa79 	bl	80004e0 <__aeabi_f2d>
 8001fee:	a384      	add	r3, pc, #528	@ (adr r3, 8002200 <MOTOR_set_duty+0x4e8>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe facc 	bl	8000590 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681c      	ldr	r4, [r3, #0]
 8002006:	f7fe fd85 	bl	8000b14 <__aeabi_d2uiz>
 800200a:	4603      	mov	r3, r0
 800200c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800200e:	e0f2      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8002010:	69b8      	ldr	r0, [r7, #24]
 8002012:	f7fe fa65 	bl	80004e0 <__aeabi_f2d>
 8002016:	a37a      	add	r3, pc, #488	@ (adr r3, 8002200 <MOTOR_set_duty+0x4e8>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe fab8 	bl	8000590 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681c      	ldr	r4, [r3, #0]
 800202e:	f7fe fd71 	bl	8000b14 <__aeabi_d2uiz>
 8002032:	4603      	mov	r3, r0
 8002034:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8002036:	e0de      	b.n	80021f6 <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d106      	bne.n	800204e <MOTOR_set_duty+0x336>
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f24a 6203 	movw	r2, #42499	@ 0xa603
 800204a:	635a      	str	r2, [r3, #52]	@ 0x34
 800204c:	e031      	b.n	80020b2 <MOTOR_set_duty+0x39a>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	889b      	ldrh	r3, [r3, #4]
 8002052:	2b04      	cmp	r3, #4
 8002054:	d106      	bne.n	8002064 <MOTOR_set_duty+0x34c>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002060:	6393      	str	r3, [r2, #56]	@ 0x38
 8002062:	e026      	b.n	80020b2 <MOTOR_set_duty+0x39a>
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	889b      	ldrh	r3, [r3, #4]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d106      	bne.n	800207a <MOTOR_set_duty+0x362>
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002076:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002078:	e01b      	b.n	80020b2 <MOTOR_set_duty+0x39a>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	889b      	ldrh	r3, [r3, #4]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d106      	bne.n	8002090 <MOTOR_set_duty+0x378>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f24a 6303 	movw	r3, #42499	@ 0xa603
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	e010      	b.n	80020b2 <MOTOR_set_duty+0x39a>
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	889b      	ldrh	r3, [r3, #4]
 8002094:	2b10      	cmp	r3, #16
 8002096:	d106      	bne.n	80020a6 <MOTOR_set_duty+0x38e>
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80020a2:	6493      	str	r3, [r2, #72]	@ 0x48
 80020a4:	e005      	b.n	80020b2 <MOTOR_set_duty+0x39a>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80020b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	88db      	ldrh	r3, [r3, #6]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d117      	bne.n	80020ea <MOTOR_set_duty+0x3d2>
 80020ba:	69b8      	ldr	r0, [r7, #24]
 80020bc:	f7fe fa10 	bl	80004e0 <__aeabi_f2d>
 80020c0:	a34f      	add	r3, pc, #316	@ (adr r3, 8002200 <MOTOR_set_duty+0x4e8>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe fa63 	bl	8000590 <__aeabi_dmul>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	613a      	str	r2, [r7, #16]
 80020d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681c      	ldr	r4, [r3, #0]
 80020dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020e0:	f7fe fd18 	bl	8000b14 <__aeabi_d2uiz>
 80020e4:	4603      	mov	r3, r0
 80020e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80020e8:	e085      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	88db      	ldrh	r3, [r3, #6]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d117      	bne.n	8002122 <MOTOR_set_duty+0x40a>
 80020f2:	69b8      	ldr	r0, [r7, #24]
 80020f4:	f7fe f9f4 	bl	80004e0 <__aeabi_f2d>
 80020f8:	a341      	add	r3, pc, #260	@ (adr r3, 8002200 <MOTOR_set_duty+0x4e8>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa47 	bl	8000590 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	60ba      	str	r2, [r7, #8]
 8002108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681c      	ldr	r4, [r3, #0]
 8002114:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002118:	f7fe fcfc 	bl	8000b14 <__aeabi_d2uiz>
 800211c:	4603      	mov	r3, r0
 800211e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002120:	e069      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	88db      	ldrh	r3, [r3, #6]
 8002126:	2b08      	cmp	r3, #8
 8002128:	d117      	bne.n	800215a <MOTOR_set_duty+0x442>
 800212a:	69b8      	ldr	r0, [r7, #24]
 800212c:	f7fe f9d8 	bl	80004e0 <__aeabi_f2d>
 8002130:	a333      	add	r3, pc, #204	@ (adr r3, 8002200 <MOTOR_set_duty+0x4e8>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe fa2b 	bl	8000590 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	603a      	str	r2, [r7, #0]
 8002140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681c      	ldr	r4, [r3, #0]
 800214c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002150:	f7fe fce0 	bl	8000b14 <__aeabi_d2uiz>
 8002154:	4603      	mov	r3, r0
 8002156:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002158:	e04d      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	88db      	ldrh	r3, [r3, #6]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d116      	bne.n	8002190 <MOTOR_set_duty+0x478>
 8002162:	69b8      	ldr	r0, [r7, #24]
 8002164:	f7fe f9bc 	bl	80004e0 <__aeabi_f2d>
 8002168:	a325      	add	r3, pc, #148	@ (adr r3, 8002200 <MOTOR_set_duty+0x4e8>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa0f 	bl	8000590 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4615      	mov	r5, r2
 8002178:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681c      	ldr	r4, [r3, #0]
 8002182:	4628      	mov	r0, r5
 8002184:	4631      	mov	r1, r6
 8002186:	f7fe fcc5 	bl	8000b14 <__aeabi_d2uiz>
 800218a:	4603      	mov	r3, r0
 800218c:	6423      	str	r3, [r4, #64]	@ 0x40
 800218e:	e032      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	88db      	ldrh	r3, [r3, #6]
 8002194:	2b10      	cmp	r3, #16
 8002196:	d116      	bne.n	80021c6 <MOTOR_set_duty+0x4ae>
 8002198:	69b8      	ldr	r0, [r7, #24]
 800219a:	f7fe f9a1 	bl	80004e0 <__aeabi_f2d>
 800219e:	a318      	add	r3, pc, #96	@ (adr r3, 8002200 <MOTOR_set_duty+0x4e8>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe f9f4 	bl	8000590 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4692      	mov	sl, r2
 80021ae:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681c      	ldr	r4, [r3, #0]
 80021b8:	4650      	mov	r0, sl
 80021ba:	4659      	mov	r1, fp
 80021bc:	f7fe fcaa 	bl	8000b14 <__aeabi_d2uiz>
 80021c0:	4603      	mov	r3, r0
 80021c2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80021c4:	e017      	b.n	80021f6 <MOTOR_set_duty+0x4de>
 80021c6:	69b8      	ldr	r0, [r7, #24]
 80021c8:	f7fe f98a 	bl	80004e0 <__aeabi_f2d>
 80021cc:	a30c      	add	r3, pc, #48	@ (adr r3, 8002200 <MOTOR_set_duty+0x4e8>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe f9dd 	bl	8000590 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4690      	mov	r8, r2
 80021dc:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681c      	ldr	r4, [r3, #0]
 80021e6:	4640      	mov	r0, r8
 80021e8:	4649      	mov	r1, r9
 80021ea:	f7fe fc93 	bl	8000b14 <__aeabi_d2uiz>
 80021ee:	4603      	mov	r3, r0
 80021f0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80021f2:	e000      	b.n	80021f6 <MOTOR_set_duty+0x4de>
        return;
 80021f4:	bf00      	nop
    }
}
 80021f6:	3724      	adds	r7, #36	@ 0x24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021fe:	bf00      	nop
 8002200:	3b645a1d 	.word	0x3b645a1d
 8002204:	40453fdf 	.word	0x40453fdf

08002208 <PID_controller_init>:
float boundary = 0.05;

//-------------------------------------------Function Code-------------------------------------------------------//

void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	ed87 0a02 	vstr	s0, [r7, #8]
 8002214:	edc7 0a01 	vstr	s1, [r7, #4]
 8002218:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <PID_controller_calculate_pos>:
void PID_controller_calculate_pos(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output velocity in boundary of 550mm/s
 PID->Error[n] = setpoint - Feedback->Linear_Position;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002270:	ed97 7a01 	vldr	s14, [r7, #4]
 8002274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 550 && PID->Error[n] > 0) || (PID->out <= -550 && PID->Error[n] < 0))) {
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	edd3 7a06 	vldr	s15, [r3, #24]
 8002284:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800238c <PID_controller_calculate_pos+0x130>
 8002288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	bfac      	ite	ge
 8002292:	2301      	movge	r3, #1
 8002294:	2300      	movlt	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f083 0301 	eor.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10f      	bne.n	80022c2 <PID_controller_calculate_pos+0x66>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80022a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	bfcc      	ite	gt
 80022b2:	2301      	movgt	r3, #1
 80022b4:	2300      	movle	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f083 0301 	eor.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d056      	beq.n	8002370 <PID_controller_calculate_pos+0x114>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80022c8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002390 <PID_controller_calculate_pos+0x134>
 80022cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	bf94      	ite	ls
 80022d6:	2301      	movls	r3, #1
 80022d8:	2300      	movhi	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f083 0301 	eor.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <PID_controller_calculate_pos+0xaa>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80022ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	bf4c      	ite	mi
 80022f6:	2301      	movmi	r3, #1
 80022f8:	2300      	movpl	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f083 0301 	eor.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d034      	beq.n	8002370 <PID_controller_calculate_pos+0x114>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	ed93 7a06 	vldr	s14, [r3, #24]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	edd3 6a00 	vldr	s13, [r3]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	edd3 7a01 	vldr	s15, [r3, #4]
 8002318:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002322:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	edd3 7a03 	vldr	s15, [r3, #12]
 800232c:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	ed93 6a00 	vldr	s12, [r3]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	edd3 7a02 	vldr	s15, [r3, #8]
 800233c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002340:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	edd3 7a04 	vldr	s15, [r3, #16]
 800234a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800234e:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	ed93 6a02 	vldr	s12, [r3, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	edd3 7a05 	vldr	s15, [r3, #20]
 800235e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002362:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	611a      	str	r2, [r3, #16]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	44098000 	.word	0x44098000
 8002390:	c4098000 	.word	0xc4098000

08002394 <PID_controller_calculate_velo>:

void PID_controller_calculate_velo(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output pwm to drive the motor
 PID->Error[n] = setpoint - Feedback->Linear_Velocity;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80023a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80023ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 1000 && PID->Error[n] > 0) || (PID->out <= -1000 && PID->Error[n] < 0))) {
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80023bc:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80024c4 <PID_controller_calculate_velo+0x130>
 80023c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	bfac      	ite	ge
 80023ca:	2301      	movge	r3, #1
 80023cc:	2300      	movlt	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f083 0301 	eor.w	r3, r3, #1
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <PID_controller_calculate_velo+0x66>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80023e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	bfcc      	ite	gt
 80023ea:	2301      	movgt	r3, #1
 80023ec:	2300      	movle	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d056      	beq.n	80024a8 <PID_controller_calculate_velo+0x114>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002400:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80024c8 <PID_controller_calculate_velo+0x134>
 8002404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240c:	bf94      	ite	ls
 800240e:	2301      	movls	r3, #1
 8002410:	2300      	movhi	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f083 0301 	eor.w	r3, r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10f      	bne.n	800243e <PID_controller_calculate_velo+0xaa>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	edd3 7a03 	vldr	s15, [r3, #12]
 8002424:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	bf4c      	ite	mi
 800242e:	2301      	movmi	r3, #1
 8002430:	2300      	movpl	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f083 0301 	eor.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d034      	beq.n	80024a8 <PID_controller_calculate_velo+0x114>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	ed93 7a06 	vldr	s14, [r3, #24]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	edd3 6a00 	vldr	s13, [r3]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002450:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	edd3 7a02 	vldr	s15, [r3, #8]
 800245a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	edd3 7a03 	vldr	s15, [r3, #12]
 8002464:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	ed93 6a00 	vldr	s12, [r3]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	edd3 7a02 	vldr	s15, [r3, #8]
 8002474:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002478:	ee36 6a27 	vadd.f32	s12, s12, s15
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002482:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002486:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	edd3 7a05 	vldr	s15, [r3, #20]
 8002496:	ee66 7a27 	vmul.f32	s15, s12, s15
 800249a:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 800249e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	611a      	str	r2, [r3, #16]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	447a0000 	.word	0x447a0000
 80024c8:	c47a0000 	.word	0xc47a0000

080024cc <PID_controller_cascade>:

void PID_controller_cascade(PID_struct* PID_pos, PID_struct* PID_vel, AMT_Encoder* QEI, float setpoint)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	ed87 0a00 	vstr	s0, [r7]
	PID_controller_calculate_pos(PID_pos, QEI , setpoint);
 80024dc:	ed97 0a00 	vldr	s0, [r7]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff feba 	bl	800225c <PID_controller_calculate_pos>
	PID_controller_calculate_velo(PID_vel, QEI, ((PID_pos->out)));
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80024ee:	eeb0 0a67 	vmov.f32	s0, s15
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7ff ff4d 	bl	8002394 <PID_controller_calculate_velo>
//	PID_controller_calculate_velo(PID_vel, QEI, Traj.currentVelocity);
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	0000      	movs	r0, r0
 8002504:	0000      	movs	r0, r0
	...

08002508 <PS2X_Reader>:
    PS2->on = 0;
}
extern PS2_typedef ps2;

void PS2X_Reader()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
//	ps2.ps2Y = 0;
//	ps2.ps2X = 0;
	if (ps2.ps2RX[0] == 69) 		//Press L4 to switch to use Joy stick
 800250e:	4b94      	ldr	r3, [pc, #592]	@ (8002760 <PS2X_Reader+0x258>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b45      	cmp	r3, #69	@ 0x45
 8002514:	d105      	bne.n	8002522 <PS2X_Reader+0x1a>
	{
		ps2.mode = 1;
 8002516:	4b92      	ldr	r3, [pc, #584]	@ (8002760 <PS2X_Reader+0x258>)
 8002518:	2201      	movs	r2, #1
 800251a:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on = 0;
 800251c:	4b90      	ldr	r3, [pc, #576]	@ (8002760 <PS2X_Reader+0x258>)
 800251e:	2200      	movs	r2, #0
 8002520:	67da      	str	r2, [r3, #124]	@ 0x7c
//		ps2.ps2YPos = 132;
	}
	if (ps2.ps2RX[0] == 70)		//Press L5 to switch to use Button
 8002522:	4b8f      	ldr	r3, [pc, #572]	@ (8002760 <PS2X_Reader+0x258>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b46      	cmp	r3, #70	@ 0x46
 8002528:	d10d      	bne.n	8002546 <PS2X_Reader+0x3e>
	{
		ps2.mode = 2;
 800252a:	4b8d      	ldr	r3, [pc, #564]	@ (8002760 <PS2X_Reader+0x258>)
 800252c:	2202      	movs	r2, #2
 800252e:	66da      	str	r2, [r3, #108]	@ 0x6c
		PID_velo.out = 0;
 8002530:	4b8c      	ldr	r3, [pc, #560]	@ (8002764 <PS2X_Reader+0x25c>)
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
		ps2.on =1;
 8002538:	4b89      	ldr	r3, [pc, #548]	@ (8002760 <PS2X_Reader+0x258>)
 800253a:	2201      	movs	r2, #1
 800253c:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.PIDPos = AMT.Linear_Position;
 800253e:	4b8a      	ldr	r3, [pc, #552]	@ (8002768 <PS2X_Reader+0x260>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a87      	ldr	r2, [pc, #540]	@ (8002760 <PS2X_Reader+0x258>)
 8002544:	6793      	str	r3, [r2, #120]	@ 0x78


	}
	//Mode Joy stick
	if (ps2.mode == 1)
 8002546:	4b86      	ldr	r3, [pc, #536]	@ (8002760 <PS2X_Reader+0x258>)
 8002548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800254a:	2b01      	cmp	r3, #1
 800254c:	f040 80ac 	bne.w	80026a8 <PS2X_Reader+0x1a0>
	{
		//Read Ps2 Joy stick in VERTICAL
		if(ps2.ps2RX[0] == 81){
 8002550:	4b83      	ldr	r3, [pc, #524]	@ (8002760 <PS2X_Reader+0x258>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b51      	cmp	r3, #81	@ 0x51
 8002556:	d169      	bne.n	800262c <PS2X_Reader+0x124>
			if (ps2.ps2RX[2] == 83){
 8002558:	4b81      	ldr	r3, [pc, #516]	@ (8002760 <PS2X_Reader+0x258>)
 800255a:	789b      	ldrb	r3, [r3, #2]
 800255c:	2b53      	cmp	r3, #83	@ 0x53
 800255e:	d103      	bne.n	8002568 <PS2X_Reader+0x60>
				ps2.digit = 1;
 8002560:	4b7f      	ldr	r3, [pc, #508]	@ (8002760 <PS2X_Reader+0x258>)
 8002562:	2201      	movs	r2, #1
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	e00e      	b.n	8002586 <PS2X_Reader+0x7e>
			}
			else if (ps2.ps2RX[3] == 83){
 8002568:	4b7d      	ldr	r3, [pc, #500]	@ (8002760 <PS2X_Reader+0x258>)
 800256a:	78db      	ldrb	r3, [r3, #3]
 800256c:	2b53      	cmp	r3, #83	@ 0x53
 800256e:	d103      	bne.n	8002578 <PS2X_Reader+0x70>
				ps2.digit = 2;
 8002570:	4b7b      	ldr	r3, [pc, #492]	@ (8002760 <PS2X_Reader+0x258>)
 8002572:	2202      	movs	r2, #2
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	e006      	b.n	8002586 <PS2X_Reader+0x7e>
			}
			else if (ps2.ps2RX[4] == 83){
 8002578:	4b79      	ldr	r3, [pc, #484]	@ (8002760 <PS2X_Reader+0x258>)
 800257a:	791b      	ldrb	r3, [r3, #4]
 800257c:	2b53      	cmp	r3, #83	@ 0x53
 800257e:	d102      	bne.n	8002586 <PS2X_Reader+0x7e>
				ps2.digit = 3;
 8002580:	4b77      	ldr	r3, [pc, #476]	@ (8002760 <PS2X_Reader+0x258>)
 8002582:	2203      	movs	r2, #3
 8002584:	60da      	str	r2, [r3, #12]
			}
			for(int k=1 ; k<5 ; k++){
 8002586:	2301      	movs	r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	e01d      	b.n	80025c8 <PS2X_Reader+0xc0>
				for (int l=0; l<10 ; l++){
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	e014      	b.n	80025bc <PS2X_Reader+0xb4>
					if (ps2.ps2RX[k] == num[l]){
 8002592:	4a73      	ldr	r2, [pc, #460]	@ (8002760 <PS2X_Reader+0x258>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	4a73      	ldr	r2, [pc, #460]	@ (800276c <PS2X_Reader+0x264>)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	4299      	cmp	r1, r3
 80025a6:	d106      	bne.n	80025b6 <PS2X_Reader+0xae>
						ps2.gain[k-1] = l;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	496c      	ldr	r1, [pc, #432]	@ (8002760 <PS2X_Reader+0x258>)
 80025ae:	3304      	adds	r3, #4
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int l=0; l<10 ; l++){
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b09      	cmp	r3, #9
 80025c0:	dde7      	ble.n	8002592 <PS2X_Reader+0x8a>
			for(int k=1 ; k<5 ; k++){
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	ddde      	ble.n	800258c <PS2X_Reader+0x84>
					}
				}
			}
			if (ps2.digit == 1){
 80025ce:	4b64      	ldr	r3, [pc, #400]	@ (8002760 <PS2X_Reader+0x258>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d104      	bne.n	80025e0 <PS2X_Reader+0xd8>
				ps2.ps2YPos = ps2.gain[0];
 80025d6:	4b62      	ldr	r3, [pc, #392]	@ (8002760 <PS2X_Reader+0x258>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	4a61      	ldr	r2, [pc, #388]	@ (8002760 <PS2X_Reader+0x258>)
 80025dc:	6213      	str	r3, [r2, #32]
 80025de:	e025      	b.n	800262c <PS2X_Reader+0x124>
			}
			else if (ps2.digit == 2){
 80025e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002760 <PS2X_Reader+0x258>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d10c      	bne.n	8002602 <PS2X_Reader+0xfa>
				ps2.ps2YPos = (ps2.gain[0]*10)+ps2.gain[1];
 80025e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002760 <PS2X_Reader+0x258>)
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002760 <PS2X_Reader+0x258>)
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a58      	ldr	r2, [pc, #352]	@ (8002760 <PS2X_Reader+0x258>)
 80025fe:	6213      	str	r3, [r2, #32]
 8002600:	e014      	b.n	800262c <PS2X_Reader+0x124>
			}
			else if (ps2.digit == 3){
 8002602:	4b57      	ldr	r3, [pc, #348]	@ (8002760 <PS2X_Reader+0x258>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d110      	bne.n	800262c <PS2X_Reader+0x124>
				ps2.ps2YPos = (ps2.gain[0]*100)+(ps2.gain[1]*10)+ps2.gain[2];
 800260a:	4b55      	ldr	r3, [pc, #340]	@ (8002760 <PS2X_Reader+0x258>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2264      	movs	r2, #100	@ 0x64
 8002610:	fb02 f103 	mul.w	r1, r2, r3
 8002614:	4b52      	ldr	r3, [pc, #328]	@ (8002760 <PS2X_Reader+0x258>)
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	18ca      	adds	r2, r1, r3
 8002622:	4b4f      	ldr	r3, [pc, #316]	@ (8002760 <PS2X_Reader+0x258>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	4413      	add	r3, r2
 8002628:	4a4d      	ldr	r2, [pc, #308]	@ (8002760 <PS2X_Reader+0x258>)
 800262a:	6213      	str	r3, [r2, #32]
		//Convert from 0 - 255 to -128 - 128
//		ps2.ps2Y = (ps2.ps2YPos - 132);
//		ps2.ps2X = ps2.ps2XPos - 132;

		//Generate PWM
		ps2.pwmOut = ((ps2.ps2Y/ 132.0)*300) + 150;
 800262c:	4b4c      	ldr	r3, [pc, #304]	@ (8002760 <PS2X_Reader+0x258>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff43 	bl	80004bc <__aeabi_i2d>
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	4b4d      	ldr	r3, [pc, #308]	@ (8002770 <PS2X_Reader+0x268>)
 800263c:	f7fe f8d2 	bl	80007e4 <__aeabi_ddiv>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	a341      	add	r3, pc, #260	@ (adr r3, 8002750 <PS2X_Reader+0x248>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fd ff9f 	bl	8000590 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002758 <PS2X_Reader+0x250>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fd fde0 	bl	8000224 <__adddf3>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f7fe fa2a 	bl	8000ac4 <__aeabi_d2iz>
 8002670:	4603      	mov	r3, r0
 8002672:	4a3b      	ldr	r2, [pc, #236]	@ (8002760 <PS2X_Reader+0x258>)
 8002674:	6693      	str	r3, [r2, #104]	@ 0x68
		ps2.pwmOut = 320 - ps2.ps2YPos;
 8002676:	4b3a      	ldr	r3, [pc, #232]	@ (8002760 <PS2X_Reader+0x258>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800267e:	4a38      	ldr	r2, [pc, #224]	@ (8002760 <PS2X_Reader+0x258>)
 8002680:	6693      	str	r3, [r2, #104]	@ 0x68
		if (ps2.pwmOut > 300)
 8002682:	4b37      	ldr	r3, [pc, #220]	@ (8002760 <PS2X_Reader+0x258>)
 8002684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002686:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800268a:	dd03      	ble.n	8002694 <PS2X_Reader+0x18c>
		{
			ps2.pwmOut = 300;
 800268c:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <PS2X_Reader+0x258>)
 800268e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002692:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < -300)
 8002694:	4b32      	ldr	r3, [pc, #200]	@ (8002760 <PS2X_Reader+0x258>)
 8002696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002698:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 800269c:	f280 80bf 	bge.w	800281e <PS2X_Reader+0x316>
		{
			ps2.pwmOut = 0;
 80026a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002760 <PS2X_Reader+0x258>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	669a      	str	r2, [r3, #104]	@ 0x68
 80026a6:	e0ba      	b.n	800281e <PS2X_Reader+0x316>
//			MOTOR_set_duty(&MT, ps2.pwmOut);
//		}
	}

	//--- Mode Button ---//
	else if (ps2.mode == 2)
 80026a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002760 <PS2X_Reader+0x258>)
 80026aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	f040 80b6 	bne.w	800281e <PS2X_Reader+0x316>
	{
//		ps2.PIDPos = AMT.Linear_Position;
		ps2.on = 1;
 80026b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <PS2X_Reader+0x258>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.ps2Y = 0;
 80026b8:	4b29      	ldr	r3, [pc, #164]	@ (8002760 <PS2X_Reader+0x258>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
//		ps2.ps2X = 0;
		//Keys Map
		static uint32_t timestamp =0;
		if(timestamp < HAL_GetTick())
 80026be:	f001 fab9 	bl	8003c34 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <PS2X_Reader+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d908      	bls.n	80026de <PS2X_Reader+0x1d6>
		{
			timestamp = HAL_GetTick()+100;
 80026cc:	f001 fab2 	bl	8003c34 <HAL_GetTick>
 80026d0:	4603      	mov	r3, r0
 80026d2:	3364      	adds	r3, #100	@ 0x64
 80026d4:	4a27      	ldr	r2, [pc, #156]	@ (8002774 <PS2X_Reader+0x26c>)
 80026d6:	6013      	str	r3, [r2, #0]
			ps2.ps2RX[0] = 0;
 80026d8:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <PS2X_Reader+0x258>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
		}
		for (int i =0;i<6;i++)
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	e058      	b.n	8002796 <PS2X_Reader+0x28e>
		{
			if (ps2.ps2RX[0] == 0)
 80026e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <PS2X_Reader+0x258>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d123      	bne.n	8002734 <PS2X_Reader+0x22c>
			{
				//Left
				ps2.l[0] = 0; //w
 80026ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002760 <PS2X_Reader+0x258>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	651a      	str	r2, [r3, #80]	@ 0x50
				ps2.l[1] = 0;	//a
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <PS2X_Reader+0x258>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	655a      	str	r2, [r3, #84]	@ 0x54
				ps2.l[2] = 0;	//s
 80026f8:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <PS2X_Reader+0x258>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	659a      	str	r2, [r3, #88]	@ 0x58
				ps2.l[3] = 0;	//d
 80026fe:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <PS2X_Reader+0x258>)
 8002700:	2200      	movs	r2, #0
 8002702:	65da      	str	r2, [r3, #92]	@ 0x5c
				ps2.l[4] = 0;	//l1
 8002704:	4b16      	ldr	r3, [pc, #88]	@ (8002760 <PS2X_Reader+0x258>)
 8002706:	2200      	movs	r2, #0
 8002708:	661a      	str	r2, [r3, #96]	@ 0x60
				ps2.l[5] = 0;	//l2
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <PS2X_Reader+0x258>)
 800270c:	2200      	movs	r2, #0
 800270e:	665a      	str	r2, [r3, #100]	@ 0x64
				//Right
				ps2.r[0] = 0;	//w
 8002710:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <PS2X_Reader+0x258>)
 8002712:	2200      	movs	r2, #0
 8002714:	639a      	str	r2, [r3, #56]	@ 0x38
				ps2.r[1] = 0;	//a
 8002716:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <PS2X_Reader+0x258>)
 8002718:	2200      	movs	r2, #0
 800271a:	63da      	str	r2, [r3, #60]	@ 0x3c
				ps2.r[2] = 0;	//s
 800271c:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <PS2X_Reader+0x258>)
 800271e:	2200      	movs	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	@ 0x40
				ps2.r[3] = 0;	//d
 8002722:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <PS2X_Reader+0x258>)
 8002724:	2200      	movs	r2, #0
 8002726:	645a      	str	r2, [r3, #68]	@ 0x44
				ps2.r[4] = 0;	//r1
 8002728:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <PS2X_Reader+0x258>)
 800272a:	2200      	movs	r2, #0
 800272c:	649a      	str	r2, [r3, #72]	@ 0x48
				ps2.r[5] = 0;	//r2
 800272e:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <PS2X_Reader+0x258>)
 8002730:	2200      	movs	r2, #0
 8002732:	64da      	str	r2, [r3, #76]	@ 0x4c
			}

			if (ps2.ps2RX[0] - 65 == i)
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <PS2X_Reader+0x258>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	3b41      	subs	r3, #65	@ 0x41
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d11b      	bne.n	8002778 <PS2X_Reader+0x270>
			{
				ps2.l[i] = 1;
 8002740:	4a07      	ldr	r2, [pc, #28]	@ (8002760 <PS2X_Reader+0x258>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3314      	adds	r3, #20
 8002746:	2101      	movs	r1, #1
 8002748:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800274c:	e020      	b.n	8002790 <PS2X_Reader+0x288>
 800274e:	bf00      	nop
 8002750:	00000000 	.word	0x00000000
 8002754:	4072c000 	.word	0x4072c000
 8002758:	00000000 	.word	0x00000000
 800275c:	4062c000 	.word	0x4062c000
 8002760:	20000ab0 	.word	0x20000ab0
 8002764:	20000b30 	.word	0x20000b30
 8002768:	20000a78 	.word	0x20000a78
 800276c:	20000208 	.word	0x20000208
 8002770:	40608000 	.word	0x40608000
 8002774:	200002cc 	.word	0x200002cc
			}

			else if (ps2.ps2RX[0] - 73 == i)
 8002778:	4b4b      	ldr	r3, [pc, #300]	@ (80028a8 <PS2X_Reader+0x3a0>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	3b49      	subs	r3, #73	@ 0x49
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d105      	bne.n	8002790 <PS2X_Reader+0x288>
			{
				ps2.r[i] = 1;
 8002784:	4a48      	ldr	r2, [pc, #288]	@ (80028a8 <PS2X_Reader+0x3a0>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	330e      	adds	r3, #14
 800278a:	2101      	movs	r1, #1
 800278c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i =0;i<6;i++)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3301      	adds	r3, #1
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b05      	cmp	r3, #5
 800279a:	dda3      	ble.n	80026e4 <PS2X_Reader+0x1dc>
			}
		}

		//Generate PWM
		if (ps2.l[2] == 1)
 800279c:	4b42      	ldr	r3, [pc, #264]	@ (80028a8 <PS2X_Reader+0x3a0>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d113      	bne.n	80027cc <PS2X_Reader+0x2c4>
		{
			//Adjust How to decrease(-) Linear position
			ps2.PIDPos -= 0.1;
 80027a4:	4b40      	ldr	r3, [pc, #256]	@ (80028a8 <PS2X_Reader+0x3a0>)
 80027a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fe99 	bl	80004e0 <__aeabi_f2d>
 80027ae:	a33c      	add	r3, pc, #240	@ (adr r3, 80028a0 <PS2X_Reader+0x398>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd fd34 	bl	8000220 <__aeabi_dsub>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe f9c8 	bl	8000b54 <__aeabi_d2f>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a38      	ldr	r2, [pc, #224]	@ (80028a8 <PS2X_Reader+0x3a0>)
 80027c8:	6793      	str	r3, [r2, #120]	@ 0x78
 80027ca:	e028      	b.n	800281e <PS2X_Reader+0x316>
//			if (ps2.pwmOut < 0)
//			{
//				ps2.pwmOut = 0;		// to make pwm1 >= 0
//			}
		}
		else if (ps2.l[3] == 1)
 80027cc:	4b36      	ldr	r3, [pc, #216]	@ (80028a8 <PS2X_Reader+0x3a0>)
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d113      	bne.n	80027fc <PS2X_Reader+0x2f4>
		{
			//Adjust How to increase(+) Linear position
			ps2.PIDPos += 0.1;
 80027d4:	4b34      	ldr	r3, [pc, #208]	@ (80028a8 <PS2X_Reader+0x3a0>)
 80027d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fe81 	bl	80004e0 <__aeabi_f2d>
 80027de:	a330      	add	r3, pc, #192	@ (adr r3, 80028a0 <PS2X_Reader+0x398>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f7fd fd1e 	bl	8000224 <__adddf3>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe f9b0 	bl	8000b54 <__aeabi_d2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4a2c      	ldr	r2, [pc, #176]	@ (80028a8 <PS2X_Reader+0x3a0>)
 80027f8:	6793      	str	r3, [r2, #120]	@ 0x78
 80027fa:	e010      	b.n	800281e <PS2X_Reader+0x316>
//			ps2.pwmOut = ps2.pwmOut + count;	// + PWM with count
		}
		else if (ps2.l[0] == 1)		//Press down button(l1) to PWM out forward
 80027fc:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <PS2X_Reader+0x3a0>)
 80027fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002800:	2b01      	cmp	r3, #1
 8002802:	d00c      	beq.n	800281e <PS2X_Reader+0x316>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else if (ps2.l[1] == 1)		//Press down button(l1) to PWM out backward
 8002804:	4b28      	ldr	r3, [pc, #160]	@ (80028a8 <PS2X_Reader+0x3a0>)
 8002806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002808:	2b01      	cmp	r3, #1
 800280a:	d008      	beq.n	800281e <PS2X_Reader+0x316>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
		}
		else if (ps2.r[1] == 1)		//Press X(r1) to stop
 800280c:	4b26      	ldr	r3, [pc, #152]	@ (80028a8 <PS2X_Reader+0x3a0>)
 800280e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d004      	beq.n	800281e <PS2X_Reader+0x316>
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
			MOTOR_set_duty(&MT, 150);
 8002814:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80028ac <PS2X_Reader+0x3a4>
 8002818:	4825      	ldr	r0, [pc, #148]	@ (80028b0 <PS2X_Reader+0x3a8>)
 800281a:	f7ff fa7d 	bl	8001d18 <MOTOR_set_duty>
		}
	}
	// Floor Selection
	if(base.ShelveMode == 1){
 800281e:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <PS2X_Reader+0x3ac>)
 8002820:	8b1b      	ldrh	r3, [r3, #24]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d136      	bne.n	8002894 <PS2X_Reader+0x38c>
		if (ps2.ps2RX[0] == 71){
 8002826:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <PS2X_Reader+0x3a0>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b47      	cmp	r3, #71	@ 0x47
 800282c:	d112      	bne.n	8002854 <PS2X_Reader+0x34c>
			base.Shelve[ps2.counts-1] = ps2.PIDPos;
 800282e:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <PS2X_Reader+0x3a0>)
 8002830:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8002834:	4b1c      	ldr	r3, [pc, #112]	@ (80028a8 <PS2X_Reader+0x3a0>)
 8002836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002838:	3b01      	subs	r3, #1
 800283a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283e:	ee17 1a90 	vmov	r1, s15
 8002842:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <PS2X_Reader+0x3ac>)
 8002844:	3306      	adds	r3, #6
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	6059      	str	r1, [r3, #4]
			ps2.counts=  +1;
 800284c:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <PS2X_Reader+0x3a0>)
 800284e:	2201      	movs	r2, #1
 8002850:	675a      	str	r2, [r3, #116]	@ 0x74
 8002852:	e011      	b.n	8002878 <PS2X_Reader+0x370>
		}
		else if (ps2.ps2RX[0] == 73){
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <PS2X_Reader+0x3a0>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b49      	cmp	r3, #73	@ 0x49
 800285a:	d10d      	bne.n	8002878 <PS2X_Reader+0x370>
			base.Shelve[ps2.counts-1] = 0;
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <PS2X_Reader+0x3a0>)
 800285e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002860:	3b01      	subs	r3, #1
 8002862:	4a14      	ldr	r2, [pc, #80]	@ (80028b4 <PS2X_Reader+0x3ac>)
 8002864:	3306      	adds	r3, #6
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	2200      	movs	r2, #0
 800286c:	605a      	str	r2, [r3, #4]
			ps2.counts = ps2.counts -1;
 800286e:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <PS2X_Reader+0x3a0>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002872:	3b01      	subs	r3, #1
 8002874:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <PS2X_Reader+0x3a0>)
 8002876:	6753      	str	r3, [r2, #116]	@ 0x74
		}

		if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1){
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <PS2X_Reader+0x3a0>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b48      	cmp	r3, #72	@ 0x48
 800287e:	d109      	bne.n	8002894 <PS2X_Reader+0x38c>
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <PS2X_Reader+0x3ac>)
 8002882:	8b1b      	ldrh	r3, [r3, #24]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <PS2X_Reader+0x38c>
			base.ShelveMode = 0;
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <PS2X_Reader+0x3ac>)
 800288a:	2200      	movs	r2, #0
 800288c:	831a      	strh	r2, [r3, #24]
			registerFrame[0x10].U16 = 0b0000;
 800288e:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <PS2X_Reader+0x3b0>)
 8002890:	2200      	movs	r2, #0
 8002892:	841a      	strh	r2, [r3, #32]
		}
	}
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	f3af 8000 	nop.w
 80028a0:	9999999a 	.word	0x9999999a
 80028a4:	3fb99999 	.word	0x3fb99999
 80028a8:	20000ab0 	.word	0x20000ab0
 80028ac:	43160000 	.word	0x43160000
 80028b0:	20000a5c 	.word	0x20000a5c
 80028b4:	20000284 	.word	0x20000284
 80028b8:	20001030 	.word	0x20001030

080028bc <Traject_init>:
float Time_dec;

//-------------------------------------------Function Code-------------------------------------------------------//

void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80028c8:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002900:	b08d      	sub	sp, #52	@ 0x34
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002904:	f001 f931 	bl	8003b6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002908:	f000 f96c 	bl	8002be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800290c:	f000 fcd6 	bl	80032bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002910:	f000 fca2 	bl	8003258 <MX_DMA_Init>
  MX_TIM2_Init();
 8002914:	f000 fa2a 	bl	8002d6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002918:	f000 fa7c 	bl	8002e14 <MX_TIM3_Init>
  MX_TIM5_Init();
 800291c:	f000 fb4c 	bl	8002fb8 <MX_TIM5_Init>
  MX_UART4_Init();
 8002920:	f000 fbfe 	bl	8003120 <MX_UART4_Init>
  MX_TIM4_Init();
 8002924:	f000 faf8 	bl	8002f18 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002928:	f000 fc48 	bl	80031bc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800292c:	f000 fbc8 	bl	80030c0 <MX_TIM16_Init>
  MX_TIM6_Init();
 8002930:	f000 fb90 	bl	8003054 <MX_TIM6_Init>
  MX_ADC1_Init();
 8002934:	f000 f9a2 	bl	8002c7c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 8002938:	4892      	ldr	r0, [pc, #584]	@ (8002b84 <main+0x288>)
 800293a:	f004 f933 	bl	8006ba4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);					// Output compare
 800293e:	4892      	ldr	r0, [pc, #584]	@ (8002b88 <main+0x28c>)
 8002940:	f004 f930 	bl	8006ba4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);					// Trajectory trigger
 8002944:	4891      	ldr	r0, [pc, #580]	@ (8002b8c <main+0x290>)
 8002946:	f004 f92d 	bl	8006ba4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);        // PWM
 800294a:	2100      	movs	r1, #0
 800294c:	488e      	ldr	r0, [pc, #568]	@ (8002b88 <main+0x28c>)
 800294e:	f004 fa7f 	bl	8006e50 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);        // Direction
 8002952:	2104      	movs	r1, #4
 8002954:	488c      	ldr	r0, [pc, #560]	@ (8002b88 <main+0x28c>)
 8002956:	f004 fa7b 	bl	8006e50 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800295a:	488d      	ldr	r0, [pc, #564]	@ (8002b90 <main+0x294>)
 800295c:	f004 f992 	bl	8006c84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8002960:	488c      	ldr	r0, [pc, #560]	@ (8002b94 <main+0x298>)
 8002962:	f004 f98f 	bl	8006c84 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 8002966:	4b8c      	ldr	r3, [pc, #560]	@ (8002b98 <main+0x29c>)
 8002968:	4a8c      	ldr	r2, [pc, #560]	@ (8002b9c <main+0x2a0>)
 800296a:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 800296c:	4b8a      	ldr	r3, [pc, #552]	@ (8002b98 <main+0x29c>)
 800296e:	4a8c      	ldr	r2, [pc, #560]	@ (8002ba0 <main+0x2a4>)
 8002970:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8002972:	4b89      	ldr	r3, [pc, #548]	@ (8002b98 <main+0x29c>)
 8002974:	2215      	movs	r2, #21
 8002976:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8002978:	4b87      	ldr	r3, [pc, #540]	@ (8002b98 <main+0x29c>)
 800297a:	22c8      	movs	r2, #200	@ 0xc8
 800297c:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800297e:	4989      	ldr	r1, [pc, #548]	@ (8002ba4 <main+0x2a8>)
 8002980:	4885      	ldr	r0, [pc, #532]	@ (8002b98 <main+0x29c>)
 8002982:	f7fe feb3 	bl	80016ec <Modbus_init>

  //float PID_pos_K[3] = {0.01 ,0.0, 0};
  float PID_pos_K[3] = {4.5 ,0.00000000495, 0};
 8002986:	4a88      	ldr	r2, [pc, #544]	@ (8002ba8 <main+0x2ac>)
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	ca07      	ldmia	r2, {r0, r1, r2}
 800298e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  //float PID_velo_K[3] = {3.35 ,0.050, 0.001};
  float PID_velo_K[3] = {3.35 ,0.050, 0.001};
 8002992:	4a86      	ldr	r2, [pc, #536]	@ (8002bac <main+0x2b0>)
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	ca07      	ldmia	r2, {r0, r1, r2}
 800299a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // Initialize ASRS
  Traject_init(&Traj,450, 500);				// V_max, A_max
 800299e:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8002bb0 <main+0x2b4>
 80029a2:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8002bb4 <main+0x2b8>
 80029a6:	4884      	ldr	r0, [pc, #528]	@ (8002bb8 <main+0x2bc>)
 80029a8:	f7ff ff88 	bl	80028bc <Traject_init>
//  Kalman_Start(&Vel_filtered);
  AMT_encoder_init(&AMT, &htim2);
 80029ac:	4975      	ldr	r1, [pc, #468]	@ (8002b84 <main+0x288>)
 80029ae:	4883      	ldr	r0, [pc, #524]	@ (8002bbc <main+0x2c0>)
 80029b0:	f7fe fd3c 	bl	800142c <AMT_encoder_init>
  MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 80029b4:	2300      	movs	r3, #0
 80029b6:	2204      	movs	r2, #4
 80029b8:	4973      	ldr	r1, [pc, #460]	@ (8002b88 <main+0x28c>)
 80029ba:	4881      	ldr	r0, [pc, #516]	@ (8002bc0 <main+0x2c4>)
 80029bc:	f7ff f98a 	bl	8001cd4 <MOTOR_init>
  PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 80029c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80029c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80029c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80029cc:	eeb0 1a66 	vmov.f32	s2, s13
 80029d0:	eef0 0a47 	vmov.f32	s1, s14
 80029d4:	eeb0 0a67 	vmov.f32	s0, s15
 80029d8:	487a      	ldr	r0, [pc, #488]	@ (8002bc4 <main+0x2c8>)
 80029da:	f7ff fc15 	bl	8002208 <PID_controller_init>
  PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 80029de:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80029e6:	edd7 6a06 	vldr	s13, [r7, #24]
 80029ea:	eeb0 1a66 	vmov.f32	s2, s13
 80029ee:	eef0 0a47 	vmov.f32	s1, s14
 80029f2:	eeb0 0a67 	vmov.f32	s0, s15
 80029f6:	4874      	ldr	r0, [pc, #464]	@ (8002bc8 <main+0x2cc>)
 80029f8:	f7ff fc06 	bl	8002208 <PID_controller_init>

    /* USER CODE BEGIN 3 */

	  // Feedback to base system 5 Hz
	  static uint64_t timestamps =0;
	  if(HAL_GetTick() > timestamps)
 80029fc:	f001 f91a 	bl	8003c34 <HAL_GetTick>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2200      	movs	r2, #0
 8002a04:	461c      	mov	r4, r3
 8002a06:	4615      	mov	r5, r2
 8002a08:	4b70      	ldr	r3, [pc, #448]	@ (8002bcc <main+0x2d0>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	42a2      	cmp	r2, r4
 8002a10:	41ab      	sbcs	r3, r5
 8002a12:	d20b      	bcs.n	8002a2c <main+0x130>
	  {
		  timestamps =HAL_GetTick() + 100;		//ms
 8002a14:	f001 f90e 	bl	8003c34 <HAL_GetTick>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	3364      	adds	r3, #100	@ 0x64
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	469a      	mov	sl, r3
 8002a20:	4693      	mov	fp, r2
 8002a22:	4b6a      	ldr	r3, [pc, #424]	@ (8002bcc <main+0x2d0>)
 8002a24:	e9c3 ab00 	strd	sl, fp, [r3]
	  	  Heartbeat();
 8002a28:	f7fe fb82 	bl	8001130 <Heartbeat>
	  }


	  // Read AMT encoder 1000 Hz
	  static uint64_t timestamp =0;
	  int64_t currentTime = HAL_GetTick();
 8002a2c:	f001 f902 	bl	8003c34 <HAL_GetTick>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2200      	movs	r2, #0
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  if(currentTime > timestamp)
 8002a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a44:	4962      	ldr	r1, [pc, #392]	@ (8002bd0 <main+0x2d4>)
 8002a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a4a:	4290      	cmp	r0, r2
 8002a4c:	eb71 0303 	sbcs.w	r3, r1, r3
 8002a50:	d212      	bcs.n	8002a78 <main+0x17c>
	  {
	  timestamp =currentTime + 1;				//ms
 8002a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a56:	f112 0801 	adds.w	r8, r2, #1
 8002a5a:	f143 0900 	adc.w	r9, r3, #0
 8002a5e:	4642      	mov	r2, r8
 8002a60:	464b      	mov	r3, r9
 8002a62:	495b      	ldr	r1, [pc, #364]	@ (8002bd0 <main+0x2d4>)
 8002a64:	e9c1 2300 	strd	r2, r3, [r1]
	  AMT_encoder_update(&AMT, &htim2, micros());
 8002a68:	f000 fd3e 	bl	80034e8 <micros>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4944      	ldr	r1, [pc, #272]	@ (8002b84 <main+0x288>)
 8002a72:	4852      	ldr	r0, [pc, #328]	@ (8002bbc <main+0x2c0>)
 8002a74:	f7fe fcf4 	bl	8001460 <AMT_encoder_update>
	  }

	  //Modbus
	  easyCase();
 8002a78:	f7fe fb42 	bl	8001100 <easyCase>
	  switch(base.Base_case){
 8002a7c:	4b55      	ldr	r3, [pc, #340]	@ (8002bd4 <main+0x2d8>)
 8002a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a80:	3b01      	subs	r3, #1
 8002a82:	2b07      	cmp	r3, #7
 8002a84:	d82a      	bhi.n	8002adc <main+0x1e0>
 8002a86:	a201      	add	r2, pc, #4	@ (adr r2, 8002a8c <main+0x190>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002aad 	.word	0x08002aad
 8002a90:	08002ab9 	.word	0x08002ab9
 8002a94:	08002add 	.word	0x08002add
 8002a98:	08002ac5 	.word	0x08002ac5
 8002a9c:	08002add 	.word	0x08002add
 8002aa0:	08002add 	.word	0x08002add
 8002aa4:	08002add 	.word	0x08002add
 8002aa8:	08002ad1 	.word	0x08002ad1
	  case 1:
		  base.BaseStatus = 1;
 8002aac:	4b49      	ldr	r3, [pc, #292]	@ (8002bd4 <main+0x2d8>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	801a      	strh	r2, [r3, #0]
		  SetShelves();
 8002ab2:	f7fe fbfd 	bl	80012b0 <SetShelves>
		  break;
 8002ab6:	e011      	b.n	8002adc <main+0x1e0>
	  case 2:
		  base.BaseStatus = 2;
 8002ab8:	4b46      	ldr	r3, [pc, #280]	@ (8002bd4 <main+0x2d8>)
 8002aba:	2202      	movs	r2, #2
 8002abc:	801a      	strh	r2, [r3, #0]
		  SetHome();
 8002abe:	f7fe fc5b 	bl	8001378 <SetHome>
		  break;
 8002ac2:	e00b      	b.n	8002adc <main+0x1e0>
	  case 4:
		  base.BaseStatus = 4;
 8002ac4:	4b43      	ldr	r3, [pc, #268]	@ (8002bd4 <main+0x2d8>)
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	801a      	strh	r2, [r3, #0]
		  RunJog();
 8002aca:	f7fe fc81 	bl	80013d0 <RunJog>
		  break;
 8002ace:	e005      	b.n	8002adc <main+0x1e0>
	  case 8:
		  base.BaseStatus = 8;
 8002ad0:	4b40      	ldr	r3, [pc, #256]	@ (8002bd4 <main+0x2d8>)
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	801a      	strh	r2, [r3, #0]
		  RunPoint();
 8002ad6:	f7fe fc21 	bl	800131c <RunPoint>
		  break;
 8002ada:	bf00      	nop
	  }

	  // Reed Switch Status
	  int pinCombination = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) | HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002adc:	2140      	movs	r1, #64	@ 0x40
 8002ade:	483e      	ldr	r0, [pc, #248]	@ (8002bd8 <main+0x2dc>)
 8002ae0:	f002 ff78 	bl	80059d4 <HAL_GPIO_ReadPin>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	005e      	lsls	r6, r3, #1
 8002ae8:	2180      	movs	r1, #128	@ 0x80
 8002aea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aee:	f002 ff71 	bl	80059d4 <HAL_GPIO_ReadPin>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4333      	orrs	r3, r6
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
	  switch(pinCombination) {
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d006      	beq.n	8002b0c <main+0x210>
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d107      	bne.n	8002b14 <main+0x218>
		  case 2: // Binary 10: B is SET, A is RESET
			  base.ReedStatus = 0b0001;
 8002b04:	4b33      	ldr	r3, [pc, #204]	@ (8002bd4 <main+0x2d8>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	879a      	strh	r2, [r3, #60]	@ 0x3c
			  break;
 8002b0a:	e006      	b.n	8002b1a <main+0x21e>
		  case 1: // Binary 01: B is RESET, A is SET
			  base.ReedStatus = 0b0010;
 8002b0c:	4b31      	ldr	r3, [pc, #196]	@ (8002bd4 <main+0x2d8>)
 8002b0e:	2202      	movs	r2, #2
 8002b10:	879a      	strh	r2, [r3, #60]	@ 0x3c
			  break;
 8002b12:	e002      	b.n	8002b1a <main+0x21e>
		  default:
			  base.ReedStatus = 0b0000;
 8002b14:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd4 <main+0x2d8>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	879a      	strh	r2, [r3, #60]	@ 0x3c
	  }

	  Vacuum();
 8002b1a:	f7fe fb73 	bl	8001204 <Vacuum>
	  GripperMovement();
 8002b1e:	f7fe fb95 	bl	800124c <GripperMovement>
	  Modbus_Protocal_Worker();
 8002b22:	f7fe fe6f 	bl	8001804 <Modbus_Protocal_Worker>
	  Routine();
 8002b26:	f7fe fb11 	bl	800114c <Routine>

//	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	220a      	movs	r2, #10
 8002b2e:	492b      	ldr	r1, [pc, #172]	@ (8002bdc <main+0x2e0>)
 8002b30:	482b      	ldr	r0, [pc, #172]	@ (8002be0 <main+0x2e4>)
 8002b32:	f006 f999 	bl	8008e68 <HAL_UART_Receive>
	  if(ps2.ps2RX[0] == 74){
 8002b36:	4b29      	ldr	r3, [pc, #164]	@ (8002bdc <main+0x2e0>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b4a      	cmp	r3, #74	@ 0x4a
 8002b3c:	d102      	bne.n	8002b44 <main+0x248>
		  ps2.stop = 1;
 8002b3e:	4b27      	ldr	r3, [pc, #156]	@ (8002bdc <main+0x2e0>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	671a      	str	r2, [r3, #112]	@ 0x70
	  }
	  if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 8002b44:	4b25      	ldr	r3, [pc, #148]	@ (8002bdc <main+0x2e0>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d113      	bne.n	8002b74 <main+0x278>
 8002b4c:	4b23      	ldr	r3, [pc, #140]	@ (8002bdc <main+0x2e0>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b4b      	cmp	r3, #75	@ 0x4b
 8002b52:	d10f      	bne.n	8002b74 <main+0x278>
		  ps2.stop = 0;
 8002b54:	4b21      	ldr	r3, [pc, #132]	@ (8002bdc <main+0x2e0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	671a      	str	r2, [r3, #112]	@ 0x70
		  ps2.pwmOut = 150;
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <main+0x2e0>)
 8002b5c:	2296      	movs	r2, #150	@ 0x96
 8002b5e:	669a      	str	r2, [r3, #104]	@ 0x68
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);		//Stop and Holf Position
 8002b60:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <main+0x2e0>)
 8002b62:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <main+0x28c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002b6a:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <main+0x28c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b72:	e006      	b.n	8002b82 <main+0x286>
	  }
	  else if(ps2.stop == 0){
 8002b74:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <main+0x2e0>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f af3f 	bne.w	80029fc <main+0x100>
		  PS2X_Reader();
 8002b7e:	f7ff fcc3 	bl	8002508 <PS2X_Reader>
  {
 8002b82:	e73b      	b.n	80029fc <main+0x100>
 8002b84:	2000033c 	.word	0x2000033c
 8002b88:	20000408 	.word	0x20000408
 8002b8c:	2000066c 	.word	0x2000066c
 8002b90:	200004d4 	.word	0x200004d4
 8002b94:	200005a0 	.word	0x200005a0
 8002b98:	20000b4c 	.word	0x20000b4c
 8002b9c:	200008d0 	.word	0x200008d0
 8002ba0:	20000738 	.word	0x20000738
 8002ba4:	20001030 	.word	0x20001030
 8002ba8:	0800ac38 	.word	0x0800ac38
 8002bac:	0800ac44 	.word	0x0800ac44
 8002bb0:	43fa0000 	.word	0x43fa0000
 8002bb4:	43e10000 	.word	0x43e10000
 8002bb8:	20000a64 	.word	0x20000a64
 8002bbc:	20000a78 	.word	0x20000a78
 8002bc0:	20000a5c 	.word	0x20000a5c
 8002bc4:	20000268 	.word	0x20000268
 8002bc8:	20000b30 	.word	0x20000b30
 8002bcc:	200011c0 	.word	0x200011c0
 8002bd0:	200011c8 	.word	0x200011c8
 8002bd4:	20000284 	.word	0x20000284
 8002bd8:	48000400 	.word	0x48000400
 8002bdc:	20000ab0 	.word	0x20000ab0
 8002be0:	20000804 	.word	0x20000804

08002be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b094      	sub	sp, #80	@ 0x50
 8002be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bea:	f107 0318 	add.w	r3, r7, #24
 8002bee:	2238      	movs	r2, #56	@ 0x38
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f007 ffda 	bl	800abac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f002 ff38 	bl	8005a7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c16:	2340      	movs	r3, #64	@ 0x40
 8002c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002c22:	2304      	movs	r3, #4
 8002c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002c26:	2355      	movs	r3, #85	@ 0x55
 8002c28:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c32:	2302      	movs	r3, #2
 8002c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c36:	f107 0318 	add.w	r3, r7, #24
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 ffd2 	bl	8005be4 <HAL_RCC_OscConfig>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002c46:	f000 fc69 	bl	800351c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4a:	230f      	movs	r3, #15
 8002c4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2104      	movs	r1, #4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 fad0 	bl	8006208 <HAL_RCC_ClockConfig>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002c6e:	f000 fc55 	bl	800351c <Error_Handler>
  }
}
 8002c72:	bf00      	nop
 8002c74:	3750      	adds	r7, #80	@ 0x50
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08c      	sub	sp, #48	@ 0x30
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	2220      	movs	r2, #32
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f007 ff89 	bl	800abac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c9a:	4b32      	ldr	r3, [pc, #200]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002c9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002ca0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ca2:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002ca4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002caa:	4b2e      	ldr	r3, [pc, #184]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002cbc:	4b29      	ldr	r3, [pc, #164]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cc2:	4b28      	ldr	r3, [pc, #160]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002cc8:	4b26      	ldr	r3, [pc, #152]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cce:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cda:	4b22      	ldr	r3, [pc, #136]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ce2:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d04:	4817      	ldr	r0, [pc, #92]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002d06:	f001 f977 	bl	8003ff8 <HAL_ADC_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002d10:	f000 fc04 	bl	800351c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4811      	ldr	r0, [pc, #68]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002d20:	f001 ff8c 	bl	8004c3c <HAL_ADCEx_MultiModeConfigChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002d2a:	f000 fbf7 	bl	800351c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <MX_ADC1_Init+0xec>)
 8002d30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d32:	2306      	movs	r3, #6
 8002d34:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d3a:	237f      	movs	r3, #127	@ 0x7f
 8002d3c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d3e:	2304      	movs	r3, #4
 8002d40:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4806      	ldr	r0, [pc, #24]	@ (8002d64 <MX_ADC1_Init+0xe8>)
 8002d4c:	f001 fb10 	bl	8004370 <HAL_ADC_ConfigChannel>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002d56:	f000 fbe1 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	3730      	adds	r7, #48	@ 0x30
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200002d0 	.word	0x200002d0
 8002d68:	19200040 	.word	0x19200040

08002d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08c      	sub	sp, #48	@ 0x30
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	2224      	movs	r2, #36	@ 0x24
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f007 ff16 	bl	800abac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d80:	463b      	mov	r3, r7
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d8a:	4b21      	ldr	r3, [pc, #132]	@ (8002e10 <MX_TIM2_Init+0xa4>)
 8002d8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d92:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <MX_TIM2_Init+0xa4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <MX_TIM2_Init+0xa4>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e10 <MX_TIM2_Init+0xa4>)
 8002da0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002da4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <MX_TIM2_Init+0xa4>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dac:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <MX_TIM2_Init+0xa4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002db2:	2303      	movs	r3, #3
 8002db4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002dd6:	f107 030c 	add.w	r3, r7, #12
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480c      	ldr	r0, [pc, #48]	@ (8002e10 <MX_TIM2_Init+0xa4>)
 8002dde:	f004 fa8d 	bl	80072fc <HAL_TIM_Encoder_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002de8:	f000 fb98 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dec:	2300      	movs	r3, #0
 8002dee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002df4:	463b      	mov	r3, r7
 8002df6:	4619      	mov	r1, r3
 8002df8:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <MX_TIM2_Init+0xa4>)
 8002dfa:	f005 fe35 	bl	8008a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002e04:	f000 fb8a 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e08:	bf00      	nop
 8002e0a:	3730      	adds	r7, #48	@ 0x30
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000033c 	.word	0x2000033c

08002e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08e      	sub	sp, #56	@ 0x38
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e34:	463b      	mov	r3, r7
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	615a      	str	r2, [r3, #20]
 8002e44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e46:	4b32      	ldr	r3, [pc, #200]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002e48:	4a32      	ldr	r2, [pc, #200]	@ (8002f14 <MX_TIM3_Init+0x100>)
 8002e4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002e4c:	4b30      	ldr	r3, [pc, #192]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e52:	4b2f      	ldr	r3, [pc, #188]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 8002e58:	4b2d      	ldr	r3, [pc, #180]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002e5a:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8002e5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e60:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e66:	4b2a      	ldr	r3, [pc, #168]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e6c:	4828      	ldr	r0, [pc, #160]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002e6e:	f003 fe35 	bl	8006adc <HAL_TIM_Base_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002e78:	f000 fb50 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e86:	4619      	mov	r1, r3
 8002e88:	4821      	ldr	r0, [pc, #132]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002e8a:	f004 fe07 	bl	8007a9c <HAL_TIM_ConfigClockSource>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002e94:	f000 fb42 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e98:	481d      	ldr	r0, [pc, #116]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002e9a:	f003 ff6b 	bl	8006d74 <HAL_TIM_PWM_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002ea4:	f000 fb3a 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4816      	ldr	r0, [pc, #88]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002eb8:	f005 fdd6 	bl	8008a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002ec2:	f000 fb2b 	bl	800351c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ec6:	2360      	movs	r3, #96	@ 0x60
 8002ec8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4619      	mov	r1, r3
 8002edc:	480c      	ldr	r0, [pc, #48]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002ede:	f004 fcc9 	bl	8007874 <HAL_TIM_PWM_ConfigChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ee8:	f000 fb18 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eec:	463b      	mov	r3, r7
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4807      	ldr	r0, [pc, #28]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002ef4:	f004 fcbe 	bl	8007874 <HAL_TIM_PWM_ConfigChannel>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002efe:	f000 fb0d 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f02:	4803      	ldr	r0, [pc, #12]	@ (8002f10 <MX_TIM3_Init+0xfc>)
 8002f04:	f000 fc4e 	bl	80037a4 <HAL_TIM_MspPostInit>

}
 8002f08:	bf00      	nop
 8002f0a:	3738      	adds	r7, #56	@ 0x38
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000408 	.word	0x20000408
 8002f14:	40000400 	.word	0x40000400

08002f18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f36:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb0 <MX_TIM4_Init+0x98>)
 8002f38:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb4 <MX_TIM4_Init+0x9c>)
 8002f3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb0 <MX_TIM4_Init+0x98>)
 8002f3e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002f42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f44:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <MX_TIM4_Init+0x98>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002f4a:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <MX_TIM4_Init+0x98>)
 8002f4c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002f50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f52:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <MX_TIM4_Init+0x98>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f58:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <MX_TIM4_Init+0x98>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f5e:	4814      	ldr	r0, [pc, #80]	@ (8002fb0 <MX_TIM4_Init+0x98>)
 8002f60:	f003 fdbc 	bl	8006adc <HAL_TIM_Base_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002f6a:	f000 fad7 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	4619      	mov	r1, r3
 8002f7a:	480d      	ldr	r0, [pc, #52]	@ (8002fb0 <MX_TIM4_Init+0x98>)
 8002f7c:	f004 fd8e 	bl	8007a9c <HAL_TIM_ConfigClockSource>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002f86:	f000 fac9 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4806      	ldr	r0, [pc, #24]	@ (8002fb0 <MX_TIM4_Init+0x98>)
 8002f98:	f005 fd66 	bl	8008a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002fa2:	f000 fabb 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fa6:	bf00      	nop
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200004d4 	.word	0x200004d4
 8002fb4:	40000800 	.word	0x40000800

08002fb8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fbe:	f107 0310 	add.w	r3, r7, #16
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <MX_TIM5_Init+0x94>)
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003050 <MX_TIM5_Init+0x98>)
 8002fda:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <MX_TIM5_Init+0x94>)
 8002fde:	22a9      	movs	r2, #169	@ 0xa9
 8002fe0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800304c <MX_TIM5_Init+0x94>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	@ (800304c <MX_TIM5_Init+0x94>)
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295
 8002fee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff0:	4b16      	ldr	r3, [pc, #88]	@ (800304c <MX_TIM5_Init+0x94>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <MX_TIM5_Init+0x94>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ffc:	4813      	ldr	r0, [pc, #76]	@ (800304c <MX_TIM5_Init+0x94>)
 8002ffe:	f003 fd6d 	bl	8006adc <HAL_TIM_Base_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003008:	f000 fa88 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003010:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003012:	f107 0310 	add.w	r3, r7, #16
 8003016:	4619      	mov	r1, r3
 8003018:	480c      	ldr	r0, [pc, #48]	@ (800304c <MX_TIM5_Init+0x94>)
 800301a:	f004 fd3f 	bl	8007a9c <HAL_TIM_ConfigClockSource>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003024:	f000 fa7a 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	@ (800304c <MX_TIM5_Init+0x94>)
 8003036:	f005 fd17 	bl	8008a68 <HAL_TIMEx_MasterConfigSynchronization>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003040:	f000 fa6c 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003044:	bf00      	nop
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200005a0 	.word	0x200005a0
 8003050:	40000c00 	.word	0x40000c00

08003054 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <MX_TIM6_Init+0x64>)
 8003066:	4a15      	ldr	r2, [pc, #84]	@ (80030bc <MX_TIM6_Init+0x68>)
 8003068:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <MX_TIM6_Init+0x64>)
 800306c:	22a9      	movs	r2, #169	@ 0xa9
 800306e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003070:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <MX_TIM6_Init+0x64>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <MX_TIM6_Init+0x64>)
 8003078:	220a      	movs	r2, #10
 800307a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800307c:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <MX_TIM6_Init+0x64>)
 800307e:	2200      	movs	r2, #0
 8003080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003082:	480d      	ldr	r0, [pc, #52]	@ (80030b8 <MX_TIM6_Init+0x64>)
 8003084:	f003 fd2a 	bl	8006adc <HAL_TIM_Base_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800308e:	f000 fa45 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	4619      	mov	r1, r3
 800309e:	4806      	ldr	r0, [pc, #24]	@ (80030b8 <MX_TIM6_Init+0x64>)
 80030a0:	f005 fce2 	bl	8008a68 <HAL_TIMEx_MasterConfigSynchronization>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80030aa:	f000 fa37 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000066c 	.word	0x2000066c
 80030bc:	40001000 	.word	0x40001000

080030c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80030c4:	4b14      	ldr	r3, [pc, #80]	@ (8003118 <MX_TIM16_Init+0x58>)
 80030c6:	4a15      	ldr	r2, [pc, #84]	@ (800311c <MX_TIM16_Init+0x5c>)
 80030c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80030ca:	4b13      	ldr	r3, [pc, #76]	@ (8003118 <MX_TIM16_Init+0x58>)
 80030cc:	22a9      	movs	r2, #169	@ 0xa9
 80030ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <MX_TIM16_Init+0x58>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <MX_TIM16_Init+0x58>)
 80030d8:	f240 4279 	movw	r2, #1145	@ 0x479
 80030dc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030de:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <MX_TIM16_Init+0x58>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <MX_TIM16_Init+0x58>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <MX_TIM16_Init+0x58>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80030f0:	4809      	ldr	r0, [pc, #36]	@ (8003118 <MX_TIM16_Init+0x58>)
 80030f2:	f003 fcf3 	bl	8006adc <HAL_TIM_Base_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80030fc:	f000 fa0e 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003100:	2108      	movs	r1, #8
 8003102:	4805      	ldr	r0, [pc, #20]	@ (8003118 <MX_TIM16_Init+0x58>)
 8003104:	f004 f804 	bl	8007110 <HAL_TIM_OnePulse_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800310e:	f000 fa05 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000738 	.word	0x20000738
 800311c:	40014400 	.word	0x40014400

08003120 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003124:	4b23      	ldr	r3, [pc, #140]	@ (80031b4 <MX_UART4_Init+0x94>)
 8003126:	4a24      	ldr	r2, [pc, #144]	@ (80031b8 <MX_UART4_Init+0x98>)
 8003128:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9700;
 800312a:	4b22      	ldr	r3, [pc, #136]	@ (80031b4 <MX_UART4_Init+0x94>)
 800312c:	f242 52e4 	movw	r2, #9700	@ 0x25e4
 8003130:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <MX_UART4_Init+0x94>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003138:	4b1e      	ldr	r3, [pc, #120]	@ (80031b4 <MX_UART4_Init+0x94>)
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800313e:	4b1d      	ldr	r3, [pc, #116]	@ (80031b4 <MX_UART4_Init+0x94>)
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003144:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <MX_UART4_Init+0x94>)
 8003146:	220c      	movs	r2, #12
 8003148:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314a:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <MX_UART4_Init+0x94>)
 800314c:	2200      	movs	r2, #0
 800314e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003150:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <MX_UART4_Init+0x94>)
 8003152:	2200      	movs	r2, #0
 8003154:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003156:	4b17      	ldr	r3, [pc, #92]	@ (80031b4 <MX_UART4_Init+0x94>)
 8003158:	2200      	movs	r2, #0
 800315a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800315c:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <MX_UART4_Init+0x94>)
 800315e:	2200      	movs	r2, #0
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003162:	4b14      	ldr	r3, [pc, #80]	@ (80031b4 <MX_UART4_Init+0x94>)
 8003164:	2200      	movs	r2, #0
 8003166:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003168:	4812      	ldr	r0, [pc, #72]	@ (80031b4 <MX_UART4_Init+0x94>)
 800316a:	f005 fd63 	bl	8008c34 <HAL_UART_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003174:	f000 f9d2 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003178:	2100      	movs	r1, #0
 800317a:	480e      	ldr	r0, [pc, #56]	@ (80031b4 <MX_UART4_Init+0x94>)
 800317c:	f007 fc4b 	bl	800aa16 <HAL_UARTEx_SetTxFifoThreshold>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003186:	f000 f9c9 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800318a:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 800318e:	4809      	ldr	r0, [pc, #36]	@ (80031b4 <MX_UART4_Init+0x94>)
 8003190:	f007 fc7f 	bl	800aa92 <HAL_UARTEx_SetRxFifoThreshold>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 800319a:	f000 f9bf 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800319e:	4805      	ldr	r0, [pc, #20]	@ (80031b4 <MX_UART4_Init+0x94>)
 80031a0:	f007 fc00 	bl	800a9a4 <HAL_UARTEx_DisableFifoMode>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 80031aa:	f000 f9b7 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000804 	.word	0x20000804
 80031b8:	40004c00 	.word	0x40004c00

080031bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031c0:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031c2:	4a24      	ldr	r2, [pc, #144]	@ (8003254 <MX_USART2_UART_Init+0x98>)
 80031c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80031c6:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031c8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80031cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80031ce:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031d8:	2200      	movs	r2, #0
 80031da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80031dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b17      	ldr	r3, [pc, #92]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031f6:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 8003204:	2200      	movs	r2, #0
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003208:	4811      	ldr	r0, [pc, #68]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 800320a:	f005 fd13 	bl	8008c34 <HAL_UART_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003214:	f000 f982 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003218:	2100      	movs	r1, #0
 800321a:	480d      	ldr	r0, [pc, #52]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 800321c:	f007 fbfb 	bl	800aa16 <HAL_UARTEx_SetTxFifoThreshold>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003226:	f000 f979 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800322a:	2100      	movs	r1, #0
 800322c:	4808      	ldr	r0, [pc, #32]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 800322e:	f007 fc30 	bl	800aa92 <HAL_UARTEx_SetRxFifoThreshold>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003238:	f000 f970 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800323c:	4804      	ldr	r0, [pc, #16]	@ (8003250 <MX_USART2_UART_Init+0x94>)
 800323e:	f007 fbb1 	bl	800a9a4 <HAL_UARTEx_DisableFifoMode>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003248:	f000 f968 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200008d0 	.word	0x200008d0
 8003254:	40004400 	.word	0x40004400

08003258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800325e:	4b16      	ldr	r3, [pc, #88]	@ (80032b8 <MX_DMA_Init+0x60>)
 8003260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003262:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <MX_DMA_Init+0x60>)
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	6493      	str	r3, [r2, #72]	@ 0x48
 800326a:	4b13      	ldr	r3, [pc, #76]	@ (80032b8 <MX_DMA_Init+0x60>)
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003276:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <MX_DMA_Init+0x60>)
 8003278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327a:	4a0f      	ldr	r2, [pc, #60]	@ (80032b8 <MX_DMA_Init+0x60>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6493      	str	r3, [r2, #72]	@ 0x48
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <MX_DMA_Init+0x60>)
 8003284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2100      	movs	r1, #0
 8003292:	200b      	movs	r0, #11
 8003294:	f001 feb5 	bl	8005002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003298:	200b      	movs	r0, #11
 800329a:	f001 fecc 	bl	8005036 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	200c      	movs	r0, #12
 80032a4:	f001 fead 	bl	8005002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80032a8:	200c      	movs	r0, #12
 80032aa:	f001 fec4 	bl	8005036 <HAL_NVIC_EnableIRQ>

}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000

080032bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	@ 0x28
 80032c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	60da      	str	r2, [r3, #12]
 80032d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003404 <MX_GPIO_Init+0x148>)
 80032d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d6:	4a4b      	ldr	r2, [pc, #300]	@ (8003404 <MX_GPIO_Init+0x148>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032de:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <MX_GPIO_Init+0x148>)
 80032e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ea:	4b46      	ldr	r3, [pc, #280]	@ (8003404 <MX_GPIO_Init+0x148>)
 80032ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ee:	4a45      	ldr	r2, [pc, #276]	@ (8003404 <MX_GPIO_Init+0x148>)
 80032f0:	f043 0320 	orr.w	r3, r3, #32
 80032f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032f6:	4b43      	ldr	r3, [pc, #268]	@ (8003404 <MX_GPIO_Init+0x148>)
 80032f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003302:	4b40      	ldr	r3, [pc, #256]	@ (8003404 <MX_GPIO_Init+0x148>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003306:	4a3f      	ldr	r2, [pc, #252]	@ (8003404 <MX_GPIO_Init+0x148>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800330e:	4b3d      	ldr	r3, [pc, #244]	@ (8003404 <MX_GPIO_Init+0x148>)
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800331a:	4b3a      	ldr	r3, [pc, #232]	@ (8003404 <MX_GPIO_Init+0x148>)
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	4a39      	ldr	r2, [pc, #228]	@ (8003404 <MX_GPIO_Init+0x148>)
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003326:	4b37      	ldr	r3, [pc, #220]	@ (8003404 <MX_GPIO_Init+0x148>)
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Push_solenoid_Pin, GPIO_PIN_RESET);
 8003332:	2200      	movs	r2, #0
 8003334:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800333c:	f002 fb62 	bl	8005a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pull_solenoid_Pin|Suck_solenoid_Pin, GPIO_PIN_RESET);
 8003340:	2200      	movs	r2, #0
 8003342:	2130      	movs	r1, #48	@ 0x30
 8003344:	4830      	ldr	r0, [pc, #192]	@ (8003408 <MX_GPIO_Init+0x14c>)
 8003346:	f002 fb5d 	bl	8005a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800334a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800334e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003350:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	4619      	mov	r1, r3
 8003360:	4829      	ldr	r0, [pc, #164]	@ (8003408 <MX_GPIO_Init+0x14c>)
 8003362:	f002 f9b5 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Top_Pin Limit_Base_Pin Reed_pull_Pin */
  GPIO_InitStruct.Pin = Limit_Top_Pin|Limit_Base_Pin|Reed_pull_Pin;
 8003366:	23d0      	movs	r3, #208	@ 0xd0
 8003368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800336e:	2302      	movs	r3, #2
 8003370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	4619      	mov	r1, r3
 8003378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800337c:	f002 f9a8 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Push_solenoid_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Push_solenoid_Pin;
 8003380:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8003384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	f107 0314 	add.w	r3, r7, #20
 8003396:	4619      	mov	r1, r3
 8003398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800339c:	f002 f998 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pull_solenoid_Pin Suck_solenoid_Pin */
  GPIO_InitStruct.Pin = Pull_solenoid_Pin|Suck_solenoid_Pin;
 80033a0:	2330      	movs	r3, #48	@ 0x30
 80033a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a4:	2301      	movs	r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2300      	movs	r3, #0
 80033ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	4619      	mov	r1, r3
 80033b6:	4814      	ldr	r0, [pc, #80]	@ (8003408 <MX_GPIO_Init+0x14c>)
 80033b8:	f002 f98a 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Signal_Pin;
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033c4:	2302      	movs	r3, #2
 80033c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Signal_GPIO_Port, &GPIO_InitStruct);
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	4619      	mov	r1, r3
 80033ce:	480e      	ldr	r0, [pc, #56]	@ (8003408 <MX_GPIO_Init+0x14c>)
 80033d0:	f002 f97e 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reed_push_Pin */
  GPIO_InitStruct.Pin = Reed_push_Pin;
 80033d4:	2340      	movs	r3, #64	@ 0x40
 80033d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d8:	2300      	movs	r3, #0
 80033da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033dc:	2302      	movs	r3, #2
 80033de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reed_push_GPIO_Port, &GPIO_InitStruct);
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4619      	mov	r1, r3
 80033e6:	4809      	ldr	r0, [pc, #36]	@ (800340c <MX_GPIO_Init+0x150>)
 80033e8:	f002 f972 	bl	80056d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	2100      	movs	r1, #0
 80033f0:	2028      	movs	r0, #40	@ 0x28
 80033f2:	f001 fe06 	bl	8005002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033f6:	2028      	movs	r0, #40	@ 0x28
 80033f8:	f001 fe1d 	bl	8005036 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033fc:	bf00      	nop
 80033fe:	3728      	adds	r7, #40	@ 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	48000800 	.word	0x48000800
 800340c:	48000400 	.word	0x48000400

08003410 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
		if(htim == &htim5)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a29      	ldr	r2, [pc, #164]	@ (80034c0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d108      	bne.n	8003432 <HAL_TIM_PeriodElapsedCallback+0x22>
			{
			_micros += UINT32_MAX;
 8003420:	4b28      	ldr	r3, [pc, #160]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	1e54      	subs	r4, r2, #1
 8003428:	f143 0500 	adc.w	r5, r3, #0
 800342c:	4b25      	ldr	r3, [pc, #148]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800342e:	e9c3 4500 	strd	r4, r5, [r3]
			}
		if(htim == &htim4)								// 2000 Hz
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a24      	ldr	r2, [pc, #144]	@ (80034c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d13d      	bne.n	80034b6 <HAL_TIM_PeriodElapsedCallback+0xa6>
		{
			if (base.BaseStatus == 2){
 800343a:	4b24      	ldr	r3, [pc, #144]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d10b      	bne.n	800345a <HAL_TIM_PeriodElapsedCallback+0x4a>
				MOTOR_set_duty(&MT, base.MotorHome);
 8003442:	4b22      	ldr	r3, [pc, #136]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003450:	eeb0 0a67 	vmov.f32	s0, s15
 8003454:	481e      	ldr	r0, [pc, #120]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003456:	f7fe fc5f 	bl	8001d18 <MOTOR_set_duty>
			}
			if (ps2.mode == 1){
 800345a:	4b1e      	ldr	r3, [pc, #120]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800345c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800345e:	2b01      	cmp	r3, #1
 8003460:	d113      	bne.n	800348a <HAL_TIM_PeriodElapsedCallback+0x7a>
				MOTOR_set_duty(&MT, ps2.pwmOut);
 8003462:	4b1c      	ldr	r3, [pc, #112]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800346e:	eeb0 0a67 	vmov.f32	s0, s15
 8003472:	4817      	ldr	r0, [pc, #92]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003474:	f7fe fc50 	bl	8001d18 <MOTOR_set_duty>
				if (ps2.pwmOut < 0)
 8003478:	4b16      	ldr	r3, [pc, #88]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800347a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800347c:	2b00      	cmp	r3, #0
 800347e:	da04      	bge.n	800348a <HAL_TIM_PeriodElapsedCallback+0x7a>
				{
					MOTOR_set_duty(&MT, 0);
 8003480:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80034d8 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8003484:	4812      	ldr	r0, [pc, #72]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003486:	f7fe fc47 	bl	8001d18 <MOTOR_set_duty>
				}
			}
			if (ps2.mode == 2){
 800348a:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800348c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800348e:	2b02      	cmp	r3, #2
 8003490:	d111      	bne.n	80034b6 <HAL_TIM_PeriodElapsedCallback+0xa6>
				PID_controller_cascade(&PID_pos, &PID_velo, &AMT, ps2.PIDPos);
 8003492:	4b10      	ldr	r3, [pc, #64]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003494:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8003498:	eeb0 0a67 	vmov.f32	s0, s15
 800349c:	4a0f      	ldr	r2, [pc, #60]	@ (80034dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800349e:	4910      	ldr	r1, [pc, #64]	@ (80034e0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80034a0:	4810      	ldr	r0, [pc, #64]	@ (80034e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80034a2:	f7ff f813 	bl	80024cc <PID_controller_cascade>
				MOTOR_set_duty(&MT, PID_velo.out);
 80034a6:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80034a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80034ac:	eeb0 0a67 	vmov.f32	s0, s15
 80034b0:	4807      	ldr	r0, [pc, #28]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80034b2:	f7fe fc31 	bl	8001d18 <MOTOR_set_duty>
			}
		}
	}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bdb0      	pop	{r4, r5, r7, pc}
 80034be:	bf00      	nop
 80034c0:	200005a0 	.word	0x200005a0
 80034c4:	20001028 	.word	0x20001028
 80034c8:	200004d4 	.word	0x200004d4
 80034cc:	20000284 	.word	0x20000284
 80034d0:	20000a5c 	.word	0x20000a5c
 80034d4:	20000ab0 	.word	0x20000ab0
 80034d8:	00000000 	.word	0x00000000
 80034dc:	20000a78 	.word	0x20000a78
 80034e0:	20000b30 	.word	0x20000b30
 80034e4:	20000268 	.word	0x20000268

080034e8 <micros>:

uint64_t micros()
	{
 80034e8:	b4b0      	push	{r4, r5, r7}
 80034ea:	af00      	add	r7, sp, #0
		return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80034ec:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <micros+0x2c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	2200      	movs	r2, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	4611      	mov	r1, r2
 80034f8:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <micros+0x30>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	1884      	adds	r4, r0, r2
 8003500:	eb41 0503 	adc.w	r5, r1, r3
 8003504:	4622      	mov	r2, r4
 8003506:	462b      	mov	r3, r5
	}
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	bcb0      	pop	{r4, r5, r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	200005a0 	.word	0x200005a0
 8003518:	20001028 	.word	0x20001028

0800351c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003520:	b672      	cpsid	i
}
 8003522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <Error_Handler+0x8>

08003528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352e:	4b0f      	ldr	r3, [pc, #60]	@ (800356c <HAL_MspInit+0x44>)
 8003530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003532:	4a0e      	ldr	r2, [pc, #56]	@ (800356c <HAL_MspInit+0x44>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6613      	str	r3, [r2, #96]	@ 0x60
 800353a:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <HAL_MspInit+0x44>)
 800353c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	607b      	str	r3, [r7, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_MspInit+0x44>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	4a08      	ldr	r2, [pc, #32]	@ (800356c <HAL_MspInit+0x44>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003550:	6593      	str	r3, [r2, #88]	@ 0x58
 8003552:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_MspInit+0x44>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800355e:	f002 fb31 	bl	8005bc4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000

08003570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b09e      	sub	sp, #120	@ 0x78
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	2254      	movs	r2, #84	@ 0x54
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f007 fb0b 	bl	800abac <memset>
  if(hadc->Instance==ADC1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800359e:	d133      	bne.n	8003608 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80035a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80035a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80035aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035ac:	f107 0310 	add.w	r3, r7, #16
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 f845 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80035bc:	f7ff ffae 	bl	800351c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80035c0:	4b13      	ldr	r3, [pc, #76]	@ (8003610 <HAL_ADC_MspInit+0xa0>)
 80035c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c4:	4a12      	ldr	r2, [pc, #72]	@ (8003610 <HAL_ADC_MspInit+0xa0>)
 80035c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035cc:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <HAL_ADC_MspInit+0xa0>)
 80035ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <HAL_ADC_MspInit+0xa0>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003610 <HAL_ADC_MspInit+0xa0>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <HAL_ADC_MspInit+0xa0>)
 80035e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 80035f0:	2301      	movs	r3, #1
 80035f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035f4:	2303      	movs	r3, #3
 80035f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 80035fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003600:	4619      	mov	r1, r3
 8003602:	4804      	ldr	r0, [pc, #16]	@ (8003614 <HAL_ADC_MspInit+0xa4>)
 8003604:	f002 f864 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003608:	bf00      	nop
 800360a:	3778      	adds	r7, #120	@ 0x78
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000
 8003614:	48000800 	.word	0x48000800

08003618 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	@ 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003638:	d128      	bne.n	800368c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800363a:	4b16      	ldr	r3, [pc, #88]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x7c>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	4a15      	ldr	r2, [pc, #84]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	6593      	str	r3, [r2, #88]	@ 0x58
 8003646:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	4a0f      	ldr	r2, [pc, #60]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800365e:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800366a:	2303      	movs	r3, #3
 800366c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003676:	2300      	movs	r3, #0
 8003678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800367a:	2301      	movs	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367e:	f107 0314 	add.w	r3, r7, #20
 8003682:	4619      	mov	r1, r3
 8003684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003688:	f002 f822 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800368c:	bf00      	nop
 800368e:	3728      	adds	r7, #40	@ 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000

08003698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a39      	ldr	r2, [pc, #228]	@ (800378c <HAL_TIM_Base_MspInit+0xf4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10c      	bne.n	80036c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036aa:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	4a38      	ldr	r2, [pc, #224]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b6:	4b36      	ldr	r3, [pc, #216]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80036c2:	e05e      	b.n	8003782 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a32      	ldr	r2, [pc, #200]	@ (8003794 <HAL_TIM_Base_MspInit+0xfc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d114      	bne.n	80036f8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036ce:	4b30      	ldr	r3, [pc, #192]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036da:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80036e6:	2200      	movs	r2, #0
 80036e8:	2100      	movs	r1, #0
 80036ea:	201e      	movs	r0, #30
 80036ec:	f001 fc89 	bl	8005002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036f0:	201e      	movs	r0, #30
 80036f2:	f001 fca0 	bl	8005036 <HAL_NVIC_EnableIRQ>
}
 80036f6:	e044      	b.n	8003782 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a26      	ldr	r2, [pc, #152]	@ (8003798 <HAL_TIM_Base_MspInit+0x100>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d114      	bne.n	800372c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003702:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	4a22      	ldr	r2, [pc, #136]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 8003708:	f043 0308 	orr.w	r3, r3, #8
 800370c:	6593      	str	r3, [r2, #88]	@ 0x58
 800370e:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	2100      	movs	r1, #0
 800371e:	2032      	movs	r0, #50	@ 0x32
 8003720:	f001 fc6f 	bl	8005002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003724:	2032      	movs	r0, #50	@ 0x32
 8003726:	f001 fc86 	bl	8005036 <HAL_NVIC_EnableIRQ>
}
 800372a:	e02a      	b.n	8003782 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1a      	ldr	r2, [pc, #104]	@ (800379c <HAL_TIM_Base_MspInit+0x104>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10c      	bne.n	8003750 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003736:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	4a15      	ldr	r2, [pc, #84]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 800373c:	f043 0310 	orr.w	r3, r3, #16
 8003740:	6593      	str	r3, [r2, #88]	@ 0x58
 8003742:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]
}
 800374e:	e018      	b.n	8003782 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_TIM_Base_MspInit+0x108>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d113      	bne.n	8003782 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	4a0c      	ldr	r2, [pc, #48]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 8003760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003764:	6613      	str	r3, [r2, #96]	@ 0x60
 8003766:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <HAL_TIM_Base_MspInit+0xf8>)
 8003768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	2100      	movs	r1, #0
 8003776:	2019      	movs	r0, #25
 8003778:	f001 fc43 	bl	8005002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800377c:	2019      	movs	r0, #25
 800377e:	f001 fc5a 	bl	8005036 <HAL_NVIC_EnableIRQ>
}
 8003782:	bf00      	nop
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40000400 	.word	0x40000400
 8003790:	40021000 	.word	0x40021000
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40001000 	.word	0x40001000
 80037a0:	40014400 	.word	0x40014400

080037a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a11      	ldr	r2, [pc, #68]	@ (8003808 <HAL_TIM_MspPostInit+0x64>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d11b      	bne.n	80037fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	4b11      	ldr	r3, [pc, #68]	@ (800380c <HAL_TIM_MspPostInit+0x68>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ca:	4a10      	ldr	r2, [pc, #64]	@ (800380c <HAL_TIM_MspPostInit+0x68>)
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037d2:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <HAL_TIM_MspPostInit+0x68>)
 80037d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037de:	2330      	movs	r3, #48	@ 0x30
 80037e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ee:	2302      	movs	r3, #2
 80037f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f2:	f107 030c 	add.w	r3, r7, #12
 80037f6:	4619      	mov	r1, r3
 80037f8:	4805      	ldr	r0, [pc, #20]	@ (8003810 <HAL_TIM_MspPostInit+0x6c>)
 80037fa:	f001 ff69 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037fe:	bf00      	nop
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40000400 	.word	0x40000400
 800380c:	40021000 	.word	0x40021000
 8003810:	48000400 	.word	0x48000400

08003814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b0a0      	sub	sp, #128	@ 0x80
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800382c:	f107 0318 	add.w	r3, r7, #24
 8003830:	2254      	movs	r2, #84	@ 0x54
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f007 f9b9 	bl	800abac <memset>
  if(huart->Instance==UART4)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6b      	ldr	r2, [pc, #428]	@ (80039ec <HAL_UART_MspInit+0x1d8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d137      	bne.n	80038b4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003844:	2308      	movs	r3, #8
 8003846:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003848:	2300      	movs	r3, #0
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800384c:	f107 0318 	add.w	r3, r7, #24
 8003850:	4618      	mov	r0, r3
 8003852:	f002 fef5 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800385c:	f7ff fe5e 	bl	800351c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003860:	4b63      	ldr	r3, [pc, #396]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003864:	4a62      	ldr	r2, [pc, #392]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 8003866:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800386a:	6593      	str	r3, [r2, #88]	@ 0x58
 800386c:	4b60      	ldr	r3, [pc, #384]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003878:	4b5d      	ldr	r3, [pc, #372]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 800387a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387c:	4a5c      	ldr	r2, [pc, #368]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 800387e:	f043 0304 	orr.w	r3, r3, #4
 8003882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003884:	4b5a      	ldr	r3, [pc, #360]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 8003886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003890:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003894:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003896:	2302      	movs	r3, #2
 8003898:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389e:	2300      	movs	r3, #0
 80038a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80038a2:	2305      	movs	r3, #5
 80038a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80038aa:	4619      	mov	r1, r3
 80038ac:	4851      	ldr	r0, [pc, #324]	@ (80039f4 <HAL_UART_MspInit+0x1e0>)
 80038ae:	f001 ff0f 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038b2:	e097      	b.n	80039e4 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a4f      	ldr	r2, [pc, #316]	@ (80039f8 <HAL_UART_MspInit+0x1e4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	f040 8092 	bne.w	80039e4 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038c0:	2302      	movs	r3, #2
 80038c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038c4:	2300      	movs	r3, #0
 80038c6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038c8:	f107 0318 	add.w	r3, r7, #24
 80038cc:	4618      	mov	r0, r3
 80038ce:	f002 feb7 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80038d8:	f7ff fe20 	bl	800351c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038dc:	4b44      	ldr	r3, [pc, #272]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	4a43      	ldr	r2, [pc, #268]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 80038e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038e8:	4b41      	ldr	r3, [pc, #260]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f4:	4b3e      	ldr	r3, [pc, #248]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f8:	4a3d      	ldr	r2, [pc, #244]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003900:	4b3b      	ldr	r3, [pc, #236]	@ (80039f0 <HAL_UART_MspInit+0x1dc>)
 8003902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800390c:	230c      	movs	r3, #12
 800390e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003910:	2302      	movs	r3, #2
 8003912:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003918:	2300      	movs	r3, #0
 800391a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800391c:	2307      	movs	r3, #7
 800391e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003920:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003924:	4619      	mov	r1, r3
 8003926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800392a:	f001 fed1 	bl	80056d0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800392e:	4b33      	ldr	r3, [pc, #204]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 8003930:	4a33      	ldr	r2, [pc, #204]	@ (8003a00 <HAL_UART_MspInit+0x1ec>)
 8003932:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003934:	4b31      	ldr	r3, [pc, #196]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 8003936:	221b      	movs	r2, #27
 8003938:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800393a:	4b30      	ldr	r3, [pc, #192]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 800393c:	2210      	movs	r2, #16
 800393e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003940:	4b2e      	ldr	r3, [pc, #184]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003946:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 8003948:	2280      	movs	r2, #128	@ 0x80
 800394a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 800394e:	2200      	movs	r2, #0
 8003950:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003952:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003958:	4b28      	ldr	r3, [pc, #160]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800395e:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 8003960:	2200      	movs	r2, #0
 8003962:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003964:	4825      	ldr	r0, [pc, #148]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 8003966:	f001 fb81 	bl	800506c <HAL_DMA_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_UART_MspInit+0x160>
      Error_Handler();
 8003970:	f7ff fdd4 	bl	800351c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a21      	ldr	r2, [pc, #132]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 8003978:	67da      	str	r2, [r3, #124]	@ 0x7c
 800397a:	4a20      	ldr	r2, [pc, #128]	@ (80039fc <HAL_UART_MspInit+0x1e8>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003980:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 8003982:	4a21      	ldr	r2, [pc, #132]	@ (8003a08 <HAL_UART_MspInit+0x1f4>)
 8003984:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003986:	4b1f      	ldr	r3, [pc, #124]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 8003988:	221a      	movs	r2, #26
 800398a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800398c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003992:	4b1c      	ldr	r3, [pc, #112]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003998:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 800399a:	2280      	movs	r2, #128	@ 0x80
 800399c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800399e:	4b19      	ldr	r3, [pc, #100]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a4:	4b17      	ldr	r3, [pc, #92]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80039aa:	4b16      	ldr	r3, [pc, #88]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039b0:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80039b6:	4813      	ldr	r0, [pc, #76]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 80039b8:	f001 fb58 	bl	800506c <HAL_DMA_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 80039c2:	f7ff fdab 	bl	800351c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 80039ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80039ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003a04 <HAL_UART_MspInit+0x1f0>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	2026      	movs	r0, #38	@ 0x26
 80039da:	f001 fb12 	bl	8005002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039de:	2026      	movs	r0, #38	@ 0x26
 80039e0:	f001 fb29 	bl	8005036 <HAL_NVIC_EnableIRQ>
}
 80039e4:	bf00      	nop
 80039e6:	3780      	adds	r7, #128	@ 0x80
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40004c00 	.word	0x40004c00
 80039f0:	40021000 	.word	0x40021000
 80039f4:	48000800 	.word	0x48000800
 80039f8:	40004400 	.word	0x40004400
 80039fc:	2000099c 	.word	0x2000099c
 8003a00:	40020008 	.word	0x40020008
 8003a04:	200009fc 	.word	0x200009fc
 8003a08:	4002001c 	.word	0x4002001c

08003a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a10:	bf00      	nop
 8003a12:	e7fd      	b.n	8003a10 <NMI_Handler+0x4>

08003a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a18:	bf00      	nop
 8003a1a:	e7fd      	b.n	8003a18 <HardFault_Handler+0x4>

08003a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a20:	bf00      	nop
 8003a22:	e7fd      	b.n	8003a20 <MemManage_Handler+0x4>

08003a24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <BusFault_Handler+0x4>

08003a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <UsageFault_Handler+0x4>

08003a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a62:	f000 f8d5 	bl	8003c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a70:	4802      	ldr	r0, [pc, #8]	@ (8003a7c <DMA1_Channel1_IRQHandler+0x10>)
 8003a72:	f001 fcde 	bl	8005432 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	2000099c 	.word	0x2000099c

08003a80 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a84:	4802      	ldr	r0, [pc, #8]	@ (8003a90 <DMA1_Channel2_IRQHandler+0x10>)
 8003a86:	f001 fcd4 	bl	8005432 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200009fc 	.word	0x200009fc

08003a94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003a98:	4802      	ldr	r0, [pc, #8]	@ (8003aa4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003a9a:	f003 fd71 	bl	8007580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000738 	.word	0x20000738

08003aa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003aac:	4802      	ldr	r0, [pc, #8]	@ (8003ab8 <TIM4_IRQHandler+0x10>)
 8003aae:	f003 fd67 	bl	8007580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200004d4 	.word	0x200004d4

08003abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ac0:	4802      	ldr	r0, [pc, #8]	@ (8003acc <USART2_IRQHandler+0x10>)
 8003ac2:	f005 fb65 	bl	8009190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200008d0 	.word	0x200008d0

08003ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003ad4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003ad8:	f001 ffac 	bl	8005a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ae4:	4802      	ldr	r0, [pc, #8]	@ (8003af0 <TIM5_IRQHandler+0x10>)
 8003ae6:	f003 fd4b 	bl	8007580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	200005a0 	.word	0x200005a0

08003af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003af8:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <SystemInit+0x20>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afe:	4a05      	ldr	r2, [pc, #20]	@ (8003b14 <SystemInit+0x20>)
 8003b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b18:	480d      	ldr	r0, [pc, #52]	@ (8003b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b1c:	f7ff ffea 	bl	8003af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b20:	480c      	ldr	r0, [pc, #48]	@ (8003b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b22:	490d      	ldr	r1, [pc, #52]	@ (8003b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b24:	4a0d      	ldr	r2, [pc, #52]	@ (8003b5c <LoopForever+0xe>)
  movs r3, #0
 8003b26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b28:	e002      	b.n	8003b30 <LoopCopyDataInit>

08003b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b2e:	3304      	adds	r3, #4

08003b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b34:	d3f9      	bcc.n	8003b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b36:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b38:	4c0a      	ldr	r4, [pc, #40]	@ (8003b64 <LoopForever+0x16>)
  movs r3, #0
 8003b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b3c:	e001      	b.n	8003b42 <LoopFillZerobss>

08003b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b40:	3204      	adds	r2, #4

08003b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b44:	d3fb      	bcc.n	8003b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b46:	f007 f839 	bl	800abbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b4a:	f7fe fed7 	bl	80028fc <main>

08003b4e <LoopForever>:

LoopForever:
    b LoopForever
 8003b4e:	e7fe      	b.n	8003b4e <LoopForever>
  ldr   r0, =_estack
 8003b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b58:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8003b5c:	0800aca0 	.word	0x0800aca0
  ldr r2, =_sbss
 8003b60:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003b64:	200011d4 	.word	0x200011d4

08003b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b68:	e7fe      	b.n	8003b68 <ADC1_2_IRQHandler>

08003b6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b74:	2003      	movs	r0, #3
 8003b76:	f001 fa39 	bl	8004fec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f000 f80e 	bl	8003b9c <HAL_InitTick>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	71fb      	strb	r3, [r7, #7]
 8003b8a:	e001      	b.n	8003b90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b8c:	f7ff fccc 	bl	8003528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b90:	79fb      	ldrb	r3, [r7, #7]

}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003ba8:	4b16      	ldr	r3, [pc, #88]	@ (8003c04 <HAL_InitTick+0x68>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d022      	beq.n	8003bf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003bb0:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <HAL_InitTick+0x6c>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <HAL_InitTick+0x68>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 fa44 	bl	8005052 <HAL_SYSTICK_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10f      	bne.n	8003bf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b0f      	cmp	r3, #15
 8003bd4:	d809      	bhi.n	8003bea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295
 8003bde:	f001 fa10 	bl	8005002 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003be2:	4a0a      	ldr	r2, [pc, #40]	@ (8003c0c <HAL_InitTick+0x70>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e007      	b.n	8003bfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
 8003bee:	e004      	b.n	8003bfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e001      	b.n	8003bfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000238 	.word	0x20000238
 8003c08:	20000230 	.word	0x20000230
 8003c0c:	20000234 	.word	0x20000234

08003c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c14:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <HAL_IncTick+0x1c>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <HAL_IncTick+0x20>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a03      	ldr	r2, [pc, #12]	@ (8003c2c <HAL_IncTick+0x1c>)
 8003c20:	6013      	str	r3, [r2, #0]
}
 8003c22:	bf00      	nop
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	200011d0 	.word	0x200011d0
 8003c30:	20000238 	.word	0x20000238

08003c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return uwTick;
 8003c38:	4b03      	ldr	r3, [pc, #12]	@ (8003c48 <HAL_GetTick+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	200011d0 	.word	0x200011d0

08003c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	609a      	str	r2, [r3, #8]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3360      	adds	r3, #96	@ 0x60
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <LL_ADC_SetOffset+0x44>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	03fff000 	.word	0x03fff000

08003cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3360      	adds	r3, #96	@ 0x60
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3360      	adds	r3, #96	@ 0x60
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b087      	sub	sp, #28
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3360      	adds	r3, #96	@ 0x60
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3360      	adds	r3, #96	@ 0x60
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	615a      	str	r2, [r3, #20]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3330      	adds	r3, #48	@ 0x30
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	4413      	add	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	211f      	movs	r1, #31
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	401a      	ands	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	f003 011f 	and.w	r1, r3, #31
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	431a      	orrs	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3314      	adds	r3, #20
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	0e5b      	lsrs	r3, r3, #25
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	4413      	add	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	0d1b      	lsrs	r3, r3, #20
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2107      	movs	r1, #7
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	401a      	ands	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	0d1b      	lsrs	r3, r3, #20
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	401a      	ands	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0318 	and.w	r3, r3, #24
 8003ec2:	4908      	ldr	r1, [pc, #32]	@ (8003ee4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ec4:	40d9      	lsrs	r1, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	400b      	ands	r3, r1
 8003eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	0007ffff 	.word	0x0007ffff

08003ee8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003ef8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6093      	str	r3, [r2, #8]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f20:	d101      	bne.n	8003f26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003f44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f70:	d101      	bne.n	8003f76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <LL_ADC_IsEnabled+0x18>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <LL_ADC_IsEnabled+0x1a>
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d101      	bne.n	8003fc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d101      	bne.n	8003fe8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e1a9      	b.n	8004366 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff faa5 	bl	8003570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff67 	bl	8003f0c <LL_ADC_IsDeepPowerDownEnabled>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ff4d 	bl	8003ee8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ff82 	bl	8003f5c <LL_ADC_IsInternalRegulatorEnabled>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d115      	bne.n	800408a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ff66 	bl	8003f34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004068:	4b9c      	ldr	r3, [pc, #624]	@ (80042dc <HAL_ADC_Init+0x2e4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	099b      	lsrs	r3, r3, #6
 800406e:	4a9c      	ldr	r2, [pc, #624]	@ (80042e0 <HAL_ADC_Init+0x2e8>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	3301      	adds	r3, #1
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800407c:	e002      	b.n	8004084 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b01      	subs	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f9      	bne.n	800407e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff64 	bl	8003f5c <LL_ADC_IsInternalRegulatorEnabled>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10d      	bne.n	80040b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409e:	f043 0210 	orr.w	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff75 	bl	8003faa <LL_ADC_REG_IsConversionOngoing>
 80040c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 8142 	bne.w	8004354 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f040 813e 	bne.w	8004354 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040e0:	f043 0202 	orr.w	r2, r3, #2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff49 	bl	8003f84 <LL_ADC_IsEnabled>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d141      	bne.n	800417c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004100:	d004      	beq.n	800410c <HAL_ADC_Init+0x114>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a77      	ldr	r2, [pc, #476]	@ (80042e4 <HAL_ADC_Init+0x2ec>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d10f      	bne.n	800412c <HAL_ADC_Init+0x134>
 800410c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004110:	f7ff ff38 	bl	8003f84 <LL_ADC_IsEnabled>
 8004114:	4604      	mov	r4, r0
 8004116:	4873      	ldr	r0, [pc, #460]	@ (80042e4 <HAL_ADC_Init+0x2ec>)
 8004118:	f7ff ff34 	bl	8003f84 <LL_ADC_IsEnabled>
 800411c:	4603      	mov	r3, r0
 800411e:	4323      	orrs	r3, r4
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e012      	b.n	8004152 <HAL_ADC_Init+0x15a>
 800412c:	486e      	ldr	r0, [pc, #440]	@ (80042e8 <HAL_ADC_Init+0x2f0>)
 800412e:	f7ff ff29 	bl	8003f84 <LL_ADC_IsEnabled>
 8004132:	4604      	mov	r4, r0
 8004134:	486d      	ldr	r0, [pc, #436]	@ (80042ec <HAL_ADC_Init+0x2f4>)
 8004136:	f7ff ff25 	bl	8003f84 <LL_ADC_IsEnabled>
 800413a:	4603      	mov	r3, r0
 800413c:	431c      	orrs	r4, r3
 800413e:	486c      	ldr	r0, [pc, #432]	@ (80042f0 <HAL_ADC_Init+0x2f8>)
 8004140:	f7ff ff20 	bl	8003f84 <LL_ADC_IsEnabled>
 8004144:	4603      	mov	r3, r0
 8004146:	4323      	orrs	r3, r4
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d012      	beq.n	800417c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800415e:	d004      	beq.n	800416a <HAL_ADC_Init+0x172>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a5f      	ldr	r2, [pc, #380]	@ (80042e4 <HAL_ADC_Init+0x2ec>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_ADC_Init+0x176>
 800416a:	4a62      	ldr	r2, [pc, #392]	@ (80042f4 <HAL_ADC_Init+0x2fc>)
 800416c:	e000      	b.n	8004170 <HAL_ADC_Init+0x178>
 800416e:	4a62      	ldr	r2, [pc, #392]	@ (80042f8 <HAL_ADC_Init+0x300>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f7ff fd68 	bl	8003c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7f5b      	ldrb	r3, [r3, #29]
 8004180:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004186:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800418c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004192:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800419a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d106      	bne.n	80041b8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	045b      	lsls	r3, r3, #17
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d009      	beq.n	80041d4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	4b48      	ldr	r3, [pc, #288]	@ (80042fc <HAL_ADC_Init+0x304>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	69b9      	ldr	r1, [r7, #24]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fee4 	bl	8003fd0 <LL_ADC_INJ_IsConversionOngoing>
 8004208:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d17f      	bne.n	8004310 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d17c      	bne.n	8004310 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800421a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004222:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004232:	f023 0302 	bic.w	r3, r3, #2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	69b9      	ldr	r1, [r7, #24]
 800423c:	430b      	orrs	r3, r1
 800423e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d017      	beq.n	8004278 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004256:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004260:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004264:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6911      	ldr	r1, [r2, #16]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	430b      	orrs	r3, r1
 8004272:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004276:	e013      	b.n	80042a0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004286:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004298:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800429c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d12a      	bne.n	8004300 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80042b4:	f023 0304 	bic.w	r3, r3, #4
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042c0:	4311      	orrs	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042c6:	4311      	orrs	r1, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042cc:	430a      	orrs	r2, r1
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	611a      	str	r2, [r3, #16]
 80042da:	e019      	b.n	8004310 <HAL_ADC_Init+0x318>
 80042dc:	20000230 	.word	0x20000230
 80042e0:	053e2d63 	.word	0x053e2d63
 80042e4:	50000100 	.word	0x50000100
 80042e8:	50000400 	.word	0x50000400
 80042ec:	50000500 	.word	0x50000500
 80042f0:	50000600 	.word	0x50000600
 80042f4:	50000300 	.word	0x50000300
 80042f8:	50000700 	.word	0x50000700
 80042fc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d10c      	bne.n	8004332 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	f023 010f 	bic.w	r1, r3, #15
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	1e5a      	subs	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004330:	e007      	b.n	8004342 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 020f 	bic.w	r2, r2, #15
 8004340:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004352:	e007      	b.n	8004364 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004358:	f043 0210 	orr.w	r2, r3, #16
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004364:	7ffb      	ldrb	r3, [r7, #31]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3724      	adds	r7, #36	@ 0x24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd90      	pop	{r4, r7, pc}
 800436e:	bf00      	nop

08004370 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b0b6      	sub	sp, #216	@ 0xd8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800438a:	2b01      	cmp	r3, #1
 800438c:	d102      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x24>
 800438e:	2302      	movs	r3, #2
 8004390:	f000 bc13 	b.w	8004bba <HAL_ADC_ConfigChannel+0x84a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fe02 	bl	8003faa <LL_ADC_REG_IsConversionOngoing>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 83f3 	bne.w	8004b94 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f7ff fd18 	bl	8003df0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fdf0 	bl	8003faa <LL_ADC_REG_IsConversionOngoing>
 80043ca:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fdfc 	bl	8003fd0 <LL_ADC_INJ_IsConversionOngoing>
 80043d8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 81d9 	bne.w	8004798 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f040 81d4 	bne.w	8004798 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f8:	d10f      	bne.n	800441a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	4619      	mov	r1, r3
 8004406:	f7ff fd1f 	bl	8003e48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fcd9 	bl	8003dca <LL_ADC_SetSamplingTimeCommonConfig>
 8004418:	e00e      	b.n	8004438 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	461a      	mov	r2, r3
 8004428:	f7ff fd0e 	bl	8003e48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fcc9 	bl	8003dca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	08db      	lsrs	r3, r3, #3
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b04      	cmp	r3, #4
 8004458:	d022      	beq.n	80044a0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6919      	ldr	r1, [r3, #16]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800446a:	f7ff fc23 	bl	8003cb4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6919      	ldr	r1, [r3, #16]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	461a      	mov	r2, r3
 800447c:	f7ff fc6f 	bl	8003d5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800448c:	2b01      	cmp	r3, #1
 800448e:	d102      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x126>
 8004490:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004494:	e000      	b.n	8004498 <HAL_ADC_ConfigChannel+0x128>
 8004496:	2300      	movs	r3, #0
 8004498:	461a      	mov	r2, r3
 800449a:	f7ff fc7b 	bl	8003d94 <LL_ADC_SetOffsetSaturation>
 800449e:	e17b      	b.n	8004798 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fc28 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x15c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fc1d 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	0e9b      	lsrs	r3, r3, #26
 80044c6:	f003 021f 	and.w	r2, r3, #31
 80044ca:	e01e      	b.n	800450a <HAL_ADC_ConfigChannel+0x19a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fc12 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80044d8:	4603      	mov	r3, r0
 80044da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80044fa:	2320      	movs	r3, #32
 80044fc:	e004      	b.n	8004508 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80044fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
 8004508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004512:	2b00      	cmp	r3, #0
 8004514:	d105      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x1b2>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	0e9b      	lsrs	r3, r3, #26
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	e018      	b.n	8004554 <HAL_ADC_ConfigChannel+0x1e4>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800453a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800453e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004546:	2320      	movs	r3, #32
 8004548:	e004      	b.n	8004554 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800454a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004554:	429a      	cmp	r2, r3
 8004556:	d106      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2200      	movs	r2, #0
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fbe1 	bl	8003d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2101      	movs	r1, #1
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fbc5 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004572:	4603      	mov	r3, r0
 8004574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x222>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fbba 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004588:	4603      	mov	r3, r0
 800458a:	0e9b      	lsrs	r3, r3, #26
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	e01e      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x260>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fbaf 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 800459e:	4603      	mov	r3, r0
 80045a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045a8:	fa93 f3a3 	rbit	r3, r3
 80045ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80045b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80045b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80045c0:	2320      	movs	r3, #32
 80045c2:	e004      	b.n	80045ce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80045c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x278>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	0e9b      	lsrs	r3, r3, #26
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	e018      	b.n	800461a <HAL_ADC_ConfigChannel+0x2aa>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045f4:	fa93 f3a3 	rbit	r3, r3
 80045f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80045fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004600:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004604:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800460c:	2320      	movs	r3, #32
 800460e:	e004      	b.n	800461a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004614:	fab3 f383 	clz	r3, r3
 8004618:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800461a:	429a      	cmp	r2, r3
 800461c:	d106      	bne.n	800462c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2200      	movs	r2, #0
 8004624:	2101      	movs	r1, #1
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fb7e 	bl	8003d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2102      	movs	r1, #2
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fb62 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004638:	4603      	mov	r3, r0
 800463a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x2e8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2102      	movs	r1, #2
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fb57 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 800464e:	4603      	mov	r3, r0
 8004650:	0e9b      	lsrs	r3, r3, #26
 8004652:	f003 021f 	and.w	r2, r3, #31
 8004656:	e01e      	b.n	8004696 <HAL_ADC_ConfigChannel+0x326>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2102      	movs	r1, #2
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fb4c 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004664:	4603      	mov	r3, r0
 8004666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004676:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800467a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800467e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004686:	2320      	movs	r3, #32
 8004688:	e004      	b.n	8004694 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800468a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800468e:	fab3 f383 	clz	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d105      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x33e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	0e9b      	lsrs	r3, r3, #26
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	e016      	b.n	80046dc <HAL_ADC_ConfigChannel+0x36c>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80046c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80046c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80046ce:	2320      	movs	r3, #32
 80046d0:	e004      	b.n	80046dc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80046d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046dc:	429a      	cmp	r2, r3
 80046de:	d106      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2200      	movs	r2, #0
 80046e6:	2102      	movs	r1, #2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fb1d 	bl	8003d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2103      	movs	r1, #3
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fb01 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <HAL_ADC_ConfigChannel+0x3aa>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2103      	movs	r1, #3
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff faf6 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004710:	4603      	mov	r3, r0
 8004712:	0e9b      	lsrs	r3, r3, #26
 8004714:	f003 021f 	and.w	r2, r3, #31
 8004718:	e017      	b.n	800474a <HAL_ADC_ConfigChannel+0x3da>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2103      	movs	r1, #3
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff faeb 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004726:	4603      	mov	r3, r0
 8004728:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800472c:	fa93 f3a3 	rbit	r3, r3
 8004730:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004732:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004734:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800473c:	2320      	movs	r3, #32
 800473e:	e003      	b.n	8004748 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004742:	fab3 f383 	clz	r3, r3
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x3f2>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	0e9b      	lsrs	r3, r3, #26
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	e011      	b.n	8004786 <HAL_ADC_ConfigChannel+0x416>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004772:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800477a:	2320      	movs	r3, #32
 800477c:	e003      	b.n	8004786 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800477e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004780:	fab3 f383 	clz	r3, r3
 8004784:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004786:	429a      	cmp	r2, r3
 8004788:	d106      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2200      	movs	r2, #0
 8004790:	2103      	movs	r1, #3
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fac8 	bl	8003d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fbf1 	bl	8003f84 <LL_ADC_IsEnabled>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f040 813d 	bne.w	8004a24 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f7ff fb72 	bl	8003ea0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4aa2      	ldr	r2, [pc, #648]	@ (8004a4c <HAL_ADC_ConfigChannel+0x6dc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	f040 812e 	bne.w	8004a24 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x480>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0e9b      	lsrs	r3, r3, #26
 80047de:	3301      	adds	r3, #1
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	2b09      	cmp	r3, #9
 80047e6:	bf94      	ite	ls
 80047e8:	2301      	movls	r3, #1
 80047ea:	2300      	movhi	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e019      	b.n	8004824 <HAL_ADC_ConfigChannel+0x4b4>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80047fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004800:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004802:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e003      	b.n	8004814 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800480c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3301      	adds	r3, #1
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2b09      	cmp	r3, #9
 800481c:	bf94      	ite	ls
 800481e:	2301      	movls	r3, #1
 8004820:	2300      	movhi	r3, #0
 8004822:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004824:	2b00      	cmp	r3, #0
 8004826:	d079      	beq.n	800491c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004830:	2b00      	cmp	r3, #0
 8004832:	d107      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x4d4>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	0e9b      	lsrs	r3, r3, #26
 800483a:	3301      	adds	r3, #1
 800483c:	069b      	lsls	r3, r3, #26
 800483e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004842:	e015      	b.n	8004870 <HAL_ADC_ConfigChannel+0x500>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800484c:	fa93 f3a3 	rbit	r3, r3
 8004850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004854:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800485c:	2320      	movs	r3, #32
 800485e:	e003      	b.n	8004868 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	3301      	adds	r3, #1
 800486a:	069b      	lsls	r3, r3, #26
 800486c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x520>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	0e9b      	lsrs	r3, r3, #26
 8004882:	3301      	adds	r3, #1
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2101      	movs	r1, #1
 800488a:	fa01 f303 	lsl.w	r3, r1, r3
 800488e:	e017      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x550>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800489e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80048a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80048a8:	2320      	movs	r3, #32
 80048aa:	e003      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80048ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	3301      	adds	r3, #1
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2101      	movs	r1, #1
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	ea42 0103 	orr.w	r1, r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x576>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0e9b      	lsrs	r3, r3, #26
 80048d6:	3301      	adds	r3, #1
 80048d8:	f003 021f 	and.w	r2, r3, #31
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	051b      	lsls	r3, r3, #20
 80048e4:	e018      	b.n	8004918 <HAL_ADC_ConfigChannel+0x5a8>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80048f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80048f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80048fe:	2320      	movs	r3, #32
 8004900:	e003      	b.n	800490a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004904:	fab3 f383 	clz	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	3301      	adds	r3, #1
 800490c:	f003 021f 	and.w	r2, r3, #31
 8004910:	4613      	mov	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	4413      	add	r3, r2
 8004916:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004918:	430b      	orrs	r3, r1
 800491a:	e07e      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004924:	2b00      	cmp	r3, #0
 8004926:	d107      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x5c8>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	0e9b      	lsrs	r3, r3, #26
 800492e:	3301      	adds	r3, #1
 8004930:	069b      	lsls	r3, r3, #26
 8004932:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004936:	e015      	b.n	8004964 <HAL_ADC_ConfigChannel+0x5f4>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004948:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004950:	2320      	movs	r3, #32
 8004952:	e003      	b.n	800495c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004956:	fab3 f383 	clz	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	3301      	adds	r3, #1
 800495e:	069b      	lsls	r3, r3, #26
 8004960:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x614>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	0e9b      	lsrs	r3, r3, #26
 8004976:	3301      	adds	r3, #1
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2101      	movs	r1, #1
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	e017      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x644>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	fa93 f3a3 	rbit	r3, r3
 8004990:	61fb      	str	r3, [r7, #28]
  return result;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800499c:	2320      	movs	r3, #32
 800499e:	e003      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	3301      	adds	r3, #1
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	2101      	movs	r1, #1
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	ea42 0103 	orr.w	r1, r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10d      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x670>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0e9b      	lsrs	r3, r3, #26
 80049ca:	3301      	adds	r3, #1
 80049cc:	f003 021f 	and.w	r2, r3, #31
 80049d0:	4613      	mov	r3, r2
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4413      	add	r3, r2
 80049d6:	3b1e      	subs	r3, #30
 80049d8:	051b      	lsls	r3, r3, #20
 80049da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049de:	e01b      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x6a8>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	613b      	str	r3, [r7, #16]
  return result;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80049f8:	2320      	movs	r3, #32
 80049fa:	e003      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	3301      	adds	r3, #1
 8004a06:	f003 021f 	and.w	r2, r3, #31
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4413      	add	r3, r2
 8004a10:	3b1e      	subs	r3, #30
 8004a12:	051b      	lsls	r3, r3, #20
 8004a14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f7ff fa12 	bl	8003e48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <HAL_ADC_ConfigChannel+0x6e0>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80be 	beq.w	8004bae <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a3a:	d004      	beq.n	8004a46 <HAL_ADC_ConfigChannel+0x6d6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a04      	ldr	r2, [pc, #16]	@ (8004a54 <HAL_ADC_ConfigChannel+0x6e4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d10a      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x6ec>
 8004a46:	4b04      	ldr	r3, [pc, #16]	@ (8004a58 <HAL_ADC_ConfigChannel+0x6e8>)
 8004a48:	e009      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x6ee>
 8004a4a:	bf00      	nop
 8004a4c:	407f0000 	.word	0x407f0000
 8004a50:	80080000 	.word	0x80080000
 8004a54:	50000100 	.word	0x50000100
 8004a58:	50000300 	.word	0x50000300
 8004a5c:	4b59      	ldr	r3, [pc, #356]	@ (8004bc4 <HAL_ADC_ConfigChannel+0x854>)
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff f91a 	bl	8003c98 <LL_ADC_GetCommonPathInternalCh>
 8004a64:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a56      	ldr	r2, [pc, #344]	@ (8004bc8 <HAL_ADC_ConfigChannel+0x858>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0x70c>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a55      	ldr	r2, [pc, #340]	@ (8004bcc <HAL_ADC_ConfigChannel+0x85c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d13a      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d134      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a90:	d005      	beq.n	8004a9e <HAL_ADC_ConfigChannel+0x72e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a4e      	ldr	r2, [pc, #312]	@ (8004bd0 <HAL_ADC_ConfigChannel+0x860>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	f040 8085 	bne.w	8004ba8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aa6:	d004      	beq.n	8004ab2 <HAL_ADC_ConfigChannel+0x742>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a49      	ldr	r2, [pc, #292]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x864>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_ADC_ConfigChannel+0x746>
 8004ab2:	4a49      	ldr	r2, [pc, #292]	@ (8004bd8 <HAL_ADC_ConfigChannel+0x868>)
 8004ab4:	e000      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x748>
 8004ab6:	4a43      	ldr	r2, [pc, #268]	@ (8004bc4 <HAL_ADC_ConfigChannel+0x854>)
 8004ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004abc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f7ff f8d5 	bl	8003c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ac8:	4b44      	ldr	r3, [pc, #272]	@ (8004bdc <HAL_ADC_ConfigChannel+0x86c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	099b      	lsrs	r3, r3, #6
 8004ace:	4a44      	ldr	r2, [pc, #272]	@ (8004be0 <HAL_ADC_ConfigChannel+0x870>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	4613      	mov	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ae2:	e002      	b.n	8004aea <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f9      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004af0:	e05a      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a3b      	ldr	r2, [pc, #236]	@ (8004be4 <HAL_ADC_ConfigChannel+0x874>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d125      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11f      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a31      	ldr	r2, [pc, #196]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x864>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d104      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x7ac>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a34      	ldr	r2, [pc, #208]	@ (8004be8 <HAL_ADC_ConfigChannel+0x878>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d047      	beq.n	8004bac <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b24:	d004      	beq.n	8004b30 <HAL_ADC_ConfigChannel+0x7c0>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x864>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d101      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x7c4>
 8004b30:	4a29      	ldr	r2, [pc, #164]	@ (8004bd8 <HAL_ADC_ConfigChannel+0x868>)
 8004b32:	e000      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x7c6>
 8004b34:	4a23      	ldr	r2, [pc, #140]	@ (8004bc4 <HAL_ADC_ConfigChannel+0x854>)
 8004b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f7ff f896 	bl	8003c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b46:	e031      	b.n	8004bac <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a27      	ldr	r2, [pc, #156]	@ (8004bec <HAL_ADC_ConfigChannel+0x87c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d12d      	bne.n	8004bae <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d127      	bne.n	8004bae <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x864>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d022      	beq.n	8004bae <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b70:	d004      	beq.n	8004b7c <HAL_ADC_ConfigChannel+0x80c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a17      	ldr	r2, [pc, #92]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x864>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x810>
 8004b7c:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <HAL_ADC_ConfigChannel+0x868>)
 8004b7e:	e000      	b.n	8004b82 <HAL_ADC_ConfigChannel+0x812>
 8004b80:	4a10      	ldr	r2, [pc, #64]	@ (8004bc4 <HAL_ADC_ConfigChannel+0x854>)
 8004b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f7ff f870 	bl	8003c72 <LL_ADC_SetCommonPathInternalCh>
 8004b92:	e00c      	b.n	8004bae <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004ba6:	e002      	b.n	8004bae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ba8:	bf00      	nop
 8004baa:	e000      	b.n	8004bae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	37d8      	adds	r7, #216	@ 0xd8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	50000700 	.word	0x50000700
 8004bc8:	c3210000 	.word	0xc3210000
 8004bcc:	90c00010 	.word	0x90c00010
 8004bd0:	50000600 	.word	0x50000600
 8004bd4:	50000100 	.word	0x50000100
 8004bd8:	50000300 	.word	0x50000300
 8004bdc:	20000230 	.word	0x20000230
 8004be0:	053e2d63 	.word	0x053e2d63
 8004be4:	c7520000 	.word	0xc7520000
 8004be8:	50000500 	.word	0x50000500
 8004bec:	cb840000 	.word	0xcb840000

08004bf0 <LL_ADC_IsEnabled>:
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <LL_ADC_IsEnabled+0x18>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <LL_ADC_IsEnabled+0x1a>
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d101      	bne.n	8004c2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b0a1      	sub	sp, #132	@ 0x84
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e0e7      	b.n	8004e2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c62:	2300      	movs	r3, #0
 8004c64:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c66:	2300      	movs	r3, #0
 8004c68:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c72:	d102      	bne.n	8004c7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c74:	4b6f      	ldr	r3, [pc, #444]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	e009      	b.n	8004c8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a6e      	ldr	r2, [pc, #440]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d102      	bne.n	8004c8a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004c84:	4b6d      	ldr	r3, [pc, #436]	@ (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c86:	60bb      	str	r3, [r7, #8]
 8004c88:	e001      	b.n	8004c8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0be      	b.n	8004e2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff ffb1 	bl	8004c16 <LL_ADC_REG_IsConversionOngoing>
 8004cb4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff ffab 	bl	8004c16 <LL_ADC_REG_IsConversionOngoing>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 80a0 	bne.w	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f040 809c 	bne.w	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cd8:	d004      	beq.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a55      	ldr	r2, [pc, #340]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d101      	bne.n	8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004ce4:	4b56      	ldr	r3, [pc, #344]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004ce6:	e000      	b.n	8004cea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004ce8:	4b56      	ldr	r3, [pc, #344]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004cea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d04b      	beq.n	8004d8c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d06:	035b      	lsls	r3, r3, #13
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d18:	d004      	beq.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a45      	ldr	r2, [pc, #276]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10f      	bne.n	8004d44 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d28:	f7ff ff62 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	4841      	ldr	r0, [pc, #260]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d30:	f7ff ff5e 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4323      	orrs	r3, r4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e012      	b.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004d44:	483c      	ldr	r0, [pc, #240]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d46:	f7ff ff53 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	483b      	ldr	r0, [pc, #236]	@ (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d4e:	f7ff ff4f 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004d52:	4603      	mov	r3, r0
 8004d54:	431c      	orrs	r4, r3
 8004d56:	483c      	ldr	r0, [pc, #240]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d58:	f7ff ff4a 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4323      	orrs	r3, r4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d056      	beq.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d76:	f023 030f 	bic.w	r3, r3, #15
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	6811      	ldr	r1, [r2, #0]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	6892      	ldr	r2, [r2, #8]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	431a      	orrs	r2, r3
 8004d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d88:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d8a:	e047      	b.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da0:	d004      	beq.n	8004dac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a23      	ldr	r2, [pc, #140]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d10f      	bne.n	8004dcc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004dac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004db0:	f7ff ff1e 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004db4:	4604      	mov	r4, r0
 8004db6:	481f      	ldr	r0, [pc, #124]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004db8:	f7ff ff1a 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4323      	orrs	r3, r4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e012      	b.n	8004df2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004dcc:	481a      	ldr	r0, [pc, #104]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004dce:	f7ff ff0f 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4819      	ldr	r0, [pc, #100]	@ (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dd6:	f7ff ff0b 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	431c      	orrs	r4, r3
 8004dde:	481a      	ldr	r0, [pc, #104]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004de0:	f7ff ff06 	bl	8004bf0 <LL_ADC_IsEnabled>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4323      	orrs	r3, r4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d012      	beq.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004dfe:	f023 030f 	bic.w	r3, r3, #15
 8004e02:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e06:	e009      	b.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e1a:	e000      	b.n	8004e1e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3784      	adds	r7, #132	@ 0x84
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd90      	pop	{r4, r7, pc}
 8004e32:	bf00      	nop
 8004e34:	50000100 	.word	0x50000100
 8004e38:	50000400 	.word	0x50000400
 8004e3c:	50000500 	.word	0x50000500
 8004e40:	50000300 	.word	0x50000300
 8004e44:	50000700 	.word	0x50000700
 8004e48:	50000600 	.word	0x50000600

08004e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e90 <__NVIC_SetPriorityGrouping+0x44>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e7e:	4a04      	ldr	r2, [pc, #16]	@ (8004e90 <__NVIC_SetPriorityGrouping+0x44>)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	60d3      	str	r3, [r2, #12]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	e000ed00 	.word	0xe000ed00

08004e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e98:	4b04      	ldr	r3, [pc, #16]	@ (8004eac <__NVIC_GetPriorityGrouping+0x18>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	f003 0307 	and.w	r3, r3, #7
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	db0b      	blt.n	8004eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	f003 021f 	and.w	r2, r3, #31
 8004ec8:	4907      	ldr	r1, [pc, #28]	@ (8004ee8 <__NVIC_EnableIRQ+0x38>)
 8004eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	e000e100 	.word	0xe000e100

08004eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	6039      	str	r1, [r7, #0]
 8004ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	db0a      	blt.n	8004f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	490c      	ldr	r1, [pc, #48]	@ (8004f38 <__NVIC_SetPriority+0x4c>)
 8004f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0a:	0112      	lsls	r2, r2, #4
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	440b      	add	r3, r1
 8004f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f14:	e00a      	b.n	8004f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	4908      	ldr	r1, [pc, #32]	@ (8004f3c <__NVIC_SetPriority+0x50>)
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	3b04      	subs	r3, #4
 8004f24:	0112      	lsls	r2, r2, #4
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	440b      	add	r3, r1
 8004f2a:	761a      	strb	r2, [r3, #24]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000e100 	.word	0xe000e100
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b089      	sub	sp, #36	@ 0x24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f1c3 0307 	rsb	r3, r3, #7
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	bf28      	it	cs
 8004f5e:	2304      	movcs	r3, #4
 8004f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3304      	adds	r3, #4
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d902      	bls.n	8004f70 <NVIC_EncodePriority+0x30>
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3b03      	subs	r3, #3
 8004f6e:	e000      	b.n	8004f72 <NVIC_EncodePriority+0x32>
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f74:	f04f 32ff 	mov.w	r2, #4294967295
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43da      	mvns	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	401a      	ands	r2, r3
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f88:	f04f 31ff 	mov.w	r1, #4294967295
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f92:	43d9      	mvns	r1, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f98:	4313      	orrs	r3, r2
         );
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3724      	adds	r7, #36	@ 0x24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb8:	d301      	bcc.n	8004fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e00f      	b.n	8004fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe8 <SysTick_Config+0x40>)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fc6:	210f      	movs	r1, #15
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	f7ff ff8e 	bl	8004eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fd0:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <SysTick_Config+0x40>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fd6:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <SysTick_Config+0x40>)
 8004fd8:	2207      	movs	r2, #7
 8004fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	e000e010 	.word	0xe000e010

08004fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff ff29 	bl	8004e4c <__NVIC_SetPriorityGrouping>
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b086      	sub	sp, #24
 8005006:	af00      	add	r7, sp, #0
 8005008:	4603      	mov	r3, r0
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005010:	f7ff ff40 	bl	8004e94 <__NVIC_GetPriorityGrouping>
 8005014:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	6978      	ldr	r0, [r7, #20]
 800501c:	f7ff ff90 	bl	8004f40 <NVIC_EncodePriority>
 8005020:	4602      	mov	r2, r0
 8005022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005026:	4611      	mov	r1, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff ff5f 	bl	8004eec <__NVIC_SetPriority>
}
 800502e:	bf00      	nop
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	4603      	mov	r3, r0
 800503e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff ff33 	bl	8004eb0 <__NVIC_EnableIRQ>
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff ffa4 	bl	8004fa8 <SysTick_Config>
 8005060:	4603      	mov	r3, r0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e08d      	b.n	800519a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	4b47      	ldr	r3, [pc, #284]	@ (80051a4 <HAL_DMA_Init+0x138>)
 8005086:	429a      	cmp	r2, r3
 8005088:	d80f      	bhi.n	80050aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	4b45      	ldr	r3, [pc, #276]	@ (80051a8 <HAL_DMA_Init+0x13c>)
 8005092:	4413      	add	r3, r2
 8005094:	4a45      	ldr	r2, [pc, #276]	@ (80051ac <HAL_DMA_Init+0x140>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	009a      	lsls	r2, r3, #2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a42      	ldr	r2, [pc, #264]	@ (80051b0 <HAL_DMA_Init+0x144>)
 80050a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80050a8:	e00e      	b.n	80050c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b40      	ldr	r3, [pc, #256]	@ (80051b4 <HAL_DMA_Init+0x148>)
 80050b2:	4413      	add	r3, r2
 80050b4:	4a3d      	ldr	r2, [pc, #244]	@ (80051ac <HAL_DMA_Init+0x140>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	091b      	lsrs	r3, r3, #4
 80050bc:	009a      	lsls	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a3c      	ldr	r2, [pc, #240]	@ (80051b8 <HAL_DMA_Init+0x14c>)
 80050c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80050ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fa76 	bl	800560c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005128:	d102      	bne.n	8005130 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005144:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d010      	beq.n	8005170 <HAL_DMA_Init+0x104>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b04      	cmp	r3, #4
 8005154:	d80c      	bhi.n	8005170 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa96 	bl	8005688 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	e008      	b.n	8005182 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40020407 	.word	0x40020407
 80051a8:	bffdfff8 	.word	0xbffdfff8
 80051ac:	cccccccd 	.word	0xcccccccd
 80051b0:	40020000 	.word	0x40020000
 80051b4:	bffdfbf8 	.word	0xbffdfbf8
 80051b8:	40020400 	.word	0x40020400

080051bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_DMA_Start_IT+0x20>
 80051d8:	2302      	movs	r3, #2
 80051da:	e066      	b.n	80052aa <HAL_DMA_Start_IT+0xee>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d155      	bne.n	800529c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0201 	bic.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f9bb 	bl	8005590 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 020e 	orr.w	r2, r2, #14
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e00f      	b.n	8005254 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 020a 	orr.w	r2, r2, #10
 8005252:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800526c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005270:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005288:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0201 	orr.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e005      	b.n	80052a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
 80052a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d005      	beq.n	80052d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
 80052d4:	e037      	b.n	8005346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 020e 	bic.w	r2, r2, #14
 80052e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f003 021f 	and.w	r2, r3, #31
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005312:	2101      	movs	r1, #1
 8005314:	fa01 f202 	lsl.w	r2, r1, r2
 8005318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005336:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800533a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005356:	7bfb      	ldrb	r3, [r7, #15]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d00d      	beq.n	8005398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2204      	movs	r2, #4
 8005380:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]
 8005396:	e047      	b.n	8005428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 020e 	bic.w	r2, r2, #14
 80053a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053cc:	f003 021f 	and.w	r2, r3, #31
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	2101      	movs	r1, #1
 80053d6:	fa01 f202 	lsl.w	r2, r1, r2
 80053da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
    }
  }
  return status;
 8005428:	7bfb      	ldrb	r3, [r7, #15]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	2204      	movs	r2, #4
 8005454:	409a      	lsls	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d026      	beq.n	80054ac <HAL_DMA_IRQHandler+0x7a>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d021      	beq.n	80054ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d107      	bne.n	8005486 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0204 	bic.w	r2, r2, #4
 8005484:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f003 021f 	and.w	r2, r3, #31
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	2104      	movs	r1, #4
 8005494:	fa01 f202 	lsl.w	r2, r1, r2
 8005498:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d071      	beq.n	8005586 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80054aa:	e06c      	b.n	8005586 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2202      	movs	r2, #2
 80054b6:	409a      	lsls	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02e      	beq.n	800551e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d029      	beq.n	800551e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 020a 	bic.w	r2, r2, #10
 80054e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f4:	f003 021f 	and.w	r2, r3, #31
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fc:	2102      	movs	r1, #2
 80054fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005502:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d038      	beq.n	8005586 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800551c:	e033      	b.n	8005586 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	2208      	movs	r2, #8
 8005528:	409a      	lsls	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d02a      	beq.n	8005588 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d025      	beq.n	8005588 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 020e 	bic.w	r2, r2, #14
 800554a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005550:	f003 021f 	and.w	r2, r3, #31
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005558:	2101      	movs	r1, #1
 800555a:	fa01 f202 	lsl.w	r2, r1, r2
 800555e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800557a:	2b00      	cmp	r3, #0
 800557c:	d004      	beq.n	8005588 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005586:	bf00      	nop
 8005588:	bf00      	nop
}
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055be:	f003 021f 	and.w	r2, r3, #31
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c6:	2101      	movs	r1, #1
 80055c8:	fa01 f202 	lsl.w	r2, r1, r2
 80055cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d108      	bne.n	80055f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80055ee:	e007      	b.n	8005600 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	4b16      	ldr	r3, [pc, #88]	@ (8005674 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800561c:	429a      	cmp	r2, r3
 800561e:	d802      	bhi.n	8005626 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005620:	4b15      	ldr	r3, [pc, #84]	@ (8005678 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e001      	b.n	800562a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005626:	4b15      	ldr	r3, [pc, #84]	@ (800567c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005628:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3b08      	subs	r3, #8
 8005636:	4a12      	ldr	r2, [pc, #72]	@ (8005680 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005644:	089b      	lsrs	r3, r3, #2
 8005646:	009a      	lsls	r2, r3, #2
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	461a      	mov	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a0b      	ldr	r2, [pc, #44]	@ (8005684 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005656:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2201      	movs	r2, #1
 8005660:	409a      	lsls	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40020407 	.word	0x40020407
 8005678:	40020800 	.word	0x40020800
 800567c:	40020820 	.word	0x40020820
 8005680:	cccccccd 	.word	0xcccccccd
 8005684:	40020880 	.word	0x40020880

08005688 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	461a      	mov	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a08      	ldr	r2, [pc, #32]	@ (80056cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80056aa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	2201      	movs	r2, #1
 80056b6:	409a      	lsls	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	1000823f 	.word	0x1000823f
 80056cc:	40020940 	.word	0x40020940

080056d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056de:	e15a      	b.n	8005996 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	2101      	movs	r1, #1
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ec:	4013      	ands	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 814c 	beq.w	8005990 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d005      	beq.n	8005710 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800570c:	2b02      	cmp	r3, #2
 800570e:	d130      	bne.n	8005772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	2203      	movs	r2, #3
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	43db      	mvns	r3, r3
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005746:	2201      	movs	r2, #1
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43db      	mvns	r3, r3
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4013      	ands	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	f003 0201 	and.w	r2, r3, #1
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b03      	cmp	r3, #3
 800577c:	d017      	beq.n	80057ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	2203      	movs	r2, #3
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4013      	ands	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d123      	bne.n	8005802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	08da      	lsrs	r2, r3, #3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3208      	adds	r2, #8
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	220f      	movs	r2, #15
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4013      	ands	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	08da      	lsrs	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3208      	adds	r2, #8
 80057fc:	6939      	ldr	r1, [r7, #16]
 80057fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	2203      	movs	r2, #3
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43db      	mvns	r3, r3
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4013      	ands	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f003 0203 	and.w	r2, r3, #3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80a6 	beq.w	8005990 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005844:	4b5b      	ldr	r3, [pc, #364]	@ (80059b4 <HAL_GPIO_Init+0x2e4>)
 8005846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005848:	4a5a      	ldr	r2, [pc, #360]	@ (80059b4 <HAL_GPIO_Init+0x2e4>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005850:	4b58      	ldr	r3, [pc, #352]	@ (80059b4 <HAL_GPIO_Init+0x2e4>)
 8005852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800585c:	4a56      	ldr	r2, [pc, #344]	@ (80059b8 <HAL_GPIO_Init+0x2e8>)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	089b      	lsrs	r3, r3, #2
 8005862:	3302      	adds	r3, #2
 8005864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	220f      	movs	r2, #15
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4013      	ands	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005886:	d01f      	beq.n	80058c8 <HAL_GPIO_Init+0x1f8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a4c      	ldr	r2, [pc, #304]	@ (80059bc <HAL_GPIO_Init+0x2ec>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d019      	beq.n	80058c4 <HAL_GPIO_Init+0x1f4>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a4b      	ldr	r2, [pc, #300]	@ (80059c0 <HAL_GPIO_Init+0x2f0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <HAL_GPIO_Init+0x1f0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a4a      	ldr	r2, [pc, #296]	@ (80059c4 <HAL_GPIO_Init+0x2f4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00d      	beq.n	80058bc <HAL_GPIO_Init+0x1ec>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a49      	ldr	r2, [pc, #292]	@ (80059c8 <HAL_GPIO_Init+0x2f8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <HAL_GPIO_Init+0x1e8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a48      	ldr	r2, [pc, #288]	@ (80059cc <HAL_GPIO_Init+0x2fc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d101      	bne.n	80058b4 <HAL_GPIO_Init+0x1e4>
 80058b0:	2305      	movs	r3, #5
 80058b2:	e00a      	b.n	80058ca <HAL_GPIO_Init+0x1fa>
 80058b4:	2306      	movs	r3, #6
 80058b6:	e008      	b.n	80058ca <HAL_GPIO_Init+0x1fa>
 80058b8:	2304      	movs	r3, #4
 80058ba:	e006      	b.n	80058ca <HAL_GPIO_Init+0x1fa>
 80058bc:	2303      	movs	r3, #3
 80058be:	e004      	b.n	80058ca <HAL_GPIO_Init+0x1fa>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e002      	b.n	80058ca <HAL_GPIO_Init+0x1fa>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <HAL_GPIO_Init+0x1fa>
 80058c8:	2300      	movs	r3, #0
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	f002 0203 	and.w	r2, r2, #3
 80058d0:	0092      	lsls	r2, r2, #2
 80058d2:	4093      	lsls	r3, r2
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058da:	4937      	ldr	r1, [pc, #220]	@ (80059b8 <HAL_GPIO_Init+0x2e8>)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	089b      	lsrs	r3, r3, #2
 80058e0:	3302      	adds	r3, #2
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058e8:	4b39      	ldr	r3, [pc, #228]	@ (80059d0 <HAL_GPIO_Init+0x300>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4013      	ands	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800590c:	4a30      	ldr	r2, [pc, #192]	@ (80059d0 <HAL_GPIO_Init+0x300>)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005912:	4b2f      	ldr	r3, [pc, #188]	@ (80059d0 <HAL_GPIO_Init+0x300>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	43db      	mvns	r3, r3
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4013      	ands	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005936:	4a26      	ldr	r2, [pc, #152]	@ (80059d0 <HAL_GPIO_Init+0x300>)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800593c:	4b24      	ldr	r3, [pc, #144]	@ (80059d0 <HAL_GPIO_Init+0x300>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	43db      	mvns	r3, r3
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4013      	ands	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005960:	4a1b      	ldr	r2, [pc, #108]	@ (80059d0 <HAL_GPIO_Init+0x300>)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005966:	4b1a      	ldr	r3, [pc, #104]	@ (80059d0 <HAL_GPIO_Init+0x300>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	43db      	mvns	r3, r3
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4013      	ands	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800598a:	4a11      	ldr	r2, [pc, #68]	@ (80059d0 <HAL_GPIO_Init+0x300>)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	3301      	adds	r3, #1
 8005994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f47f ae9d 	bne.w	80056e0 <HAL_GPIO_Init+0x10>
  }
}
 80059a6:	bf00      	nop
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40021000 	.word	0x40021000
 80059b8:	40010000 	.word	0x40010000
 80059bc:	48000400 	.word	0x48000400
 80059c0:	48000800 	.word	0x48000800
 80059c4:	48000c00 	.word	0x48000c00
 80059c8:	48001000 	.word	0x48001000
 80059cc:	48001400 	.word	0x48001400
 80059d0:	40010400 	.word	0x40010400

080059d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
 80059f0:	e001      	b.n	80059f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	807b      	strh	r3, [r7, #2]
 8005a10:	4613      	mov	r3, r2
 8005a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a14:	787b      	ldrb	r3, [r7, #1]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a1a:	887a      	ldrh	r2, [r7, #2]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a20:	e002      	b.n	8005a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a22:	887a      	ldrh	r2, [r7, #2]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a3e:	4b08      	ldr	r3, [pc, #32]	@ (8005a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d006      	beq.n	8005a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a4a:	4a05      	ldr	r2, [pc, #20]	@ (8005a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f806 	bl	8005a64 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40010400 	.word	0x40010400

08005a64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d141      	bne.n	8005b0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a96:	d131      	bne.n	8005afc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a98:	4b47      	ldr	r3, [pc, #284]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a9e:	4a46      	ldr	r2, [pc, #280]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005aa8:	4b43      	ldr	r3, [pc, #268]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ab0:	4a41      	ldr	r2, [pc, #260]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ab6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ab8:	4b40      	ldr	r3, [pc, #256]	@ (8005bbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2232      	movs	r2, #50	@ 0x32
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
 8005ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	0c9b      	lsrs	r3, r3, #18
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ace:	e002      	b.n	8005ad6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ad6:	4b38      	ldr	r3, [pc, #224]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae2:	d102      	bne.n	8005aea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f2      	bne.n	8005ad0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005aea:	4b33      	ldr	r3, [pc, #204]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af6:	d158      	bne.n	8005baa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e057      	b.n	8005bac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005afc:	4b2e      	ldr	r3, [pc, #184]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b02:	4a2d      	ldr	r2, [pc, #180]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b0c:	e04d      	b.n	8005baa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b14:	d141      	bne.n	8005b9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b16:	4b28      	ldr	r3, [pc, #160]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b22:	d131      	bne.n	8005b88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b24:	4b24      	ldr	r3, [pc, #144]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b2a:	4a23      	ldr	r2, [pc, #140]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b34:	4b20      	ldr	r3, [pc, #128]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b44:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2232      	movs	r2, #50	@ 0x32
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	0c9b      	lsrs	r3, r3, #18
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b5a:	e002      	b.n	8005b62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b62:	4b15      	ldr	r3, [pc, #84]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b6e:	d102      	bne.n	8005b76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f2      	bne.n	8005b5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b76:	4b10      	ldr	r3, [pc, #64]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b82:	d112      	bne.n	8005baa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e011      	b.n	8005bac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b88:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b98:	e007      	b.n	8005baa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b9a:	4b07      	ldr	r3, [pc, #28]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ba2:	4a05      	ldr	r2, [pc, #20]	@ (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ba8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	20000230 	.word	0x20000230
 8005bc0:	431bde83 	.word	0x431bde83

08005bc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005bc8:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4a04      	ldr	r2, [pc, #16]	@ (8005be0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005bce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bd2:	6093      	str	r3, [r2, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40007000 	.word	0x40007000

08005be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e2fe      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d075      	beq.n	8005cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c02:	4b97      	ldr	r3, [pc, #604]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 030c 	and.w	r3, r3, #12
 8005c0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c0c:	4b94      	ldr	r3, [pc, #592]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	d102      	bne.n	8005c22 <HAL_RCC_OscConfig+0x3e>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d002      	beq.n	8005c28 <HAL_RCC_OscConfig+0x44>
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d10b      	bne.n	8005c40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c28:	4b8d      	ldr	r3, [pc, #564]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d05b      	beq.n	8005cec <HAL_RCC_OscConfig+0x108>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d157      	bne.n	8005cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e2d9      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c48:	d106      	bne.n	8005c58 <HAL_RCC_OscConfig+0x74>
 8005c4a:	4b85      	ldr	r3, [pc, #532]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a84      	ldr	r2, [pc, #528]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e01d      	b.n	8005c94 <HAL_RCC_OscConfig+0xb0>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c60:	d10c      	bne.n	8005c7c <HAL_RCC_OscConfig+0x98>
 8005c62:	4b7f      	ldr	r3, [pc, #508]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a7e      	ldr	r2, [pc, #504]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a7b      	ldr	r2, [pc, #492]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e00b      	b.n	8005c94 <HAL_RCC_OscConfig+0xb0>
 8005c7c:	4b78      	ldr	r3, [pc, #480]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a77      	ldr	r2, [pc, #476]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	4b75      	ldr	r3, [pc, #468]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a74      	ldr	r2, [pc, #464]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d013      	beq.n	8005cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fd ffca 	bl	8003c34 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca4:	f7fd ffc6 	bl	8003c34 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	@ 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e29e      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xc0>
 8005cc2:	e014      	b.n	8005cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fd ffb6 	bl	8003c34 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fd ffb2 	bl	8003c34 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	@ 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e28a      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cde:	4b60      	ldr	r3, [pc, #384]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0xe8>
 8005cea:	e000      	b.n	8005cee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d075      	beq.n	8005de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cfa:	4b59      	ldr	r3, [pc, #356]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d04:	4b56      	ldr	r3, [pc, #344]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	d102      	bne.n	8005d1a <HAL_RCC_OscConfig+0x136>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d002      	beq.n	8005d20 <HAL_RCC_OscConfig+0x13c>
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d11f      	bne.n	8005d60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d20:	4b4f      	ldr	r3, [pc, #316]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_OscConfig+0x154>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e25d      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d38:	4b49      	ldr	r3, [pc, #292]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	061b      	lsls	r3, r3, #24
 8005d46:	4946      	ldr	r1, [pc, #280]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d4c:	4b45      	ldr	r3, [pc, #276]	@ (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fd ff23 	bl	8003b9c <HAL_InitTick>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d043      	beq.n	8005de4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e249      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d023      	beq.n	8005db0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d68:	4b3d      	ldr	r3, [pc, #244]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d74:	f7fd ff5e 	bl	8003c34 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d7c:	f7fd ff5a 	bl	8003c34 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e232      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d8e:	4b34      	ldr	r3, [pc, #208]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0f0      	beq.n	8005d7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9a:	4b31      	ldr	r3, [pc, #196]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	061b      	lsls	r3, r3, #24
 8005da8:	492d      	ldr	r1, [pc, #180]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	604b      	str	r3, [r1, #4]
 8005dae:	e01a      	b.n	8005de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005db0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a2a      	ldr	r2, [pc, #168]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005db6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fd ff3a 	bl	8003c34 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc4:	f7fd ff36 	bl	8003c34 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e20e      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dd6:	4b22      	ldr	r3, [pc, #136]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x1e0>
 8005de2:	e000      	b.n	8005de6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d041      	beq.n	8005e76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01c      	beq.n	8005e34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dfa:	4b19      	ldr	r3, [pc, #100]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e00:	4a17      	ldr	r2, [pc, #92]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0a:	f7fd ff13 	bl	8003c34 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e12:	f7fd ff0f 	bl	8003c34 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e1e7      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e24:	4b0e      	ldr	r3, [pc, #56]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0ef      	beq.n	8005e12 <HAL_RCC_OscConfig+0x22e>
 8005e32:	e020      	b.n	8005e76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e34:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e3a:	4a09      	ldr	r2, [pc, #36]	@ (8005e60 <HAL_RCC_OscConfig+0x27c>)
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e44:	f7fd fef6 	bl	8003c34 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e4a:	e00d      	b.n	8005e68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e4c:	f7fd fef2 	bl	8003c34 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d906      	bls.n	8005e68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e1ca      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
 8005e5e:	bf00      	nop
 8005e60:	40021000 	.word	0x40021000
 8005e64:	20000234 	.word	0x20000234
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e68:	4b8c      	ldr	r3, [pc, #560]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1ea      	bne.n	8005e4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80a6 	beq.w	8005fd0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e84:	2300      	movs	r3, #0
 8005e86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e88:	4b84      	ldr	r3, [pc, #528]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_RCC_OscConfig+0x2b4>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <HAL_RCC_OscConfig+0x2b6>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00d      	beq.n	8005eba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eba:	4b79      	ldr	r3, [pc, #484]	@ (80060a0 <HAL_RCC_OscConfig+0x4bc>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d118      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ec6:	4b76      	ldr	r3, [pc, #472]	@ (80060a0 <HAL_RCC_OscConfig+0x4bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a75      	ldr	r2, [pc, #468]	@ (80060a0 <HAL_RCC_OscConfig+0x4bc>)
 8005ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ed2:	f7fd feaf 	bl	8003c34 <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eda:	f7fd feab 	bl	8003c34 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e183      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eec:	4b6c      	ldr	r3, [pc, #432]	@ (80060a0 <HAL_RCC_OscConfig+0x4bc>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d108      	bne.n	8005f12 <HAL_RCC_OscConfig+0x32e>
 8005f00:	4b66      	ldr	r3, [pc, #408]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f06:	4a65      	ldr	r2, [pc, #404]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f10:	e024      	b.n	8005f5c <HAL_RCC_OscConfig+0x378>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b05      	cmp	r3, #5
 8005f18:	d110      	bne.n	8005f3c <HAL_RCC_OscConfig+0x358>
 8005f1a:	4b60      	ldr	r3, [pc, #384]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f20:	4a5e      	ldr	r2, [pc, #376]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f22:	f043 0304 	orr.w	r3, r3, #4
 8005f26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f30:	4a5a      	ldr	r2, [pc, #360]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f3a:	e00f      	b.n	8005f5c <HAL_RCC_OscConfig+0x378>
 8005f3c:	4b57      	ldr	r3, [pc, #348]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f42:	4a56      	ldr	r2, [pc, #344]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f4c:	4b53      	ldr	r3, [pc, #332]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f52:	4a52      	ldr	r2, [pc, #328]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f54:	f023 0304 	bic.w	r3, r3, #4
 8005f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d016      	beq.n	8005f92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fd fe66 	bl	8003c34 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6c:	f7fd fe62 	bl	8003c34 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e138      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f82:	4b46      	ldr	r3, [pc, #280]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0ed      	beq.n	8005f6c <HAL_RCC_OscConfig+0x388>
 8005f90:	e015      	b.n	8005fbe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f92:	f7fd fe4f 	bl	8003c34 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f98:	e00a      	b.n	8005fb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9a:	f7fd fe4b 	bl	8003c34 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e121      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1ed      	bne.n	8005f9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fbe:	7ffb      	ldrb	r3, [r7, #31]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d105      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc4:	4b35      	ldr	r3, [pc, #212]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc8:	4a34      	ldr	r2, [pc, #208]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d03c      	beq.n	8006056 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01c      	beq.n	800601e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fea:	4a2c      	ldr	r2, [pc, #176]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fd fe1e 	bl	8003c34 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ffc:	f7fd fe1a 	bl	8003c34 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e0f2      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800600e:	4b23      	ldr	r3, [pc, #140]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8006010:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ef      	beq.n	8005ffc <HAL_RCC_OscConfig+0x418>
 800601c:	e01b      	b.n	8006056 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800601e:	4b1f      	ldr	r3, [pc, #124]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8006020:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006024:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602e:	f7fd fe01 	bl	8003c34 <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006036:	f7fd fdfd 	bl	8003c34 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e0d5      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006048:	4b14      	ldr	r3, [pc, #80]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 800604a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1ef      	bne.n	8006036 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80c9 	beq.w	80061f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006060:	4b0e      	ldr	r3, [pc, #56]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 030c 	and.w	r3, r3, #12
 8006068:	2b0c      	cmp	r3, #12
 800606a:	f000 8083 	beq.w	8006174 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d15e      	bne.n	8006134 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006076:	4b09      	ldr	r3, [pc, #36]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a08      	ldr	r2, [pc, #32]	@ (800609c <HAL_RCC_OscConfig+0x4b8>)
 800607c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006082:	f7fd fdd7 	bl	8003c34 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006088:	e00c      	b.n	80060a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800608a:	f7fd fdd3 	bl	8003c34 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d905      	bls.n	80060a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e0ab      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
 800609c:	40021000 	.word	0x40021000
 80060a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060a4:	4b55      	ldr	r3, [pc, #340]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1ec      	bne.n	800608a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060b0:	4b52      	ldr	r3, [pc, #328]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	4b52      	ldr	r3, [pc, #328]	@ (8006200 <HAL_RCC_OscConfig+0x61c>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6a11      	ldr	r1, [r2, #32]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060c0:	3a01      	subs	r2, #1
 80060c2:	0112      	lsls	r2, r2, #4
 80060c4:	4311      	orrs	r1, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80060ca:	0212      	lsls	r2, r2, #8
 80060cc:	4311      	orrs	r1, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060d2:	0852      	lsrs	r2, r2, #1
 80060d4:	3a01      	subs	r2, #1
 80060d6:	0552      	lsls	r2, r2, #21
 80060d8:	4311      	orrs	r1, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060de:	0852      	lsrs	r2, r2, #1
 80060e0:	3a01      	subs	r2, #1
 80060e2:	0652      	lsls	r2, r2, #25
 80060e4:	4311      	orrs	r1, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060ea:	06d2      	lsls	r2, r2, #27
 80060ec:	430a      	orrs	r2, r1
 80060ee:	4943      	ldr	r1, [pc, #268]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060f4:	4b41      	ldr	r3, [pc, #260]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a40      	ldr	r2, [pc, #256]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 80060fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006100:	4b3e      	ldr	r3, [pc, #248]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	4a3d      	ldr	r2, [pc, #244]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 8006106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800610a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610c:	f7fd fd92 	bl	8003c34 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006114:	f7fd fd8e 	bl	8003c34 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e066      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006126:	4b35      	ldr	r3, [pc, #212]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0f0      	beq.n	8006114 <HAL_RCC_OscConfig+0x530>
 8006132:	e05e      	b.n	80061f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006134:	4b31      	ldr	r3, [pc, #196]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a30      	ldr	r2, [pc, #192]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 800613a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800613e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fd fd78 	bl	8003c34 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006148:	f7fd fd74 	bl	8003c34 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e04c      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800615a:	4b28      	ldr	r3, [pc, #160]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006166:	4b25      	ldr	r3, [pc, #148]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	4924      	ldr	r1, [pc, #144]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 800616c:	4b25      	ldr	r3, [pc, #148]	@ (8006204 <HAL_RCC_OscConfig+0x620>)
 800616e:	4013      	ands	r3, r2
 8006170:	60cb      	str	r3, [r1, #12]
 8006172:	e03e      	b.n	80061f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e039      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006180:	4b1e      	ldr	r3, [pc, #120]	@ (80061fc <HAL_RCC_OscConfig+0x618>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f003 0203 	and.w	r2, r3, #3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	429a      	cmp	r2, r3
 8006192:	d12c      	bne.n	80061ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	3b01      	subs	r3, #1
 80061a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d123      	bne.n	80061ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d11b      	bne.n	80061ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d113      	bne.n	80061ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	3b01      	subs	r3, #1
 80061d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d109      	bne.n	80061ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e4:	085b      	lsrs	r3, r3, #1
 80061e6:	3b01      	subs	r3, #1
 80061e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d001      	beq.n	80061f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40021000 	.word	0x40021000
 8006200:	019f800c 	.word	0x019f800c
 8006204:	feeefffc 	.word	0xfeeefffc

08006208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e11e      	b.n	800645e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006220:	4b91      	ldr	r3, [pc, #580]	@ (8006468 <HAL_RCC_ClockConfig+0x260>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d910      	bls.n	8006250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b8e      	ldr	r3, [pc, #568]	@ (8006468 <HAL_RCC_ClockConfig+0x260>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 020f 	bic.w	r2, r3, #15
 8006236:	498c      	ldr	r1, [pc, #560]	@ (8006468 <HAL_RCC_ClockConfig+0x260>)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623e:	4b8a      	ldr	r3, [pc, #552]	@ (8006468 <HAL_RCC_ClockConfig+0x260>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e106      	b.n	800645e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d073      	beq.n	8006344 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b03      	cmp	r3, #3
 8006262:	d129      	bne.n	80062b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006264:	4b81      	ldr	r3, [pc, #516]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e0f4      	b.n	800645e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006274:	f000 f99e 	bl	80065b4 <RCC_GetSysClockFreqFromPLLSource>
 8006278:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4a7c      	ldr	r2, [pc, #496]	@ (8006470 <HAL_RCC_ClockConfig+0x268>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d93f      	bls.n	8006302 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006282:	4b7a      	ldr	r3, [pc, #488]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006296:	2b00      	cmp	r3, #0
 8006298:	d033      	beq.n	8006302 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d12f      	bne.n	8006302 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062a2:	4b72      	ldr	r3, [pc, #456]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062aa:	4a70      	ldr	r2, [pc, #448]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 80062ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80062b2:	2380      	movs	r3, #128	@ 0x80
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	e024      	b.n	8006302 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d107      	bne.n	80062d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c0:	4b6a      	ldr	r3, [pc, #424]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e0c6      	b.n	800645e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062d0:	4b66      	ldr	r3, [pc, #408]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0be      	b.n	800645e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80062e0:	f000 f8ce 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 80062e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4a61      	ldr	r2, [pc, #388]	@ (8006470 <HAL_RCC_ClockConfig+0x268>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d909      	bls.n	8006302 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062ee:	4b5f      	ldr	r3, [pc, #380]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062f6:	4a5d      	ldr	r2, [pc, #372]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 80062f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80062fe:	2380      	movs	r3, #128	@ 0x80
 8006300:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006302:	4b5a      	ldr	r3, [pc, #360]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f023 0203 	bic.w	r2, r3, #3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	4957      	ldr	r1, [pc, #348]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006310:	4313      	orrs	r3, r2
 8006312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006314:	f7fd fc8e 	bl	8003c34 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631a:	e00a      	b.n	8006332 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800631c:	f7fd fc8a 	bl	8003c34 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e095      	b.n	800645e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006332:	4b4e      	ldr	r3, [pc, #312]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 020c 	and.w	r2, r3, #12
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	429a      	cmp	r2, r3
 8006342:	d1eb      	bne.n	800631c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d023      	beq.n	8006398 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800635c:	4b43      	ldr	r3, [pc, #268]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4a42      	ldr	r2, [pc, #264]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006362:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006366:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006374:	4b3d      	ldr	r3, [pc, #244]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800637c:	4a3b      	ldr	r2, [pc, #236]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 800637e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006382:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006384:	4b39      	ldr	r3, [pc, #228]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4936      	ldr	r1, [pc, #216]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006392:	4313      	orrs	r3, r2
 8006394:	608b      	str	r3, [r1, #8]
 8006396:	e008      	b.n	80063aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b80      	cmp	r3, #128	@ 0x80
 800639c:	d105      	bne.n	80063aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800639e:	4b33      	ldr	r3, [pc, #204]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	4a32      	ldr	r2, [pc, #200]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 80063a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006468 <HAL_RCC_ClockConfig+0x260>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d21d      	bcs.n	80063f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006468 <HAL_RCC_ClockConfig+0x260>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f023 020f 	bic.w	r2, r3, #15
 80063c0:	4929      	ldr	r1, [pc, #164]	@ (8006468 <HAL_RCC_ClockConfig+0x260>)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80063c8:	f7fd fc34 	bl	8003c34 <HAL_GetTick>
 80063cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ce:	e00a      	b.n	80063e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063d0:	f7fd fc30 	bl	8003c34 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e03b      	b.n	800645e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e6:	4b20      	ldr	r3, [pc, #128]	@ (8006468 <HAL_RCC_ClockConfig+0x260>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d1ed      	bne.n	80063d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006400:	4b1a      	ldr	r3, [pc, #104]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4917      	ldr	r1, [pc, #92]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 800640e:	4313      	orrs	r3, r2
 8006410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800641e:	4b13      	ldr	r3, [pc, #76]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	490f      	ldr	r1, [pc, #60]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 800642e:	4313      	orrs	r3, r2
 8006430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006432:	f000 f825 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 8006436:	4602      	mov	r2, r0
 8006438:	4b0c      	ldr	r3, [pc, #48]	@ (800646c <HAL_RCC_ClockConfig+0x264>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	490c      	ldr	r1, [pc, #48]	@ (8006474 <HAL_RCC_ClockConfig+0x26c>)
 8006444:	5ccb      	ldrb	r3, [r1, r3]
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	fa22 f303 	lsr.w	r3, r2, r3
 800644e:	4a0a      	ldr	r2, [pc, #40]	@ (8006478 <HAL_RCC_ClockConfig+0x270>)
 8006450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006452:	4b0a      	ldr	r3, [pc, #40]	@ (800647c <HAL_RCC_ClockConfig+0x274>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f7fd fba0 	bl	8003b9c <HAL_InitTick>
 800645c:	4603      	mov	r3, r0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40022000 	.word	0x40022000
 800646c:	40021000 	.word	0x40021000
 8006470:	04c4b400 	.word	0x04c4b400
 8006474:	0800ac50 	.word	0x0800ac50
 8006478:	20000230 	.word	0x20000230
 800647c:	20000234 	.word	0x20000234

08006480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006486:	4b2c      	ldr	r3, [pc, #176]	@ (8006538 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b04      	cmp	r3, #4
 8006490:	d102      	bne.n	8006498 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006492:	4b2a      	ldr	r3, [pc, #168]	@ (800653c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	e047      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006498:	4b27      	ldr	r3, [pc, #156]	@ (8006538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 030c 	and.w	r3, r3, #12
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d102      	bne.n	80064aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064a4:	4b26      	ldr	r3, [pc, #152]	@ (8006540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	e03e      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80064aa:	4b23      	ldr	r3, [pc, #140]	@ (8006538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 030c 	and.w	r3, r3, #12
 80064b2:	2b0c      	cmp	r3, #12
 80064b4:	d136      	bne.n	8006524 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064b6:	4b20      	ldr	r3, [pc, #128]	@ (8006538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	3301      	adds	r3, #1
 80064cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d10c      	bne.n	80064ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064dc:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064de:	68d2      	ldr	r2, [r2, #12]
 80064e0:	0a12      	lsrs	r2, r2, #8
 80064e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064e6:	fb02 f303 	mul.w	r3, r2, r3
 80064ea:	617b      	str	r3, [r7, #20]
      break;
 80064ec:	e00c      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064ee:	4a13      	ldr	r2, [pc, #76]	@ (800653c <HAL_RCC_GetSysClockFreq+0xbc>)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f6:	4a10      	ldr	r2, [pc, #64]	@ (8006538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064f8:	68d2      	ldr	r2, [r2, #12]
 80064fa:	0a12      	lsrs	r2, r2, #8
 80064fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006500:	fb02 f303 	mul.w	r3, r2, r3
 8006504:	617b      	str	r3, [r7, #20]
      break;
 8006506:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006508:	4b0b      	ldr	r3, [pc, #44]	@ (8006538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	0e5b      	lsrs	r3, r3, #25
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	3301      	adds	r3, #1
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	e001      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006528:	693b      	ldr	r3, [r7, #16]
}
 800652a:	4618      	mov	r0, r3
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000
 800653c:	00f42400 	.word	0x00f42400
 8006540:	016e3600 	.word	0x016e3600

08006544 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006548:	4b03      	ldr	r3, [pc, #12]	@ (8006558 <HAL_RCC_GetHCLKFreq+0x14>)
 800654a:	681b      	ldr	r3, [r3, #0]
}
 800654c:	4618      	mov	r0, r3
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	20000230 	.word	0x20000230

0800655c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006560:	f7ff fff0 	bl	8006544 <HAL_RCC_GetHCLKFreq>
 8006564:	4602      	mov	r2, r0
 8006566:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	4904      	ldr	r1, [pc, #16]	@ (8006584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006572:	5ccb      	ldrb	r3, [r1, r3]
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40021000 	.word	0x40021000
 8006584:	0800ac60 	.word	0x0800ac60

08006588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800658c:	f7ff ffda 	bl	8006544 <HAL_RCC_GetHCLKFreq>
 8006590:	4602      	mov	r2, r0
 8006592:	4b06      	ldr	r3, [pc, #24]	@ (80065ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	0adb      	lsrs	r3, r3, #11
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	4904      	ldr	r1, [pc, #16]	@ (80065b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800659e:	5ccb      	ldrb	r3, [r1, r3]
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40021000 	.word	0x40021000
 80065b0:	0800ac60 	.word	0x0800ac60

080065b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	091b      	lsrs	r3, r3, #4
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d10c      	bne.n	80065f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065d8:	4a17      	ldr	r2, [pc, #92]	@ (8006638 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e0:	4a14      	ldr	r2, [pc, #80]	@ (8006634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065e2:	68d2      	ldr	r2, [r2, #12]
 80065e4:	0a12      	lsrs	r2, r2, #8
 80065e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	617b      	str	r3, [r7, #20]
    break;
 80065f0:	e00c      	b.n	800660c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065f2:	4a12      	ldr	r2, [pc, #72]	@ (800663c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065fc:	68d2      	ldr	r2, [r2, #12]
 80065fe:	0a12      	lsrs	r2, r2, #8
 8006600:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	617b      	str	r3, [r7, #20]
    break;
 800660a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800660c:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	0e5b      	lsrs	r3, r3, #25
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	3301      	adds	r3, #1
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006626:	687b      	ldr	r3, [r7, #4]
}
 8006628:	4618      	mov	r0, r3
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	40021000 	.word	0x40021000
 8006638:	016e3600 	.word	0x016e3600
 800663c:	00f42400 	.word	0x00f42400

08006640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006648:	2300      	movs	r3, #0
 800664a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800664c:	2300      	movs	r3, #0
 800664e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8098 	beq.w	800678e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800665e:	2300      	movs	r3, #0
 8006660:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006662:	4b43      	ldr	r3, [pc, #268]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10d      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800666e:	4b40      	ldr	r3, [pc, #256]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006672:	4a3f      	ldr	r2, [pc, #252]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006678:	6593      	str	r3, [r2, #88]	@ 0x58
 800667a:	4b3d      	ldr	r3, [pc, #244]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800667c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006686:	2301      	movs	r3, #1
 8006688:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800668a:	4b3a      	ldr	r3, [pc, #232]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a39      	ldr	r2, [pc, #228]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006694:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006696:	f7fd facd 	bl	8003c34 <HAL_GetTick>
 800669a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800669c:	e009      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800669e:	f7fd fac9 	bl	8003c34 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d902      	bls.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	74fb      	strb	r3, [r7, #19]
        break;
 80066b0:	e005      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066b2:	4b30      	ldr	r3, [pc, #192]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0ef      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80066be:	7cfb      	ldrb	r3, [r7, #19]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d159      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01e      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d019      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066e0:	4b23      	ldr	r3, [pc, #140]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066ec:	4b20      	ldr	r3, [pc, #128]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006702:	4a1b      	ldr	r2, [pc, #108]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800670c:	4a18      	ldr	r2, [pc, #96]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d016      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671e:	f7fd fa89 	bl	8003c34 <HAL_GetTick>
 8006722:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006724:	e00b      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fd fa85 	bl	8003c34 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d902      	bls.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	74fb      	strb	r3, [r7, #19]
            break;
 800673c:	e006      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800673e:	4b0c      	ldr	r3, [pc, #48]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0ec      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800674c:	7cfb      	ldrb	r3, [r7, #19]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006752:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006758:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006760:	4903      	ldr	r1, [pc, #12]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006768:	e008      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800676a:	7cfb      	ldrb	r3, [r7, #19]
 800676c:	74bb      	strb	r3, [r7, #18]
 800676e:	e005      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006770:	40021000 	.word	0x40021000
 8006774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	7cfb      	ldrb	r3, [r7, #19]
 800677a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800677c:	7c7b      	ldrb	r3, [r7, #17]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d105      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006782:	4ba7      	ldr	r3, [pc, #668]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006786:	4aa6      	ldr	r2, [pc, #664]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800678c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800679a:	4ba1      	ldr	r3, [pc, #644]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a0:	f023 0203 	bic.w	r2, r3, #3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	499d      	ldr	r1, [pc, #628]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067bc:	4b98      	ldr	r3, [pc, #608]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c2:	f023 020c 	bic.w	r2, r3, #12
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	4995      	ldr	r1, [pc, #596]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067de:	4b90      	ldr	r3, [pc, #576]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	498c      	ldr	r1, [pc, #560]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006800:	4b87      	ldr	r3, [pc, #540]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006806:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	4984      	ldr	r1, [pc, #528]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006810:	4313      	orrs	r3, r2
 8006812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006822:	4b7f      	ldr	r3, [pc, #508]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	497b      	ldr	r1, [pc, #492]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006844:	4b76      	ldr	r3, [pc, #472]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	4973      	ldr	r1, [pc, #460]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006866:	4b6e      	ldr	r3, [pc, #440]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	496a      	ldr	r1, [pc, #424]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006888:	4b65      	ldr	r3, [pc, #404]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800688e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	4962      	ldr	r1, [pc, #392]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b8:	4959      	ldr	r1, [pc, #356]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068cc:	4b54      	ldr	r3, [pc, #336]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068d2:	f023 0203 	bic.w	r2, r3, #3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	4951      	ldr	r1, [pc, #324]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fc:	4948      	ldr	r1, [pc, #288]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690c:	2b00      	cmp	r3, #0
 800690e:	d015      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006910:	4b43      	ldr	r3, [pc, #268]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006916:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691e:	4940      	ldr	r1, [pc, #256]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800692e:	d105      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006930:	4b3b      	ldr	r3, [pc, #236]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4a3a      	ldr	r2, [pc, #232]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800693a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006944:	2b00      	cmp	r3, #0
 8006946:	d015      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006948:	4b35      	ldr	r3, [pc, #212]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006956:	4932      	ldr	r1, [pc, #200]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006958:	4313      	orrs	r3, r2
 800695a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006962:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006966:	d105      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006968:	4b2d      	ldr	r3, [pc, #180]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006972:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d015      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006980:	4b27      	ldr	r3, [pc, #156]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006986:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698e:	4924      	ldr	r1, [pc, #144]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006990:	4313      	orrs	r3, r2
 8006992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800699e:	d105      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d015      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069b8:	4b19      	ldr	r3, [pc, #100]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c6:	4916      	ldr	r1, [pc, #88]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069d6:	d105      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069d8:	4b11      	ldr	r3, [pc, #68]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	4a10      	ldr	r2, [pc, #64]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d019      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fe:	4908      	ldr	r1, [pc, #32]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a0e:	d109      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a10:	4b03      	ldr	r3, [pc, #12]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4a02      	ldr	r2, [pc, #8]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a1a:	60d3      	str	r3, [r2, #12]
 8006a1c:	e002      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a1e:	bf00      	nop
 8006a20:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d015      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a30:	4b29      	ldr	r3, [pc, #164]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3e:	4926      	ldr	r1, [pc, #152]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a4e:	d105      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a50:	4b21      	ldr	r3, [pc, #132]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4a20      	ldr	r2, [pc, #128]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d015      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006a68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a76:	4918      	ldr	r1, [pc, #96]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a86:	d105      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a88:	4b13      	ldr	r3, [pc, #76]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	4a12      	ldr	r2, [pc, #72]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d015      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006aa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aae:	490a      	ldr	r1, [pc, #40]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006abe:	d105      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ac0:	4b05      	ldr	r3, [pc, #20]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	4a04      	ldr	r2, [pc, #16]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ac6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006acc:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40021000 	.word	0x40021000

08006adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e054      	b.n	8006b98 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d111      	bne.n	8006b1e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 ff3a 	bl	800897c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a23      	ldr	r2, [pc, #140]	@ (8006ba0 <HAL_TIM_Base_Init+0xc4>)
 8006b14:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f001 fa83 	bl	800803c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	08003699 	.word	0x08003699

08006ba4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d001      	beq.n	8006bbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e04c      	b.n	8006c56 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a26      	ldr	r2, [pc, #152]	@ (8006c64 <HAL_TIM_Base_Start+0xc0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d022      	beq.n	8006c14 <HAL_TIM_Base_Start+0x70>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd6:	d01d      	beq.n	8006c14 <HAL_TIM_Base_Start+0x70>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a22      	ldr	r2, [pc, #136]	@ (8006c68 <HAL_TIM_Base_Start+0xc4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d018      	beq.n	8006c14 <HAL_TIM_Base_Start+0x70>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a21      	ldr	r2, [pc, #132]	@ (8006c6c <HAL_TIM_Base_Start+0xc8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d013      	beq.n	8006c14 <HAL_TIM_Base_Start+0x70>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8006c70 <HAL_TIM_Base_Start+0xcc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00e      	beq.n	8006c14 <HAL_TIM_Base_Start+0x70>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8006c74 <HAL_TIM_Base_Start+0xd0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d009      	beq.n	8006c14 <HAL_TIM_Base_Start+0x70>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a1c      	ldr	r2, [pc, #112]	@ (8006c78 <HAL_TIM_Base_Start+0xd4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_TIM_Base_Start+0x70>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006c7c <HAL_TIM_Base_Start+0xd8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d115      	bne.n	8006c40 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	4b19      	ldr	r3, [pc, #100]	@ (8006c80 <HAL_TIM_Base_Start+0xdc>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b06      	cmp	r3, #6
 8006c24:	d015      	beq.n	8006c52 <HAL_TIM_Base_Start+0xae>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c2c:	d011      	beq.n	8006c52 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0201 	orr.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3e:	e008      	b.n	8006c52 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e000      	b.n	8006c54 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40012c00 	.word	0x40012c00
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40013400 	.word	0x40013400
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	40015000 	.word	0x40015000
 8006c80:	00010007 	.word	0x00010007

08006c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d001      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e054      	b.n	8006d46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a26      	ldr	r2, [pc, #152]	@ (8006d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d022      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc6:	d01d      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a22      	ldr	r2, [pc, #136]	@ (8006d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d018      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a21      	ldr	r2, [pc, #132]	@ (8006d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d013      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8006d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00e      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1e      	ldr	r2, [pc, #120]	@ (8006d64 <HAL_TIM_Base_Start_IT+0xe0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d68 <HAL_TIM_Base_Start_IT+0xe4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <HAL_TIM_Base_Start_IT+0xe8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d115      	bne.n	8006d30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	4b19      	ldr	r3, [pc, #100]	@ (8006d70 <HAL_TIM_Base_Start_IT+0xec>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b06      	cmp	r3, #6
 8006d14:	d015      	beq.n	8006d42 <HAL_TIM_Base_Start_IT+0xbe>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1c:	d011      	beq.n	8006d42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0201 	orr.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2e:	e008      	b.n	8006d42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e000      	b.n	8006d44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40000c00 	.word	0x40000c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40015000 	.word	0x40015000
 8006d70:	00010007 	.word	0x00010007

08006d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e054      	b.n	8006e30 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d111      	bne.n	8006db6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fdee 	bl	800897c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d102      	bne.n	8006dae <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a23      	ldr	r2, [pc, #140]	@ (8006e38 <HAL_TIM_PWM_Init+0xc4>)
 8006dac:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f001 f937 	bl	800803c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	08006e3d 	.word	0x08006e3d

08006e3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d109      	bne.n	8006e78 <HAL_TIM_PWM_Start_IT+0x28>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	bf14      	ite	ne
 8006e70:	2301      	movne	r3, #1
 8006e72:	2300      	moveq	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	e03c      	b.n	8006ef2 <HAL_TIM_PWM_Start_IT+0xa2>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d109      	bne.n	8006e92 <HAL_TIM_PWM_Start_IT+0x42>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	bf14      	ite	ne
 8006e8a:	2301      	movne	r3, #1
 8006e8c:	2300      	moveq	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	e02f      	b.n	8006ef2 <HAL_TIM_PWM_Start_IT+0xa2>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d109      	bne.n	8006eac <HAL_TIM_PWM_Start_IT+0x5c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	bf14      	ite	ne
 8006ea4:	2301      	movne	r3, #1
 8006ea6:	2300      	moveq	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	e022      	b.n	8006ef2 <HAL_TIM_PWM_Start_IT+0xa2>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b0c      	cmp	r3, #12
 8006eb0:	d109      	bne.n	8006ec6 <HAL_TIM_PWM_Start_IT+0x76>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	bf14      	ite	ne
 8006ebe:	2301      	movne	r3, #1
 8006ec0:	2300      	moveq	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	e015      	b.n	8006ef2 <HAL_TIM_PWM_Start_IT+0xa2>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b10      	cmp	r3, #16
 8006eca:	d109      	bne.n	8006ee0 <HAL_TIM_PWM_Start_IT+0x90>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	bf14      	ite	ne
 8006ed8:	2301      	movne	r3, #1
 8006eda:	2300      	moveq	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	e008      	b.n	8006ef2 <HAL_TIM_PWM_Start_IT+0xa2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	bf14      	ite	ne
 8006eec:	2301      	movne	r3, #1
 8006eee:	2300      	moveq	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e0f1      	b.n	80070de <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <HAL_TIM_PWM_Start_IT+0xba>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f08:	e023      	b.n	8006f52 <HAL_TIM_PWM_Start_IT+0x102>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d104      	bne.n	8006f1a <HAL_TIM_PWM_Start_IT+0xca>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f18:	e01b      	b.n	8006f52 <HAL_TIM_PWM_Start_IT+0x102>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d104      	bne.n	8006f2a <HAL_TIM_PWM_Start_IT+0xda>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f28:	e013      	b.n	8006f52 <HAL_TIM_PWM_Start_IT+0x102>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b0c      	cmp	r3, #12
 8006f2e:	d104      	bne.n	8006f3a <HAL_TIM_PWM_Start_IT+0xea>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f38:	e00b      	b.n	8006f52 <HAL_TIM_PWM_Start_IT+0x102>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d104      	bne.n	8006f4a <HAL_TIM_PWM_Start_IT+0xfa>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f48:	e003      	b.n	8006f52 <HAL_TIM_PWM_Start_IT+0x102>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d841      	bhi.n	8006fdc <HAL_TIM_PWM_Start_IT+0x18c>
 8006f58:	a201      	add	r2, pc, #4	@ (adr r2, 8006f60 <HAL_TIM_PWM_Start_IT+0x110>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f95 	.word	0x08006f95
 8006f64:	08006fdd 	.word	0x08006fdd
 8006f68:	08006fdd 	.word	0x08006fdd
 8006f6c:	08006fdd 	.word	0x08006fdd
 8006f70:	08006fa7 	.word	0x08006fa7
 8006f74:	08006fdd 	.word	0x08006fdd
 8006f78:	08006fdd 	.word	0x08006fdd
 8006f7c:	08006fdd 	.word	0x08006fdd
 8006f80:	08006fb9 	.word	0x08006fb9
 8006f84:	08006fdd 	.word	0x08006fdd
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006fdd 	.word	0x08006fdd
 8006f90:	08006fcb 	.word	0x08006fcb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0202 	orr.w	r2, r2, #2
 8006fa2:	60da      	str	r2, [r3, #12]
      break;
 8006fa4:	e01d      	b.n	8006fe2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0204 	orr.w	r2, r2, #4
 8006fb4:	60da      	str	r2, [r3, #12]
      break;
 8006fb6:	e014      	b.n	8006fe2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0208 	orr.w	r2, r2, #8
 8006fc6:	60da      	str	r2, [r3, #12]
      break;
 8006fc8:	e00b      	b.n	8006fe2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f042 0210 	orr.w	r2, r2, #16
 8006fd8:	60da      	str	r2, [r3, #12]
      break;
 8006fda:	e002      	b.n	8006fe2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d179      	bne.n	80070dc <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2201      	movs	r2, #1
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 fc9d 	bl	8008930 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a3b      	ldr	r2, [pc, #236]	@ (80070e8 <HAL_TIM_PWM_Start_IT+0x298>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <HAL_TIM_PWM_Start_IT+0x1e2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a39      	ldr	r2, [pc, #228]	@ (80070ec <HAL_TIM_PWM_Start_IT+0x29c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_TIM_PWM_Start_IT+0x1e2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a38      	ldr	r2, [pc, #224]	@ (80070f0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_TIM_PWM_Start_IT+0x1e2>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a36      	ldr	r2, [pc, #216]	@ (80070f4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_TIM_PWM_Start_IT+0x1e2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a35      	ldr	r2, [pc, #212]	@ (80070f8 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_TIM_PWM_Start_IT+0x1e2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a33      	ldr	r2, [pc, #204]	@ (80070fc <HAL_TIM_PWM_Start_IT+0x2ac>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d101      	bne.n	8007036 <HAL_TIM_PWM_Start_IT+0x1e6>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <HAL_TIM_PWM_Start_IT+0x1e8>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800704a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a25      	ldr	r2, [pc, #148]	@ (80070e8 <HAL_TIM_PWM_Start_IT+0x298>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d022      	beq.n	800709c <HAL_TIM_PWM_Start_IT+0x24c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705e:	d01d      	beq.n	800709c <HAL_TIM_PWM_Start_IT+0x24c>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a26      	ldr	r2, [pc, #152]	@ (8007100 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d018      	beq.n	800709c <HAL_TIM_PWM_Start_IT+0x24c>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a25      	ldr	r2, [pc, #148]	@ (8007104 <HAL_TIM_PWM_Start_IT+0x2b4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <HAL_TIM_PWM_Start_IT+0x24c>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a23      	ldr	r2, [pc, #140]	@ (8007108 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00e      	beq.n	800709c <HAL_TIM_PWM_Start_IT+0x24c>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a1a      	ldr	r2, [pc, #104]	@ (80070ec <HAL_TIM_PWM_Start_IT+0x29c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d009      	beq.n	800709c <HAL_TIM_PWM_Start_IT+0x24c>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a18      	ldr	r2, [pc, #96]	@ (80070f0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_TIM_PWM_Start_IT+0x24c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a19      	ldr	r2, [pc, #100]	@ (80070fc <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d115      	bne.n	80070c8 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	4b1a      	ldr	r3, [pc, #104]	@ (800710c <HAL_TIM_PWM_Start_IT+0x2bc>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b06      	cmp	r3, #6
 80070ac:	d015      	beq.n	80070da <HAL_TIM_PWM_Start_IT+0x28a>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070b4:	d011      	beq.n	80070da <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0201 	orr.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c6:	e008      	b.n	80070da <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	e000      	b.n	80070dc <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070da:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40013400 	.word	0x40013400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	40014400 	.word	0x40014400
 80070f8:	40014800 	.word	0x40014800
 80070fc:	40015000 	.word	0x40015000
 8007100:	40000400 	.word	0x40000400
 8007104:	40000800 	.word	0x40000800
 8007108:	40000c00 	.word	0x40000c00
 800710c:	00010007 	.word	0x00010007

08007110 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e04c      	b.n	80071be <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d111      	bne.n	8007154 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fc1f 	bl	800897c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a1f      	ldr	r2, [pc, #124]	@ (80071c8 <HAL_TIM_OnePulse_Init+0xb8>)
 800714a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3304      	adds	r3, #4
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f000 ff68 	bl	800803c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0208 	bic.w	r2, r2, #8
 800717a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6819      	ldr	r1, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	080071cd 	.word	0x080071cd

080071cc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007200:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007208:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d108      	bne.n	8007222 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d105      	bne.n	8007222 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007216:	7b7b      	ldrb	r3, [r7, #13]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d102      	bne.n	8007222 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800721c:	7b3b      	ldrb	r3, [r7, #12]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d001      	beq.n	8007226 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e059      	b.n	80072da <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0202 	orr.w	r2, r2, #2
 8007254:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 0204 	orr.w	r2, r2, #4
 8007264:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2201      	movs	r2, #1
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f001 fb5e 	bl	8008930 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2201      	movs	r2, #1
 800727a:	2104      	movs	r1, #4
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fb57 	bl	8008930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a17      	ldr	r2, [pc, #92]	@ (80072e4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d018      	beq.n	80072be <HAL_TIM_OnePulse_Start_IT+0xde>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a15      	ldr	r2, [pc, #84]	@ (80072e8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d013      	beq.n	80072be <HAL_TIM_OnePulse_Start_IT+0xde>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a14      	ldr	r2, [pc, #80]	@ (80072ec <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00e      	beq.n	80072be <HAL_TIM_OnePulse_Start_IT+0xde>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a12      	ldr	r2, [pc, #72]	@ (80072f0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d009      	beq.n	80072be <HAL_TIM_OnePulse_Start_IT+0xde>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a11      	ldr	r2, [pc, #68]	@ (80072f4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_TIM_OnePulse_Start_IT+0xde>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a0f      	ldr	r2, [pc, #60]	@ (80072f8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d101      	bne.n	80072c2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d007      	beq.n	80072d8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40012c00 	.word	0x40012c00
 80072e8:	40013400 	.word	0x40013400
 80072ec:	40014000 	.word	0x40014000
 80072f0:	40014400 	.word	0x40014400
 80072f4:	40014800 	.word	0x40014800
 80072f8:	40015000 	.word	0x40015000

080072fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e0a2      	b.n	8007456 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d111      	bne.n	8007340 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fb29 	bl	800897c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732e:	2b00      	cmp	r3, #0
 8007330:	d102      	bne.n	8007338 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a4a      	ldr	r2, [pc, #296]	@ (8007460 <HAL_TIM_Encoder_Init+0x164>)
 8007336:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007356:	f023 0307 	bic.w	r3, r3, #7
 800735a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f000 fe68 	bl	800803c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007394:	f023 0303 	bic.w	r3, r3, #3
 8007398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	4313      	orrs	r3, r2
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80073b2:	f023 030c 	bic.w	r3, r3, #12
 80073b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	4313      	orrs	r3, r2
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	011a      	lsls	r2, r3, #4
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	031b      	lsls	r3, r3, #12
 80073e2:	4313      	orrs	r3, r2
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80073f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80073f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	4313      	orrs	r3, r2
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	08003619 	.word	0x08003619

08007464 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007474:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800747c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007484:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800748c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d110      	bne.n	80074b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d102      	bne.n	80074a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800749a:	7b7b      	ldrb	r3, [r7, #13]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d001      	beq.n	80074a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e069      	b.n	8007578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074b4:	e031      	b.n	800751a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d110      	bne.n	80074de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d102      	bne.n	80074c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074c2:	7b3b      	ldrb	r3, [r7, #12]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d001      	beq.n	80074cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e055      	b.n	8007578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074dc:	e01d      	b.n	800751a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d108      	bne.n	80074f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d105      	bne.n	80074f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074ea:	7b7b      	ldrb	r3, [r7, #13]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d102      	bne.n	80074f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074f0:	7b3b      	ldrb	r3, [r7, #12]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d001      	beq.n	80074fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e03e      	b.n	8007578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2202      	movs	r2, #2
 800750e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_TIM_Encoder_Start+0xc4>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b04      	cmp	r3, #4
 8007524:	d008      	beq.n	8007538 <HAL_TIM_Encoder_Start+0xd4>
 8007526:	e00f      	b.n	8007548 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2201      	movs	r2, #1
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f9fd 	bl	8008930 <TIM_CCxChannelCmd>
      break;
 8007536:	e016      	b.n	8007566 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2201      	movs	r2, #1
 800753e:	2104      	movs	r1, #4
 8007540:	4618      	mov	r0, r3
 8007542:	f001 f9f5 	bl	8008930 <TIM_CCxChannelCmd>
      break;
 8007546:	e00e      	b.n	8007566 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2201      	movs	r2, #1
 800754e:	2100      	movs	r1, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f001 f9ed 	bl	8008930 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2201      	movs	r2, #1
 800755c:	2104      	movs	r1, #4
 800755e:	4618      	mov	r0, r3
 8007560:	f001 f9e6 	bl	8008930 <TIM_CCxChannelCmd>
      break;
 8007564:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0201 	orr.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d026      	beq.n	80075f0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d021      	beq.n	80075f0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0202 	mvn.w	r2, #2
 80075b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
 80075d4:	e009      	b.n	80075ea <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d026      	beq.n	8007648 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d021      	beq.n	8007648 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0204 	mvn.w	r2, #4
 800760c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2202      	movs	r2, #2
 8007612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
 800762c:	e009      	b.n	8007642 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d026      	beq.n	80076a0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	2b00      	cmp	r3, #0
 800765a:	d021      	beq.n	80076a0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f06f 0208 	mvn.w	r2, #8
 8007664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2204      	movs	r2, #4
 800766a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
 8007684:	e009      	b.n	800769a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d026      	beq.n	80076f8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f003 0310 	and.w	r3, r3, #16
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d021      	beq.n	80076f8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0210 	mvn.w	r2, #16
 80076bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2208      	movs	r2, #8
 80076c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
 80076dc:	e009      	b.n	80076f2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00e      	beq.n	8007720 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d009      	beq.n	8007720 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f06f 0201 	mvn.w	r2, #1
 8007714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00e      	beq.n	8007752 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00e      	beq.n	800777a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800776e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00e      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00e      	beq.n	80077ca <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f06f 0220 	mvn.w	r2, #32
 80077be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00e      	beq.n	80077f2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d009      	beq.n	80077f2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80077e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00e      	beq.n	800781a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d009      	beq.n	800781a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800780e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00e      	beq.n	8007842 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d009      	beq.n	8007842 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00e      	beq.n	800786a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800785e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800786a:	bf00      	nop
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800788e:	2302      	movs	r3, #2
 8007890:	e0ff      	b.n	8007a92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b14      	cmp	r3, #20
 800789e:	f200 80f0 	bhi.w	8007a82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078a2:	a201      	add	r2, pc, #4	@ (adr r2, 80078a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078fd 	.word	0x080078fd
 80078ac:	08007a83 	.word	0x08007a83
 80078b0:	08007a83 	.word	0x08007a83
 80078b4:	08007a83 	.word	0x08007a83
 80078b8:	0800793d 	.word	0x0800793d
 80078bc:	08007a83 	.word	0x08007a83
 80078c0:	08007a83 	.word	0x08007a83
 80078c4:	08007a83 	.word	0x08007a83
 80078c8:	0800797f 	.word	0x0800797f
 80078cc:	08007a83 	.word	0x08007a83
 80078d0:	08007a83 	.word	0x08007a83
 80078d4:	08007a83 	.word	0x08007a83
 80078d8:	080079bf 	.word	0x080079bf
 80078dc:	08007a83 	.word	0x08007a83
 80078e0:	08007a83 	.word	0x08007a83
 80078e4:	08007a83 	.word	0x08007a83
 80078e8:	08007a01 	.word	0x08007a01
 80078ec:	08007a83 	.word	0x08007a83
 80078f0:	08007a83 	.word	0x08007a83
 80078f4:	08007a83 	.word	0x08007a83
 80078f8:	08007a41 	.word	0x08007a41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68b9      	ldr	r1, [r7, #8]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fc4e 	bl	80081a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699a      	ldr	r2, [r3, #24]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0208 	orr.w	r2, r2, #8
 8007916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0204 	bic.w	r2, r2, #4
 8007926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6999      	ldr	r1, [r3, #24]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	619a      	str	r2, [r3, #24]
      break;
 800793a:	e0a5      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fcc8 	bl	80082d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	699a      	ldr	r2, [r3, #24]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6999      	ldr	r1, [r3, #24]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	021a      	lsls	r2, r3, #8
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	619a      	str	r2, [r3, #24]
      break;
 800797c:	e084      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fd3b 	bl	8008400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69da      	ldr	r2, [r3, #28]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f042 0208 	orr.w	r2, r2, #8
 8007998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69da      	ldr	r2, [r3, #28]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0204 	bic.w	r2, r2, #4
 80079a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	69d9      	ldr	r1, [r3, #28]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	61da      	str	r2, [r3, #28]
      break;
 80079bc:	e064      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fdad 	bl	8008524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69da      	ldr	r2, [r3, #28]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69da      	ldr	r2, [r3, #28]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69d9      	ldr	r1, [r3, #28]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	021a      	lsls	r2, r3, #8
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	61da      	str	r2, [r3, #28]
      break;
 80079fe:	e043      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fe20 	bl	800864c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0208 	orr.w	r2, r2, #8
 8007a1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0204 	bic.w	r2, r2, #4
 8007a2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	691a      	ldr	r2, [r3, #16]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007a3e:	e023      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fe6a 	bl	8008720 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	021a      	lsls	r2, r3, #8
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007a80:	e002      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	75fb      	strb	r3, [r7, #23]
      break;
 8007a86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop

08007a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e0f6      	b.n	8007ca6 <HAL_TIM_ConfigClockSource+0x20a>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007ad6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a6f      	ldr	r2, [pc, #444]	@ (8007cb0 <HAL_TIM_ConfigClockSource+0x214>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	f000 80c1 	beq.w	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007af8:	4a6d      	ldr	r2, [pc, #436]	@ (8007cb0 <HAL_TIM_ConfigClockSource+0x214>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	f200 80c6 	bhi.w	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b00:	4a6c      	ldr	r2, [pc, #432]	@ (8007cb4 <HAL_TIM_ConfigClockSource+0x218>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	f000 80b9 	beq.w	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007b08:	4a6a      	ldr	r2, [pc, #424]	@ (8007cb4 <HAL_TIM_ConfigClockSource+0x218>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	f200 80be 	bhi.w	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b10:	4a69      	ldr	r2, [pc, #420]	@ (8007cb8 <HAL_TIM_ConfigClockSource+0x21c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	f000 80b1 	beq.w	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007b18:	4a67      	ldr	r2, [pc, #412]	@ (8007cb8 <HAL_TIM_ConfigClockSource+0x21c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	f200 80b6 	bhi.w	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b20:	4a66      	ldr	r2, [pc, #408]	@ (8007cbc <HAL_TIM_ConfigClockSource+0x220>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	f000 80a9 	beq.w	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007b28:	4a64      	ldr	r2, [pc, #400]	@ (8007cbc <HAL_TIM_ConfigClockSource+0x220>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	f200 80ae 	bhi.w	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b30:	4a63      	ldr	r2, [pc, #396]	@ (8007cc0 <HAL_TIM_ConfigClockSource+0x224>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	f000 80a1 	beq.w	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007b38:	4a61      	ldr	r2, [pc, #388]	@ (8007cc0 <HAL_TIM_ConfigClockSource+0x224>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	f200 80a6 	bhi.w	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b40:	4a60      	ldr	r2, [pc, #384]	@ (8007cc4 <HAL_TIM_ConfigClockSource+0x228>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	f000 8099 	beq.w	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007b48:	4a5e      	ldr	r2, [pc, #376]	@ (8007cc4 <HAL_TIM_ConfigClockSource+0x228>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	f200 809e 	bhi.w	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b54:	f000 8091 	beq.w	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007b58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b5c:	f200 8096 	bhi.w	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b64:	f000 8089 	beq.w	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007b68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b6c:	f200 808e 	bhi.w	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b74:	d03e      	beq.n	8007bf4 <HAL_TIM_ConfigClockSource+0x158>
 8007b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b7a:	f200 8087 	bhi.w	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b82:	f000 8086 	beq.w	8007c92 <HAL_TIM_ConfigClockSource+0x1f6>
 8007b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b8a:	d87f      	bhi.n	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b8c:	2b70      	cmp	r3, #112	@ 0x70
 8007b8e:	d01a      	beq.n	8007bc6 <HAL_TIM_ConfigClockSource+0x12a>
 8007b90:	2b70      	cmp	r3, #112	@ 0x70
 8007b92:	d87b      	bhi.n	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b94:	2b60      	cmp	r3, #96	@ 0x60
 8007b96:	d050      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x19e>
 8007b98:	2b60      	cmp	r3, #96	@ 0x60
 8007b9a:	d877      	bhi.n	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007b9c:	2b50      	cmp	r3, #80	@ 0x50
 8007b9e:	d03c      	beq.n	8007c1a <HAL_TIM_ConfigClockSource+0x17e>
 8007ba0:	2b50      	cmp	r3, #80	@ 0x50
 8007ba2:	d873      	bhi.n	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007ba4:	2b40      	cmp	r3, #64	@ 0x40
 8007ba6:	d058      	beq.n	8007c5a <HAL_TIM_ConfigClockSource+0x1be>
 8007ba8:	2b40      	cmp	r3, #64	@ 0x40
 8007baa:	d86f      	bhi.n	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007bac:	2b30      	cmp	r3, #48	@ 0x30
 8007bae:	d064      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007bb0:	2b30      	cmp	r3, #48	@ 0x30
 8007bb2:	d86b      	bhi.n	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d060      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d867      	bhi.n	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d05c      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d05a      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0x1de>
 8007bc4:	e062      	b.n	8007c8c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bd6:	f000 fe8b 	bl	80088f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	609a      	str	r2, [r3, #8]
      break;
 8007bf2:	e04f      	b.n	8007c94 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c04:	f000 fe74 	bl	80088f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689a      	ldr	r2, [r3, #8]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c16:	609a      	str	r2, [r3, #8]
      break;
 8007c18:	e03c      	b.n	8007c94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c26:	461a      	mov	r2, r3
 8007c28:	f000 fde6 	bl	80087f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2150      	movs	r1, #80	@ 0x50
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fe3f 	bl	80088b6 <TIM_ITRx_SetConfig>
      break;
 8007c38:	e02c      	b.n	8007c94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c46:	461a      	mov	r2, r3
 8007c48:	f000 fe05 	bl	8008856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2160      	movs	r1, #96	@ 0x60
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fe2f 	bl	80088b6 <TIM_ITRx_SetConfig>
      break;
 8007c58:	e01c      	b.n	8007c94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c66:	461a      	mov	r2, r3
 8007c68:	f000 fdc6 	bl	80087f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2140      	movs	r1, #64	@ 0x40
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fe1f 	bl	80088b6 <TIM_ITRx_SetConfig>
      break;
 8007c78:	e00c      	b.n	8007c94 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4619      	mov	r1, r3
 8007c84:	4610      	mov	r0, r2
 8007c86:	f000 fe16 	bl	80088b6 <TIM_ITRx_SetConfig>
      break;
 8007c8a:	e003      	b.n	8007c94 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c90:	e000      	b.n	8007c94 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	00100070 	.word	0x00100070
 8007cb4:	00100060 	.word	0x00100060
 8007cb8:	00100050 	.word	0x00100050
 8007cbc:	00100040 	.word	0x00100040
 8007cc0:	00100030 	.word	0x00100030
 8007cc4:	00100020 	.word	0x00100020

08007cc8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	460b      	mov	r3, r1
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e14a      	b.n	800802e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	f040 80dd 	bne.w	8007f60 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	2b1f      	cmp	r3, #31
 8007daa:	f200 80d6 	bhi.w	8007f5a <HAL_TIM_RegisterCallback+0x1de>
 8007dae:	a201      	add	r2, pc, #4	@ (adr r2, 8007db4 <HAL_TIM_RegisterCallback+0x38>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007e35 	.word	0x08007e35
 8007db8:	08007e3d 	.word	0x08007e3d
 8007dbc:	08007e45 	.word	0x08007e45
 8007dc0:	08007e4d 	.word	0x08007e4d
 8007dc4:	08007e55 	.word	0x08007e55
 8007dc8:	08007e5d 	.word	0x08007e5d
 8007dcc:	08007e65 	.word	0x08007e65
 8007dd0:	08007e6d 	.word	0x08007e6d
 8007dd4:	08007e75 	.word	0x08007e75
 8007dd8:	08007e7d 	.word	0x08007e7d
 8007ddc:	08007e85 	.word	0x08007e85
 8007de0:	08007e8d 	.word	0x08007e8d
 8007de4:	08007e95 	.word	0x08007e95
 8007de8:	08007e9d 	.word	0x08007e9d
 8007dec:	08007ea7 	.word	0x08007ea7
 8007df0:	08007eb1 	.word	0x08007eb1
 8007df4:	08007ebb 	.word	0x08007ebb
 8007df8:	08007ec5 	.word	0x08007ec5
 8007dfc:	08007ecf 	.word	0x08007ecf
 8007e00:	08007ed9 	.word	0x08007ed9
 8007e04:	08007ee3 	.word	0x08007ee3
 8007e08:	08007eed 	.word	0x08007eed
 8007e0c:	08007ef7 	.word	0x08007ef7
 8007e10:	08007f01 	.word	0x08007f01
 8007e14:	08007f0b 	.word	0x08007f0b
 8007e18:	08007f15 	.word	0x08007f15
 8007e1c:	08007f1f 	.word	0x08007f1f
 8007e20:	08007f29 	.word	0x08007f29
 8007e24:	08007f33 	.word	0x08007f33
 8007e28:	08007f3d 	.word	0x08007f3d
 8007e2c:	08007f47 	.word	0x08007f47
 8007e30:	08007f51 	.word	0x08007f51
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007e3a:	e0f7      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007e42:	e0f3      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007e4a:	e0ef      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007e52:	e0eb      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007e5a:	e0e7      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007e62:	e0e3      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007e6a:	e0df      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007e72:	e0db      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007e7a:	e0d7      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007e82:	e0d3      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007e8a:	e0cf      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007e92:	e0cb      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007e9a:	e0c7      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007ea4:	e0c2      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007eae:	e0bd      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007eb8:	e0b8      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007ec2:	e0b3      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007ecc:	e0ae      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007ed6:	e0a9      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007ee0:	e0a4      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007eea:	e09f      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007ef4:	e09a      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007efe:	e095      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007f08:	e090      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007f12:	e08b      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007f1c:	e086      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007f26:	e081      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007f30:	e07c      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007f3a:	e077      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007f44:	e072      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007f4e:	e06d      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007f58:	e068      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
        break;
 8007f5e:	e065      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d15d      	bne.n	8008028 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	2b0d      	cmp	r3, #13
 8007f70:	d857      	bhi.n	8008022 <HAL_TIM_RegisterCallback+0x2a6>
 8007f72:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <HAL_TIM_RegisterCallback+0x1fc>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007fb1 	.word	0x08007fb1
 8007f7c:	08007fb9 	.word	0x08007fb9
 8007f80:	08007fc1 	.word	0x08007fc1
 8007f84:	08007fc9 	.word	0x08007fc9
 8007f88:	08007fd1 	.word	0x08007fd1
 8007f8c:	08007fd9 	.word	0x08007fd9
 8007f90:	08007fe1 	.word	0x08007fe1
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007ff1 	.word	0x08007ff1
 8007f9c:	08007ff9 	.word	0x08007ff9
 8007fa0:	08008001 	.word	0x08008001
 8007fa4:	08008009 	.word	0x08008009
 8007fa8:	08008011 	.word	0x08008011
 8007fac:	08008019 	.word	0x08008019
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007fb6:	e039      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007fbe:	e035      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007fc6:	e031      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007fce:	e02d      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007fd6:	e029      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007fde:	e025      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007fe6:	e021      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007fee:	e01d      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007ff6:	e019      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007ffe:	e015      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008006:	e011      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800800e:	e00d      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008016:	e009      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008020:	e004      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]
        break;
 8008026:	e001      	b.n	800802c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
}
 800802e:	4618      	mov	r0, r3
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop

0800803c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a4c      	ldr	r2, [pc, #304]	@ (8008180 <TIM_Base_SetConfig+0x144>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d017      	beq.n	8008084 <TIM_Base_SetConfig+0x48>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800805a:	d013      	beq.n	8008084 <TIM_Base_SetConfig+0x48>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a49      	ldr	r2, [pc, #292]	@ (8008184 <TIM_Base_SetConfig+0x148>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00f      	beq.n	8008084 <TIM_Base_SetConfig+0x48>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a48      	ldr	r2, [pc, #288]	@ (8008188 <TIM_Base_SetConfig+0x14c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00b      	beq.n	8008084 <TIM_Base_SetConfig+0x48>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a47      	ldr	r2, [pc, #284]	@ (800818c <TIM_Base_SetConfig+0x150>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d007      	beq.n	8008084 <TIM_Base_SetConfig+0x48>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a46      	ldr	r2, [pc, #280]	@ (8008190 <TIM_Base_SetConfig+0x154>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d003      	beq.n	8008084 <TIM_Base_SetConfig+0x48>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a45      	ldr	r2, [pc, #276]	@ (8008194 <TIM_Base_SetConfig+0x158>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d108      	bne.n	8008096 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800808a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a39      	ldr	r2, [pc, #228]	@ (8008180 <TIM_Base_SetConfig+0x144>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d023      	beq.n	80080e6 <TIM_Base_SetConfig+0xaa>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a4:	d01f      	beq.n	80080e6 <TIM_Base_SetConfig+0xaa>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a36      	ldr	r2, [pc, #216]	@ (8008184 <TIM_Base_SetConfig+0x148>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d01b      	beq.n	80080e6 <TIM_Base_SetConfig+0xaa>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a35      	ldr	r2, [pc, #212]	@ (8008188 <TIM_Base_SetConfig+0x14c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d017      	beq.n	80080e6 <TIM_Base_SetConfig+0xaa>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a34      	ldr	r2, [pc, #208]	@ (800818c <TIM_Base_SetConfig+0x150>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d013      	beq.n	80080e6 <TIM_Base_SetConfig+0xaa>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a33      	ldr	r2, [pc, #204]	@ (8008190 <TIM_Base_SetConfig+0x154>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00f      	beq.n	80080e6 <TIM_Base_SetConfig+0xaa>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a33      	ldr	r2, [pc, #204]	@ (8008198 <TIM_Base_SetConfig+0x15c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00b      	beq.n	80080e6 <TIM_Base_SetConfig+0xaa>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a32      	ldr	r2, [pc, #200]	@ (800819c <TIM_Base_SetConfig+0x160>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d007      	beq.n	80080e6 <TIM_Base_SetConfig+0xaa>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a31      	ldr	r2, [pc, #196]	@ (80081a0 <TIM_Base_SetConfig+0x164>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d003      	beq.n	80080e6 <TIM_Base_SetConfig+0xaa>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2c      	ldr	r2, [pc, #176]	@ (8008194 <TIM_Base_SetConfig+0x158>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d108      	bne.n	80080f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a18      	ldr	r2, [pc, #96]	@ (8008180 <TIM_Base_SetConfig+0x144>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d013      	beq.n	800814c <TIM_Base_SetConfig+0x110>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a1a      	ldr	r2, [pc, #104]	@ (8008190 <TIM_Base_SetConfig+0x154>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00f      	beq.n	800814c <TIM_Base_SetConfig+0x110>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a1a      	ldr	r2, [pc, #104]	@ (8008198 <TIM_Base_SetConfig+0x15c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00b      	beq.n	800814c <TIM_Base_SetConfig+0x110>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a19      	ldr	r2, [pc, #100]	@ (800819c <TIM_Base_SetConfig+0x160>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d007      	beq.n	800814c <TIM_Base_SetConfig+0x110>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a18      	ldr	r2, [pc, #96]	@ (80081a0 <TIM_Base_SetConfig+0x164>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d003      	beq.n	800814c <TIM_Base_SetConfig+0x110>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a13      	ldr	r2, [pc, #76]	@ (8008194 <TIM_Base_SetConfig+0x158>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d103      	bne.n	8008154 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b01      	cmp	r3, #1
 8008164:	d105      	bne.n	8008172 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	611a      	str	r2, [r3, #16]
  }
}
 8008172:	bf00      	nop
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40012c00 	.word	0x40012c00
 8008184:	40000400 	.word	0x40000400
 8008188:	40000800 	.word	0x40000800
 800818c:	40000c00 	.word	0x40000c00
 8008190:	40013400 	.word	0x40013400
 8008194:	40015000 	.word	0x40015000
 8008198:	40014000 	.word	0x40014000
 800819c:	40014400 	.word	0x40014400
 80081a0:	40014800 	.word	0x40014800

080081a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	f023 0201 	bic.w	r2, r3, #1
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0303 	bic.w	r3, r3, #3
 80081de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f023 0302 	bic.w	r3, r3, #2
 80081f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a30      	ldr	r2, [pc, #192]	@ (80082c0 <TIM_OC1_SetConfig+0x11c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d013      	beq.n	800822c <TIM_OC1_SetConfig+0x88>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a2f      	ldr	r2, [pc, #188]	@ (80082c4 <TIM_OC1_SetConfig+0x120>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00f      	beq.n	800822c <TIM_OC1_SetConfig+0x88>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a2e      	ldr	r2, [pc, #184]	@ (80082c8 <TIM_OC1_SetConfig+0x124>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00b      	beq.n	800822c <TIM_OC1_SetConfig+0x88>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a2d      	ldr	r2, [pc, #180]	@ (80082cc <TIM_OC1_SetConfig+0x128>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d007      	beq.n	800822c <TIM_OC1_SetConfig+0x88>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a2c      	ldr	r2, [pc, #176]	@ (80082d0 <TIM_OC1_SetConfig+0x12c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <TIM_OC1_SetConfig+0x88>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a2b      	ldr	r2, [pc, #172]	@ (80082d4 <TIM_OC1_SetConfig+0x130>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d10c      	bne.n	8008246 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f023 0308 	bic.w	r3, r3, #8
 8008232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f023 0304 	bic.w	r3, r3, #4
 8008244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1d      	ldr	r2, [pc, #116]	@ (80082c0 <TIM_OC1_SetConfig+0x11c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d013      	beq.n	8008276 <TIM_OC1_SetConfig+0xd2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1c      	ldr	r2, [pc, #112]	@ (80082c4 <TIM_OC1_SetConfig+0x120>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00f      	beq.n	8008276 <TIM_OC1_SetConfig+0xd2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a1b      	ldr	r2, [pc, #108]	@ (80082c8 <TIM_OC1_SetConfig+0x124>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00b      	beq.n	8008276 <TIM_OC1_SetConfig+0xd2>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1a      	ldr	r2, [pc, #104]	@ (80082cc <TIM_OC1_SetConfig+0x128>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d007      	beq.n	8008276 <TIM_OC1_SetConfig+0xd2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a19      	ldr	r2, [pc, #100]	@ (80082d0 <TIM_OC1_SetConfig+0x12c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d003      	beq.n	8008276 <TIM_OC1_SetConfig+0xd2>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a18      	ldr	r2, [pc, #96]	@ (80082d4 <TIM_OC1_SetConfig+0x130>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d111      	bne.n	800829a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800827c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	621a      	str	r2, [r3, #32]
}
 80082b4:	bf00      	nop
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	40012c00 	.word	0x40012c00
 80082c4:	40013400 	.word	0x40013400
 80082c8:	40014000 	.word	0x40014000
 80082cc:	40014400 	.word	0x40014400
 80082d0:	40014800 	.word	0x40014800
 80082d4:	40015000 	.word	0x40015000

080082d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	f023 0210 	bic.w	r2, r3, #16
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800830a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	021b      	lsls	r3, r3, #8
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f023 0320 	bic.w	r3, r3, #32
 8008326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a2c      	ldr	r2, [pc, #176]	@ (80083e8 <TIM_OC2_SetConfig+0x110>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d007      	beq.n	800834c <TIM_OC2_SetConfig+0x74>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a2b      	ldr	r2, [pc, #172]	@ (80083ec <TIM_OC2_SetConfig+0x114>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_OC2_SetConfig+0x74>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a2a      	ldr	r2, [pc, #168]	@ (80083f0 <TIM_OC2_SetConfig+0x118>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d10d      	bne.n	8008368 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	011b      	lsls	r3, r3, #4
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a1f      	ldr	r2, [pc, #124]	@ (80083e8 <TIM_OC2_SetConfig+0x110>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d013      	beq.n	8008398 <TIM_OC2_SetConfig+0xc0>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a1e      	ldr	r2, [pc, #120]	@ (80083ec <TIM_OC2_SetConfig+0x114>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00f      	beq.n	8008398 <TIM_OC2_SetConfig+0xc0>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a1e      	ldr	r2, [pc, #120]	@ (80083f4 <TIM_OC2_SetConfig+0x11c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00b      	beq.n	8008398 <TIM_OC2_SetConfig+0xc0>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a1d      	ldr	r2, [pc, #116]	@ (80083f8 <TIM_OC2_SetConfig+0x120>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d007      	beq.n	8008398 <TIM_OC2_SetConfig+0xc0>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a1c      	ldr	r2, [pc, #112]	@ (80083fc <TIM_OC2_SetConfig+0x124>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d003      	beq.n	8008398 <TIM_OC2_SetConfig+0xc0>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a17      	ldr	r2, [pc, #92]	@ (80083f0 <TIM_OC2_SetConfig+0x118>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d113      	bne.n	80083c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800839e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	4313      	orrs	r3, r2
 80083be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	621a      	str	r2, [r3, #32]
}
 80083da:	bf00      	nop
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40012c00 	.word	0x40012c00
 80083ec:	40013400 	.word	0x40013400
 80083f0:	40015000 	.word	0x40015000
 80083f4:	40014000 	.word	0x40014000
 80083f8:	40014400 	.word	0x40014400
 80083fc:	40014800 	.word	0x40014800

08008400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800842e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 0303 	bic.w	r3, r3, #3
 800843a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800844c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a2b      	ldr	r2, [pc, #172]	@ (800850c <TIM_OC3_SetConfig+0x10c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d007      	beq.n	8008472 <TIM_OC3_SetConfig+0x72>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a2a      	ldr	r2, [pc, #168]	@ (8008510 <TIM_OC3_SetConfig+0x110>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d003      	beq.n	8008472 <TIM_OC3_SetConfig+0x72>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a29      	ldr	r2, [pc, #164]	@ (8008514 <TIM_OC3_SetConfig+0x114>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d10d      	bne.n	800848e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800848c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a1e      	ldr	r2, [pc, #120]	@ (800850c <TIM_OC3_SetConfig+0x10c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d013      	beq.n	80084be <TIM_OC3_SetConfig+0xbe>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a1d      	ldr	r2, [pc, #116]	@ (8008510 <TIM_OC3_SetConfig+0x110>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d00f      	beq.n	80084be <TIM_OC3_SetConfig+0xbe>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008518 <TIM_OC3_SetConfig+0x118>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00b      	beq.n	80084be <TIM_OC3_SetConfig+0xbe>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a1c      	ldr	r2, [pc, #112]	@ (800851c <TIM_OC3_SetConfig+0x11c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d007      	beq.n	80084be <TIM_OC3_SetConfig+0xbe>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008520 <TIM_OC3_SetConfig+0x120>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d003      	beq.n	80084be <TIM_OC3_SetConfig+0xbe>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a16      	ldr	r2, [pc, #88]	@ (8008514 <TIM_OC3_SetConfig+0x114>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d113      	bne.n	80084e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	621a      	str	r2, [r3, #32]
}
 8008500:	bf00      	nop
 8008502:	371c      	adds	r7, #28
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	40012c00 	.word	0x40012c00
 8008510:	40013400 	.word	0x40013400
 8008514:	40015000 	.word	0x40015000
 8008518:	40014000 	.word	0x40014000
 800851c:	40014400 	.word	0x40014400
 8008520:	40014800 	.word	0x40014800

08008524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800855e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4313      	orrs	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	031b      	lsls	r3, r3, #12
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a2c      	ldr	r2, [pc, #176]	@ (8008634 <TIM_OC4_SetConfig+0x110>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d007      	beq.n	8008598 <TIM_OC4_SetConfig+0x74>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a2b      	ldr	r2, [pc, #172]	@ (8008638 <TIM_OC4_SetConfig+0x114>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d003      	beq.n	8008598 <TIM_OC4_SetConfig+0x74>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a2a      	ldr	r2, [pc, #168]	@ (800863c <TIM_OC4_SetConfig+0x118>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d10d      	bne.n	80085b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800859e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	031b      	lsls	r3, r3, #12
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008634 <TIM_OC4_SetConfig+0x110>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d013      	beq.n	80085e4 <TIM_OC4_SetConfig+0xc0>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a1e      	ldr	r2, [pc, #120]	@ (8008638 <TIM_OC4_SetConfig+0x114>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00f      	beq.n	80085e4 <TIM_OC4_SetConfig+0xc0>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008640 <TIM_OC4_SetConfig+0x11c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00b      	beq.n	80085e4 <TIM_OC4_SetConfig+0xc0>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a1d      	ldr	r2, [pc, #116]	@ (8008644 <TIM_OC4_SetConfig+0x120>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d007      	beq.n	80085e4 <TIM_OC4_SetConfig+0xc0>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008648 <TIM_OC4_SetConfig+0x124>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_OC4_SetConfig+0xc0>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a17      	ldr	r2, [pc, #92]	@ (800863c <TIM_OC4_SetConfig+0x118>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d113      	bne.n	800860c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	019b      	lsls	r3, r3, #6
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	019b      	lsls	r3, r3, #6
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	40012c00 	.word	0x40012c00
 8008638:	40013400 	.word	0x40013400
 800863c:	40015000 	.word	0x40015000
 8008640:	40014000 	.word	0x40014000
 8008644:	40014400 	.word	0x40014400
 8008648:	40014800 	.word	0x40014800

0800864c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800867a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008690:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	041b      	lsls	r3, r3, #16
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	4313      	orrs	r3, r2
 800869c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a19      	ldr	r2, [pc, #100]	@ (8008708 <TIM_OC5_SetConfig+0xbc>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d013      	beq.n	80086ce <TIM_OC5_SetConfig+0x82>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a18      	ldr	r2, [pc, #96]	@ (800870c <TIM_OC5_SetConfig+0xc0>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00f      	beq.n	80086ce <TIM_OC5_SetConfig+0x82>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a17      	ldr	r2, [pc, #92]	@ (8008710 <TIM_OC5_SetConfig+0xc4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00b      	beq.n	80086ce <TIM_OC5_SetConfig+0x82>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a16      	ldr	r2, [pc, #88]	@ (8008714 <TIM_OC5_SetConfig+0xc8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d007      	beq.n	80086ce <TIM_OC5_SetConfig+0x82>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a15      	ldr	r2, [pc, #84]	@ (8008718 <TIM_OC5_SetConfig+0xcc>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d003      	beq.n	80086ce <TIM_OC5_SetConfig+0x82>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a14      	ldr	r2, [pc, #80]	@ (800871c <TIM_OC5_SetConfig+0xd0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d109      	bne.n	80086e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	621a      	str	r2, [r3, #32]
}
 80086fc:	bf00      	nop
 80086fe:	371c      	adds	r7, #28
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	40012c00 	.word	0x40012c00
 800870c:	40013400 	.word	0x40013400
 8008710:	40014000 	.word	0x40014000
 8008714:	40014400 	.word	0x40014400
 8008718:	40014800 	.word	0x40014800
 800871c:	40015000 	.word	0x40015000

08008720 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800874e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	051b      	lsls	r3, r3, #20
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a1a      	ldr	r2, [pc, #104]	@ (80087e0 <TIM_OC6_SetConfig+0xc0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d013      	beq.n	80087a4 <TIM_OC6_SetConfig+0x84>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a19      	ldr	r2, [pc, #100]	@ (80087e4 <TIM_OC6_SetConfig+0xc4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d00f      	beq.n	80087a4 <TIM_OC6_SetConfig+0x84>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a18      	ldr	r2, [pc, #96]	@ (80087e8 <TIM_OC6_SetConfig+0xc8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00b      	beq.n	80087a4 <TIM_OC6_SetConfig+0x84>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a17      	ldr	r2, [pc, #92]	@ (80087ec <TIM_OC6_SetConfig+0xcc>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d007      	beq.n	80087a4 <TIM_OC6_SetConfig+0x84>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a16      	ldr	r2, [pc, #88]	@ (80087f0 <TIM_OC6_SetConfig+0xd0>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d003      	beq.n	80087a4 <TIM_OC6_SetConfig+0x84>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a15      	ldr	r2, [pc, #84]	@ (80087f4 <TIM_OC6_SetConfig+0xd4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d109      	bne.n	80087b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	029b      	lsls	r3, r3, #10
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	621a      	str	r2, [r3, #32]
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40012c00 	.word	0x40012c00
 80087e4:	40013400 	.word	0x40013400
 80087e8:	40014000 	.word	0x40014000
 80087ec:	40014400 	.word	0x40014400
 80087f0:	40014800 	.word	0x40014800
 80087f4:	40015000 	.word	0x40015000

080087f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f023 0201 	bic.w	r2, r3, #1
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	011b      	lsls	r3, r3, #4
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	4313      	orrs	r3, r2
 800882c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f023 030a 	bic.w	r3, r3, #10
 8008834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	621a      	str	r2, [r3, #32]
}
 800884a:	bf00      	nop
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008856:	b480      	push	{r7}
 8008858:	b087      	sub	sp, #28
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	f023 0210 	bic.w	r2, r3, #16
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	031b      	lsls	r3, r3, #12
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	4313      	orrs	r3, r2
 800888a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008892:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	621a      	str	r2, [r3, #32]
}
 80088aa:	bf00      	nop
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b085      	sub	sp, #20
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80088cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	f043 0307 	orr.w	r3, r3, #7
 80088dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	609a      	str	r2, [r3, #8]
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
 80088fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800890a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	021a      	lsls	r2, r3, #8
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	431a      	orrs	r2, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	4313      	orrs	r3, r2
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	609a      	str	r2, [r3, #8]
}
 8008924:	bf00      	nop
 8008926:	371c      	adds	r7, #28
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	2201      	movs	r2, #1
 8008944:	fa02 f303 	lsl.w	r3, r2, r3
 8008948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a1a      	ldr	r2, [r3, #32]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	43db      	mvns	r3, r3
 8008952:	401a      	ands	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a1a      	ldr	r2, [r3, #32]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	fa01 f303 	lsl.w	r3, r1, r3
 8008968:	431a      	orrs	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
	...

0800897c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a26      	ldr	r2, [pc, #152]	@ (8008a20 <TIM_ResetCallback+0xa4>)
 8008988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a25      	ldr	r2, [pc, #148]	@ (8008a24 <TIM_ResetCallback+0xa8>)
 8008990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a24      	ldr	r2, [pc, #144]	@ (8008a28 <TIM_ResetCallback+0xac>)
 8008998:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a23      	ldr	r2, [pc, #140]	@ (8008a2c <TIM_ResetCallback+0xb0>)
 80089a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a22      	ldr	r2, [pc, #136]	@ (8008a30 <TIM_ResetCallback+0xb4>)
 80089a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a21      	ldr	r2, [pc, #132]	@ (8008a34 <TIM_ResetCallback+0xb8>)
 80089b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a20      	ldr	r2, [pc, #128]	@ (8008a38 <TIM_ResetCallback+0xbc>)
 80089b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a1f      	ldr	r2, [pc, #124]	@ (8008a3c <TIM_ResetCallback+0xc0>)
 80089c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008a40 <TIM_ResetCallback+0xc4>)
 80089c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a1d      	ldr	r2, [pc, #116]	@ (8008a44 <TIM_ResetCallback+0xc8>)
 80089d0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a48 <TIM_ResetCallback+0xcc>)
 80089d8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a1b      	ldr	r2, [pc, #108]	@ (8008a4c <TIM_ResetCallback+0xd0>)
 80089e0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008a50 <TIM_ResetCallback+0xd4>)
 80089e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a19      	ldr	r2, [pc, #100]	@ (8008a54 <TIM_ResetCallback+0xd8>)
 80089f0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a18      	ldr	r2, [pc, #96]	@ (8008a58 <TIM_ResetCallback+0xdc>)
 80089f8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a17      	ldr	r2, [pc, #92]	@ (8008a5c <TIM_ResetCallback+0xe0>)
 8008a00:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a16      	ldr	r2, [pc, #88]	@ (8008a60 <TIM_ResetCallback+0xe4>)
 8008a08:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a15      	ldr	r2, [pc, #84]	@ (8008a64 <TIM_ResetCallback+0xe8>)
 8008a10:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	08003411 	.word	0x08003411
 8008a24:	08007cc9 	.word	0x08007cc9
 8008a28:	08007d41 	.word	0x08007d41
 8008a2c:	08007d55 	.word	0x08007d55
 8008a30:	08007cf1 	.word	0x08007cf1
 8008a34:	08007d05 	.word	0x08007d05
 8008a38:	08007cdd 	.word	0x08007cdd
 8008a3c:	08007d19 	.word	0x08007d19
 8008a40:	08007d2d 	.word	0x08007d2d
 8008a44:	08007d69 	.word	0x08007d69
 8008a48:	08008b95 	.word	0x08008b95
 8008a4c:	08008ba9 	.word	0x08008ba9
 8008a50:	08008bbd 	.word	0x08008bbd
 8008a54:	08008bd1 	.word	0x08008bd1
 8008a58:	08008be5 	.word	0x08008be5
 8008a5c:	08008bf9 	.word	0x08008bf9
 8008a60:	08008c0d 	.word	0x08008c0d
 8008a64:	08008c21 	.word	0x08008c21

08008a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e074      	b.n	8008b6a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a34      	ldr	r2, [pc, #208]	@ (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d009      	beq.n	8008abe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a33      	ldr	r2, [pc, #204]	@ (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d004      	beq.n	8008abe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a31      	ldr	r2, [pc, #196]	@ (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d108      	bne.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008ac4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a21      	ldr	r2, [pc, #132]	@ (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d022      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b00:	d01d      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a1f      	ldr	r2, [pc, #124]	@ (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d018      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1d      	ldr	r2, [pc, #116]	@ (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d013      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00e      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a15      	ldr	r2, [pc, #84]	@ (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d009      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a18      	ldr	r2, [pc, #96]	@ (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d004      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a11      	ldr	r2, [pc, #68]	@ (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d10c      	bne.n	8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	40012c00 	.word	0x40012c00
 8008b7c:	40013400 	.word	0x40013400
 8008b80:	40015000 	.word	0x40015000
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40000800 	.word	0x40000800
 8008b8c:	40000c00 	.word	0x40000c00
 8008b90:	40014000 	.word	0x40014000

08008b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e050      	b.n	8008ce8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d114      	bne.n	8008c7a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fe8d 	bl	8009978 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d103      	bne.n	8008c70 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a21      	ldr	r2, [pc, #132]	@ (8008cf0 <HAL_UART_Init+0xbc>)
 8008c6c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2224      	movs	r2, #36	@ 0x24
 8008c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f022 0201 	bic.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 f9ba 	bl	800a014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 febb 	bl	8009a1c <UART_SetConfig>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e01b      	b.n	8008ce8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 fa39 	bl	800a158 <UART_CheckIdleState>
 8008ce6:	4603      	mov	r3, r0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	08003815 	.word	0x08003815

08008cf4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d109      	bne.n	8008d20 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e09c      	b.n	8008e5a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	d16c      	bne.n	8008e04 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008d2a:	7afb      	ldrb	r3, [r7, #11]
 8008d2c:	2b0c      	cmp	r3, #12
 8008d2e:	d85e      	bhi.n	8008dee <HAL_UART_RegisterCallback+0xfa>
 8008d30:	a201      	add	r2, pc, #4	@ (adr r2, 8008d38 <HAL_UART_RegisterCallback+0x44>)
 8008d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d36:	bf00      	nop
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008d77 	.word	0x08008d77
 8008d40:	08008d81 	.word	0x08008d81
 8008d44:	08008d8b 	.word	0x08008d8b
 8008d48:	08008d95 	.word	0x08008d95
 8008d4c:	08008d9f 	.word	0x08008d9f
 8008d50:	08008da9 	.word	0x08008da9
 8008d54:	08008db3 	.word	0x08008db3
 8008d58:	08008dbd 	.word	0x08008dbd
 8008d5c:	08008dc7 	.word	0x08008dc7
 8008d60:	08008dd1 	.word	0x08008dd1
 8008d64:	08008ddb 	.word	0x08008ddb
 8008d68:	08008de5 	.word	0x08008de5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008d74:	e070      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008d7e:	e06b      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008d88:	e066      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008d92:	e061      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008d9c:	e05c      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008da6:	e057      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008db0:	e052      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008dba:	e04d      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008dc4:	e048      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008dce:	e043      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008dd8:	e03e      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008de2:	e039      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008dec:	e034      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	75fb      	strb	r3, [r7, #23]
        break;
 8008e02:	e029      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d11a      	bne.n	8008e44 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008e0e:	7afb      	ldrb	r3, [r7, #11]
 8008e10:	2b0b      	cmp	r3, #11
 8008e12:	d002      	beq.n	8008e1a <HAL_UART_RegisterCallback+0x126>
 8008e14:	2b0c      	cmp	r3, #12
 8008e16:	d005      	beq.n	8008e24 <HAL_UART_RegisterCallback+0x130>
 8008e18:	e009      	b.n	8008e2e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008e22:	e019      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008e2c:	e014      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	75fb      	strb	r3, [r7, #23]
        break;
 8008e42:	e009      	b.n	8008e58 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop

08008e68 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08a      	sub	sp, #40	@ 0x28
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	603b      	str	r3, [r7, #0]
 8008e74:	4613      	mov	r3, r2
 8008e76:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	f040 80b5 	bne.w	8008fee <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <HAL_UART_Receive+0x28>
 8008e8a:	88fb      	ldrh	r3, [r7, #6]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e0ad      	b.n	8008ff0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2222      	movs	r2, #34	@ 0x22
 8008ea0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008eaa:	f7fa fec3 	bl	8003c34 <HAL_GetTick>
 8008eae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	88fa      	ldrh	r2, [r7, #6]
 8008eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	88fa      	ldrh	r2, [r7, #6]
 8008ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ec8:	d10e      	bne.n	8008ee8 <HAL_UART_Receive+0x80>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d105      	bne.n	8008ede <HAL_UART_Receive+0x76>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008edc:	e02d      	b.n	8008f3a <HAL_UART_Receive+0xd2>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	22ff      	movs	r2, #255	@ 0xff
 8008ee2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ee6:	e028      	b.n	8008f3a <HAL_UART_Receive+0xd2>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10d      	bne.n	8008f0c <HAL_UART_Receive+0xa4>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d104      	bne.n	8008f02 <HAL_UART_Receive+0x9a>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	22ff      	movs	r2, #255	@ 0xff
 8008efc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f00:	e01b      	b.n	8008f3a <HAL_UART_Receive+0xd2>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	227f      	movs	r2, #127	@ 0x7f
 8008f06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f0a:	e016      	b.n	8008f3a <HAL_UART_Receive+0xd2>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f14:	d10d      	bne.n	8008f32 <HAL_UART_Receive+0xca>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d104      	bne.n	8008f28 <HAL_UART_Receive+0xc0>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	227f      	movs	r2, #127	@ 0x7f
 8008f22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f26:	e008      	b.n	8008f3a <HAL_UART_Receive+0xd2>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	223f      	movs	r2, #63	@ 0x3f
 8008f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f30:	e003      	b.n	8008f3a <HAL_UART_Receive+0xd2>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f40:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f4a:	d108      	bne.n	8008f5e <HAL_UART_Receive+0xf6>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008f54:	2300      	movs	r3, #0
 8008f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	61bb      	str	r3, [r7, #24]
 8008f5c:	e003      	b.n	8008f66 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008f66:	e036      	b.n	8008fd6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2120      	movs	r1, #32
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f001 f99a 	bl	800a2ac <UART_WaitOnFlagUntilTimeout>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e032      	b.n	8008ff0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10c      	bne.n	8008faa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	8a7b      	ldrh	r3, [r7, #18]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	3302      	adds	r3, #2
 8008fa6:	61bb      	str	r3, [r7, #24]
 8008fa8:	e00c      	b.n	8008fc4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	8a7b      	ldrh	r3, [r7, #18]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1c2      	bne.n	8008f68 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e000      	b.n	8008ff0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008fee:	2302      	movs	r3, #2
  }
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08a      	sub	sp, #40	@ 0x28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	4613      	mov	r3, r2
 8009004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800900c:	2b20      	cmp	r3, #32
 800900e:	d167      	bne.n	80090e0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <HAL_UART_Transmit_DMA+0x24>
 8009016:	88fb      	ldrh	r3, [r7, #6]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e060      	b.n	80090e2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	88fa      	ldrh	r2, [r7, #6]
 800902a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	88fa      	ldrh	r2, [r7, #6]
 8009032:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2221      	movs	r2, #33	@ 0x21
 8009042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800904a:	2b00      	cmp	r3, #0
 800904c:	d028      	beq.n	80090a0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009052:	4a26      	ldr	r2, [pc, #152]	@ (80090ec <HAL_UART_Transmit_DMA+0xf4>)
 8009054:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800905a:	4a25      	ldr	r2, [pc, #148]	@ (80090f0 <HAL_UART_Transmit_DMA+0xf8>)
 800905c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009062:	4a24      	ldr	r2, [pc, #144]	@ (80090f4 <HAL_UART_Transmit_DMA+0xfc>)
 8009064:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800906a:	2200      	movs	r2, #0
 800906c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009076:	4619      	mov	r1, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3328      	adds	r3, #40	@ 0x28
 800907e:	461a      	mov	r2, r3
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	f7fc f89b 	bl	80051bc <HAL_DMA_Start_IT>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d009      	beq.n	80090a0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2210      	movs	r2, #16
 8009090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e020      	b.n	80090e2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2240      	movs	r2, #64	@ 0x40
 80090a6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3308      	adds	r3, #8
 80090ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	613b      	str	r3, [r7, #16]
   return(result);
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090be:	627b      	str	r3, [r7, #36]	@ 0x24
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3308      	adds	r3, #8
 80090c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c8:	623a      	str	r2, [r7, #32]
 80090ca:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	69f9      	ldr	r1, [r7, #28]
 80090ce:	6a3a      	ldr	r2, [r7, #32]
 80090d0:	e841 2300 	strex	r3, r2, [r1]
 80090d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e5      	bne.n	80090a8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	e000      	b.n	80090e2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80090e0:	2302      	movs	r3, #2
  }
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3728      	adds	r7, #40	@ 0x28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	0800a623 	.word	0x0800a623
 80090f0:	0800a6c1 	.word	0x0800a6c1
 80090f4:	0800a85b 	.word	0x0800a85b

080090f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	@ 0x28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4613      	mov	r3, r2
 8009104:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800910c:	2b20      	cmp	r3, #32
 800910e:	d137      	bne.n	8009180 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_UART_Receive_DMA+0x24>
 8009116:	88fb      	ldrh	r3, [r7, #6]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e030      	b.n	8009182 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a18      	ldr	r2, [pc, #96]	@ (800918c <HAL_UART_Receive_DMA+0x94>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d01f      	beq.n	8009170 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d018      	beq.n	8009170 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	613b      	str	r3, [r7, #16]
   return(result);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009152:	627b      	str	r3, [r7, #36]	@ 0x24
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	461a      	mov	r2, r3
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	623b      	str	r3, [r7, #32]
 800915e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	69f9      	ldr	r1, [r7, #28]
 8009162:	6a3a      	ldr	r2, [r7, #32]
 8009164:	e841 2300 	strex	r3, r2, [r1]
 8009168:	61bb      	str	r3, [r7, #24]
   return(result);
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e6      	bne.n	800913e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009170:	88fb      	ldrh	r3, [r7, #6]
 8009172:	461a      	mov	r2, r3
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f001 f906 	bl	800a388 <UART_Start_Receive_DMA>
 800917c:	4603      	mov	r3, r0
 800917e:	e000      	b.n	8009182 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009180:	2302      	movs	r3, #2
  }
}
 8009182:	4618      	mov	r0, r3
 8009184:	3728      	adds	r7, #40	@ 0x28
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	40008000 	.word	0x40008000

08009190 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b0ba      	sub	sp, #232	@ 0xe8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80091ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80091be:	4013      	ands	r3, r2
 80091c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80091c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d11b      	bne.n	8009204 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d015      	beq.n	8009204 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091dc:	f003 0320 	and.w	r3, r3, #32
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d105      	bne.n	80091f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 82f3 	beq.w	80097e0 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
      }
      return;
 8009202:	e2ed      	b.n	80097e0 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 8129 	beq.w	8009460 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800920e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009212:	4b90      	ldr	r3, [pc, #576]	@ (8009454 <HAL_UART_IRQHandler+0x2c4>)
 8009214:	4013      	ands	r3, r2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d106      	bne.n	8009228 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800921a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800921e:	4b8e      	ldr	r3, [pc, #568]	@ (8009458 <HAL_UART_IRQHandler+0x2c8>)
 8009220:	4013      	ands	r3, r2
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 811c 	beq.w	8009460 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d011      	beq.n	8009258 <HAL_UART_IRQHandler+0xc8>
 8009234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2201      	movs	r2, #1
 8009246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924e:	f043 0201 	orr.w	r2, r3, #1
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d011      	beq.n	8009288 <HAL_UART_IRQHandler+0xf8>
 8009264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00b      	beq.n	8009288 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2202      	movs	r2, #2
 8009276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800927e:	f043 0204 	orr.w	r2, r3, #4
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b00      	cmp	r3, #0
 8009292:	d011      	beq.n	80092b8 <HAL_UART_IRQHandler+0x128>
 8009294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00b      	beq.n	80092b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2204      	movs	r2, #4
 80092a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ae:	f043 0202 	orr.w	r2, r3, #2
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092bc:	f003 0308 	and.w	r3, r3, #8
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d017      	beq.n	80092f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d105      	bne.n	80092dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80092d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80092d4:	4b5f      	ldr	r3, [pc, #380]	@ (8009454 <HAL_UART_IRQHandler+0x2c4>)
 80092d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2208      	movs	r2, #8
 80092e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ea:	f043 0208 	orr.w	r2, r3, #8
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d012      	beq.n	8009326 <HAL_UART_IRQHandler+0x196>
 8009300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009304:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009314:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800931c:	f043 0220 	orr.w	r2, r3, #32
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8259 	beq.w	80097e4 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d013      	beq.n	8009366 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800933e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009342:	f003 0320 	and.w	r3, r3, #32
 8009346:	2b00      	cmp	r3, #0
 8009348:	d105      	bne.n	8009356 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800934a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800934e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800936c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800937a:	2b40      	cmp	r3, #64	@ 0x40
 800937c:	d005      	beq.n	800938a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800937e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009382:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009386:	2b00      	cmp	r3, #0
 8009388:	d058      	beq.n	800943c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 f8e3 	bl	800a556 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800939a:	2b40      	cmp	r3, #64	@ 0x40
 800939c:	d148      	bne.n	8009430 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3308      	adds	r3, #8
 80093a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3308      	adds	r3, #8
 80093c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80093ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80093ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80093d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80093e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1d9      	bne.n	800939e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d017      	beq.n	8009424 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093fa:	4a18      	ldr	r2, [pc, #96]	@ (800945c <HAL_UART_IRQHandler+0x2cc>)
 80093fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009404:	4618      	mov	r0, r3
 8009406:	f7fb ffad 	bl	8005364 <HAL_DMA_Abort_IT>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d01f      	beq.n	8009450 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800941e:	4610      	mov	r0, r2
 8009420:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009422:	e015      	b.n	8009450 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800942e:	e00f      	b.n	8009450 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943a:	e009      	b.n	8009450 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800944e:	e1c9      	b.n	80097e4 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009450:	bf00      	nop
    return;
 8009452:	e1c7      	b.n	80097e4 <HAL_UART_IRQHandler+0x654>
 8009454:	10000001 	.word	0x10000001
 8009458:	04000120 	.word	0x04000120
 800945c:	0800a8df 	.word	0x0800a8df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009464:	2b01      	cmp	r3, #1
 8009466:	f040 8157 	bne.w	8009718 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800946a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800946e:	f003 0310 	and.w	r3, r3, #16
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 8150 	beq.w	8009718 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8149 	beq.w	8009718 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2210      	movs	r2, #16
 800948c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009498:	2b40      	cmp	r3, #64	@ 0x40
 800949a:	f040 80bd 	bne.w	8009618 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 8199 	beq.w	80097e8 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094c0:	429a      	cmp	r2, r3
 80094c2:	f080 8191 	bcs.w	80097e8 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 0320 	and.w	r3, r3, #32
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f040 8087 	bne.w	80095f2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80094f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800950e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009512:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009516:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800951a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1da      	bne.n	80094e4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3308      	adds	r3, #8
 8009534:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009538:	e853 3f00 	ldrex	r3, [r3]
 800953c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800953e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009540:	f023 0301 	bic.w	r3, r3, #1
 8009544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3308      	adds	r3, #8
 800954e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009552:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009556:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800955a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e1      	bne.n	800952e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3308      	adds	r3, #8
 8009570:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800957a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800957c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3308      	adds	r3, #8
 800958a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800958e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009590:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009592:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009594:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009596:	e841 2300 	strex	r3, r2, [r1]
 800959a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800959c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1e3      	bne.n	800956a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095c0:	f023 0310 	bic.w	r3, r3, #16
 80095c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e4      	bne.n	80095b0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fb fe60 	bl	80052b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800960a:	b292      	uxth	r2, r2
 800960c:	1a8a      	subs	r2, r1, r2
 800960e:	b292      	uxth	r2, r2
 8009610:	4611      	mov	r1, r2
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009616:	e0e7      	b.n	80097e8 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009624:	b29b      	uxth	r3, r3
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009632:	b29b      	uxth	r3, r3
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 80d9 	beq.w	80097ec <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800963a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 80d4 	beq.w	80097ec <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009658:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009666:	647b      	str	r3, [r7, #68]	@ 0x44
 8009668:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800966c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e4      	bne.n	8009644 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3308      	adds	r3, #8
 8009680:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	623b      	str	r3, [r7, #32]
   return(result);
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009690:	f023 0301 	bic.w	r3, r3, #1
 8009694:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3308      	adds	r3, #8
 800969e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80096a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80096a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096aa:	e841 2300 	strex	r3, r2, [r1]
 80096ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e1      	bne.n	800967a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 0310 	bic.w	r3, r3, #16
 80096de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80096ec:	61fb      	str	r3, [r7, #28]
 80096ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	69b9      	ldr	r1, [r7, #24]
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	617b      	str	r3, [r7, #20]
   return(result);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e4      	bne.n	80096ca <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800970c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009710:	4611      	mov	r1, r2
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009716:	e069      	b.n	80097ec <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800971c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d010      	beq.n	8009746 <HAL_UART_IRQHandler+0x5b6>
 8009724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00a      	beq.n	8009746 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009738:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009744:	e055      	b.n	80097f2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800974a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800974e:	2b00      	cmp	r3, #0
 8009750:	d014      	beq.n	800977c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800975a:	2b00      	cmp	r3, #0
 800975c:	d105      	bne.n	800976a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800975e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d008      	beq.n	800977c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800976e:	2b00      	cmp	r3, #0
 8009770:	d03e      	beq.n	80097f0 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
    }
    return;
 800977a:	e039      	b.n	80097f0 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800977c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d009      	beq.n	800979c <HAL_UART_IRQHandler+0x60c>
 8009788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800978c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 f8ba 	bl	800a90e <UART_EndTransmit_IT>
    return;
 800979a:	e02a      	b.n	80097f2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800979c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <HAL_UART_IRQHandler+0x630>
 80097a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d005      	beq.n	80097c0 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097be:	e018      	b.n	80097f2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d012      	beq.n	80097f2 <HAL_UART_IRQHandler+0x662>
 80097cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	da0e      	bge.n	80097f2 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097de:	e008      	b.n	80097f2 <HAL_UART_IRQHandler+0x662>
      return;
 80097e0:	bf00      	nop
 80097e2:	e006      	b.n	80097f2 <HAL_UART_IRQHandler+0x662>
    return;
 80097e4:	bf00      	nop
 80097e6:	e004      	b.n	80097f2 <HAL_UART_IRQHandler+0x662>
      return;
 80097e8:	bf00      	nop
 80097ea:	e002      	b.n	80097f2 <HAL_UART_IRQHandler+0x662>
      return;
 80097ec:	bf00      	nop
 80097ee:	e000      	b.n	80097f2 <HAL_UART_IRQHandler+0x662>
    return;
 80097f0:	bf00      	nop
  }
}
 80097f2:	37e8      	adds	r7, #232	@ 0xe8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a09      	ldr	r2, [pc, #36]	@ (80098e4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d009      	beq.n	80098d8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	430a      	orrs	r2, r1
 80098d6:	615a      	str	r2, [r3, #20]
  }
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	40008000 	.word	0x40008000

080098e8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a18      	ldr	r2, [pc, #96]	@ (8009958 <HAL_UART_EnableReceiverTimeout+0x70>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d027      	beq.n	800994a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009900:	2b20      	cmp	r3, #32
 8009902:	d120      	bne.n	8009946 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800990a:	2b01      	cmp	r3, #1
 800990c:	d101      	bne.n	8009912 <HAL_UART_EnableReceiverTimeout+0x2a>
 800990e:	2302      	movs	r3, #2
 8009910:	e01c      	b.n	800994c <HAL_UART_EnableReceiverTimeout+0x64>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2224      	movs	r2, #36	@ 0x24
 800991e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009930:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2220      	movs	r2, #32
 8009936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	e002      	b.n	800994c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009946:	2302      	movs	r3, #2
 8009948:	e000      	b.n	800994c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
  }
}
 800994c:	4618      	mov	r0, r3
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	40008000 	.word	0x40008000

0800995c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800996a:	4618      	mov	r0, r3
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
	...

08009978 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a1a      	ldr	r2, [pc, #104]	@ (80099ec <UART_InitCallbacksToDefault+0x74>)
 8009984:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a19      	ldr	r2, [pc, #100]	@ (80099f0 <UART_InitCallbacksToDefault+0x78>)
 800998c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a18      	ldr	r2, [pc, #96]	@ (80099f4 <UART_InitCallbacksToDefault+0x7c>)
 8009994:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a17      	ldr	r2, [pc, #92]	@ (80099f8 <UART_InitCallbacksToDefault+0x80>)
 800999c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a16      	ldr	r2, [pc, #88]	@ (80099fc <UART_InitCallbacksToDefault+0x84>)
 80099a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a15      	ldr	r2, [pc, #84]	@ (8009a00 <UART_InitCallbacksToDefault+0x88>)
 80099ac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a14      	ldr	r2, [pc, #80]	@ (8009a04 <UART_InitCallbacksToDefault+0x8c>)
 80099b4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a13      	ldr	r2, [pc, #76]	@ (8009a08 <UART_InitCallbacksToDefault+0x90>)
 80099bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a12      	ldr	r2, [pc, #72]	@ (8009a0c <UART_InitCallbacksToDefault+0x94>)
 80099c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a11      	ldr	r2, [pc, #68]	@ (8009a10 <UART_InitCallbacksToDefault+0x98>)
 80099cc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a10      	ldr	r2, [pc, #64]	@ (8009a14 <UART_InitCallbacksToDefault+0x9c>)
 80099d4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a0f      	ldr	r2, [pc, #60]	@ (8009a18 <UART_InitCallbacksToDefault+0xa0>)
 80099dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	0800980d 	.word	0x0800980d
 80099f0:	080097f9 	.word	0x080097f9
 80099f4:	08009835 	.word	0x08009835
 80099f8:	08009821 	.word	0x08009821
 80099fc:	08009849 	.word	0x08009849
 8009a00:	0800985d 	.word	0x0800985d
 8009a04:	08009871 	.word	0x08009871
 8009a08:	08009885 	.word	0x08009885
 8009a0c:	0800a969 	.word	0x0800a969
 8009a10:	0800a97d 	.word	0x0800a97d
 8009a14:	0800a991 	.word	0x0800a991
 8009a18:	08009899 	.word	0x08009899

08009a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a20:	b08c      	sub	sp, #48	@ 0x30
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	431a      	orrs	r2, r3
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	4baa      	ldr	r3, [pc, #680]	@ (8009cf4 <UART_SetConfig+0x2d8>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	6812      	ldr	r2, [r2, #0]
 8009a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a54:	430b      	orrs	r3, r1
 8009a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a9f      	ldr	r2, [pc, #636]	@ (8009cf8 <UART_SetConfig+0x2dc>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d004      	beq.n	8009a88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a84:	4313      	orrs	r3, r2
 8009a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009a92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	6812      	ldr	r2, [r2, #0]
 8009a9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a9c:	430b      	orrs	r3, r1
 8009a9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa6:	f023 010f 	bic.w	r1, r3, #15
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a90      	ldr	r2, [pc, #576]	@ (8009cfc <UART_SetConfig+0x2e0>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d125      	bne.n	8009b0c <UART_SetConfig+0xf0>
 8009ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8009d00 <UART_SetConfig+0x2e4>)
 8009ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac6:	f003 0303 	and.w	r3, r3, #3
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d81a      	bhi.n	8009b04 <UART_SetConfig+0xe8>
 8009ace:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad4 <UART_SetConfig+0xb8>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009ae5 	.word	0x08009ae5
 8009ad8:	08009af5 	.word	0x08009af5
 8009adc:	08009aed 	.word	0x08009aed
 8009ae0:	08009afd 	.word	0x08009afd
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aea:	e116      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009aec:	2302      	movs	r3, #2
 8009aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009af2:	e112      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009af4:	2304      	movs	r3, #4
 8009af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009afa:	e10e      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009afc:	2308      	movs	r3, #8
 8009afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b02:	e10a      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009b04:	2310      	movs	r3, #16
 8009b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b0a:	e106      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a7c      	ldr	r2, [pc, #496]	@ (8009d04 <UART_SetConfig+0x2e8>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d138      	bne.n	8009b88 <UART_SetConfig+0x16c>
 8009b16:	4b7a      	ldr	r3, [pc, #488]	@ (8009d00 <UART_SetConfig+0x2e4>)
 8009b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b1c:	f003 030c 	and.w	r3, r3, #12
 8009b20:	2b0c      	cmp	r3, #12
 8009b22:	d82d      	bhi.n	8009b80 <UART_SetConfig+0x164>
 8009b24:	a201      	add	r2, pc, #4	@ (adr r2, 8009b2c <UART_SetConfig+0x110>)
 8009b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2a:	bf00      	nop
 8009b2c:	08009b61 	.word	0x08009b61
 8009b30:	08009b81 	.word	0x08009b81
 8009b34:	08009b81 	.word	0x08009b81
 8009b38:	08009b81 	.word	0x08009b81
 8009b3c:	08009b71 	.word	0x08009b71
 8009b40:	08009b81 	.word	0x08009b81
 8009b44:	08009b81 	.word	0x08009b81
 8009b48:	08009b81 	.word	0x08009b81
 8009b4c:	08009b69 	.word	0x08009b69
 8009b50:	08009b81 	.word	0x08009b81
 8009b54:	08009b81 	.word	0x08009b81
 8009b58:	08009b81 	.word	0x08009b81
 8009b5c:	08009b79 	.word	0x08009b79
 8009b60:	2300      	movs	r3, #0
 8009b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b66:	e0d8      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6e:	e0d4      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009b70:	2304      	movs	r3, #4
 8009b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b76:	e0d0      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009b78:	2308      	movs	r3, #8
 8009b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b7e:	e0cc      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009b80:	2310      	movs	r3, #16
 8009b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b86:	e0c8      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a5e      	ldr	r2, [pc, #376]	@ (8009d08 <UART_SetConfig+0x2ec>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d125      	bne.n	8009bde <UART_SetConfig+0x1c2>
 8009b92:	4b5b      	ldr	r3, [pc, #364]	@ (8009d00 <UART_SetConfig+0x2e4>)
 8009b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b9c:	2b30      	cmp	r3, #48	@ 0x30
 8009b9e:	d016      	beq.n	8009bce <UART_SetConfig+0x1b2>
 8009ba0:	2b30      	cmp	r3, #48	@ 0x30
 8009ba2:	d818      	bhi.n	8009bd6 <UART_SetConfig+0x1ba>
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	d00a      	beq.n	8009bbe <UART_SetConfig+0x1a2>
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	d814      	bhi.n	8009bd6 <UART_SetConfig+0x1ba>
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <UART_SetConfig+0x19a>
 8009bb0:	2b10      	cmp	r3, #16
 8009bb2:	d008      	beq.n	8009bc6 <UART_SetConfig+0x1aa>
 8009bb4:	e00f      	b.n	8009bd6 <UART_SetConfig+0x1ba>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bbc:	e0ad      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bc4:	e0a9      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009bc6:	2304      	movs	r3, #4
 8009bc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bcc:	e0a5      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009bce:	2308      	movs	r3, #8
 8009bd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bd4:	e0a1      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009bd6:	2310      	movs	r3, #16
 8009bd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bdc:	e09d      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a4a      	ldr	r2, [pc, #296]	@ (8009d0c <UART_SetConfig+0x2f0>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d125      	bne.n	8009c34 <UART_SetConfig+0x218>
 8009be8:	4b45      	ldr	r3, [pc, #276]	@ (8009d00 <UART_SetConfig+0x2e4>)
 8009bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bf4:	d016      	beq.n	8009c24 <UART_SetConfig+0x208>
 8009bf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bf8:	d818      	bhi.n	8009c2c <UART_SetConfig+0x210>
 8009bfa:	2b80      	cmp	r3, #128	@ 0x80
 8009bfc:	d00a      	beq.n	8009c14 <UART_SetConfig+0x1f8>
 8009bfe:	2b80      	cmp	r3, #128	@ 0x80
 8009c00:	d814      	bhi.n	8009c2c <UART_SetConfig+0x210>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <UART_SetConfig+0x1f0>
 8009c06:	2b40      	cmp	r3, #64	@ 0x40
 8009c08:	d008      	beq.n	8009c1c <UART_SetConfig+0x200>
 8009c0a:	e00f      	b.n	8009c2c <UART_SetConfig+0x210>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c12:	e082      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c14:	2302      	movs	r3, #2
 8009c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c1a:	e07e      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c22:	e07a      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c24:	2308      	movs	r3, #8
 8009c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c2a:	e076      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c32:	e072      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a35      	ldr	r2, [pc, #212]	@ (8009d10 <UART_SetConfig+0x2f4>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d12a      	bne.n	8009c94 <UART_SetConfig+0x278>
 8009c3e:	4b30      	ldr	r3, [pc, #192]	@ (8009d00 <UART_SetConfig+0x2e4>)
 8009c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c4c:	d01a      	beq.n	8009c84 <UART_SetConfig+0x268>
 8009c4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c52:	d81b      	bhi.n	8009c8c <UART_SetConfig+0x270>
 8009c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c58:	d00c      	beq.n	8009c74 <UART_SetConfig+0x258>
 8009c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c5e:	d815      	bhi.n	8009c8c <UART_SetConfig+0x270>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <UART_SetConfig+0x250>
 8009c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c68:	d008      	beq.n	8009c7c <UART_SetConfig+0x260>
 8009c6a:	e00f      	b.n	8009c8c <UART_SetConfig+0x270>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c72:	e052      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c74:	2302      	movs	r3, #2
 8009c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c7a:	e04e      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c7c:	2304      	movs	r3, #4
 8009c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c82:	e04a      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c84:	2308      	movs	r3, #8
 8009c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c8a:	e046      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c8c:	2310      	movs	r3, #16
 8009c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c92:	e042      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a17      	ldr	r2, [pc, #92]	@ (8009cf8 <UART_SetConfig+0x2dc>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d13a      	bne.n	8009d14 <UART_SetConfig+0x2f8>
 8009c9e:	4b18      	ldr	r3, [pc, #96]	@ (8009d00 <UART_SetConfig+0x2e4>)
 8009ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ca4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ca8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cac:	d01a      	beq.n	8009ce4 <UART_SetConfig+0x2c8>
 8009cae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cb2:	d81b      	bhi.n	8009cec <UART_SetConfig+0x2d0>
 8009cb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cb8:	d00c      	beq.n	8009cd4 <UART_SetConfig+0x2b8>
 8009cba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cbe:	d815      	bhi.n	8009cec <UART_SetConfig+0x2d0>
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <UART_SetConfig+0x2b0>
 8009cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cc8:	d008      	beq.n	8009cdc <UART_SetConfig+0x2c0>
 8009cca:	e00f      	b.n	8009cec <UART_SetConfig+0x2d0>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cd2:	e022      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cda:	e01e      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009cdc:	2304      	movs	r3, #4
 8009cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ce2:	e01a      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cea:	e016      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009cec:	2310      	movs	r3, #16
 8009cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cf2:	e012      	b.n	8009d1a <UART_SetConfig+0x2fe>
 8009cf4:	cfff69f3 	.word	0xcfff69f3
 8009cf8:	40008000 	.word	0x40008000
 8009cfc:	40013800 	.word	0x40013800
 8009d00:	40021000 	.word	0x40021000
 8009d04:	40004400 	.word	0x40004400
 8009d08:	40004800 	.word	0x40004800
 8009d0c:	40004c00 	.word	0x40004c00
 8009d10:	40005000 	.word	0x40005000
 8009d14:	2310      	movs	r3, #16
 8009d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4aae      	ldr	r2, [pc, #696]	@ (8009fd8 <UART_SetConfig+0x5bc>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	f040 8097 	bne.w	8009e54 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d2a:	2b08      	cmp	r3, #8
 8009d2c:	d823      	bhi.n	8009d76 <UART_SetConfig+0x35a>
 8009d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d34 <UART_SetConfig+0x318>)
 8009d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d34:	08009d59 	.word	0x08009d59
 8009d38:	08009d77 	.word	0x08009d77
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d77 	.word	0x08009d77
 8009d44:	08009d67 	.word	0x08009d67
 8009d48:	08009d77 	.word	0x08009d77
 8009d4c:	08009d77 	.word	0x08009d77
 8009d50:	08009d77 	.word	0x08009d77
 8009d54:	08009d6f 	.word	0x08009d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d58:	f7fc fc00 	bl	800655c <HAL_RCC_GetPCLK1Freq>
 8009d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d5e:	e010      	b.n	8009d82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d60:	4b9e      	ldr	r3, [pc, #632]	@ (8009fdc <UART_SetConfig+0x5c0>)
 8009d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d64:	e00d      	b.n	8009d82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d66:	f7fc fb8b 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 8009d6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d6c:	e009      	b.n	8009d82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d74:	e005      	b.n	8009d82 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009d76:	2300      	movs	r3, #0
 8009d78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 8130 	beq.w	8009fea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d8e:	4a94      	ldr	r2, [pc, #592]	@ (8009fe0 <UART_SetConfig+0x5c4>)
 8009d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d94:	461a      	mov	r2, r3
 8009d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	4613      	mov	r3, r2
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	4413      	add	r3, r2
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d305      	bcc.n	8009dba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009db4:	69ba      	ldr	r2, [r7, #24]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d903      	bls.n	8009dc2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009dc0:	e113      	b.n	8009fea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	60bb      	str	r3, [r7, #8]
 8009dc8:	60fa      	str	r2, [r7, #12]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dce:	4a84      	ldr	r2, [pc, #528]	@ (8009fe0 <UART_SetConfig+0x5c4>)
 8009dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	603b      	str	r3, [r7, #0]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009de0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009de4:	f7f7 f814 	bl	8000e10 <__aeabi_uldivmod>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4610      	mov	r0, r2
 8009dee:	4619      	mov	r1, r3
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	020b      	lsls	r3, r1, #8
 8009dfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dfe:	0202      	lsls	r2, r0, #8
 8009e00:	6979      	ldr	r1, [r7, #20]
 8009e02:	6849      	ldr	r1, [r1, #4]
 8009e04:	0849      	lsrs	r1, r1, #1
 8009e06:	2000      	movs	r0, #0
 8009e08:	460c      	mov	r4, r1
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	eb12 0804 	adds.w	r8, r2, r4
 8009e10:	eb43 0905 	adc.w	r9, r3, r5
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	469a      	mov	sl, r3
 8009e1c:	4693      	mov	fp, r2
 8009e1e:	4652      	mov	r2, sl
 8009e20:	465b      	mov	r3, fp
 8009e22:	4640      	mov	r0, r8
 8009e24:	4649      	mov	r1, r9
 8009e26:	f7f6 fff3 	bl	8000e10 <__aeabi_uldivmod>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4613      	mov	r3, r2
 8009e30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e38:	d308      	bcc.n	8009e4c <UART_SetConfig+0x430>
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e40:	d204      	bcs.n	8009e4c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6a3a      	ldr	r2, [r7, #32]
 8009e48:	60da      	str	r2, [r3, #12]
 8009e4a:	e0ce      	b.n	8009fea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e52:	e0ca      	b.n	8009fea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e5c:	d166      	bne.n	8009f2c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e62:	2b08      	cmp	r3, #8
 8009e64:	d827      	bhi.n	8009eb6 <UART_SetConfig+0x49a>
 8009e66:	a201      	add	r2, pc, #4	@ (adr r2, 8009e6c <UART_SetConfig+0x450>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009e91 	.word	0x08009e91
 8009e70:	08009e99 	.word	0x08009e99
 8009e74:	08009ea1 	.word	0x08009ea1
 8009e78:	08009eb7 	.word	0x08009eb7
 8009e7c:	08009ea7 	.word	0x08009ea7
 8009e80:	08009eb7 	.word	0x08009eb7
 8009e84:	08009eb7 	.word	0x08009eb7
 8009e88:	08009eb7 	.word	0x08009eb7
 8009e8c:	08009eaf 	.word	0x08009eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e90:	f7fc fb64 	bl	800655c <HAL_RCC_GetPCLK1Freq>
 8009e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e96:	e014      	b.n	8009ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e98:	f7fc fb76 	bl	8006588 <HAL_RCC_GetPCLK2Freq>
 8009e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e9e:	e010      	b.n	8009ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8009fdc <UART_SetConfig+0x5c0>)
 8009ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ea4:	e00d      	b.n	8009ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ea6:	f7fc faeb 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 8009eaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009eac:	e009      	b.n	8009ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009eb4:	e005      	b.n	8009ec2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 8090 	beq.w	8009fea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ece:	4a44      	ldr	r2, [pc, #272]	@ (8009fe0 <UART_SetConfig+0x5c4>)
 8009ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009edc:	005a      	lsls	r2, r3, #1
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	441a      	add	r2, r3
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	2b0f      	cmp	r3, #15
 8009ef4:	d916      	bls.n	8009f24 <UART_SetConfig+0x508>
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009efc:	d212      	bcs.n	8009f24 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	f023 030f 	bic.w	r3, r3, #15
 8009f06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	085b      	lsrs	r3, r3, #1
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f003 0307 	and.w	r3, r3, #7
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	8bfb      	ldrh	r3, [r7, #30]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	8bfa      	ldrh	r2, [r7, #30]
 8009f20:	60da      	str	r2, [r3, #12]
 8009f22:	e062      	b.n	8009fea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f2a:	e05e      	b.n	8009fea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f30:	2b08      	cmp	r3, #8
 8009f32:	d828      	bhi.n	8009f86 <UART_SetConfig+0x56a>
 8009f34:	a201      	add	r2, pc, #4	@ (adr r2, 8009f3c <UART_SetConfig+0x520>)
 8009f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3a:	bf00      	nop
 8009f3c:	08009f61 	.word	0x08009f61
 8009f40:	08009f69 	.word	0x08009f69
 8009f44:	08009f71 	.word	0x08009f71
 8009f48:	08009f87 	.word	0x08009f87
 8009f4c:	08009f77 	.word	0x08009f77
 8009f50:	08009f87 	.word	0x08009f87
 8009f54:	08009f87 	.word	0x08009f87
 8009f58:	08009f87 	.word	0x08009f87
 8009f5c:	08009f7f 	.word	0x08009f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f60:	f7fc fafc 	bl	800655c <HAL_RCC_GetPCLK1Freq>
 8009f64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f66:	e014      	b.n	8009f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f68:	f7fc fb0e 	bl	8006588 <HAL_RCC_GetPCLK2Freq>
 8009f6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f6e:	e010      	b.n	8009f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f70:	4b1a      	ldr	r3, [pc, #104]	@ (8009fdc <UART_SetConfig+0x5c0>)
 8009f72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f74:	e00d      	b.n	8009f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f76:	f7fc fa83 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 8009f7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f7c:	e009      	b.n	8009f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f84:	e005      	b.n	8009f92 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f90:	bf00      	nop
    }

    if (pclk != 0U)
 8009f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d028      	beq.n	8009fea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9c:	4a10      	ldr	r2, [pc, #64]	@ (8009fe0 <UART_SetConfig+0x5c4>)
 8009f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	085b      	lsrs	r3, r3, #1
 8009fb0:	441a      	add	r2, r3
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	2b0f      	cmp	r3, #15
 8009fc0:	d910      	bls.n	8009fe4 <UART_SetConfig+0x5c8>
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fc8:	d20c      	bcs.n	8009fe4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	60da      	str	r2, [r3, #12]
 8009fd4:	e009      	b.n	8009fea <UART_SetConfig+0x5ce>
 8009fd6:	bf00      	nop
 8009fd8:	40008000 	.word	0x40008000
 8009fdc:	00f42400 	.word	0x00f42400
 8009fe0:	0800ac68 	.word	0x0800ac68
      }
      else
      {
        ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a006:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3730      	adds	r7, #48	@ 0x30
 800a00e:	46bd      	mov	sp, r7
 800a010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a020:	f003 0308 	and.w	r3, r3, #8
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00a      	beq.n	800a03e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	430a      	orrs	r2, r1
 800a05e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00a      	beq.n	800a082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a086:	f003 0304 	and.w	r3, r3, #4
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00a      	beq.n	800a0a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a8:	f003 0310 	and.w	r3, r3, #16
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00a      	beq.n	800a0c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ca:	f003 0320 	and.w	r3, r3, #32
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00a      	beq.n	800a0e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01a      	beq.n	800a12a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	430a      	orrs	r2, r1
 800a108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a10e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a112:	d10a      	bne.n	800a12a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a12e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00a      	beq.n	800a14c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	430a      	orrs	r2, r1
 800a14a:	605a      	str	r2, [r3, #4]
  }
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b098      	sub	sp, #96	@ 0x60
 800a15c:	af02      	add	r7, sp, #8
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a168:	f7f9 fd64 	bl	8003c34 <HAL_GetTick>
 800a16c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0308 	and.w	r3, r3, #8
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d12f      	bne.n	800a1dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a17c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a184:	2200      	movs	r2, #0
 800a186:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f88e 	bl	800a2ac <UART_WaitOnFlagUntilTimeout>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d022      	beq.n	800a1dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e6      	bne.n	800a196 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e063      	b.n	800a2a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0304 	and.w	r3, r3, #4
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	d149      	bne.n	800a27e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f857 	bl	800a2ac <UART_WaitOnFlagUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d03c      	beq.n	800a27e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20c:	e853 3f00 	ldrex	r3, [r3]
 800a210:	623b      	str	r3, [r7, #32]
   return(result);
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a222:	633b      	str	r3, [r7, #48]	@ 0x30
 800a224:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e6      	bne.n	800a204 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3308      	adds	r3, #8
 800a23c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	60fb      	str	r3, [r7, #12]
   return(result);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3308      	adds	r3, #8
 800a254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a256:	61fa      	str	r2, [r7, #28]
 800a258:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	69b9      	ldr	r1, [r7, #24]
 800a25c:	69fa      	ldr	r2, [r7, #28]
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	617b      	str	r3, [r7, #20]
   return(result);
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e5      	bne.n	800a236 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e012      	b.n	800a2a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2220      	movs	r2, #32
 800a282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2220      	movs	r2, #32
 800a28a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3758      	adds	r7, #88	@ 0x58
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2bc:	e04f      	b.n	800a35e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c4:	d04b      	beq.n	800a35e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2c6:	f7f9 fcb5 	bl	8003c34 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	69ba      	ldr	r2, [r7, #24]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d302      	bcc.n	800a2dc <UART_WaitOnFlagUntilTimeout+0x30>
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e04e      	b.n	800a37e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0304 	and.w	r3, r3, #4
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d037      	beq.n	800a35e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2b80      	cmp	r3, #128	@ 0x80
 800a2f2:	d034      	beq.n	800a35e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	2b40      	cmp	r3, #64	@ 0x40
 800a2f8:	d031      	beq.n	800a35e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	69db      	ldr	r3, [r3, #28]
 800a300:	f003 0308 	and.w	r3, r3, #8
 800a304:	2b08      	cmp	r3, #8
 800a306:	d110      	bne.n	800a32a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2208      	movs	r2, #8
 800a30e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 f920 	bl	800a556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2208      	movs	r2, #8
 800a31a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e029      	b.n	800a37e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a334:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a338:	d111      	bne.n	800a35e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f000 f906 	bl	800a556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e00f      	b.n	800a37e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	4013      	ands	r3, r2
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	bf0c      	ite	eq
 800a36e:	2301      	moveq	r3, #1
 800a370:	2300      	movne	r3, #0
 800a372:	b2db      	uxtb	r3, r3
 800a374:	461a      	mov	r2, r3
 800a376:	79fb      	ldrb	r3, [r7, #7]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d0a0      	beq.n	800a2be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
	...

0800a388 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b096      	sub	sp, #88	@ 0x58
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	4613      	mov	r3, r2
 800a394:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	88fa      	ldrh	r2, [r7, #6]
 800a3a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2222      	movs	r2, #34	@ 0x22
 800a3b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d02d      	beq.n	800a41a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3c4:	4a40      	ldr	r2, [pc, #256]	@ (800a4c8 <UART_Start_Receive_DMA+0x140>)
 800a3c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ce:	4a3f      	ldr	r2, [pc, #252]	@ (800a4cc <UART_Start_Receive_DMA+0x144>)
 800a3d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d8:	4a3d      	ldr	r2, [pc, #244]	@ (800a4d0 <UART_Start_Receive_DMA+0x148>)
 800a3da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3324      	adds	r3, #36	@ 0x24
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	88fb      	ldrh	r3, [r7, #6]
 800a3fc:	f7fa fede 	bl	80051bc <HAL_DMA_Start_IT>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d009      	beq.n	800a41a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2210      	movs	r2, #16
 800a40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2220      	movs	r2, #32
 800a412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e051      	b.n	800a4be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d018      	beq.n	800a454 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a42a:	e853 3f00 	ldrex	r3, [r3]
 800a42e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a436:	657b      	str	r3, [r7, #84]	@ 0x54
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	461a      	mov	r2, r3
 800a43e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a440:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a442:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e6      	bne.n	800a422 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3308      	adds	r3, #8
 800a45a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45e:	e853 3f00 	ldrex	r3, [r3]
 800a462:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a466:	f043 0301 	orr.w	r3, r3, #1
 800a46a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3308      	adds	r3, #8
 800a472:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a474:	637a      	str	r2, [r7, #52]	@ 0x34
 800a476:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a478:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a47a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a47c:	e841 2300 	strex	r3, r2, [r1]
 800a480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1e5      	bne.n	800a454 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3308      	adds	r3, #8
 800a48e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	e853 3f00 	ldrex	r3, [r3]
 800a496:	613b      	str	r3, [r7, #16]
   return(result);
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a49e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3308      	adds	r3, #8
 800a4a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4a8:	623a      	str	r2, [r7, #32]
 800a4aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	69f9      	ldr	r1, [r7, #28]
 800a4ae:	6a3a      	ldr	r2, [r7, #32]
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e5      	bne.n	800a488 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3758      	adds	r7, #88	@ 0x58
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	0800a6e1 	.word	0x0800a6e1
 800a4cc:	0800a815 	.word	0x0800a815
 800a4d0:	0800a85b 	.word	0x0800a85b

0800a4d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b08f      	sub	sp, #60	@ 0x3c
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	e853 3f00 	ldrex	r3, [r3]
 800a4e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a4f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a502:	e841 2300 	strex	r3, r2, [r1]
 800a506:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1e6      	bne.n	800a4dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3308      	adds	r3, #8
 800a514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	e853 3f00 	ldrex	r3, [r3]
 800a51c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a524:	633b      	str	r3, [r7, #48]	@ 0x30
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3308      	adds	r3, #8
 800a52c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a52e:	61ba      	str	r2, [r7, #24]
 800a530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	6979      	ldr	r1, [r7, #20]
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	613b      	str	r3, [r7, #16]
   return(result);
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e5      	bne.n	800a50e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2220      	movs	r2, #32
 800a546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a54a:	bf00      	nop
 800a54c:	373c      	adds	r7, #60	@ 0x3c
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a556:	b480      	push	{r7}
 800a558:	b095      	sub	sp, #84	@ 0x54
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a566:	e853 3f00 	ldrex	r3, [r3]
 800a56a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
 800a57a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a57c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a57e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a580:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a582:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a584:	e841 2300 	strex	r3, r2, [r1]
 800a588:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e6      	bne.n	800a55e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3308      	adds	r3, #8
 800a596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	e853 3f00 	ldrex	r3, [r3]
 800a59e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5a6:	f023 0301 	bic.w	r3, r3, #1
 800a5aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5bc:	e841 2300 	strex	r3, r2, [r1]
 800a5c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e3      	bne.n	800a590 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d118      	bne.n	800a602 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f023 0310 	bic.w	r3, r3, #16
 800a5e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5ee:	61bb      	str	r3, [r7, #24]
 800a5f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	6979      	ldr	r1, [r7, #20]
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e6      	bne.n	800a5d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a616:	bf00      	nop
 800a618:	3754      	adds	r7, #84	@ 0x54
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b090      	sub	sp, #64	@ 0x40
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0320 	and.w	r3, r3, #32
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d137      	bne.n	800a6ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a640:	2200      	movs	r2, #0
 800a642:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3308      	adds	r3, #8
 800a64c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a650:	e853 3f00 	ldrex	r3, [r3]
 800a654:	623b      	str	r3, [r7, #32]
   return(result);
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a65c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3308      	adds	r3, #8
 800a664:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a666:	633a      	str	r2, [r7, #48]	@ 0x30
 800a668:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a66c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a66e:	e841 2300 	strex	r3, r2, [r1]
 800a672:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e5      	bne.n	800a646 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a67a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	60fb      	str	r3, [r7, #12]
   return(result);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a68e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	461a      	mov	r2, r3
 800a696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a698:	61fb      	str	r3, [r7, #28]
 800a69a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	69b9      	ldr	r1, [r7, #24]
 800a69e:	69fa      	ldr	r2, [r7, #28]
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e6      	bne.n	800a67a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6ac:	e004      	b.n	800a6b8 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a6b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a6b6:	4798      	blx	r3
}
 800a6b8:	bf00      	nop
 800a6ba:	3740      	adds	r7, #64	@ 0x40
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6d8:	bf00      	nop
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b09c      	sub	sp, #112	@ 0x70
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0320 	and.w	r3, r3, #32
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d171      	bne.n	800a7e0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a6fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a70c:	e853 3f00 	ldrex	r3, [r3]
 800a710:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a71a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a722:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a724:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a726:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a728:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a72a:	e841 2300 	strex	r3, r2, [r1]
 800a72e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1e6      	bne.n	800a704 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3308      	adds	r3, #8
 800a73c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a740:	e853 3f00 	ldrex	r3, [r3]
 800a744:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a748:	f023 0301 	bic.w	r3, r3, #1
 800a74c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a74e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3308      	adds	r3, #8
 800a754:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a756:	647a      	str	r2, [r7, #68]	@ 0x44
 800a758:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a75c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a75e:	e841 2300 	strex	r3, r2, [r1]
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1e5      	bne.n	800a736 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a76a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	3308      	adds	r3, #8
 800a770:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	623b      	str	r3, [r7, #32]
   return(result);
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a780:	663b      	str	r3, [r7, #96]	@ 0x60
 800a782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3308      	adds	r3, #8
 800a788:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a78a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e5      	bne.n	800a76a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a79e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d118      	bne.n	800a7e0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	e853 3f00 	ldrex	r3, [r3]
 800a7ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f023 0310 	bic.w	r3, r3, #16
 800a7c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d0:	69b9      	ldr	r1, [r7, #24]
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	e841 2300 	strex	r3, r2, [r1]
 800a7d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1e6      	bne.n	800a7ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d109      	bne.n	800a802 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a7ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a7f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a7f6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a7fe:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a800:	e004      	b.n	800a80c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a804:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a808:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a80a:	4798      	blx	r3
}
 800a80c:	bf00      	nop
 800a80e:	3770      	adds	r7, #112	@ 0x70
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a820:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2201      	movs	r2, #1
 800a826:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d10b      	bne.n	800a848 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a83c:	0852      	lsrs	r2, r2, #1
 800a83e:	b292      	uxth	r2, r2
 800a840:	4611      	mov	r1, r2
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a846:	e004      	b.n	800a852 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	4798      	blx	r3
}
 800a852:	bf00      	nop
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b086      	sub	sp, #24
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a866:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a86e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a876:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a882:	2b80      	cmp	r3, #128	@ 0x80
 800a884:	d109      	bne.n	800a89a <UART_DMAError+0x40>
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2b21      	cmp	r3, #33	@ 0x21
 800a88a:	d106      	bne.n	800a89a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a894:	6978      	ldr	r0, [r7, #20]
 800a896:	f7ff fe1d 	bl	800a4d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a4:	2b40      	cmp	r3, #64	@ 0x40
 800a8a6:	d109      	bne.n	800a8bc <UART_DMAError+0x62>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b22      	cmp	r3, #34	@ 0x22
 800a8ac:	d106      	bne.n	800a8bc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a8b6:	6978      	ldr	r0, [r7, #20]
 800a8b8:	f7ff fe4d 	bl	800a556 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8c2:	f043 0210 	orr.w	r2, r3, #16
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a8d2:	6978      	ldr	r0, [r7, #20]
 800a8d4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8d6:	bf00      	nop
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a906:	bf00      	nop
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b088      	sub	sp, #32
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	60bb      	str	r3, [r7, #8]
   return(result);
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a92a:	61fb      	str	r3, [r7, #28]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	461a      	mov	r2, r3
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	61bb      	str	r3, [r7, #24]
 800a936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a938:	6979      	ldr	r1, [r7, #20]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	e841 2300 	strex	r3, r2, [r1]
 800a940:	613b      	str	r3, [r7, #16]
   return(result);
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e6      	bne.n	800a916 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2220      	movs	r2, #32
 800a94c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a960:	bf00      	nop
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d101      	bne.n	800a9ba <HAL_UARTEx_DisableFifoMode+0x16>
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	e027      	b.n	800aa0a <HAL_UARTEx_DisableFifoMode+0x66>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2224      	movs	r2, #36	@ 0x24
 800a9c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f022 0201 	bic.w	r2, r2, #1
 800a9e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a9e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b084      	sub	sp, #16
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
 800aa1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d101      	bne.n	800aa2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	e02d      	b.n	800aa8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2224      	movs	r2, #36	@ 0x24
 800aa3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f022 0201 	bic.w	r2, r2, #1
 800aa54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f850 	bl	800ab10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2220      	movs	r2, #32
 800aa7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d101      	bne.n	800aaaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	e02d      	b.n	800ab06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2224      	movs	r2, #36	@ 0x24
 800aab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 0201 	bic.w	r2, r2, #1
 800aad0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	430a      	orrs	r2, r1
 800aae4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f812 	bl	800ab10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
	...

0800ab10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d108      	bne.n	800ab32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab30:	e031      	b.n	800ab96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab32:	2308      	movs	r3, #8
 800ab34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab36:	2308      	movs	r3, #8
 800ab38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	0e5b      	lsrs	r3, r3, #25
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 0307 	and.w	r3, r3, #7
 800ab48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	0f5b      	lsrs	r3, r3, #29
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	f003 0307 	and.w	r3, r3, #7
 800ab58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	7b3a      	ldrb	r2, [r7, #12]
 800ab5e:	4911      	ldr	r1, [pc, #68]	@ (800aba4 <UARTEx_SetNbDataToProcess+0x94>)
 800ab60:	5c8a      	ldrb	r2, [r1, r2]
 800ab62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab66:	7b3a      	ldrb	r2, [r7, #12]
 800ab68:	490f      	ldr	r1, [pc, #60]	@ (800aba8 <UARTEx_SetNbDataToProcess+0x98>)
 800ab6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	7b7a      	ldrb	r2, [r7, #13]
 800ab7c:	4909      	ldr	r1, [pc, #36]	@ (800aba4 <UARTEx_SetNbDataToProcess+0x94>)
 800ab7e:	5c8a      	ldrb	r2, [r1, r2]
 800ab80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab84:	7b7a      	ldrb	r2, [r7, #13]
 800ab86:	4908      	ldr	r1, [pc, #32]	@ (800aba8 <UARTEx_SetNbDataToProcess+0x98>)
 800ab88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ab96:	bf00      	nop
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	0800ac80 	.word	0x0800ac80
 800aba8:	0800ac88 	.word	0x0800ac88

0800abac <memset>:
 800abac:	4402      	add	r2, r0
 800abae:	4603      	mov	r3, r0
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d100      	bne.n	800abb6 <memset+0xa>
 800abb4:	4770      	bx	lr
 800abb6:	f803 1b01 	strb.w	r1, [r3], #1
 800abba:	e7f9      	b.n	800abb0 <memset+0x4>

0800abbc <__libc_init_array>:
 800abbc:	b570      	push	{r4, r5, r6, lr}
 800abbe:	4d0d      	ldr	r5, [pc, #52]	@ (800abf4 <__libc_init_array+0x38>)
 800abc0:	4c0d      	ldr	r4, [pc, #52]	@ (800abf8 <__libc_init_array+0x3c>)
 800abc2:	1b64      	subs	r4, r4, r5
 800abc4:	10a4      	asrs	r4, r4, #2
 800abc6:	2600      	movs	r6, #0
 800abc8:	42a6      	cmp	r6, r4
 800abca:	d109      	bne.n	800abe0 <__libc_init_array+0x24>
 800abcc:	4d0b      	ldr	r5, [pc, #44]	@ (800abfc <__libc_init_array+0x40>)
 800abce:	4c0c      	ldr	r4, [pc, #48]	@ (800ac00 <__libc_init_array+0x44>)
 800abd0:	f000 f826 	bl	800ac20 <_init>
 800abd4:	1b64      	subs	r4, r4, r5
 800abd6:	10a4      	asrs	r4, r4, #2
 800abd8:	2600      	movs	r6, #0
 800abda:	42a6      	cmp	r6, r4
 800abdc:	d105      	bne.n	800abea <__libc_init_array+0x2e>
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe4:	4798      	blx	r3
 800abe6:	3601      	adds	r6, #1
 800abe8:	e7ee      	b.n	800abc8 <__libc_init_array+0xc>
 800abea:	f855 3b04 	ldr.w	r3, [r5], #4
 800abee:	4798      	blx	r3
 800abf0:	3601      	adds	r6, #1
 800abf2:	e7f2      	b.n	800abda <__libc_init_array+0x1e>
 800abf4:	0800ac98 	.word	0x0800ac98
 800abf8:	0800ac98 	.word	0x0800ac98
 800abfc:	0800ac98 	.word	0x0800ac98
 800ac00:	0800ac9c 	.word	0x0800ac9c

0800ac04 <memcpy>:
 800ac04:	440a      	add	r2, r1
 800ac06:	4291      	cmp	r1, r2
 800ac08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac0c:	d100      	bne.n	800ac10 <memcpy+0xc>
 800ac0e:	4770      	bx	lr
 800ac10:	b510      	push	{r4, lr}
 800ac12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac1a:	4291      	cmp	r1, r2
 800ac1c:	d1f9      	bne.n	800ac12 <memcpy+0xe>
 800ac1e:	bd10      	pop	{r4, pc}

0800ac20 <_init>:
 800ac20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac22:	bf00      	nop
 800ac24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac26:	bc08      	pop	{r3}
 800ac28:	469e      	mov	lr, r3
 800ac2a:	4770      	bx	lr

0800ac2c <_fini>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	bf00      	nop
 800ac30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac32:	bc08      	pop	{r3}
 800ac34:	469e      	mov	lr, r3
 800ac36:	4770      	bx	lr
