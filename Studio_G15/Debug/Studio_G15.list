
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080095b8  080095b8  0000a5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009610  08009610  0000b23c  2**0
                  CONTENTS
  4 .ARM          00000008  08009610  08009610  0000a610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009618  08009618  0000b23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009618  08009618  0000a618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800961c  0800961c  0000a61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  08009620  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f2c  20000240  0800985c  0000b240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000116c  0800985c  0000c16c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b23c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a692  00000000  00000000  0000b26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000353d  00000000  00000000  000258fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00028e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8a  00000000  00000000  0002a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e3e  00000000  00000000  0002af7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cde  00000000  00000000  00052db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe794  00000000  00000000  0006ba96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a22a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005060  00000000  00000000  0016a270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0016f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000240 	.word	0x20000240
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080095a0 	.word	0x080095a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000244 	.word	0x20000244
 8000214:	080095a0 	.word	0x080095a0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_uldivmod>:
 8000e10:	b953      	cbnz	r3, 8000e28 <__aeabi_uldivmod+0x18>
 8000e12:	b94a      	cbnz	r2, 8000e28 <__aeabi_uldivmod+0x18>
 8000e14:	2900      	cmp	r1, #0
 8000e16:	bf08      	it	eq
 8000e18:	2800      	cmpeq	r0, #0
 8000e1a:	bf1c      	itt	ne
 8000e1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e20:	f04f 30ff 	movne.w	r0, #4294967295
 8000e24:	f000 b96a 	b.w	80010fc <__aeabi_idiv0>
 8000e28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e30:	f000 f806 	bl	8000e40 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4770      	bx	lr

08000e40 <__udivmoddi4>:
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	9d08      	ldr	r5, [sp, #32]
 8000e46:	460c      	mov	r4, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d14e      	bne.n	8000eea <__udivmoddi4+0xaa>
 8000e4c:	4694      	mov	ip, r2
 8000e4e:	458c      	cmp	ip, r1
 8000e50:	4686      	mov	lr, r0
 8000e52:	fab2 f282 	clz	r2, r2
 8000e56:	d962      	bls.n	8000f1e <__udivmoddi4+0xde>
 8000e58:	b14a      	cbz	r2, 8000e6e <__udivmoddi4+0x2e>
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	fa20 f303 	lsr.w	r3, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f f68c 	uxth.w	r6, ip
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb04 f106 	mul.w	r1, r4, r6
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x64>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e96:	f080 8112 	bcs.w	80010be <__udivmoddi4+0x27e>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 810f 	bls.w	80010be <__udivmoddi4+0x27e>
 8000ea0:	3c02      	subs	r4, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a59      	subs	r1, r3, r1
 8000ea6:	fa1f f38e 	uxth.w	r3, lr
 8000eaa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eae:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f606 	mul.w	r6, r0, r6
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d90a      	bls.n	8000ed4 <__udivmoddi4+0x94>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec6:	f080 80fc 	bcs.w	80010c2 <__udivmoddi4+0x282>
 8000eca:	429e      	cmp	r6, r3
 8000ecc:	f240 80f9 	bls.w	80010c2 <__udivmoddi4+0x282>
 8000ed0:	4463      	add	r3, ip
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	1b9b      	subs	r3, r3, r6
 8000ed6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eda:	2100      	movs	r1, #0
 8000edc:	b11d      	cbz	r5, 8000ee6 <__udivmoddi4+0xa6>
 8000ede:	40d3      	lsrs	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d905      	bls.n	8000efa <__udivmoddi4+0xba>
 8000eee:	b10d      	cbz	r5, 8000ef4 <__udivmoddi4+0xb4>
 8000ef0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e7f5      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000efa:	fab3 f183 	clz	r1, r3
 8000efe:	2900      	cmp	r1, #0
 8000f00:	d146      	bne.n	8000f90 <__udivmoddi4+0x150>
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	d302      	bcc.n	8000f0c <__udivmoddi4+0xcc>
 8000f06:	4290      	cmp	r0, r2
 8000f08:	f0c0 80f0 	bcc.w	80010ec <__udivmoddi4+0x2ac>
 8000f0c:	1a86      	subs	r6, r0, r2
 8000f0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d0e6      	beq.n	8000ee6 <__udivmoddi4+0xa6>
 8000f18:	e9c5 6300 	strd	r6, r3, [r5]
 8000f1c:	e7e3      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	f040 8090 	bne.w	8001044 <__udivmoddi4+0x204>
 8000f24:	eba1 040c 	sub.w	r4, r1, ip
 8000f28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f2c:	fa1f f78c 	uxth.w	r7, ip
 8000f30:	2101      	movs	r1, #1
 8000f32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f42:	fb07 f006 	mul.w	r0, r7, r6
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d908      	bls.n	8000f5c <__udivmoddi4+0x11c>
 8000f4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f52:	d202      	bcs.n	8000f5a <__udivmoddi4+0x11a>
 8000f54:	4298      	cmp	r0, r3
 8000f56:	f200 80cd 	bhi.w	80010f4 <__udivmoddi4+0x2b4>
 8000f5a:	4626      	mov	r6, r4
 8000f5c:	1a1c      	subs	r4, r3, r0
 8000f5e:	fa1f f38e 	uxth.w	r3, lr
 8000f62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f66:	fb08 4410 	mls	r4, r8, r0, r4
 8000f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6e:	fb00 f707 	mul.w	r7, r0, r7
 8000f72:	429f      	cmp	r7, r3
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x148>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7e:	d202      	bcs.n	8000f86 <__udivmoddi4+0x146>
 8000f80:	429f      	cmp	r7, r3
 8000f82:	f200 80b0 	bhi.w	80010e6 <__udivmoddi4+0x2a6>
 8000f86:	4620      	mov	r0, r4
 8000f88:	1bdb      	subs	r3, r3, r7
 8000f8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8e:	e7a5      	b.n	8000edc <__udivmoddi4+0x9c>
 8000f90:	f1c1 0620 	rsb	r6, r1, #32
 8000f94:	408b      	lsls	r3, r1
 8000f96:	fa22 f706 	lsr.w	r7, r2, r6
 8000f9a:	431f      	orrs	r7, r3
 8000f9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa0:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa4:	ea43 030c 	orr.w	r3, r3, ip
 8000fa8:	40f4      	lsrs	r4, r6
 8000faa:	fa00 f801 	lsl.w	r8, r0, r1
 8000fae:	0c38      	lsrs	r0, r7, #16
 8000fb0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb4:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb8:	fa1f fc87 	uxth.w	ip, r7
 8000fbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc8:	45a1      	cmp	r9, r4
 8000fca:	fa02 f201 	lsl.w	r2, r2, r1
 8000fce:	d90a      	bls.n	8000fe6 <__udivmoddi4+0x1a6>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd6:	f080 8084 	bcs.w	80010e2 <__udivmoddi4+0x2a2>
 8000fda:	45a1      	cmp	r9, r4
 8000fdc:	f240 8081 	bls.w	80010e2 <__udivmoddi4+0x2a2>
 8000fe0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe4:	443c      	add	r4, r7
 8000fe6:	eba4 0409 	sub.w	r4, r4, r9
 8000fea:	fa1f f983 	uxth.w	r9, r3
 8000fee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ff2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffe:	45a4      	cmp	ip, r4
 8001000:	d907      	bls.n	8001012 <__udivmoddi4+0x1d2>
 8001002:	193c      	adds	r4, r7, r4
 8001004:	f103 30ff 	add.w	r0, r3, #4294967295
 8001008:	d267      	bcs.n	80010da <__udivmoddi4+0x29a>
 800100a:	45a4      	cmp	ip, r4
 800100c:	d965      	bls.n	80010da <__udivmoddi4+0x29a>
 800100e:	3b02      	subs	r3, #2
 8001010:	443c      	add	r4, r7
 8001012:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001016:	fba0 9302 	umull	r9, r3, r0, r2
 800101a:	eba4 040c 	sub.w	r4, r4, ip
 800101e:	429c      	cmp	r4, r3
 8001020:	46ce      	mov	lr, r9
 8001022:	469c      	mov	ip, r3
 8001024:	d351      	bcc.n	80010ca <__udivmoddi4+0x28a>
 8001026:	d04e      	beq.n	80010c6 <__udivmoddi4+0x286>
 8001028:	b155      	cbz	r5, 8001040 <__udivmoddi4+0x200>
 800102a:	ebb8 030e 	subs.w	r3, r8, lr
 800102e:	eb64 040c 	sbc.w	r4, r4, ip
 8001032:	fa04 f606 	lsl.w	r6, r4, r6
 8001036:	40cb      	lsrs	r3, r1
 8001038:	431e      	orrs	r6, r3
 800103a:	40cc      	lsrs	r4, r1
 800103c:	e9c5 6400 	strd	r6, r4, [r5]
 8001040:	2100      	movs	r1, #0
 8001042:	e750      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8001044:	f1c2 0320 	rsb	r3, r2, #32
 8001048:	fa20 f103 	lsr.w	r1, r0, r3
 800104c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001050:	fa24 f303 	lsr.w	r3, r4, r3
 8001054:	4094      	lsls	r4, r2
 8001056:	430c      	orrs	r4, r1
 8001058:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800105c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	fbb3 f0f8 	udiv	r0, r3, r8
 8001068:	fb08 3110 	mls	r1, r8, r0, r3
 800106c:	0c23      	lsrs	r3, r4, #16
 800106e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001072:	fb00 f107 	mul.w	r1, r0, r7
 8001076:	4299      	cmp	r1, r3
 8001078:	d908      	bls.n	800108c <__udivmoddi4+0x24c>
 800107a:	eb1c 0303 	adds.w	r3, ip, r3
 800107e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001082:	d22c      	bcs.n	80010de <__udivmoddi4+0x29e>
 8001084:	4299      	cmp	r1, r3
 8001086:	d92a      	bls.n	80010de <__udivmoddi4+0x29e>
 8001088:	3802      	subs	r0, #2
 800108a:	4463      	add	r3, ip
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb3 f1f8 	udiv	r1, r3, r8
 8001094:	fb08 3311 	mls	r3, r8, r1, r3
 8001098:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800109c:	fb01 f307 	mul.w	r3, r1, r7
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0x276>
 80010a4:	eb1c 0404 	adds.w	r4, ip, r4
 80010a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80010ac:	d213      	bcs.n	80010d6 <__udivmoddi4+0x296>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d911      	bls.n	80010d6 <__udivmoddi4+0x296>
 80010b2:	3902      	subs	r1, #2
 80010b4:	4464      	add	r4, ip
 80010b6:	1ae4      	subs	r4, r4, r3
 80010b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010bc:	e739      	b.n	8000f32 <__udivmoddi4+0xf2>
 80010be:	4604      	mov	r4, r0
 80010c0:	e6f0      	b.n	8000ea4 <__udivmoddi4+0x64>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e706      	b.n	8000ed4 <__udivmoddi4+0x94>
 80010c6:	45c8      	cmp	r8, r9
 80010c8:	d2ae      	bcs.n	8001028 <__udivmoddi4+0x1e8>
 80010ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80010d2:	3801      	subs	r0, #1
 80010d4:	e7a8      	b.n	8001028 <__udivmoddi4+0x1e8>
 80010d6:	4631      	mov	r1, r6
 80010d8:	e7ed      	b.n	80010b6 <__udivmoddi4+0x276>
 80010da:	4603      	mov	r3, r0
 80010dc:	e799      	b.n	8001012 <__udivmoddi4+0x1d2>
 80010de:	4630      	mov	r0, r6
 80010e0:	e7d4      	b.n	800108c <__udivmoddi4+0x24c>
 80010e2:	46d6      	mov	lr, sl
 80010e4:	e77f      	b.n	8000fe6 <__udivmoddi4+0x1a6>
 80010e6:	4463      	add	r3, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e74d      	b.n	8000f88 <__udivmoddi4+0x148>
 80010ec:	4606      	mov	r6, r0
 80010ee:	4623      	mov	r3, r4
 80010f0:	4608      	mov	r0, r1
 80010f2:	e70f      	b.n	8000f14 <__udivmoddi4+0xd4>
 80010f4:	3e02      	subs	r6, #2
 80010f6:	4463      	add	r3, ip
 80010f8:	e730      	b.n	8000f5c <__udivmoddi4+0x11c>
 80010fa:	bf00      	nop

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <easyCase>:
void Reset(){
	registerFrame[0x01].U16 = 0;
	registerFrame[0x10].U16 = 0;
}

void easyCase(){
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	base.bS = registerFrame[0x01].U16;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <easyCase+0x28>)
 8001106:	885a      	ldrh	r2, [r3, #2]
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <easyCase+0x2c>)
 800110a:	86da      	strh	r2, [r3, #54]	@ 0x36
	base.vS = registerFrame[0x02].U16;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <easyCase+0x28>)
 800110e:	889a      	ldrh	r2, [r3, #4]
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <easyCase+0x2c>)
 8001112:	871a      	strh	r2, [r3, #56]	@ 0x38
	base.gmS = registerFrame[0x03].U16;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <easyCase+0x28>)
 8001116:	88da      	ldrh	r2, [r3, #6]
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <easyCase+0x2c>)
 800111a:	875a      	strh	r2, [r3, #58]	@ 0x3a
//	base.gmaS = registerFrame[0x04].U16;
//	base.zmS = registerFrame[0x10].U16;
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000fc8 	.word	0x20000fc8
 800112c:	200002b4 	.word	0x200002b4

08001130 <Heartbeat>:

void Heartbeat(){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <Heartbeat+0x18>)
 8001136:	f645 1261 	movw	r2, #22881	@ 0x5961
 800113a:	801a      	strh	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000fc8 	.word	0x20000fc8

0800114c <Routine>:

void Routine(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <Routine+0xa8>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001158:	4293      	cmp	r3, r2
 800115a:	d149      	bne.n	80011f0 <Routine+0xa4>
	{
		//Gripper 0x04 not sure!?!?
		registerFrame[0x04].U16 = base.ReedStatus;   					//Gripper status 0b0010 = 0000 0000 0000 0010
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <Routine+0xac>)
 800115e:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <Routine+0xa8>)
 8001162:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = base.bStatus;							//Z-axis status 0010 = 1
 8001164:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <Routine+0xac>)
 8001166:	881a      	ldrh	r2, [r3, #0]
 8001168:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <Routine+0xa8>)
 800116a:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = AMT.Linear_Position			*10;	//Z-axis position
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Routine+0xb0>)
 800116e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001172:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117e:	ee17 3a90 	vmov	r3, s15
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <Routine+0xa8>)
 8001186:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = fabs(AMT.Linear_Velocity)		*10;	//Z-axis speed
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <Routine+0xb0>)
 800118a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800118e:	eef0 7ae7 	vabs.f32	s15, s15
 8001192:	ee17 0a90 	vmov	r0, s15
 8001196:	f7ff f9a3 	bl	80004e0 <__aeabi_f2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <Routine+0xb4>)
 80011a0:	f7ff f9f6 	bl	8000590 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fcb2 	bl	8000b14 <__aeabi_d2uiz>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <Routine+0xa8>)
 80011b6:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = fabs(AMT.Linear_Acceleration)	*10;	//Z-axis acceleration
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <Routine+0xb0>)
 80011ba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80011be:	eef0 7ae7 	vabs.f32	s15, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f98b 	bl	80004e0 <__aeabi_f2d>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <Routine+0xb4>)
 80011d0:	f7ff f9de 	bl	8000590 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fc9a 	bl	8000b14 <__aeabi_d2uiz>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <Routine+0xa8>)
 80011e6:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = 4								*10;	//X-axis position
 80011e8:	4b02      	ldr	r3, [pc, #8]	@ (80011f4 <Routine+0xa8>)
 80011ea:	2228      	movs	r2, #40	@ 0x28
 80011ec:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000fc8 	.word	0x20000fc8
 80011f8:	200002b4 	.word	0x200002b4
 80011fc:	20000a30 	.word	0x20000a30
 8001200:	40240000 	.word	0x40240000

08001204 <SetShelves>:
	}
}



void SetShelves(){
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 1; 		//Z-axis update z-xis moving status to "Set Shelves"
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <SetShelves+0x68>)
 800120a:	2201      	movs	r2, #1
 800120c:	841a      	strh	r2, [r3, #32]
	// save Position = floor[0] for moving to that position
	// set shelves 1 = 100 mm shelves 2 = 250 mm
	registerFrame[0x23].U16 = 10 *10; 	//0 = Position Shelve 1
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <SetShelves+0x68>)
 8001210:	2264      	movs	r2, #100	@ 0x64
 8001212:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	registerFrame[0x24].U16 = 20 *10;
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <SetShelves+0x68>)
 8001218:	22c8      	movs	r2, #200	@ 0xc8
 800121a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	registerFrame[0x25].U16 = 30 *10;
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <SetShelves+0x68>)
 8001220:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001224:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	registerFrame[0x26].U16 = 40 *10;
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <SetShelves+0x68>)
 800122a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800122e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	registerFrame[0x27].U16 = 50 *10;
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <SetShelves+0x68>)
 8001234:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001238:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	//finish
	if (base.sw == 1){
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <SetShelves+0x6c>)
 800123e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001242:	2b01      	cmp	r3, #1
 8001244:	d10d      	bne.n	8001262 <SetShelves+0x5e>
		base.bStatus = 0;
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <SetShelves+0x6c>)
 8001248:	2200      	movs	r2, #0
 800124a:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <SetShelves+0x6c>)
 800124e:	881a      	ldrh	r2, [r3, #0]
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <SetShelves+0x68>)
 8001252:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SetShelves+0x68>)
 8001256:	2200      	movs	r2, #0
 8001258:	841a      	strh	r2, [r3, #32]
		base.sw = 0;
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <SetShelves+0x6c>)
 800125c:	2200      	movs	r2, #0
 800125e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	}
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000fc8 	.word	0x20000fc8
 8001270:	200002b4 	.word	0x200002b4

08001274 <RunPoint>:

void RunPoint(){
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <RunPoint+0x50>)
 800127a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <RunPoint+0x54>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <RunPoint+0x58>)
 800128a:	861a      	strh	r2, [r3, #48]	@ 0x30
	registerFrame[0x10].U16 = 16;
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <RunPoint+0x50>)
 800128e:	2210      	movs	r2, #16
 8001290:	841a      	strh	r2, [r3, #32]
	//finish
	if(base.swp == 1){
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <RunPoint+0x58>)
 8001294:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001298:	2b01      	cmp	r3, #1
 800129a:	d10d      	bne.n	80012b8 <RunPoint+0x44>
		base.bStatus = 0;
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <RunPoint+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <RunPoint+0x58>)
 80012a4:	881a      	ldrh	r2, [r3, #0]
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <RunPoint+0x50>)
 80012a8:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <RunPoint+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	841a      	strh	r2, [r3, #32]
		base.swp = 0;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <RunPoint+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	}
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000fc8 	.word	0x20000fc8
 80012c8:	cccccccd 	.word	0xcccccccd
 80012cc:	200002b4 	.word	0x200002b4

080012d0 <SetHome>:

void SetHome(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 2;
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <SetHome+0x4c>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	841a      	strh	r2, [r3, #32]
	base.MotorHome = 400;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <SetHome+0x50>)
 80012dc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)		// Top photo limit was triggered
 80012e4:	2140      	movs	r1, #64	@ 0x40
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ea:	f003 f833 	bl	8004354 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d110      	bne.n	8001316 <SetHome+0x46>
		{
			base.MotorHome = 150;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <SetHome+0x50>)
 80012f6:	2296      	movs	r2, #150	@ 0x96
 80012f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
			AMT_encoder_reset(&AMT);
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <SetHome+0x54>)
 80012fe:	f000 f979 	bl	80015f4 <AMT_encoder_reset>
			base.bStatus = 0;
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <SetHome+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	801a      	strh	r2, [r3, #0]
			registerFrame[0x01].U16 = base.bStatus;
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SetHome+0x50>)
 800130a:	881a      	ldrh	r2, [r3, #0]
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <SetHome+0x4c>)
 800130e:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0;
 8001310:	4b02      	ldr	r3, [pc, #8]	@ (800131c <SetHome+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	841a      	strh	r2, [r3, #32]
//		registerFrame[0x10].U16 = 0;
//		base.sh = 0;
//	}
//	base.bS = 0;
//	registerFrame[0x01].U16 = 0;
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000fc8 	.word	0x20000fc8
 8001320:	200002b4 	.word	0x200002b4
 8001324:	20000a30 	.word	0x20000a30

08001328 <RunJog>:

void RunJog(){
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	base.Pick = registerFrame[0x21].U16 ; 	//Get Pick from BaseSystem
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <RunJog+0x54>)
 800132e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001332:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <RunJog+0x58>)
 8001334:	865a      	strh	r2, [r3, #50]	@ 0x32
	base.Place = registerFrame[0x22].U16 ;	//Get Place from BaseSystem
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <RunJog+0x54>)
 8001338:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800133c:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <RunJog+0x58>)
 800133e:	869a      	strh	r2, [r3, #52]	@ 0x34
	registerFrame[0x10].U16 = 4;
 8001340:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <RunJog+0x54>)
 8001342:	2204      	movs	r2, #4
 8001344:	841a      	strh	r2, [r3, #32]
	registerFrame[0x10].U16 = 8;
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <RunJog+0x54>)
 8001348:	2208      	movs	r2, #8
 800134a:	841a      	strh	r2, [r3, #32]
	//pick place 5 time
	if(base.sp == 1){
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <RunJog+0x58>)
 800134e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001352:	2b01      	cmp	r3, #1
 8001354:	d10d      	bne.n	8001372 <RunJog+0x4a>
		base.bStatus = 0;
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <RunJog+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <RunJog+0x58>)
 800135e:	881a      	ldrh	r2, [r3, #0]
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <RunJog+0x54>)
 8001362:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <RunJog+0x54>)
 8001366:	2200      	movs	r2, #0
 8001368:	841a      	strh	r2, [r3, #32]
		base.sp = 0;
 800136a:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <RunJog+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	}
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000fc8 	.word	0x20000fc8
 8001380:	200002b4 	.word	0x200002b4

08001384 <AMT_encoder_init>:
float ALPHA = 0.3f;									// smoothing param

//-------------------------------------------Function Code-------------------------------------------------------//

void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001398:	213c      	movs	r1, #60	@ 0x3c
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fd22 	bl	8005de4 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 0.0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 0.0;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	605a      	str	r2, [r3, #4]
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0000      	movs	r0, r0
	...

080013b8 <AMT_encoder_update>:

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 80013b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	e9c7 2300 	strd	r2, r3, [r7]
	//collect data
	AMT_data->TimeStamp[QEI_NOW] = current_time;
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
	AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	601a      	str	r2, [r3, #0]

	//Postion 1 turn calculation
	AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a7d      	ldr	r2, [pc, #500]	@ (80015d8 <AMT_encoder_update+0x220>)
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80013e8:	fb01 f202 	mul.w	r2, r1, r2
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	621a      	str	r2, [r3, #32]

	//calculate dx
	diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	4b76      	ldr	r3, [pc, #472]	@ (80015dc <AMT_encoder_update+0x224>)
 8001402:	601a      	str	r2, [r3, #0]

	//Handle Warp around
	if(diffPosition > 32767)
 8001404:	4b75      	ldr	r3, [pc, #468]	@ (80015dc <AMT_encoder_update+0x224>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800140c:	db06      	blt.n	800141c <AMT_encoder_update+0x64>
		diffPosition -= 65535;
 800140e:	4b73      	ldr	r3, [pc, #460]	@ (80015dc <AMT_encoder_update+0x224>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001416:	3bff      	subs	r3, #255	@ 0xff
 8001418:	4a70      	ldr	r2, [pc, #448]	@ (80015dc <AMT_encoder_update+0x224>)
 800141a:	6013      	str	r3, [r2, #0]
	if(diffPosition < -32767)
 800141c:	4b6f      	ldr	r3, [pc, #444]	@ (80015dc <AMT_encoder_update+0x224>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001424:	dc06      	bgt.n	8001434 <AMT_encoder_update+0x7c>
		diffPosition += 65535;
 8001426:	4b6d      	ldr	r3, [pc, #436]	@ (80015dc <AMT_encoder_update+0x224>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800142e:	33ff      	adds	r3, #255	@ 0xff
 8001430:	4a6a      	ldr	r2, [pc, #424]	@ (80015dc <AMT_encoder_update+0x224>)
 8001432:	6013      	str	r3, [r2, #0]

	//calculate dt
	diffTime = (AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV] );
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001440:	1a84      	subs	r4, r0, r2
 8001442:	eb61 0503 	sbc.w	r5, r1, r3
 8001446:	4620      	mov	r0, r4
 8001448:	4629      	mov	r1, r5
 800144a:	f7ff fc9b 	bl	8000d84 <__aeabi_ul2f>
 800144e:	4603      	mov	r3, r0
 8001450:	4a63      	ldr	r2, [pc, #396]	@ (80015e0 <AMT_encoder_update+0x228>)
 8001452:	6013      	str	r3, [r2, #0]

	//calculate anglar velocity
	float Vin = (PID_velo.out/1000)*24;
 8001454:	4b63      	ldr	r3, [pc, #396]	@ (80015e4 <AMT_encoder_update+0x22c>)
 8001456:	ed93 7a06 	vldr	s14, [r3, #24]
 800145a:	eddf 6a63 	vldr	s13, [pc, #396]	@ 80015e8 <AMT_encoder_update+0x230>
 800145e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001462:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146a:	edc7 7a05 	vstr	s15, [r7, #20]
//	AMT_data->Angular_Velocity = lowPassFilter(SteadyStateKalmanFilter(&Vel_filtered,Vin, (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6))));	//RPM
	AMT_data->Angular_Velocity = (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6));	//RPM
 800146e:	4b5b      	ldr	r3, [pc, #364]	@ (80015dc <AMT_encoder_update+0x224>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f822 	bl	80004bc <__aeabi_i2d>
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	4b5b      	ldr	r3, [pc, #364]	@ (80015ec <AMT_encoder_update+0x234>)
 800147e:	f7ff f887 	bl	8000590 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4690      	mov	r8, r2
 8001488:	4699      	mov	r9, r3
 800148a:	4b53      	ldr	r3, [pc, #332]	@ (80015d8 <AMT_encoder_update+0x220>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f804 	bl	800049c <__aeabi_ui2d>
 8001494:	4604      	mov	r4, r0
 8001496:	460d      	mov	r5, r1
 8001498:	4b51      	ldr	r3, [pc, #324]	@ (80015e0 <AMT_encoder_update+0x228>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f81f 	bl	80004e0 <__aeabi_f2d>
 80014a2:	a34b      	add	r3, pc, #300	@ (adr r3, 80015d0 <AMT_encoder_update+0x218>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f99c 	bl	80007e4 <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7ff f86c 	bl	8000590 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4640      	mov	r0, r8
 80014be:	4649      	mov	r1, r9
 80014c0:	f7ff f990 	bl	80007e4 <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb42 	bl	8000b54 <__aeabi_d2f>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24

	// Calculate Linear
	AMT_data->Linear_Position += (diffPosition*pulley_cir)/cnt_per_rev;			//mm
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014dc:	4b3f      	ldr	r3, [pc, #252]	@ (80015dc <AMT_encoder_update+0x224>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014e8:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <AMT_encoder_update+0x238>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80014f2:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <AMT_encoder_update+0x220>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014fe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	AMT_data->Linear_Velocity = (AMT_data->Angular_Velocity / 60.0) * pulley_cir;		//mm/s
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ffe5 	bl	80004e0 <__aeabi_f2d>
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b34      	ldr	r3, [pc, #208]	@ (80015ec <AMT_encoder_update+0x234>)
 800151c:	f7ff f962 	bl	80007e4 <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4614      	mov	r4, r2
 8001526:	461d      	mov	r5, r3
 8001528:	4b31      	ldr	r3, [pc, #196]	@ (80015f0 <AMT_encoder_update+0x238>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffd7 	bl	80004e0 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4620      	mov	r0, r4
 8001538:	4629      	mov	r1, r5
 800153a:	f7ff f829 	bl	8000590 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fb05 	bl	8000b54 <__aeabi_d2f>
 800154a:	4602      	mov	r2, r0
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	62da      	str	r2, [r3, #44]	@ 0x2c
	AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity;					//Uodate Velo
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	619a      	str	r2, [r3, #24]
	AMT_data->Linear_Acceleration = ((AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) *  1e6) / (diffTime);		//mm/s^2
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	ed93 7a06 	vldr	s14, [r3, #24]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	edd3 7a07 	vldr	s15, [r3, #28]
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	ee17 0a90 	vmov	r0, s15
 800156c:	f7fe ffb8 	bl	80004e0 <__aeabi_f2d>
 8001570:	a317      	add	r3, pc, #92	@ (adr r3, 80015d0 <AMT_encoder_update+0x218>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7ff f80b 	bl	8000590 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4614      	mov	r4, r2
 8001580:	461d      	mov	r5, r3
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <AMT_encoder_update+0x228>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ffaa 	bl	80004e0 <__aeabi_f2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4620      	mov	r0, r4
 8001592:	4629      	mov	r1, r5
 8001594:	f7ff f926 	bl	80007e4 <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fad8 	bl	8000b54 <__aeabi_d2f>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	629a      	str	r2, [r3, #40]	@ 0x28

	//store value for next loop
	AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	61da      	str	r2, [r3, #28]
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015d0:	00000000 	.word	0x00000000
 80015d4:	412e8480 	.word	0x412e8480
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000278 	.word	0x20000278
 80015e0:	2000027c 	.word	0x2000027c
 80015e4:	2000025c 	.word	0x2000025c
 80015e8:	447a0000 	.word	0x447a0000
 80015ec:	404e0000 	.word	0x404e0000
 80015f0:	20000004 	.word	0x20000004

080015f4 <AMT_encoder_reset>:

void AMT_encoder_reset(AMT_Encoder *AMT_data)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	AMT_data->Linear_Position = 600;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <AMT_encoder_reset+0x1c>)
 8001600:	631a      	str	r2, [r3, #48]	@ 0x30
//	AMT_data->Position[QEI_NOW] = 0;

}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	44160000 	.word	0x44160000

08001614 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001618:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <modbus_1t5_Timeout+0x3c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <modbus_1t5_Timeout+0x3c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <modbus_1t5_Timeout+0x3c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <modbus_1t5_Timeout+0x3c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000280 	.word	0x20000280

08001654 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <modbus_3t5_Timeout+0x1c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	755a      	strb	r2, [r3, #21]

}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	20000280 	.word	0x20000280

08001674 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f006 fe2d 	bl	80082dc <HAL_UART_GetError>
 8001682:	4603      	mov	r3, r0
 8001684:	2b20      	cmp	r3, #32
 8001686:	d101      	bne.n	800168c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001688:	f7ff ffc4 	bl	8001614 <modbus_1t5_Timeout>

	}
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800169e:	4a25      	ldr	r2, [pc, #148]	@ (8001734 <Modbus_init+0xa0>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80016a4:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <Modbus_init+0xa0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	4a21      	ldr	r2, [pc, #132]	@ (8001738 <Modbus_init+0xa4>)
 80016b2:	210e      	movs	r1, #14
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 f821 	bl	80066fc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2110      	movs	r1, #16
 80016c0:	4618      	mov	r0, r3
 80016c2:	f006 fdb5 	bl	8008230 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 fdcc 	bl	8008268 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4a19      	ldr	r2, [pc, #100]	@ (800173c <Modbus_init+0xa8>)
 80016d6:	2104      	movs	r1, #4
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 ffcb 	bl	8007674 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <Modbus_init+0xa0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80016e4:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <Modbus_init+0xa0>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <Modbus_init+0xa0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80016f0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80016f4:	4413      	add	r3, r2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016fc:	4619      	mov	r1, r3
 80016fe:	f006 f9bb 	bl	8007a78 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <Modbus_init+0xa0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10c      	bne.n	800172c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <Modbus_init+0xa0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4618      	mov	r0, r3
 800171a:	f003 ff73 	bl	8005604 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <Modbus_init+0xa0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fa1a 	bl	8005b60 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000280 	.word	0x20000280
 8001738:	08001655 	.word	0x08001655
 800173c:	08001675 	.word	0x08001675

08001740 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800174c:	23ff      	movs	r3, #255	@ 0xff
 800174e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001750:	23ff      	movs	r3, #255	@ 0xff
 8001752:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001754:	e013      	b.n	800177e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	4053      	eors	r3, r2
 8001762:	b2db      	uxtb	r3, r3
 8001764:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001766:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <CRC16+0x64>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4413      	add	r3, r2
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	4053      	eors	r3, r2
 8001772:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001774:	4a0c      	ldr	r2, [pc, #48]	@ (80017a8 <CRC16+0x68>)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800177e:	883b      	ldrh	r3, [r7, #0]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	803a      	strh	r2, [r7, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e6      	bne.n	8001756 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b21a      	sxth	r2, r3
 800178e:	7bbb      	ldrb	r3, [r7, #14]
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21b      	sxth	r3, r3
 8001796:	b29b      	uxth	r3, r3
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	20000108 	.word	0x20000108
 80017a8:	20000008 	.word	0x20000008

080017ac <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80017b2:	4b7e      	ldr	r3, [pc, #504]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	7ddb      	ldrb	r3, [r3, #23]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d80a      	bhi.n	80017d4 <Modbus_Protocal_Worker+0x28>
 80017be:	a201      	add	r2, pc, #4	@ (adr r2, 80017c4 <Modbus_Protocal_Worker+0x18>)
 80017c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c4:	080017df 	.word	0x080017df
 80017c8:	08001973 	.word	0x08001973
 80017cc:	0800186b 	.word	0x0800186b
 80017d0:	080018af 	.word	0x080018af
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80017d4:	4b75      	ldr	r3, [pc, #468]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	75da      	strb	r2, [r3, #23]
		break;
 80017dc:	e0e1      	b.n	80019a2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80017de:	4b73      	ldr	r3, [pc, #460]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80017ea:	4b70      	ldr	r3, [pc, #448]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2202      	movs	r2, #2
 80017f0:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80017f2:	f000 f9cd 	bl	8001b90 <Modbus_Emission>
 80017f6:	e018      	b.n	800182a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80017f8:	4b6c      	ldr	r3, [pc, #432]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001802:	4b6a      	ldr	r3, [pc, #424]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800180c:	b29b      	uxth	r3, r3
 800180e:	429a      	cmp	r2, r3
 8001810:	d00b      	beq.n	800182a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001812:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800181a:	4b64      	ldr	r3, [pc, #400]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001822:	4b62      	ldr	r3, [pc, #392]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2203      	movs	r2, #3
 8001828:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800182a:	4b60      	ldr	r3, [pc, #384]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001834:	2b20      	cmp	r3, #32
 8001836:	f040 80ad 	bne.w	8001994 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800183a:	4b5c      	ldr	r3, [pc, #368]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001844:	4b59      	ldr	r3, [pc, #356]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800184a:	4b58      	ldr	r3, [pc, #352]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b57      	ldr	r3, [pc, #348]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001856:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800185a:	4413      	add	r3, r2
 800185c:	3302      	adds	r3, #2
 800185e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001862:	4619      	mov	r1, r3
 8001864:	f006 f908 	bl	8007a78 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001868:	e094      	b.n	8001994 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800186a:	4b50      	ldr	r3, [pc, #320]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	7d1b      	ldrb	r3, [r3, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8091 	beq.w	8001998 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001876:	4b4d      	ldr	r3, [pc, #308]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	22fe      	movs	r2, #254	@ 0xfe
 800187c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800187e:	4b4b      	ldr	r3, [pc, #300]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001888:	4b48      	ldr	r3, [pc, #288]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001898:	4b44      	ldr	r3, [pc, #272]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800189a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800189c:	1a8a      	subs	r2, r1, r2
 800189e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80018a0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80018a4:	4b41      	ldr	r3, [pc, #260]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2204      	movs	r2, #4
 80018aa:	75da      	strb	r2, [r3, #23]
		}
		break;
 80018ac:	e074      	b.n	8001998 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80018ae:	4b3f      	ldr	r3, [pc, #252]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80018b6:	f113 0f02 	cmn.w	r3, #2
 80018ba:	d150      	bne.n	800195e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80018bc:	4b3b      	ldr	r3, [pc, #236]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80018c4:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80018cc:	4b37      	ldr	r3, [pc, #220]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80018d4:	3b02      	subs	r3, #2
 80018d6:	4619      	mov	r1, r3
 80018d8:	4610      	mov	r0, r2
 80018da:	f7ff ff31 	bl	8001740 <CRC16>
 80018de:	4603      	mov	r3, r0
 80018e0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80018e2:	793a      	ldrb	r2, [r7, #4]
 80018e4:	4b31      	ldr	r3, [pc, #196]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80018e6:	6819      	ldr	r1, [r3, #0]
 80018e8:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80018f0:	3b02      	subs	r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d10c      	bne.n	8001916 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80018fc:	797a      	ldrb	r2, [r7, #5]
 80018fe:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800190a:	3b01      	subs	r3, #1
 800190c:	440b      	add	r3, r1
 800190e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001912:	429a      	cmp	r2, r3
 8001914:	d004      	beq.n	8001920 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001916:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	22ff      	movs	r2, #255	@ 0xff
 800191c:	759a      	strb	r2, [r3, #22]
				break;
 800191e:	e040      	b.n	80019a2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d113      	bne.n	800195a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001942:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800194c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800194e:	461a      	mov	r2, r3
 8001950:	f007 fe18 	bl	8009584 <memcpy>

			//execute command
			Modbus_frame_response();
 8001954:	f000 f904 	bl	8001b60 <Modbus_frame_response>
 8001958:	e001      	b.n	800195e <Modbus_Protocal_Worker+0x1b2>
				break;
 800195a:	bf00      	nop
					}
		break;


	}
}
 800195c:	e021      	b.n	80019a2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	7d5b      	ldrb	r3, [r3, #21]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d019      	beq.n	800199c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	75da      	strb	r2, [r3, #23]
		break;
 8001970:	e014      	b.n	800199c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197c:	2b20      	cmp	r3, #32
 800197e:	d10f      	bne.n	80019a0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001980:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <Modbus_Protocal_Worker+0x200>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2201      	movs	r2, #1
 8001990:	75da      	strb	r2, [r3, #23]
		break;
 8001992:	e005      	b.n	80019a0 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001994:	bf00      	nop
 8001996:	e004      	b.n	80019a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001998:	bf00      	nop
 800199a:	e002      	b.n	80019a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 800199c:	bf00      	nop
 800199e:	e000      	b.n	80019a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80019a0:	bf00      	nop
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000280 	.word	0x20000280

080019b0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <modbusWrite1Register+0x7c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	7e5b      	ldrb	r3, [r3, #25]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <modbusWrite1Register+0x7c>)
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	7e92      	ldrb	r2, [r2, #26]
 80019c6:	4413      	add	r3, r2
 80019c8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80019ca:	88fa      	ldrh	r2, [r7, #6]
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <modbusWrite1Register+0x7c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d903      	bls.n	80019de <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80019d6:	2002      	movs	r0, #2
 80019d8:	f000 f8a0 	bl	8001b1c <ModbusErrorReply>
			 return;
 80019dc:	e023      	b.n	8001a26 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <modbusWrite1Register+0x7c>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <modbusWrite1Register+0x7c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	440b      	add	r3, r1
 80019ee:	7ed2      	ldrb	r2, [r2, #27]
 80019f0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <modbusWrite1Register+0x7c>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <modbusWrite1Register+0x7c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	440b      	add	r3, r1
 8001a02:	7f12      	ldrb	r2, [r2, #28]
 8001a04:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <modbusWrite1Register+0x7c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <modbusWrite1Register+0x7c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001a14:	2208      	movs	r2, #8
 8001a16:	4619      	mov	r1, r3
 8001a18:	f007 fdb4 	bl	8009584 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <modbusWrite1Register+0x7c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2205      	movs	r2, #5
 8001a22:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000280 	.word	0x20000280

08001a30 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001a36:	4b38      	ldr	r3, [pc, #224]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	7edb      	ldrb	r3, [r3, #27]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4a35      	ldr	r2, [pc, #212]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	7f12      	ldrb	r2, [r2, #28]
 8001a46:	4413      	add	r3, r2
 8001a48:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001a4a:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	7e5b      	ldrb	r3, [r3, #25]
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4a30      	ldr	r2, [pc, #192]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	7e92      	ldrb	r2, [r2, #26]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <modbusRead1Register+0x3a>
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	2b7d      	cmp	r3, #125	@ 0x7d
 8001a68:	d903      	bls.n	8001a72 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f000 f856 	bl	8001b1c <ModbusErrorReply>
		 return;
 8001a70:	e04e      	b.n	8001b10 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001a72:	88ba      	ldrh	r2, [r7, #4]
 8001a74:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d808      	bhi.n	8001a90 <modbusRead1Register+0x60>
 8001a7e:	88ba      	ldrh	r2, [r7, #4]
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4413      	add	r3, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d903      	bls.n	8001a98 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f000 f843 	bl	8001b1c <ModbusErrorReply>
		 return;
 8001a96:	e03b      	b.n	8001b10 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0052      	lsls	r2, r2, #1
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001ab2:	2400      	movs	r4, #0
 8001ab4:	e020      	b.n	8001af8 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	88bb      	ldrh	r3, [r7, #4]
 8001abe:	4423      	add	r3, r4
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	18d1      	adds	r1, r2, r3
 8001ac4:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	1c63      	adds	r3, r4, #1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	7849      	ldrb	r1, [r1, #1]
 8001ace:	4413      	add	r3, r2
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	4423      	add	r3, r4
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	18d1      	adds	r1, r2, r3
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	0063      	lsls	r3, r4, #1
 8001aea:	3303      	adds	r3, #3
 8001aec:	7809      	ldrb	r1, [r1, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	460a      	mov	r2, r1
 8001af2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001af6:	3401      	adds	r4, #1
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	429c      	cmp	r4, r3
 8001afc:	dbdb      	blt.n	8001ab6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	3301      	adds	r3, #1
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <modbusRead1Register+0xe8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0052      	lsls	r2, r2, #1
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000280 	.word	0x20000280

08001b1c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <ModbusErrorReply+0x40>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	7e1a      	ldrb	r2, [r3, #24]
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <ModbusErrorReply+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <ModbusErrorReply+0x40>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	79fa      	ldrb	r2, [r7, #7]
 8001b40:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <ModbusErrorReply+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000280 	.word	0x20000280

08001b60 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <Modbus_frame_response+0x2c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	7e1b      	ldrb	r3, [r3, #24]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d004      	beq.n	8001b78 <Modbus_frame_response+0x18>
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d105      	bne.n	8001b7e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001b72:	f7ff ff1d 	bl	80019b0 <modbusWrite1Register>
		break;
 8001b76:	e006      	b.n	8001b86 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001b78:	f7ff ff5a 	bl	8001a30 <modbusRead1Register>
		break;
 8001b7c:	e003      	b.n	8001b86 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f7ff ffcc 	bl	8001b1c <ModbusErrorReply>
		break;
 8001b84:	bf00      	nop

	}
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000280 	.word	0x20000280

08001b90 <Modbus_Emission>:

void Modbus_Emission()
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b96:	4b38      	ldr	r3, [pc, #224]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d15d      	bne.n	8001c60 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001ba4:	4b34      	ldr	r3, [pc, #208]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b33      	ldr	r3, [pc, #204]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001bb2:	4b31      	ldr	r3, [pc, #196]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001bba:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f007 fcd9 	bl	8009584 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001bd2:	4b29      	ldr	r3, [pc, #164]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3203      	adds	r2, #3
 8001be2:	b292      	uxth	r2, r2
 8001be4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001be8:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001bf0:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001bf8:	3b02      	subs	r3, #2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f7ff fd9f 	bl	8001740 <CRC16>
 8001c02:	4603      	mov	r3, r0
 8001c04:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001c06:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001c12:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001c14:	7939      	ldrb	r1, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	460a      	mov	r2, r1
 8001c1a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001c2a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001c2c:	7979      	ldrb	r1, [r7, #5]
 8001c2e:	4413      	add	r3, r2
 8001c30:	460a      	mov	r2, r1
 8001c32:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d10d      	bne.n	8001c60 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001c56:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f005 fe8c 	bl	8007978 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2200      	movs	r2, #0
 8001c66:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <Modbus_Emission+0xe8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	755a      	strb	r2, [r3, #21]

}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000280 	.word	0x20000280

08001c7c <MOTOR_init>:
#include "Motor.h"

//-------------------------------------------Function Code-------------------------------------------------------//

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	80fb      	strh	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	88ba      	ldrh	r2, [r7, #4]
 8001ca2:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 8001ca4:	88bb      	ldrh	r3, [r7, #4]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	68b8      	ldr	r0, [r7, #8]
 8001caa:	f003 fd91 	bl	80057d0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	68b8      	ldr	r0, [r7, #8]
 8001cb4:	f003 fd8c 	bl	80057d0 <HAL_TIM_PWM_Start_IT>

}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	b089      	sub	sp, #36	@ 0x24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	61f8      	str	r0, [r7, #28]
 8001cca:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8263 	beq.w	800219c <MOTOR_set_duty+0x4dc>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 825e 	beq.w	800219c <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 8001ce0:	69b8      	ldr	r0, [r7, #24]
 8001ce2:	f7fe fbfd 	bl	80004e0 <__aeabi_f2d>
 8001ce6:	a394      	add	r3, pc, #592	@ (adr r3, 8001f38 <MOTOR_set_duty+0x278>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fc50 	bl	8000590 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	a395      	add	r3, pc, #596	@ (adr r3, 8001f50 <MOTOR_set_duty+0x290>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe fecd 	bl	8000a9c <__aeabi_dcmpge>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MOTOR_set_duty+0x4c>
 8001d08:	4b8f      	ldr	r3, [pc, #572]	@ (8001f48 <MOTOR_set_duty+0x288>)
 8001d0a:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 8001d0c:	69b8      	ldr	r0, [r7, #24]
 8001d0e:	f7fe fbe7 	bl	80004e0 <__aeabi_f2d>
 8001d12:	a389      	add	r3, pc, #548	@ (adr r3, 8001f38 <MOTOR_set_duty+0x278>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fc3a 	bl	8000590 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	a386      	add	r3, pc, #536	@ (adr r3, 8001f40 <MOTOR_set_duty+0x280>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fead 	bl	8000a88 <__aeabi_dcmple>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MOTOR_set_duty+0x78>
 8001d34:	4b85      	ldr	r3, [pc, #532]	@ (8001f4c <MOTOR_set_duty+0x28c>)
 8001d36:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 8001d38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	d16e      	bne.n	8001e24 <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	889b      	ldrh	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <MOTOR_set_duty+0x9a>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2200      	movs	r2, #0
 8001d56:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d58:	e02c      	b.n	8001db4 <MOTOR_set_duty+0xf4>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	889b      	ldrh	r3, [r3, #4]
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d105      	bne.n	8001d6e <MOTOR_set_duty+0xae>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d6c:	e022      	b.n	8001db4 <MOTOR_set_duty+0xf4>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	889b      	ldrh	r3, [r3, #4]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d105      	bne.n	8001d82 <MOTOR_set_duty+0xc2>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d80:	e018      	b.n	8001db4 <MOTOR_set_duty+0xf4>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	889b      	ldrh	r3, [r3, #4]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d105      	bne.n	8001d96 <MOTOR_set_duty+0xd6>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d94:	e00e      	b.n	8001db4 <MOTOR_set_duty+0xf4>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	889b      	ldrh	r3, [r3, #4]
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d105      	bne.n	8001daa <MOTOR_set_duty+0xea>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2300      	movs	r3, #0
 8001da6:	6493      	str	r3, [r2, #72]	@ 0x48
 8001da8:	e004      	b.n	8001db4 <MOTOR_set_duty+0xf4>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2300      	movs	r3, #0
 8001db2:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	88db      	ldrh	r3, [r3, #6]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <MOTOR_set_duty+0x108>
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dc6:	e1ea      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	88db      	ldrh	r3, [r3, #6]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d105      	bne.n	8001ddc <MOTOR_set_duty+0x11c>
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001dda:	e1e0      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	88db      	ldrh	r3, [r3, #6]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d105      	bne.n	8001df0 <MOTOR_set_duty+0x130>
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001dee:	e1d6      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	88db      	ldrh	r3, [r3, #6]
 8001df4:	2b0c      	cmp	r3, #12
 8001df6:	d105      	bne.n	8001e04 <MOTOR_set_duty+0x144>
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	e1cc      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	88db      	ldrh	r3, [r3, #6]
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d105      	bne.n	8001e18 <MOTOR_set_duty+0x158>
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2300      	movs	r3, #0
 8001e14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e16:	e1c2      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e22:	e1bc      	b.n	800219e <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 8001e24:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	f340 80d6 	ble.w	8001fe0 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	889b      	ldrh	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <MOTOR_set_duty+0x188>
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2200      	movs	r2, #0
 8001e44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e46:	e02c      	b.n	8001ea2 <MOTOR_set_duty+0x1e2>
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	889b      	ldrh	r3, [r3, #4]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d105      	bne.n	8001e5c <MOTOR_set_duty+0x19c>
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e5a:	e022      	b.n	8001ea2 <MOTOR_set_duty+0x1e2>
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	889b      	ldrh	r3, [r3, #4]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d105      	bne.n	8001e70 <MOTOR_set_duty+0x1b0>
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e6e:	e018      	b.n	8001ea2 <MOTOR_set_duty+0x1e2>
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	889b      	ldrh	r3, [r3, #4]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d105      	bne.n	8001e84 <MOTOR_set_duty+0x1c4>
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e82:	e00e      	b.n	8001ea2 <MOTOR_set_duty+0x1e2>
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	889b      	ldrh	r3, [r3, #4]
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d105      	bne.n	8001e98 <MOTOR_set_duty+0x1d8>
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e96:	e004      	b.n	8001ea2 <MOTOR_set_duty+0x1e2>
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	88db      	ldrh	r3, [r3, #6]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d113      	bne.n	8001ed2 <MOTOR_set_duty+0x212>
 8001eaa:	69b8      	ldr	r0, [r7, #24]
 8001eac:	f7fe fb18 	bl	80004e0 <__aeabi_f2d>
 8001eb0:	a321      	add	r3, pc, #132	@ (adr r3, 8001f38 <MOTOR_set_duty+0x278>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe fb6b 	bl	8000590 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681c      	ldr	r4, [r3, #0]
 8001ec8:	f7fe fe24 	bl	8000b14 <__aeabi_d2uiz>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ed0:	e165      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	88db      	ldrh	r3, [r3, #6]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d113      	bne.n	8001f02 <MOTOR_set_duty+0x242>
 8001eda:	69b8      	ldr	r0, [r7, #24]
 8001edc:	f7fe fb00 	bl	80004e0 <__aeabi_f2d>
 8001ee0:	a315      	add	r3, pc, #84	@ (adr r3, 8001f38 <MOTOR_set_duty+0x278>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe fb53 	bl	8000590 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681c      	ldr	r4, [r3, #0]
 8001ef8:	f7fe fe0c 	bl	8000b14 <__aeabi_d2uiz>
 8001efc:	4603      	mov	r3, r0
 8001efe:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001f00:	e14d      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	88db      	ldrh	r3, [r3, #6]
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d126      	bne.n	8001f58 <MOTOR_set_duty+0x298>
 8001f0a:	69b8      	ldr	r0, [r7, #24]
 8001f0c:	f7fe fae8 	bl	80004e0 <__aeabi_f2d>
 8001f10:	a309      	add	r3, pc, #36	@ (adr r3, 8001f38 <MOTOR_set_duty+0x278>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	f7fe fb3b 	bl	8000590 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681c      	ldr	r4, [r3, #0]
 8001f28:	f7fe fdf4 	bl	8000b14 <__aeabi_d2uiz>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001f30:	e135      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001f32:	bf00      	nop
 8001f34:	f3af 8000 	nop.w
 8001f38:	3b645a1d 	.word	0x3b645a1d
 8001f3c:	40453fdf 	.word	0x40453fdf
 8001f40:	00000000 	.word	0x00000000
 8001f44:	c0e4c060 	.word	0xc0e4c060
 8001f48:	47260300 	.word	0x47260300
 8001f4c:	c7260300 	.word	0xc7260300
 8001f50:	00000000 	.word	0x00000000
 8001f54:	40e4c060 	.word	0x40e4c060
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	88db      	ldrh	r3, [r3, #6]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d113      	bne.n	8001f88 <MOTOR_set_duty+0x2c8>
 8001f60:	69b8      	ldr	r0, [r7, #24]
 8001f62:	f7fe fabd 	bl	80004e0 <__aeabi_f2d>
 8001f66:	a390      	add	r3, pc, #576	@ (adr r3, 80021a8 <MOTOR_set_duty+0x4e8>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fb10 	bl	8000590 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681c      	ldr	r4, [r3, #0]
 8001f7e:	f7fe fdc9 	bl	8000b14 <__aeabi_d2uiz>
 8001f82:	4603      	mov	r3, r0
 8001f84:	6423      	str	r3, [r4, #64]	@ 0x40
 8001f86:	e10a      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	88db      	ldrh	r3, [r3, #6]
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d113      	bne.n	8001fb8 <MOTOR_set_duty+0x2f8>
 8001f90:	69b8      	ldr	r0, [r7, #24]
 8001f92:	f7fe faa5 	bl	80004e0 <__aeabi_f2d>
 8001f96:	a384      	add	r3, pc, #528	@ (adr r3, 80021a8 <MOTOR_set_duty+0x4e8>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe faf8 	bl	8000590 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681c      	ldr	r4, [r3, #0]
 8001fae:	f7fe fdb1 	bl	8000b14 <__aeabi_d2uiz>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001fb6:	e0f2      	b.n	800219e <MOTOR_set_duty+0x4de>
 8001fb8:	69b8      	ldr	r0, [r7, #24]
 8001fba:	f7fe fa91 	bl	80004e0 <__aeabi_f2d>
 8001fbe:	a37a      	add	r3, pc, #488	@ (adr r3, 80021a8 <MOTOR_set_duty+0x4e8>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe fae4 	bl	8000590 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681c      	ldr	r4, [r3, #0]
 8001fd6:	f7fe fd9d 	bl	8000b14 <__aeabi_d2uiz>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001fde:	e0de      	b.n	800219e <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	889b      	ldrh	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <MOTOR_set_duty+0x336>
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8001ff2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ff4:	e031      	b.n	800205a <MOTOR_set_duty+0x39a>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	889b      	ldrh	r3, [r3, #4]
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d106      	bne.n	800200c <MOTOR_set_duty+0x34c>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002008:	6393      	str	r3, [r2, #56]	@ 0x38
 800200a:	e026      	b.n	800205a <MOTOR_set_duty+0x39a>
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	889b      	ldrh	r3, [r3, #4]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d106      	bne.n	8002022 <MOTOR_set_duty+0x362>
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f24a 6303 	movw	r3, #42499	@ 0xa603
 800201e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002020:	e01b      	b.n	800205a <MOTOR_set_duty+0x39a>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	889b      	ldrh	r3, [r3, #4]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d106      	bne.n	8002038 <MOTOR_set_duty+0x378>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002034:	6413      	str	r3, [r2, #64]	@ 0x40
 8002036:	e010      	b.n	800205a <MOTOR_set_duty+0x39a>
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	2b10      	cmp	r3, #16
 800203e:	d106      	bne.n	800204e <MOTOR_set_duty+0x38e>
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	f24a 6303 	movw	r3, #42499	@ 0xa603
 800204a:	6493      	str	r3, [r2, #72]	@ 0x48
 800204c:	e005      	b.n	800205a <MOTOR_set_duty+0x39a>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002058:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	88db      	ldrh	r3, [r3, #6]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d117      	bne.n	8002092 <MOTOR_set_duty+0x3d2>
 8002062:	69b8      	ldr	r0, [r7, #24]
 8002064:	f7fe fa3c 	bl	80004e0 <__aeabi_f2d>
 8002068:	a34f      	add	r3, pc, #316	@ (adr r3, 80021a8 <MOTOR_set_duty+0x4e8>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe fa8f 	bl	8000590 <__aeabi_dmul>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	613a      	str	r2, [r7, #16]
 8002078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681c      	ldr	r4, [r3, #0]
 8002084:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002088:	f7fe fd44 	bl	8000b14 <__aeabi_d2uiz>
 800208c:	4603      	mov	r3, r0
 800208e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002090:	e085      	b.n	800219e <MOTOR_set_duty+0x4de>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	88db      	ldrh	r3, [r3, #6]
 8002096:	2b04      	cmp	r3, #4
 8002098:	d117      	bne.n	80020ca <MOTOR_set_duty+0x40a>
 800209a:	69b8      	ldr	r0, [r7, #24]
 800209c:	f7fe fa20 	bl	80004e0 <__aeabi_f2d>
 80020a0:	a341      	add	r3, pc, #260	@ (adr r3, 80021a8 <MOTOR_set_duty+0x4e8>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fa73 	bl	8000590 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	60ba      	str	r2, [r7, #8]
 80020b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681c      	ldr	r4, [r3, #0]
 80020bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020c0:	f7fe fd28 	bl	8000b14 <__aeabi_d2uiz>
 80020c4:	4603      	mov	r3, r0
 80020c6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80020c8:	e069      	b.n	800219e <MOTOR_set_duty+0x4de>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	88db      	ldrh	r3, [r3, #6]
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d117      	bne.n	8002102 <MOTOR_set_duty+0x442>
 80020d2:	69b8      	ldr	r0, [r7, #24]
 80020d4:	f7fe fa04 	bl	80004e0 <__aeabi_f2d>
 80020d8:	a333      	add	r3, pc, #204	@ (adr r3, 80021a8 <MOTOR_set_duty+0x4e8>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe fa57 	bl	8000590 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	603a      	str	r2, [r7, #0]
 80020e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681c      	ldr	r4, [r3, #0]
 80020f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020f8:	f7fe fd0c 	bl	8000b14 <__aeabi_d2uiz>
 80020fc:	4603      	mov	r3, r0
 80020fe:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002100:	e04d      	b.n	800219e <MOTOR_set_duty+0x4de>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	88db      	ldrh	r3, [r3, #6]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d116      	bne.n	8002138 <MOTOR_set_duty+0x478>
 800210a:	69b8      	ldr	r0, [r7, #24]
 800210c:	f7fe f9e8 	bl	80004e0 <__aeabi_f2d>
 8002110:	a325      	add	r3, pc, #148	@ (adr r3, 80021a8 <MOTOR_set_duty+0x4e8>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa3b 	bl	8000590 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4615      	mov	r5, r2
 8002120:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681c      	ldr	r4, [r3, #0]
 800212a:	4628      	mov	r0, r5
 800212c:	4631      	mov	r1, r6
 800212e:	f7fe fcf1 	bl	8000b14 <__aeabi_d2uiz>
 8002132:	4603      	mov	r3, r0
 8002134:	6423      	str	r3, [r4, #64]	@ 0x40
 8002136:	e032      	b.n	800219e <MOTOR_set_duty+0x4de>
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	88db      	ldrh	r3, [r3, #6]
 800213c:	2b10      	cmp	r3, #16
 800213e:	d116      	bne.n	800216e <MOTOR_set_duty+0x4ae>
 8002140:	69b8      	ldr	r0, [r7, #24]
 8002142:	f7fe f9cd 	bl	80004e0 <__aeabi_f2d>
 8002146:	a318      	add	r3, pc, #96	@ (adr r3, 80021a8 <MOTOR_set_duty+0x4e8>)
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	f7fe fa20 	bl	8000590 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4692      	mov	sl, r2
 8002156:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681c      	ldr	r4, [r3, #0]
 8002160:	4650      	mov	r0, sl
 8002162:	4659      	mov	r1, fp
 8002164:	f7fe fcd6 	bl	8000b14 <__aeabi_d2uiz>
 8002168:	4603      	mov	r3, r0
 800216a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800216c:	e017      	b.n	800219e <MOTOR_set_duty+0x4de>
 800216e:	69b8      	ldr	r0, [r7, #24]
 8002170:	f7fe f9b6 	bl	80004e0 <__aeabi_f2d>
 8002174:	a30c      	add	r3, pc, #48	@ (adr r3, 80021a8 <MOTOR_set_duty+0x4e8>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe fa09 	bl	8000590 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4690      	mov	r8, r2
 8002184:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681c      	ldr	r4, [r3, #0]
 800218e:	4640      	mov	r0, r8
 8002190:	4649      	mov	r1, r9
 8002192:	f7fe fcbf 	bl	8000b14 <__aeabi_d2uiz>
 8002196:	4603      	mov	r3, r0
 8002198:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800219a:	e000      	b.n	800219e <MOTOR_set_duty+0x4de>
        return;
 800219c:	bf00      	nop
    }
}
 800219e:	3724      	adds	r7, #36	@ 0x24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a6:	bf00      	nop
 80021a8:	3b645a1d 	.word	0x3b645a1d
 80021ac:	40453fdf 	.word	0x40453fdf

080021b0 <PID_controller_init>:
float boundary = 0.05;

//-------------------------------------------Function Code-------------------------------------------------------//

void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80021bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80021c0:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	0000      	movs	r0, r0
 8002204:	0000      	movs	r0, r0
	...

08002208 <PS2X_Reader>:
    PS2->on = 0;
}
extern PS2_typedef ps2;

void PS2X_Reader()
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
//	ps2.ps2Y = 0;
//	ps2.ps2X = 0;
	if (ps2.ps2RX[0] == 69) 		//Press L4 to switch to use Joy stick
 800220e:	4b84      	ldr	r3, [pc, #528]	@ (8002420 <PS2X_Reader+0x218>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b45      	cmp	r3, #69	@ 0x45
 8002214:	d105      	bne.n	8002222 <PS2X_Reader+0x1a>
	{
		ps2.mode = 1;
 8002216:	4b82      	ldr	r3, [pc, #520]	@ (8002420 <PS2X_Reader+0x218>)
 8002218:	2201      	movs	r2, #1
 800221a:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on = 0;
 800221c:	4b80      	ldr	r3, [pc, #512]	@ (8002420 <PS2X_Reader+0x218>)
 800221e:	2200      	movs	r2, #0
 8002220:	67da      	str	r2, [r3, #124]	@ 0x7c
//		ps2.ps2YPos = 132;
	}
	if (ps2.ps2RX[0] == 70)		//Press L5 to switch to use Button
 8002222:	4b7f      	ldr	r3, [pc, #508]	@ (8002420 <PS2X_Reader+0x218>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b46      	cmp	r3, #70	@ 0x46
 8002228:	d109      	bne.n	800223e <PS2X_Reader+0x36>
	{
		ps2.mode = 2;
 800222a:	4b7d      	ldr	r3, [pc, #500]	@ (8002420 <PS2X_Reader+0x218>)
 800222c:	2202      	movs	r2, #2
 800222e:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on =1;
 8002230:	4b7b      	ldr	r3, [pc, #492]	@ (8002420 <PS2X_Reader+0x218>)
 8002232:	2201      	movs	r2, #1
 8002234:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.PIDPos = AMT.Linear_Position;
 8002236:	4b7b      	ldr	r3, [pc, #492]	@ (8002424 <PS2X_Reader+0x21c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a79      	ldr	r2, [pc, #484]	@ (8002420 <PS2X_Reader+0x218>)
 800223c:	6793      	str	r3, [r2, #120]	@ 0x78


	}
	//Mode Joy stick
	if (ps2.mode == 1)
 800223e:	4b78      	ldr	r3, [pc, #480]	@ (8002420 <PS2X_Reader+0x218>)
 8002240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002242:	2b01      	cmp	r3, #1
 8002244:	f040 80c5 	bne.w	80023d2 <PS2X_Reader+0x1ca>
	{
		//Read Ps2 Joy stick in VERTICAL
		if(ps2.ps2RX[0] == 81){
 8002248:	4b75      	ldr	r3, [pc, #468]	@ (8002420 <PS2X_Reader+0x218>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b51      	cmp	r3, #81	@ 0x51
 800224e:	d169      	bne.n	8002324 <PS2X_Reader+0x11c>
			if (ps2.ps2RX[2] == 83){
 8002250:	4b73      	ldr	r3, [pc, #460]	@ (8002420 <PS2X_Reader+0x218>)
 8002252:	789b      	ldrb	r3, [r3, #2]
 8002254:	2b53      	cmp	r3, #83	@ 0x53
 8002256:	d103      	bne.n	8002260 <PS2X_Reader+0x58>
				ps2.digit = 1;
 8002258:	4b71      	ldr	r3, [pc, #452]	@ (8002420 <PS2X_Reader+0x218>)
 800225a:	2201      	movs	r2, #1
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	e00e      	b.n	800227e <PS2X_Reader+0x76>
			}
			else if (ps2.ps2RX[3] == 83){
 8002260:	4b6f      	ldr	r3, [pc, #444]	@ (8002420 <PS2X_Reader+0x218>)
 8002262:	78db      	ldrb	r3, [r3, #3]
 8002264:	2b53      	cmp	r3, #83	@ 0x53
 8002266:	d103      	bne.n	8002270 <PS2X_Reader+0x68>
				ps2.digit = 2;
 8002268:	4b6d      	ldr	r3, [pc, #436]	@ (8002420 <PS2X_Reader+0x218>)
 800226a:	2202      	movs	r2, #2
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	e006      	b.n	800227e <PS2X_Reader+0x76>
			}
			else if (ps2.ps2RX[4] == 83){
 8002270:	4b6b      	ldr	r3, [pc, #428]	@ (8002420 <PS2X_Reader+0x218>)
 8002272:	791b      	ldrb	r3, [r3, #4]
 8002274:	2b53      	cmp	r3, #83	@ 0x53
 8002276:	d102      	bne.n	800227e <PS2X_Reader+0x76>
				ps2.digit = 3;
 8002278:	4b69      	ldr	r3, [pc, #420]	@ (8002420 <PS2X_Reader+0x218>)
 800227a:	2203      	movs	r2, #3
 800227c:	60da      	str	r2, [r3, #12]
			}
			for(int k=1 ; k<5 ; k++){
 800227e:	2301      	movs	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e01d      	b.n	80022c0 <PS2X_Reader+0xb8>
				for (int l=0; l<10 ; l++){
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	e014      	b.n	80022b4 <PS2X_Reader+0xac>
					if (ps2.ps2RX[k] == num[l]){
 800228a:	4a65      	ldr	r2, [pc, #404]	@ (8002420 <PS2X_Reader+0x218>)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	4a64      	ldr	r2, [pc, #400]	@ (8002428 <PS2X_Reader+0x220>)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229c:	4299      	cmp	r1, r3
 800229e:	d106      	bne.n	80022ae <PS2X_Reader+0xa6>
						ps2.gain[k-1] = l;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	495e      	ldr	r1, [pc, #376]	@ (8002420 <PS2X_Reader+0x218>)
 80022a6:	3304      	adds	r3, #4
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int l=0; l<10 ; l++){
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3301      	adds	r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b09      	cmp	r3, #9
 80022b8:	dde7      	ble.n	800228a <PS2X_Reader+0x82>
			for(int k=1 ; k<5 ; k++){
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3301      	adds	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	ddde      	ble.n	8002284 <PS2X_Reader+0x7c>
					}
				}
			}
			if (ps2.digit == 1){
 80022c6:	4b56      	ldr	r3, [pc, #344]	@ (8002420 <PS2X_Reader+0x218>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d104      	bne.n	80022d8 <PS2X_Reader+0xd0>
				ps2.ps2YPos = ps2.gain[0];
 80022ce:	4b54      	ldr	r3, [pc, #336]	@ (8002420 <PS2X_Reader+0x218>)
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	4a53      	ldr	r2, [pc, #332]	@ (8002420 <PS2X_Reader+0x218>)
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	e025      	b.n	8002324 <PS2X_Reader+0x11c>
			}
			else if (ps2.digit == 2){
 80022d8:	4b51      	ldr	r3, [pc, #324]	@ (8002420 <PS2X_Reader+0x218>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d10c      	bne.n	80022fa <PS2X_Reader+0xf2>
				ps2.ps2YPos = (ps2.gain[0]*10)+ps2.gain[1];
 80022e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002420 <PS2X_Reader+0x218>)
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002420 <PS2X_Reader+0x218>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002420 <PS2X_Reader+0x218>)
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	e014      	b.n	8002324 <PS2X_Reader+0x11c>
			}
			else if (ps2.digit == 3){
 80022fa:	4b49      	ldr	r3, [pc, #292]	@ (8002420 <PS2X_Reader+0x218>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d110      	bne.n	8002324 <PS2X_Reader+0x11c>
				ps2.ps2YPos = (ps2.gain[0]*100)+(ps2.gain[1]*10)+ps2.gain[2];
 8002302:	4b47      	ldr	r3, [pc, #284]	@ (8002420 <PS2X_Reader+0x218>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2264      	movs	r2, #100	@ 0x64
 8002308:	fb02 f103 	mul.w	r1, r2, r3
 800230c:	4b44      	ldr	r3, [pc, #272]	@ (8002420 <PS2X_Reader+0x218>)
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	18ca      	adds	r2, r1, r3
 800231a:	4b41      	ldr	r3, [pc, #260]	@ (8002420 <PS2X_Reader+0x218>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	4413      	add	r3, r2
 8002320:	4a3f      	ldr	r2, [pc, #252]	@ (8002420 <PS2X_Reader+0x218>)
 8002322:	6213      	str	r3, [r2, #32]
		//Convert from 0 - 255 to -128 - 128
//		ps2.ps2Y = (ps2.ps2YPos - 132);
//		ps2.ps2X = ps2.ps2XPos - 132;

		//Generate PWM
		ps2.pwmOut = ((ps2.ps2Y/ 132.0)*300) + 150;
 8002324:	4b3e      	ldr	r3, [pc, #248]	@ (8002420 <PS2X_Reader+0x218>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f8c7 	bl	80004bc <__aeabi_i2d>
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	4b3e      	ldr	r3, [pc, #248]	@ (800242c <PS2X_Reader+0x224>)
 8002334:	f7fe fa56 	bl	80007e4 <__aeabi_ddiv>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	a333      	add	r3, pc, #204	@ (adr r3, 8002410 <PS2X_Reader+0x208>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fe f923 	bl	8000590 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	a331      	add	r3, pc, #196	@ (adr r3, 8002418 <PS2X_Reader+0x210>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fd ff64 	bl	8000224 <__adddf3>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fbae 	bl	8000ac4 <__aeabi_d2iz>
 8002368:	4603      	mov	r3, r0
 800236a:	4a2d      	ldr	r2, [pc, #180]	@ (8002420 <PS2X_Reader+0x218>)
 800236c:	6693      	str	r3, [r2, #104]	@ 0x68
		ps2.pwmOut = 320 - ps2.ps2YPos;
 800236e:	4b2c      	ldr	r3, [pc, #176]	@ (8002420 <PS2X_Reader+0x218>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002376:	4a2a      	ldr	r2, [pc, #168]	@ (8002420 <PS2X_Reader+0x218>)
 8002378:	6693      	str	r3, [r2, #104]	@ 0x68
		if (ps2.pwmOut > 300)
 800237a:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <PS2X_Reader+0x218>)
 800237c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800237e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002382:	dd03      	ble.n	800238c <PS2X_Reader+0x184>
		{
			ps2.pwmOut = 300;
 8002384:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <PS2X_Reader+0x218>)
 8002386:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800238a:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < -300)
 800238c:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <PS2X_Reader+0x218>)
 800238e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002390:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002394:	da02      	bge.n	800239c <PS2X_Reader+0x194>
		{
			ps2.pwmOut = 0;
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <PS2X_Reader+0x218>)
 8002398:	2200      	movs	r2, #0
 800239a:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < 0)
 800239c:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <PS2X_Reader+0x218>)
 800239e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da05      	bge.n	80023b0 <PS2X_Reader+0x1a8>
		{
			MOTOR_set_duty(&MT, 0);
 80023a4:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8002430 <PS2X_Reader+0x228>
 80023a8:	4822      	ldr	r0, [pc, #136]	@ (8002434 <PS2X_Reader+0x22c>)
 80023aa:	f7ff fc89 	bl	8001cc0 <MOTOR_set_duty>
 80023ae:	e0cd      	b.n	800254c <PS2X_Reader+0x344>
		}
		else if (ps2.pwmOut > 0)
 80023b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <PS2X_Reader+0x218>)
 80023b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f340 80c9 	ble.w	800254c <PS2X_Reader+0x344>
		{
			MOTOR_set_duty(&MT, ps2.pwmOut);
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <PS2X_Reader+0x218>)
 80023bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ca:	481a      	ldr	r0, [pc, #104]	@ (8002434 <PS2X_Reader+0x22c>)
 80023cc:	f7ff fc78 	bl	8001cc0 <MOTOR_set_duty>
 80023d0:	e0bc      	b.n	800254c <PS2X_Reader+0x344>
		}
	}

	//--- Mode Button ---//
	else if (ps2.mode == 2)
 80023d2:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <PS2X_Reader+0x218>)
 80023d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	f040 80b8 	bne.w	800254c <PS2X_Reader+0x344>
	{
//		ps2.PIDPos = AMT.Linear_Position;
		ps2.on = 1;
 80023dc:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <PS2X_Reader+0x218>)
 80023de:	2201      	movs	r2, #1
 80023e0:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.ps2Y = 0;
 80023e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <PS2X_Reader+0x218>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	61da      	str	r2, [r3, #28]
//		ps2.ps2X = 0;
		//Keys Map
		static uint32_t timestamp =0;
		if(timestamp < HAL_GetTick())
 80023e8:	f001 f9e4 	bl	80037b4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <PS2X_Reader+0x230>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d908      	bls.n	8002408 <PS2X_Reader+0x200>
		{
			timestamp = HAL_GetTick()+100;
 80023f6:	f001 f9dd 	bl	80037b4 <HAL_GetTick>
 80023fa:	4603      	mov	r3, r0
 80023fc:	3364      	adds	r3, #100	@ 0x64
 80023fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002438 <PS2X_Reader+0x230>)
 8002400:	6013      	str	r3, [r2, #0]
			ps2.ps2RX[0] = 0;
 8002402:	4b07      	ldr	r3, [pc, #28]	@ (8002420 <PS2X_Reader+0x218>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
		}
		for (int i =0;i<6;i++)
 8002408:	2300      	movs	r3, #0
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	e05a      	b.n	80024c4 <PS2X_Reader+0x2bc>
 800240e:	bf00      	nop
 8002410:	00000000 	.word	0x00000000
 8002414:	4072c000 	.word	0x4072c000
 8002418:	00000000 	.word	0x00000000
 800241c:	4062c000 	.word	0x4062c000
 8002420:	20000a68 	.word	0x20000a68
 8002424:	20000a30 	.word	0x20000a30
 8002428:	20000208 	.word	0x20000208
 800242c:	40608000 	.word	0x40608000
 8002430:	00000000 	.word	0x00000000
 8002434:	20000a24 	.word	0x20000a24
 8002438:	20000300 	.word	0x20000300
		{
			if (ps2.ps2RX[0] == 0)
 800243c:	4b66      	ldr	r3, [pc, #408]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d123      	bne.n	800248c <PS2X_Reader+0x284>
			{
				//Left
				ps2.l[0] = 0; //w
 8002444:	4b64      	ldr	r3, [pc, #400]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002446:	2200      	movs	r2, #0
 8002448:	651a      	str	r2, [r3, #80]	@ 0x50
				ps2.l[1] = 0;	//a
 800244a:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800244c:	2200      	movs	r2, #0
 800244e:	655a      	str	r2, [r3, #84]	@ 0x54
				ps2.l[2] = 0;	//s
 8002450:	4b61      	ldr	r3, [pc, #388]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002452:	2200      	movs	r2, #0
 8002454:	659a      	str	r2, [r3, #88]	@ 0x58
				ps2.l[3] = 0;	//d
 8002456:	4b60      	ldr	r3, [pc, #384]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002458:	2200      	movs	r2, #0
 800245a:	65da      	str	r2, [r3, #92]	@ 0x5c
				ps2.l[4] = 0;	//l1
 800245c:	4b5e      	ldr	r3, [pc, #376]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800245e:	2200      	movs	r2, #0
 8002460:	661a      	str	r2, [r3, #96]	@ 0x60
				ps2.l[5] = 0;	//l2
 8002462:	4b5d      	ldr	r3, [pc, #372]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002464:	2200      	movs	r2, #0
 8002466:	665a      	str	r2, [r3, #100]	@ 0x64
				//Right
				ps2.r[0] = 0;	//w
 8002468:	4b5b      	ldr	r3, [pc, #364]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800246a:	2200      	movs	r2, #0
 800246c:	639a      	str	r2, [r3, #56]	@ 0x38
				ps2.r[1] = 0;	//a
 800246e:	4b5a      	ldr	r3, [pc, #360]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002470:	2200      	movs	r2, #0
 8002472:	63da      	str	r2, [r3, #60]	@ 0x3c
				ps2.r[2] = 0;	//s
 8002474:	4b58      	ldr	r3, [pc, #352]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002476:	2200      	movs	r2, #0
 8002478:	641a      	str	r2, [r3, #64]	@ 0x40
				ps2.r[3] = 0;	//d
 800247a:	4b57      	ldr	r3, [pc, #348]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	@ 0x44
				ps2.r[4] = 0;	//r1
 8002480:	4b55      	ldr	r3, [pc, #340]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002482:	2200      	movs	r2, #0
 8002484:	649a      	str	r2, [r3, #72]	@ 0x48
				ps2.r[5] = 0;	//r2
 8002486:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002488:	2200      	movs	r2, #0
 800248a:	64da      	str	r2, [r3, #76]	@ 0x4c
			}

			if (ps2.ps2RX[0] - 65 == i)
 800248c:	4b52      	ldr	r3, [pc, #328]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	3b41      	subs	r3, #65	@ 0x41
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d106      	bne.n	80024a6 <PS2X_Reader+0x29e>
			{
				ps2.l[i] = 1;
 8002498:	4a4f      	ldr	r2, [pc, #316]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3314      	adds	r3, #20
 800249e:	2101      	movs	r1, #1
 80024a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80024a4:	e00b      	b.n	80024be <PS2X_Reader+0x2b6>
			}

			else if (ps2.ps2RX[0] - 73 == i)
 80024a6:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <PS2X_Reader+0x3d0>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	3b49      	subs	r3, #73	@ 0x49
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d105      	bne.n	80024be <PS2X_Reader+0x2b6>
			{
				ps2.r[i] = 1;
 80024b2:	4a49      	ldr	r2, [pc, #292]	@ (80025d8 <PS2X_Reader+0x3d0>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	330e      	adds	r3, #14
 80024b8:	2101      	movs	r1, #1
 80024ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i =0;i<6;i++)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3301      	adds	r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	ddb8      	ble.n	800243c <PS2X_Reader+0x234>
			}
		}

		//Generate PWM
		if (ps2.l[2] == 1)
 80024ca:	4b43      	ldr	r3, [pc, #268]	@ (80025d8 <PS2X_Reader+0x3d0>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d113      	bne.n	80024fa <PS2X_Reader+0x2f2>
		{
			//Adjust How to decrease(-) Linear position
			ps2.PIDPos -= 0.1;
 80024d2:	4b41      	ldr	r3, [pc, #260]	@ (80025d8 <PS2X_Reader+0x3d0>)
 80024d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f802 	bl	80004e0 <__aeabi_f2d>
 80024dc:	a33c      	add	r3, pc, #240	@ (adr r3, 80025d0 <PS2X_Reader+0x3c8>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fd fe9d 	bl	8000220 <__aeabi_dsub>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f7fe fb31 	bl	8000b54 <__aeabi_d2f>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4a38      	ldr	r2, [pc, #224]	@ (80025d8 <PS2X_Reader+0x3d0>)
 80024f6:	6793      	str	r3, [r2, #120]	@ 0x78
 80024f8:	e028      	b.n	800254c <PS2X_Reader+0x344>
//			if (ps2.pwmOut < 0)
//			{
//				ps2.pwmOut = 0;		// to make pwm1 >= 0
//			}
		}
		else if (ps2.l[3] == 1)
 80024fa:	4b37      	ldr	r3, [pc, #220]	@ (80025d8 <PS2X_Reader+0x3d0>)
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d113      	bne.n	800252a <PS2X_Reader+0x322>
		{
			//Adjust How to increase(+) Linear position
			ps2.PIDPos += 0.1;
 8002502:	4b35      	ldr	r3, [pc, #212]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ffea 	bl	80004e0 <__aeabi_f2d>
 800250c:	a330      	add	r3, pc, #192	@ (adr r3, 80025d0 <PS2X_Reader+0x3c8>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f7fd fe87 	bl	8000224 <__adddf3>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	f7fe fb19 	bl	8000b54 <__aeabi_d2f>
 8002522:	4603      	mov	r3, r0
 8002524:	4a2c      	ldr	r2, [pc, #176]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002526:	6793      	str	r3, [r2, #120]	@ 0x78
 8002528:	e010      	b.n	800254c <PS2X_Reader+0x344>
//			ps2.pwmOut = ps2.pwmOut + count;	// + PWM with count
		}
		else if (ps2.l[0] == 1)		//Press down button(l1) to PWM out forward
 800252a:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800252c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252e:	2b01      	cmp	r3, #1
 8002530:	d00c      	beq.n	800254c <PS2X_Reader+0x344>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else if (ps2.l[1] == 1)		//Press down button(l1) to PWM out backward
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002536:	2b01      	cmp	r3, #1
 8002538:	d008      	beq.n	800254c <PS2X_Reader+0x344>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
		}
		else if (ps2.r[1] == 1)		//Press X(r1) to stop
 800253a:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800253c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d004      	beq.n	800254c <PS2X_Reader+0x344>
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
			MOTOR_set_duty(&MT, 150);
 8002542:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80025dc <PS2X_Reader+0x3d4>
 8002546:	4826      	ldr	r0, [pc, #152]	@ (80025e0 <PS2X_Reader+0x3d8>)
 8002548:	f7ff fbba 	bl	8001cc0 <MOTOR_set_duty>
		}
	}
	// Floor Selection
	if(base.ShelveMode == 1){
 800254c:	4b25      	ldr	r3, [pc, #148]	@ (80025e4 <PS2X_Reader+0x3dc>)
 800254e:	8b1b      	ldrh	r3, [r3, #24]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d136      	bne.n	80025c2 <PS2X_Reader+0x3ba>
		if (ps2.ps2RX[0] == 71){
 8002554:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b47      	cmp	r3, #71	@ 0x47
 800255a:	d112      	bne.n	8002582 <PS2X_Reader+0x37a>
			base.Shelve[ps2.counts-1] = ps2.PIDPos;
 800255c:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800255e:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8002562:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002566:	3b01      	subs	r3, #1
 8002568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256c:	ee17 1a90 	vmov	r1, s15
 8002570:	4a1c      	ldr	r2, [pc, #112]	@ (80025e4 <PS2X_Reader+0x3dc>)
 8002572:	3306      	adds	r3, #6
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	6059      	str	r1, [r3, #4]
			ps2.counts=  +1;
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800257c:	2201      	movs	r2, #1
 800257e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002580:	e011      	b.n	80025a6 <PS2X_Reader+0x39e>
		}
		else if (ps2.ps2RX[0] == 73){
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <PS2X_Reader+0x3d0>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b49      	cmp	r3, #73	@ 0x49
 8002588:	d10d      	bne.n	80025a6 <PS2X_Reader+0x39e>
			base.Shelve[ps2.counts-1] = 0;
 800258a:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258e:	3b01      	subs	r3, #1
 8002590:	4a14      	ldr	r2, [pc, #80]	@ (80025e4 <PS2X_Reader+0x3dc>)
 8002592:	3306      	adds	r3, #6
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
			ps2.counts = ps2.counts -1;
 800259c:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <PS2X_Reader+0x3d0>)
 800259e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a0:	3b01      	subs	r3, #1
 80025a2:	4a0d      	ldr	r2, [pc, #52]	@ (80025d8 <PS2X_Reader+0x3d0>)
 80025a4:	6753      	str	r3, [r2, #116]	@ 0x74
		}

		if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1){
 80025a6:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <PS2X_Reader+0x3d0>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b48      	cmp	r3, #72	@ 0x48
 80025ac:	d109      	bne.n	80025c2 <PS2X_Reader+0x3ba>
 80025ae:	4b0d      	ldr	r3, [pc, #52]	@ (80025e4 <PS2X_Reader+0x3dc>)
 80025b0:	8b1b      	ldrh	r3, [r3, #24]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <PS2X_Reader+0x3ba>
			base.ShelveMode = 0;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <PS2X_Reader+0x3dc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	831a      	strh	r2, [r3, #24]
			registerFrame[0x10].U16 = 0b0000;
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <PS2X_Reader+0x3e0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	841a      	strh	r2, [r3, #32]
		}
	}
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	f3af 8000 	nop.w
 80025d0:	9999999a 	.word	0x9999999a
 80025d4:	3fb99999 	.word	0x3fb99999
 80025d8:	20000a68 	.word	0x20000a68
 80025dc:	43160000 	.word	0x43160000
 80025e0:	20000a24 	.word	0x20000a24
 80025e4:	200002b4 	.word	0x200002b4
 80025e8:	20000fc8 	.word	0x20000fc8

080025ec <Traject_init>:
float Time_dec;

//-------------------------------------------Function Code-------------------------------------------------------//

void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80025f8:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002630:	b08d      	sub	sp, #52	@ 0x34
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002634:	f001 f859 	bl	80036ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002638:	f000 f9a8 	bl	800298c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800263c:	f000 fc9a 	bl	8002f74 <MX_GPIO_Init>
  MX_DMA_Init();
 8002640:	f000 fc66 	bl	8002f10 <MX_DMA_Init>
  MX_TIM2_Init();
 8002644:	f000 f9ee 	bl	8002a24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002648:	f000 fa40 	bl	8002acc <MX_TIM3_Init>
  MX_TIM5_Init();
 800264c:	f000 fb10 	bl	8002c70 <MX_TIM5_Init>
  MX_UART4_Init();
 8002650:	f000 fbc2 	bl	8002dd8 <MX_UART4_Init>
  MX_TIM4_Init();
 8002654:	f000 fabc 	bl	8002bd0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002658:	f000 fc0c 	bl	8002e74 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800265c:	f000 fb8c 	bl	8002d78 <MX_TIM16_Init>
  MX_TIM6_Init();
 8002660:	f000 fb54 	bl	8002d0c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 8002664:	48b0      	ldr	r0, [pc, #704]	@ (8002928 <main+0x2fc>)
 8002666:	f002 ff5d 	bl	8005524 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);					// Output compare
 800266a:	48b0      	ldr	r0, [pc, #704]	@ (800292c <main+0x300>)
 800266c:	f002 ff5a 	bl	8005524 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);					// Trajectory trigger
 8002670:	48af      	ldr	r0, [pc, #700]	@ (8002930 <main+0x304>)
 8002672:	f002 ff57 	bl	8005524 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);        // PWM
 8002676:	2100      	movs	r1, #0
 8002678:	48ac      	ldr	r0, [pc, #688]	@ (800292c <main+0x300>)
 800267a:	f003 f8a9 	bl	80057d0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);        // Direction
 800267e:	2104      	movs	r1, #4
 8002680:	48aa      	ldr	r0, [pc, #680]	@ (800292c <main+0x300>)
 8002682:	f003 f8a5 	bl	80057d0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002686:	48ab      	ldr	r0, [pc, #684]	@ (8002934 <main+0x308>)
 8002688:	f002 ffbc 	bl	8005604 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800268c:	48aa      	ldr	r0, [pc, #680]	@ (8002938 <main+0x30c>)
 800268e:	f002 ffb9 	bl	8005604 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 8002692:	4baa      	ldr	r3, [pc, #680]	@ (800293c <main+0x310>)
 8002694:	4aaa      	ldr	r2, [pc, #680]	@ (8002940 <main+0x314>)
 8002696:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8002698:	4ba8      	ldr	r3, [pc, #672]	@ (800293c <main+0x310>)
 800269a:	4aaa      	ldr	r2, [pc, #680]	@ (8002944 <main+0x318>)
 800269c:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800269e:	4ba7      	ldr	r3, [pc, #668]	@ (800293c <main+0x310>)
 80026a0:	2215      	movs	r2, #21
 80026a2:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80026a4:	4ba5      	ldr	r3, [pc, #660]	@ (800293c <main+0x310>)
 80026a6:	22c8      	movs	r2, #200	@ 0xc8
 80026a8:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80026aa:	49a7      	ldr	r1, [pc, #668]	@ (8002948 <main+0x31c>)
 80026ac:	48a3      	ldr	r0, [pc, #652]	@ (800293c <main+0x310>)
 80026ae:	f7fe fff1 	bl	8001694 <Modbus_init>

  //float PID_pos_K[3] = {0.01 ,0.0, 0};
  float PID_pos_K[3] = {4.5 ,0.00000000495, 0};
 80026b2:	4aa6      	ldr	r2, [pc, #664]	@ (800294c <main+0x320>)
 80026b4:	f107 0318 	add.w	r3, r7, #24
 80026b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  //float PID_velo_K[3] = {3.35 ,0.050, 0.001};
  float PID_velo_K[3] = {3.35 ,0.050, 0.001};
 80026be:	4aa4      	ldr	r2, [pc, #656]	@ (8002950 <main+0x324>)
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80026c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // Initialize ASRS
  Traject_init(&Traj,450, 500);				// V_max, A_max
 80026ca:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8002954 <main+0x328>
 80026ce:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8002958 <main+0x32c>
 80026d2:	48a2      	ldr	r0, [pc, #648]	@ (800295c <main+0x330>)
 80026d4:	f7ff ff8a 	bl	80025ec <Traject_init>
//  Kalman_Start(&Vel_filtered);
  AMT_encoder_init(&AMT, &htim2);
 80026d8:	4993      	ldr	r1, [pc, #588]	@ (8002928 <main+0x2fc>)
 80026da:	48a1      	ldr	r0, [pc, #644]	@ (8002960 <main+0x334>)
 80026dc:	f7fe fe52 	bl	8001384 <AMT_encoder_init>
  MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 80026e0:	2300      	movs	r3, #0
 80026e2:	2204      	movs	r2, #4
 80026e4:	4991      	ldr	r1, [pc, #580]	@ (800292c <main+0x300>)
 80026e6:	489f      	ldr	r0, [pc, #636]	@ (8002964 <main+0x338>)
 80026e8:	f7ff fac8 	bl	8001c7c <MOTOR_init>
  PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 80026ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80026f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80026f4:	edd7 6a08 	vldr	s13, [r7, #32]
 80026f8:	eeb0 1a66 	vmov.f32	s2, s13
 80026fc:	eef0 0a47 	vmov.f32	s1, s14
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	4898      	ldr	r0, [pc, #608]	@ (8002968 <main+0x33c>)
 8002706:	f7ff fd53 	bl	80021b0 <PID_controller_init>
  PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 800270a:	edd7 7a03 	vldr	s15, [r7, #12]
 800270e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002712:	edd7 6a06 	vldr	s13, [r7, #24]
 8002716:	eeb0 1a66 	vmov.f32	s2, s13
 800271a:	eef0 0a47 	vmov.f32	s1, s14
 800271e:	eeb0 0a67 	vmov.f32	s0, s15
 8002722:	4892      	ldr	r0, [pc, #584]	@ (800296c <main+0x340>)
 8002724:	f7ff fd44 	bl	80021b0 <PID_controller_init>

    /* USER CODE BEGIN 3 */

	  // Feedback to base system 5 Hz
	  static uint64_t timestamps =0;
	  if(HAL_GetTick() > timestamps)
 8002728:	f001 f844 	bl	80037b4 <HAL_GetTick>
 800272c:	4603      	mov	r3, r0
 800272e:	2200      	movs	r2, #0
 8002730:	461c      	mov	r4, r3
 8002732:	4615      	mov	r5, r2
 8002734:	4b8e      	ldr	r3, [pc, #568]	@ (8002970 <main+0x344>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	42a2      	cmp	r2, r4
 800273c:	41ab      	sbcs	r3, r5
 800273e:	d20b      	bcs.n	8002758 <main+0x12c>
	  {
		  timestamps =HAL_GetTick() + 100;		//ms
 8002740:	f001 f838 	bl	80037b4 <HAL_GetTick>
 8002744:	4603      	mov	r3, r0
 8002746:	3364      	adds	r3, #100	@ 0x64
 8002748:	2200      	movs	r2, #0
 800274a:	469a      	mov	sl, r3
 800274c:	4693      	mov	fp, r2
 800274e:	4b88      	ldr	r3, [pc, #544]	@ (8002970 <main+0x344>)
 8002750:	e9c3 ab00 	strd	sl, fp, [r3]
	  	  Heartbeat();
 8002754:	f7fe fcec 	bl	8001130 <Heartbeat>
	  }


	  // Read AMT encoder 1000 Hz
	  static uint64_t timestamp =0;
	  int64_t currentTime = HAL_GetTick();
 8002758:	f001 f82c 	bl	80037b4 <HAL_GetTick>
 800275c:	4603      	mov	r3, r0
 800275e:	2200      	movs	r2, #0
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002768:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  if(currentTime > timestamp)
 800276c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002770:	4980      	ldr	r1, [pc, #512]	@ (8002974 <main+0x348>)
 8002772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002776:	4290      	cmp	r0, r2
 8002778:	eb71 0303 	sbcs.w	r3, r1, r3
 800277c:	d212      	bcs.n	80027a4 <main+0x178>
	  {
	  timestamp =currentTime + 1;				//ms
 800277e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002782:	f112 0801 	adds.w	r8, r2, #1
 8002786:	f143 0900 	adc.w	r9, r3, #0
 800278a:	4642      	mov	r2, r8
 800278c:	464b      	mov	r3, r9
 800278e:	4979      	ldr	r1, [pc, #484]	@ (8002974 <main+0x348>)
 8002790:	e9c1 2300 	strd	r2, r3, [r1]
	  AMT_encoder_update(&AMT, &htim2, micros());
 8002794:	f000 fcbc 	bl	8003110 <micros>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4962      	ldr	r1, [pc, #392]	@ (8002928 <main+0x2fc>)
 800279e:	4870      	ldr	r0, [pc, #448]	@ (8002960 <main+0x334>)
 80027a0:	f7fe fe0a 	bl	80013b8 <AMT_encoder_update>
	  }

	  //Modbus
	  easyCase();
 80027a4:	f7fe fcac 	bl	8001100 <easyCase>
	  switch(base.bS){
 80027a8:	4b73      	ldr	r3, [pc, #460]	@ (8002978 <main+0x34c>)
 80027aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ac:	3b01      	subs	r3, #1
 80027ae:	2b07      	cmp	r3, #7
 80027b0:	d82a      	bhi.n	8002808 <main+0x1dc>
 80027b2:	a201      	add	r2, pc, #4	@ (adr r2, 80027b8 <main+0x18c>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027d9 	.word	0x080027d9
 80027bc:	080027e5 	.word	0x080027e5
 80027c0:	08002809 	.word	0x08002809
 80027c4:	080027f1 	.word	0x080027f1
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002809 	.word	0x08002809
 80027d0:	08002809 	.word	0x08002809
 80027d4:	080027fd 	.word	0x080027fd
//	  case 0:
//		  registerFrame[0x01].U16 = 0;
//		  base.bStatus = 0;
//		  break;
	  case 1:
		  base.bStatus = 1;
 80027d8:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <main+0x34c>)
 80027da:	2201      	movs	r2, #1
 80027dc:	801a      	strh	r2, [r3, #0]
		  SetShelves();
 80027de:	f7fe fd11 	bl	8001204 <SetShelves>
//		  base.bS = 0;
		  break;
 80027e2:	e011      	b.n	8002808 <main+0x1dc>
	  case 2:
		  base.bStatus = 2;
 80027e4:	4b64      	ldr	r3, [pc, #400]	@ (8002978 <main+0x34c>)
 80027e6:	2202      	movs	r2, #2
 80027e8:	801a      	strh	r2, [r3, #0]
		  SetHome();
 80027ea:	f7fe fd71 	bl	80012d0 <SetHome>
//		  base.bS = 0;
		  break;
 80027ee:	e00b      	b.n	8002808 <main+0x1dc>
	  case 4:
		  base.bStatus = 4;
 80027f0:	4b61      	ldr	r3, [pc, #388]	@ (8002978 <main+0x34c>)
 80027f2:	2204      	movs	r2, #4
 80027f4:	801a      	strh	r2, [r3, #0]
		  RunJog();
 80027f6:	f7fe fd97 	bl	8001328 <RunJog>
//		  base.bS = 0;
		  break;
 80027fa:	e005      	b.n	8002808 <main+0x1dc>
	  case 8:
		  base.bStatus = 8;
 80027fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002978 <main+0x34c>)
 80027fe:	2208      	movs	r2, #8
 8002800:	801a      	strh	r2, [r3, #0]
		  RunPoint();
 8002802:	f7fe fd37 	bl	8001274 <RunPoint>
//		  base.bS = 0;
		  break;
 8002806:	bf00      	nop
	  }

	  // Vacuum Status
	  switch(base.vS){
 8002808:	4b5b      	ldr	r3, [pc, #364]	@ (8002978 <main+0x34c>)
 800280a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <main+0x1ea>
 8002810:	2b01      	cmp	r3, #1
 8002812:	d009      	beq.n	8002828 <main+0x1fc>
 8002814:	e011      	b.n	800283a <main+0x20e>
	  case 0:
		  base.Vacuum = 0;
 8002816:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <main+0x34c>)
 8002818:	2200      	movs	r2, #0
 800281a:	829a      	strh	r2, [r3, #20]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);			// Vacuum off
 800281c:	2200      	movs	r2, #0
 800281e:	2120      	movs	r1, #32
 8002820:	4856      	ldr	r0, [pc, #344]	@ (800297c <main+0x350>)
 8002822:	f001 fdaf 	bl	8004384 <HAL_GPIO_WritePin>
		  break;
 8002826:	e008      	b.n	800283a <main+0x20e>
	  case 1:
		  base.Vacuum = 1;
 8002828:	4b53      	ldr	r3, [pc, #332]	@ (8002978 <main+0x34c>)
 800282a:	2201      	movs	r2, #1
 800282c:	829a      	strh	r2, [r3, #20]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on
 800282e:	2201      	movs	r2, #1
 8002830:	2120      	movs	r1, #32
 8002832:	4852      	ldr	r0, [pc, #328]	@ (800297c <main+0x350>)
 8002834:	f001 fda6 	bl	8004384 <HAL_GPIO_WritePin>
		  break;
 8002838:	bf00      	nop
	  }


	  // Gripper Movement Status
	  switch(base.gmS){
 800283a:	4b4f      	ldr	r3, [pc, #316]	@ (8002978 <main+0x34c>)
 800283c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <main+0x21c>
 8002842:	2b01      	cmp	r3, #1
 8002844:	d010      	beq.n	8002868 <main+0x23c>
 8002846:	e01f      	b.n	8002888 <main+0x25c>
	  case 0:
		  base.Gripper = 0;
 8002848:	4b4b      	ldr	r3, [pc, #300]	@ (8002978 <main+0x34c>)
 800284a:	2200      	movs	r2, #0
 800284c:	82da      	strh	r2, [r3, #22]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 800284e:	2201      	movs	r2, #1
 8002850:	2110      	movs	r1, #16
 8002852:	484a      	ldr	r0, [pc, #296]	@ (800297c <main+0x350>)
 8002854:	f001 fd96 	bl	8004384 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800285e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002862:	f001 fd8f 	bl	8004384 <HAL_GPIO_WritePin>
		  break;
 8002866:	e00f      	b.n	8002888 <main+0x25c>
	  case 1:
		  base.Gripper = 1;
 8002868:	4b43      	ldr	r3, [pc, #268]	@ (8002978 <main+0x34c>)
 800286a:	2201      	movs	r2, #1
 800286c:	82da      	strh	r2, [r3, #22]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
 800286e:	2200      	movs	r2, #0
 8002870:	2110      	movs	r1, #16
 8002872:	4842      	ldr	r0, [pc, #264]	@ (800297c <main+0x350>)
 8002874:	f001 fd86 	bl	8004384 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8002878:	2201      	movs	r2, #1
 800287a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800287e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002882:	f001 fd7f 	bl	8004384 <HAL_GPIO_WritePin>
		  break;
 8002886:	bf00      	nop

	  // Alternative form
//	  base.ReedStatus = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == RESET)?0b0001:
//			  	  	  	(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == SET)?0b0010:0b0000;

	  int pinCombination = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) | HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002888:	2140      	movs	r1, #64	@ 0x40
 800288a:	483d      	ldr	r0, [pc, #244]	@ (8002980 <main+0x354>)
 800288c:	f001 fd62 	bl	8004354 <HAL_GPIO_ReadPin>
 8002890:	4603      	mov	r3, r0
 8002892:	005e      	lsls	r6, r3, #1
 8002894:	2180      	movs	r1, #128	@ 0x80
 8002896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800289a:	f001 fd5b 	bl	8004354 <HAL_GPIO_ReadPin>
 800289e:	4603      	mov	r3, r0
 80028a0:	4333      	orrs	r3, r6
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
	  switch(pinCombination) {
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d006      	beq.n	80028b8 <main+0x28c>
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d107      	bne.n	80028c0 <main+0x294>
	      case 2: // Binary 10: B is SET, A is RESET
	          base.ReedStatus = 0b0001;
 80028b0:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <main+0x34c>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
	          break;
 80028b6:	e006      	b.n	80028c6 <main+0x29a>
	      case 1: // Binary 01: B is RESET, A is SET
	          base.ReedStatus = 0b0010;
 80028b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002978 <main+0x34c>)
 80028ba:	2202      	movs	r2, #2
 80028bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
	          break;
 80028be:	e002      	b.n	80028c6 <main+0x29a>
	      default:
	          base.ReedStatus = 0b0000;
 80028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <main+0x34c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
	  }

	  Modbus_Protocal_Worker();
 80028c6:	f7fe ff71 	bl	80017ac <Modbus_Protocal_Worker>
	  Routine();
 80028ca:	f7fe fc3f 	bl	800114c <Routine>

//	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 80028ce:	230a      	movs	r3, #10
 80028d0:	220a      	movs	r2, #10
 80028d2:	492c      	ldr	r1, [pc, #176]	@ (8002984 <main+0x358>)
 80028d4:	482c      	ldr	r0, [pc, #176]	@ (8002988 <main+0x35c>)
 80028d6:	f004 ff87 	bl	80077e8 <HAL_UART_Receive>
	  if(ps2.ps2RX[0] == 74){
 80028da:	4b2a      	ldr	r3, [pc, #168]	@ (8002984 <main+0x358>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b4a      	cmp	r3, #74	@ 0x4a
 80028e0:	d102      	bne.n	80028e8 <main+0x2bc>
		  ps2.stop = 1;
 80028e2:	4b28      	ldr	r3, [pc, #160]	@ (8002984 <main+0x358>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	671a      	str	r2, [r3, #112]	@ 0x70
	  }
	  if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 80028e8:	4b26      	ldr	r3, [pc, #152]	@ (8002984 <main+0x358>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d113      	bne.n	8002918 <main+0x2ec>
 80028f0:	4b24      	ldr	r3, [pc, #144]	@ (8002984 <main+0x358>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b4b      	cmp	r3, #75	@ 0x4b
 80028f6:	d10f      	bne.n	8002918 <main+0x2ec>
		  ps2.stop = 0;
 80028f8:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <main+0x358>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	671a      	str	r2, [r3, #112]	@ 0x70
		  ps2.pwmOut = 150;
 80028fe:	4b21      	ldr	r3, [pc, #132]	@ (8002984 <main+0x358>)
 8002900:	2296      	movs	r2, #150	@ 0x96
 8002902:	669a      	str	r2, [r3, #104]	@ 0x68
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);		//Stop and Holf Position
 8002904:	4b1f      	ldr	r3, [pc, #124]	@ (8002984 <main+0x358>)
 8002906:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002908:	4b08      	ldr	r3, [pc, #32]	@ (800292c <main+0x300>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800290e:	4b07      	ldr	r3, [pc, #28]	@ (800292c <main+0x300>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2200      	movs	r2, #0
 8002914:	639a      	str	r2, [r3, #56]	@ 0x38
 8002916:	e006      	b.n	8002926 <main+0x2fa>
	  }
	  else if(ps2.stop == 0){
 8002918:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <main+0x358>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f af03 	bne.w	8002728 <main+0xfc>
		  PS2X_Reader();
 8002922:	f7ff fc71 	bl	8002208 <PS2X_Reader>
  {
 8002926:	e6ff      	b.n	8002728 <main+0xfc>
 8002928:	20000304 	.word	0x20000304
 800292c:	200003d0 	.word	0x200003d0
 8002930:	20000634 	.word	0x20000634
 8002934:	2000049c 	.word	0x2000049c
 8002938:	20000568 	.word	0x20000568
 800293c:	20000ae8 	.word	0x20000ae8
 8002940:	20000898 	.word	0x20000898
 8002944:	20000700 	.word	0x20000700
 8002948:	20000fc8 	.word	0x20000fc8
 800294c:	080095b8 	.word	0x080095b8
 8002950:	080095c4 	.word	0x080095c4
 8002954:	43fa0000 	.word	0x43fa0000
 8002958:	43e10000 	.word	0x43e10000
 800295c:	20000284 	.word	0x20000284
 8002960:	20000a30 	.word	0x20000a30
 8002964:	20000a24 	.word	0x20000a24
 8002968:	20000298 	.word	0x20000298
 800296c:	2000025c 	.word	0x2000025c
 8002970:	20001158 	.word	0x20001158
 8002974:	20001160 	.word	0x20001160
 8002978:	200002b4 	.word	0x200002b4
 800297c:	48000800 	.word	0x48000800
 8002980:	48000400 	.word	0x48000400
 8002984:	20000a68 	.word	0x20000a68
 8002988:	200007cc 	.word	0x200007cc

0800298c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b094      	sub	sp, #80	@ 0x50
 8002990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002992:	f107 0318 	add.w	r3, r7, #24
 8002996:	2238      	movs	r2, #56	@ 0x38
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f006 fdc6 	bl	800952c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f001 fd24 	bl	80043fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029be:	2340      	movs	r3, #64	@ 0x40
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c2:	2302      	movs	r3, #2
 80029c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029c6:	2302      	movs	r3, #2
 80029c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80029ca:	2304      	movs	r3, #4
 80029cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80029ce:	2355      	movs	r3, #85	@ 0x55
 80029d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029d2:	2302      	movs	r3, #2
 80029d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029d6:	2302      	movs	r3, #2
 80029d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029da:	2302      	movs	r3, #2
 80029dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029de:	f107 0318 	add.w	r3, r7, #24
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fdbe 	bl	8004564 <HAL_RCC_OscConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80029ee:	f000 fba9 	bl	8003144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f2:	230f      	movs	r3, #15
 80029f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f6:	2303      	movs	r3, #3
 80029f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 f8bc 	bl	8004b88 <HAL_RCC_ClockConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002a16:	f000 fb95 	bl	8003144 <Error_Handler>
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	3750      	adds	r7, #80	@ 0x50
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	@ 0x30
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	2224      	movs	r2, #36	@ 0x24
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f006 fd7a 	bl	800952c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a38:	463b      	mov	r3, r7
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a42:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <MX_TIM2_Init+0xa4>)
 8002a44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac8 <MX_TIM2_Init+0xa4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac8 <MX_TIM2_Init+0xa4>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002a56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <MX_TIM2_Init+0xa4>)
 8002a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <MX_TIM2_Init+0xa4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a64:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <MX_TIM2_Init+0xa4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a72:	2301      	movs	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a82:	2301      	movs	r3, #1
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	4619      	mov	r1, r3
 8002a94:	480c      	ldr	r0, [pc, #48]	@ (8002ac8 <MX_TIM2_Init+0xa4>)
 8002a96:	f003 f8f1 	bl	8005c7c <HAL_TIM_Encoder_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002aa0:	f000 fb50 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aac:	463b      	mov	r3, r7
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4805      	ldr	r0, [pc, #20]	@ (8002ac8 <MX_TIM2_Init+0xa4>)
 8002ab2:	f004 fc99 	bl	80073e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002abc:	f000 fb42 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ac0:	bf00      	nop
 8002ac2:	3730      	adds	r7, #48	@ 0x30
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000304 	.word	0x20000304

08002acc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08e      	sub	sp, #56	@ 0x38
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aec:	463b      	mov	r3, r7
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
 8002af8:	611a      	str	r2, [r3, #16]
 8002afa:	615a      	str	r2, [r3, #20]
 8002afc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002afe:	4b32      	ldr	r3, [pc, #200]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b00:	4a32      	ldr	r2, [pc, #200]	@ (8002bcc <MX_TIM3_Init+0x100>)
 8002b02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002b04:	4b30      	ldr	r3, [pc, #192]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 8002b10:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b12:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8002b16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b18:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b24:	4828      	ldr	r0, [pc, #160]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b26:	f002 fc99 	bl	800545c <HAL_TIM_Base_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002b30:	f000 fb08 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4821      	ldr	r0, [pc, #132]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b42:	f003 fc6b 	bl	800641c <HAL_TIM_ConfigClockSource>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002b4c:	f000 fafa 	bl	8003144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b50:	481d      	ldr	r0, [pc, #116]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b52:	f002 fdcf 	bl	80056f4 <HAL_TIM_PWM_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002b5c:	f000 faf2 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4816      	ldr	r0, [pc, #88]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b70:	f004 fc3a 	bl	80073e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002b7a:	f000 fae3 	bl	8003144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b7e:	2360      	movs	r3, #96	@ 0x60
 8002b80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b8e:	463b      	mov	r3, r7
 8002b90:	2200      	movs	r2, #0
 8002b92:	4619      	mov	r1, r3
 8002b94:	480c      	ldr	r0, [pc, #48]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002b96:	f003 fb2d 	bl	80061f4 <HAL_TIM_PWM_ConfigChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ba0:	f000 fad0 	bl	8003144 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4807      	ldr	r0, [pc, #28]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002bac:	f003 fb22 	bl	80061f4 <HAL_TIM_PWM_ConfigChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002bb6:	f000 fac5 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002bba:	4803      	ldr	r0, [pc, #12]	@ (8002bc8 <MX_TIM3_Init+0xfc>)
 8002bbc:	f000 fbb2 	bl	8003324 <HAL_TIM_MspPostInit>

}
 8002bc0:	bf00      	nop
 8002bc2:	3738      	adds	r7, #56	@ 0x38
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200003d0 	.word	0x200003d0
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <MX_TIM4_Init+0x98>)
 8002bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c6c <MX_TIM4_Init+0x9c>)
 8002bf2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <MX_TIM4_Init+0x98>)
 8002bf6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002bfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <MX_TIM4_Init+0x98>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002c02:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <MX_TIM4_Init+0x98>)
 8002c04:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002c08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0a:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <MX_TIM4_Init+0x98>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c10:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <MX_TIM4_Init+0x98>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c16:	4814      	ldr	r0, [pc, #80]	@ (8002c68 <MX_TIM4_Init+0x98>)
 8002c18:	f002 fc20 	bl	800545c <HAL_TIM_Base_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002c22:	f000 fa8f 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	4619      	mov	r1, r3
 8002c32:	480d      	ldr	r0, [pc, #52]	@ (8002c68 <MX_TIM4_Init+0x98>)
 8002c34:	f003 fbf2 	bl	800641c <HAL_TIM_ConfigClockSource>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002c3e:	f000 fa81 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4806      	ldr	r0, [pc, #24]	@ (8002c68 <MX_TIM4_Init+0x98>)
 8002c50:	f004 fbca 	bl	80073e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002c5a:	f000 fa73 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2000049c 	.word	0x2000049c
 8002c6c:	40000800 	.word	0x40000800

08002c70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <MX_TIM5_Init+0x94>)
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <MX_TIM5_Init+0x98>)
 8002c92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <MX_TIM5_Init+0x94>)
 8002c96:	22a9      	movs	r2, #169	@ 0xa9
 8002c98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <MX_TIM5_Init+0x94>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ca0:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <MX_TIM5_Init+0x94>)
 8002ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca8:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <MX_TIM5_Init+0x94>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <MX_TIM5_Init+0x94>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002cb4:	4813      	ldr	r0, [pc, #76]	@ (8002d04 <MX_TIM5_Init+0x94>)
 8002cb6:	f002 fbd1 	bl	800545c <HAL_TIM_Base_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002cc0:	f000 fa40 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002cca:	f107 0310 	add.w	r3, r7, #16
 8002cce:	4619      	mov	r1, r3
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <MX_TIM5_Init+0x94>)
 8002cd2:	f003 fba3 	bl	800641c <HAL_TIM_ConfigClockSource>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002cdc:	f000 fa32 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4805      	ldr	r0, [pc, #20]	@ (8002d04 <MX_TIM5_Init+0x94>)
 8002cee:	f004 fb7b 	bl	80073e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002cf8:	f000 fa24 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002cfc:	bf00      	nop
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000568 	.word	0x20000568
 8002d08:	40000c00 	.word	0x40000c00

08002d0c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d1c:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <MX_TIM6_Init+0x64>)
 8002d1e:	4a15      	ldr	r2, [pc, #84]	@ (8002d74 <MX_TIM6_Init+0x68>)
 8002d20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8002d22:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <MX_TIM6_Init+0x64>)
 8002d24:	22a9      	movs	r2, #169	@ 0xa9
 8002d26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <MX_TIM6_Init+0x64>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <MX_TIM6_Init+0x64>)
 8002d30:	220a      	movs	r2, #10
 8002d32:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d34:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <MX_TIM6_Init+0x64>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d3a:	480d      	ldr	r0, [pc, #52]	@ (8002d70 <MX_TIM6_Init+0x64>)
 8002d3c:	f002 fb8e 	bl	800545c <HAL_TIM_Base_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002d46:	f000 f9fd 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4806      	ldr	r0, [pc, #24]	@ (8002d70 <MX_TIM6_Init+0x64>)
 8002d58:	f004 fb46 	bl	80073e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002d62:	f000 f9ef 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000634 	.word	0x20000634
 8002d74:	40001000 	.word	0x40001000

08002d78 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <MX_TIM16_Init+0x58>)
 8002d7e:	4a15      	ldr	r2, [pc, #84]	@ (8002dd4 <MX_TIM16_Init+0x5c>)
 8002d80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <MX_TIM16_Init+0x58>)
 8002d84:	22a9      	movs	r2, #169	@ 0xa9
 8002d86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d88:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <MX_TIM16_Init+0x58>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002d8e:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <MX_TIM16_Init+0x58>)
 8002d90:	f240 4279 	movw	r2, #1145	@ 0x479
 8002d94:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <MX_TIM16_Init+0x58>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <MX_TIM16_Init+0x58>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <MX_TIM16_Init+0x58>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002da8:	4809      	ldr	r0, [pc, #36]	@ (8002dd0 <MX_TIM16_Init+0x58>)
 8002daa:	f002 fb57 	bl	800545c <HAL_TIM_Base_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002db4:	f000 f9c6 	bl	8003144 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002db8:	2108      	movs	r1, #8
 8002dba:	4805      	ldr	r0, [pc, #20]	@ (8002dd0 <MX_TIM16_Init+0x58>)
 8002dbc:	f002 fe68 	bl	8005a90 <HAL_TIM_OnePulse_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002dc6:	f000 f9bd 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000700 	.word	0x20000700
 8002dd4:	40014400 	.word	0x40014400

08002dd8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ddc:	4b23      	ldr	r3, [pc, #140]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002dde:	4a24      	ldr	r2, [pc, #144]	@ (8002e70 <MX_UART4_Init+0x98>)
 8002de0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9700;
 8002de2:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002de4:	f242 52e4 	movw	r2, #9700	@ 0x25e4
 8002de8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002dea:	4b20      	ldr	r3, [pc, #128]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002dfe:	220c      	movs	r2, #12
 8002e00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e08:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e14:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e1a:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e20:	4812      	ldr	r0, [pc, #72]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002e22:	f004 fbc7 	bl	80075b4 <HAL_UART_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002e2c:	f000 f98a 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e30:	2100      	movs	r1, #0
 8002e32:	480e      	ldr	r0, [pc, #56]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002e34:	f006 faaf 	bl	8009396 <HAL_UARTEx_SetTxFifoThreshold>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002e3e:	f000 f981 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002e42:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8002e46:	4809      	ldr	r0, [pc, #36]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002e48:	f006 fae3 	bl	8009412 <HAL_UARTEx_SetRxFifoThreshold>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8002e52:	f000 f977 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002e56:	4805      	ldr	r0, [pc, #20]	@ (8002e6c <MX_UART4_Init+0x94>)
 8002e58:	f006 fa64 	bl	8009324 <HAL_UARTEx_DisableFifoMode>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8002e62:	f000 f96f 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200007cc 	.word	0x200007cc
 8002e70:	40004c00 	.word	0x40004c00

08002e74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e78:	4b23      	ldr	r3, [pc, #140]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e7a:	4a24      	ldr	r2, [pc, #144]	@ (8002f0c <MX_USART2_UART_Init+0x98>)
 8002e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002e7e:	4b22      	ldr	r3, [pc, #136]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e80:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002e86:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e8c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002e94:	4b1c      	ldr	r3, [pc, #112]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea2:	4b19      	ldr	r3, [pc, #100]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea8:	4b17      	ldr	r3, [pc, #92]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eae:	4b16      	ldr	r3, [pc, #88]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002eb4:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eba:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ec0:	4811      	ldr	r0, [pc, #68]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ec2:	f004 fb77 	bl	80075b4 <HAL_UART_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002ecc:	f000 f93a 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	480d      	ldr	r0, [pc, #52]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ed4:	f006 fa5f 	bl	8009396 <HAL_UARTEx_SetTxFifoThreshold>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002ede:	f000 f931 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4808      	ldr	r0, [pc, #32]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ee6:	f006 fa94 	bl	8009412 <HAL_UARTEx_SetRxFifoThreshold>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002ef0:	f000 f928 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ef4:	4804      	ldr	r0, [pc, #16]	@ (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ef6:	f006 fa15 	bl	8009324 <HAL_UARTEx_DisableFifoMode>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002f00:	f000 f920 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000898 	.word	0x20000898
 8002f0c:	40004400 	.word	0x40004400

08002f10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002f16:	4b16      	ldr	r3, [pc, #88]	@ (8002f70 <MX_DMA_Init+0x60>)
 8002f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f1a:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <MX_DMA_Init+0x60>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f22:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <MX_DMA_Init+0x60>)
 8002f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <MX_DMA_Init+0x60>)
 8002f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f32:	4a0f      	ldr	r2, [pc, #60]	@ (8002f70 <MX_DMA_Init+0x60>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <MX_DMA_Init+0x60>)
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	200b      	movs	r0, #11
 8002f4c:	f000 fd19 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f50:	200b      	movs	r0, #11
 8002f52:	f000 fd30 	bl	80039b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	200c      	movs	r0, #12
 8002f5c:	f000 fd11 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002f60:	200c      	movs	r0, #12
 8002f62:	f000 fd28 	bl	80039b6 <HAL_NVIC_EnableIRQ>

}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000

08002f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
 8002f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f8a:	4b46      	ldr	r3, [pc, #280]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8e:	4a45      	ldr	r2, [pc, #276]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f96:	4b43      	ldr	r3, [pc, #268]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fa2:	4b40      	ldr	r3, [pc, #256]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	4a3f      	ldr	r2, [pc, #252]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002fa8:	f043 0320 	orr.w	r3, r3, #32
 8002fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fae:	4b3d      	ldr	r3, [pc, #244]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fba:	4b3a      	ldr	r3, [pc, #232]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	4a39      	ldr	r2, [pc, #228]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fc6:	4b37      	ldr	r3, [pc, #220]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	4b34      	ldr	r3, [pc, #208]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd6:	4a33      	ldr	r2, [pc, #204]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fde:	4b31      	ldr	r3, [pc, #196]	@ (80030a4 <MX_GPIO_Init+0x130>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Push_Pin, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ff4:	f001 f9c6 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pull_Pin|Suck_Pin, GPIO_PIN_RESET);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2130      	movs	r1, #48	@ 0x30
 8002ffc:	482a      	ldr	r0, [pc, #168]	@ (80030a8 <MX_GPIO_Init+0x134>)
 8002ffe:	f001 f9c1 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003002:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003008:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800300c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	4823      	ldr	r0, [pc, #140]	@ (80030a8 <MX_GPIO_Init+0x134>)
 800301a:	f001 f819 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : Top_Limit_Pin Base_Limit_Pin Reed_pull_Pin */
  GPIO_InitStruct.Pin = Top_Limit_Pin|Base_Limit_Pin|Reed_pull_Pin;
 800301e:	23d0      	movs	r3, #208	@ 0xd0
 8003020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003026:	2302      	movs	r3, #2
 8003028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003034:	f001 f80c 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Push_Pin;
 8003038:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800303c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303e:	2301      	movs	r3, #1
 8003040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304a:	f107 0314 	add.w	r3, r7, #20
 800304e:	4619      	mov	r1, r3
 8003050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003054:	f000 fffc 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pull_Pin Suck_Pin */
  GPIO_InitStruct.Pin = Pull_Pin|Suck_Pin;
 8003058:	2330      	movs	r3, #48	@ 0x30
 800305a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305c:	2301      	movs	r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	480e      	ldr	r0, [pc, #56]	@ (80030a8 <MX_GPIO_Init+0x134>)
 8003070:	f000 ffee 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reed_push_Pin */
  GPIO_InitStruct.Pin = Reed_push_Pin;
 8003074:	2340      	movs	r3, #64	@ 0x40
 8003076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800307c:	2302      	movs	r3, #2
 800307e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reed_push_GPIO_Port, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	4809      	ldr	r0, [pc, #36]	@ (80030ac <MX_GPIO_Init+0x138>)
 8003088:	f000 ffe2 	bl	8004050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800308c:	2200      	movs	r2, #0
 800308e:	2100      	movs	r1, #0
 8003090:	2028      	movs	r0, #40	@ 0x28
 8003092:	f000 fc76 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003096:	2028      	movs	r0, #40	@ 0x28
 8003098:	f000 fc8d 	bl	80039b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800309c:	bf00      	nop
 800309e:	3728      	adds	r7, #40	@ 0x28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000
 80030a8:	48000800 	.word	0x48000800
 80030ac:	48000400 	.word	0x48000400

080030b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
		if(htim == &htim5)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a10      	ldr	r2, [pc, #64]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <HAL_TIM_PeriodElapsedCallback+0x22>
			{
			_micros += UINT32_MAX;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	1e54      	subs	r4, r2, #1
 80030c8:	f143 0500 	adc.w	r5, r3, #0
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80030ce:	e9c3 4500 	strd	r4, r5, [r3]
			}
		if(htim == &htim4)								// 2000 Hz
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10b      	bne.n	80030f2 <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			MOTOR_set_duty(&MT, base.MotorHome);
 80030da:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80030dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80030e0:	ee07 3a90 	vmov	s15, r3
 80030e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e8:	eeb0 0a67 	vmov.f32	s0, s15
 80030ec:	4807      	ldr	r0, [pc, #28]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80030ee:	f7fe fde7 	bl	8001cc0 <MOTOR_set_duty>

		}
	}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bdb0      	pop	{r4, r5, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000568 	.word	0x20000568
 8003100:	20000fc0 	.word	0x20000fc0
 8003104:	2000049c 	.word	0x2000049c
 8003108:	200002b4 	.word	0x200002b4
 800310c:	20000a24 	.word	0x20000a24

08003110 <micros>:

uint64_t micros()
	{
 8003110:	b4b0      	push	{r4, r5, r7}
 8003112:	af00      	add	r7, sp, #0
		return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8003114:	4b09      	ldr	r3, [pc, #36]	@ (800313c <micros+0x2c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	2200      	movs	r2, #0
 800311c:	4618      	mov	r0, r3
 800311e:	4611      	mov	r1, r2
 8003120:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <micros+0x30>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	1884      	adds	r4, r0, r2
 8003128:	eb41 0503 	adc.w	r5, r1, r3
 800312c:	4622      	mov	r2, r4
 800312e:	462b      	mov	r3, r5
	}
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	bcb0      	pop	{r4, r5, r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000568 	.word	0x20000568
 8003140:	20000fc0 	.word	0x20000fc0

08003144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003148:	b672      	cpsid	i
}
 800314a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <Error_Handler+0x8>

08003150 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	4b0f      	ldr	r3, [pc, #60]	@ (8003194 <HAL_MspInit+0x44>)
 8003158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315a:	4a0e      	ldr	r2, [pc, #56]	@ (8003194 <HAL_MspInit+0x44>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6613      	str	r3, [r2, #96]	@ 0x60
 8003162:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <HAL_MspInit+0x44>)
 8003164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <HAL_MspInit+0x44>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	4a08      	ldr	r2, [pc, #32]	@ (8003194 <HAL_MspInit+0x44>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003178:	6593      	str	r3, [r2, #88]	@ 0x58
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_MspInit+0x44>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003186:	f001 f9dd 	bl	8004544 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000

08003198 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	@ 0x28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b8:	d128      	bne.n	800320c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ba:	4b16      	ldr	r3, [pc, #88]	@ (8003214 <HAL_TIM_Encoder_MspInit+0x7c>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <HAL_TIM_Encoder_MspInit+0x7c>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80031c6:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <HAL_TIM_Encoder_MspInit+0x7c>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d2:	4b10      	ldr	r3, [pc, #64]	@ (8003214 <HAL_TIM_Encoder_MspInit+0x7c>)
 80031d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003214 <HAL_TIM_Encoder_MspInit+0x7c>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031de:	4b0d      	ldr	r3, [pc, #52]	@ (8003214 <HAL_TIM_Encoder_MspInit+0x7c>)
 80031e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031ea:	2303      	movs	r3, #3
 80031ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031fa:	2301      	movs	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	4619      	mov	r1, r3
 8003204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003208:	f000 ff22 	bl	8004050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800320c:	bf00      	nop
 800320e:	3728      	adds	r7, #40	@ 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000

08003218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a39      	ldr	r2, [pc, #228]	@ (800330c <HAL_TIM_Base_MspInit+0xf4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10c      	bne.n	8003244 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800322a:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	4a38      	ldr	r2, [pc, #224]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	6593      	str	r3, [r2, #88]	@ 0x58
 8003236:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003242:	e05e      	b.n	8003302 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a32      	ldr	r2, [pc, #200]	@ (8003314 <HAL_TIM_Base_MspInit+0xfc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d114      	bne.n	8003278 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800324e:	4b30      	ldr	r3, [pc, #192]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	4a2f      	ldr	r2, [pc, #188]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6593      	str	r3, [r2, #88]	@ 0x58
 800325a:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003266:	2200      	movs	r2, #0
 8003268:	2100      	movs	r1, #0
 800326a:	201e      	movs	r0, #30
 800326c:	f000 fb89 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003270:	201e      	movs	r0, #30
 8003272:	f000 fba0 	bl	80039b6 <HAL_NVIC_EnableIRQ>
}
 8003276:	e044      	b.n	8003302 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a26      	ldr	r2, [pc, #152]	@ (8003318 <HAL_TIM_Base_MspInit+0x100>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d114      	bne.n	80032ac <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003282:	4b23      	ldr	r3, [pc, #140]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 8003284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003286:	4a22      	ldr	r2, [pc, #136]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	6593      	str	r3, [r2, #88]	@ 0x58
 800328e:	4b20      	ldr	r3, [pc, #128]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	2032      	movs	r0, #50	@ 0x32
 80032a0:	f000 fb6f 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032a4:	2032      	movs	r0, #50	@ 0x32
 80032a6:	f000 fb86 	bl	80039b6 <HAL_NVIC_EnableIRQ>
}
 80032aa:	e02a      	b.n	8003302 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1a      	ldr	r2, [pc, #104]	@ (800331c <HAL_TIM_Base_MspInit+0x104>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10c      	bne.n	80032d0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032b6:	4b16      	ldr	r3, [pc, #88]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	4a15      	ldr	r2, [pc, #84]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 80032bc:	f043 0310 	orr.w	r3, r3, #16
 80032c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c2:	4b13      	ldr	r3, [pc, #76]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
}
 80032ce:	e018      	b.n	8003302 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a12      	ldr	r2, [pc, #72]	@ (8003320 <HAL_TIM_Base_MspInit+0x108>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80032da:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 80032e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80032e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <HAL_TIM_Base_MspInit+0xf8>)
 80032e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2100      	movs	r1, #0
 80032f6:	2019      	movs	r0, #25
 80032f8:	f000 fb43 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80032fc:	2019      	movs	r0, #25
 80032fe:	f000 fb5a 	bl	80039b6 <HAL_NVIC_EnableIRQ>
}
 8003302:	bf00      	nop
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40000400 	.word	0x40000400
 8003310:	40021000 	.word	0x40021000
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40001000 	.word	0x40001000
 8003320:	40014400 	.word	0x40014400

08003324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a11      	ldr	r2, [pc, #68]	@ (8003388 <HAL_TIM_MspPostInit+0x64>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d11b      	bne.n	800337e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_TIM_MspPostInit+0x68>)
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	4a10      	ldr	r2, [pc, #64]	@ (800338c <HAL_TIM_MspPostInit+0x68>)
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003352:	4b0e      	ldr	r3, [pc, #56]	@ (800338c <HAL_TIM_MspPostInit+0x68>)
 8003354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800335e:	2330      	movs	r3, #48	@ 0x30
 8003360:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	2302      	movs	r3, #2
 8003364:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800336e:	2302      	movs	r3, #2
 8003370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	4619      	mov	r1, r3
 8003378:	4805      	ldr	r0, [pc, #20]	@ (8003390 <HAL_TIM_MspPostInit+0x6c>)
 800337a:	f000 fe69 	bl	8004050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800337e:	bf00      	nop
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40000400 	.word	0x40000400
 800338c:	40021000 	.word	0x40021000
 8003390:	48000400 	.word	0x48000400

08003394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b0a0      	sub	sp, #128	@ 0x80
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033ac:	f107 0318 	add.w	r3, r7, #24
 80033b0:	2254      	movs	r2, #84	@ 0x54
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f006 f8b9 	bl	800952c <memset>
  if(huart->Instance==UART4)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6b      	ldr	r2, [pc, #428]	@ (800356c <HAL_UART_MspInit+0x1d8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d137      	bne.n	8003434 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80033c4:	2308      	movs	r3, #8
 80033c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033cc:	f107 0318 	add.w	r3, r7, #24
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 fdf5 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033dc:	f7ff feb2 	bl	8003144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80033e0:	4b63      	ldr	r3, [pc, #396]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	4a62      	ldr	r2, [pc, #392]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 80033e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80033ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ec:	4b60      	ldr	r3, [pc, #384]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f8:	4b5d      	ldr	r3, [pc, #372]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 80033fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003404:	4b5a      	ldr	r3, [pc, #360]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 8003406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003410:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003414:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003422:	2305      	movs	r3, #5
 8003424:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003426:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800342a:	4619      	mov	r1, r3
 800342c:	4851      	ldr	r0, [pc, #324]	@ (8003574 <HAL_UART_MspInit+0x1e0>)
 800342e:	f000 fe0f 	bl	8004050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003432:	e097      	b.n	8003564 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a4f      	ldr	r2, [pc, #316]	@ (8003578 <HAL_UART_MspInit+0x1e4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	f040 8092 	bne.w	8003564 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003440:	2302      	movs	r3, #2
 8003442:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003444:	2300      	movs	r3, #0
 8003446:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003448:	f107 0318 	add.w	r3, r7, #24
 800344c:	4618      	mov	r0, r3
 800344e:	f001 fdb7 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8003458:	f7ff fe74 	bl	8003144 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800345c:	4b44      	ldr	r3, [pc, #272]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	4a43      	ldr	r2, [pc, #268]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 8003462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003466:	6593      	str	r3, [r2, #88]	@ 0x58
 8003468:	4b41      	ldr	r3, [pc, #260]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003474:	4b3e      	ldr	r3, [pc, #248]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	4a3d      	ldr	r2, [pc, #244]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003480:	4b3b      	ldr	r3, [pc, #236]	@ (8003570 <HAL_UART_MspInit+0x1dc>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800348c:	230c      	movs	r3, #12
 800348e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003498:	2300      	movs	r3, #0
 800349a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800349c:	2307      	movs	r3, #7
 800349e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034a4:	4619      	mov	r1, r3
 80034a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034aa:	f000 fdd1 	bl	8004050 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80034ae:	4b33      	ldr	r3, [pc, #204]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034b0:	4a33      	ldr	r2, [pc, #204]	@ (8003580 <HAL_UART_MspInit+0x1ec>)
 80034b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80034b4:	4b31      	ldr	r3, [pc, #196]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034b6:	221b      	movs	r2, #27
 80034b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034ba:	4b30      	ldr	r3, [pc, #192]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034bc:	2210      	movs	r2, #16
 80034be:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c0:	4b2e      	ldr	r3, [pc, #184]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034c6:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034cc:	4b2b      	ldr	r3, [pc, #172]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d2:	4b2a      	ldr	r3, [pc, #168]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034d8:	4b28      	ldr	r3, [pc, #160]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034da:	2200      	movs	r2, #0
 80034dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034de:	4b27      	ldr	r3, [pc, #156]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80034e4:	4825      	ldr	r0, [pc, #148]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034e6:	f000 fa81 	bl	80039ec <HAL_DMA_Init>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_MspInit+0x160>
      Error_Handler();
 80034f0:	f7ff fe28 	bl	8003144 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a21      	ldr	r2, [pc, #132]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034f8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80034fa:	4a20      	ldr	r2, [pc, #128]	@ (800357c <HAL_UART_MspInit+0x1e8>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003500:	4b20      	ldr	r3, [pc, #128]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 8003502:	4a21      	ldr	r2, [pc, #132]	@ (8003588 <HAL_UART_MspInit+0x1f4>)
 8003504:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003506:	4b1f      	ldr	r3, [pc, #124]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 8003508:	221a      	movs	r2, #26
 800350a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003512:	4b1c      	ldr	r3, [pc, #112]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 8003514:	2200      	movs	r2, #0
 8003516:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003518:	4b1a      	ldr	r3, [pc, #104]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 800351a:	2280      	movs	r2, #128	@ 0x80
 800351c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800351e:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 8003520:	2200      	movs	r2, #0
 8003522:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 8003526:	2200      	movs	r2, #0
 8003528:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800352a:	4b16      	ldr	r3, [pc, #88]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 800352c:	2200      	movs	r2, #0
 800352e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003530:	4b14      	ldr	r3, [pc, #80]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 8003532:	2200      	movs	r2, #0
 8003534:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003536:	4813      	ldr	r0, [pc, #76]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 8003538:	f000 fa58 	bl	80039ec <HAL_DMA_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8003542:	f7ff fdff 	bl	8003144 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a0e      	ldr	r2, [pc, #56]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 800354a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800354e:	4a0d      	ldr	r2, [pc, #52]	@ (8003584 <HAL_UART_MspInit+0x1f0>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003554:	2200      	movs	r2, #0
 8003556:	2100      	movs	r1, #0
 8003558:	2026      	movs	r0, #38	@ 0x26
 800355a:	f000 fa12 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800355e:	2026      	movs	r0, #38	@ 0x26
 8003560:	f000 fa29 	bl	80039b6 <HAL_NVIC_EnableIRQ>
}
 8003564:	bf00      	nop
 8003566:	3780      	adds	r7, #128	@ 0x80
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40004c00 	.word	0x40004c00
 8003570:	40021000 	.word	0x40021000
 8003574:	48000800 	.word	0x48000800
 8003578:	40004400 	.word	0x40004400
 800357c:	20000964 	.word	0x20000964
 8003580:	40020008 	.word	0x40020008
 8003584:	200009c4 	.word	0x200009c4
 8003588:	4002001c 	.word	0x4002001c

0800358c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <NMI_Handler+0x4>

08003594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <HardFault_Handler+0x4>

0800359c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <MemManage_Handler+0x4>

080035a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <BusFault_Handler+0x4>

080035ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b0:	bf00      	nop
 80035b2:	e7fd      	b.n	80035b0 <UsageFault_Handler+0x4>

080035b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c2:	b480      	push	{r7}
 80035c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035e2:	f000 f8d5 	bl	8003790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80035f0:	4802      	ldr	r0, [pc, #8]	@ (80035fc <DMA1_Channel1_IRQHandler+0x10>)
 80035f2:	f000 fbde 	bl	8003db2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000964 	.word	0x20000964

08003600 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003604:	4802      	ldr	r0, [pc, #8]	@ (8003610 <DMA1_Channel2_IRQHandler+0x10>)
 8003606:	f000 fbd4 	bl	8003db2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200009c4 	.word	0x200009c4

08003614 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003618:	4802      	ldr	r0, [pc, #8]	@ (8003624 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800361a:	f002 fc71 	bl	8005f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000700 	.word	0x20000700

08003628 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800362c:	4802      	ldr	r0, [pc, #8]	@ (8003638 <TIM4_IRQHandler+0x10>)
 800362e:	f002 fc67 	bl	8005f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000049c 	.word	0x2000049c

0800363c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003640:	4802      	ldr	r0, [pc, #8]	@ (800364c <USART2_IRQHandler+0x10>)
 8003642:	f004 fa65 	bl	8007b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000898 	.word	0x20000898

08003650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003654:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003658:	f000 feac 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}

08003660 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003664:	4802      	ldr	r0, [pc, #8]	@ (8003670 <TIM5_IRQHandler+0x10>)
 8003666:	f002 fc4b 	bl	8005f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000568 	.word	0x20000568

08003674 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <SystemInit+0x20>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <SystemInit+0x20>)
 8003680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003698:	480d      	ldr	r0, [pc, #52]	@ (80036d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800369a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800369c:	f7ff ffea 	bl	8003674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036a0:	480c      	ldr	r0, [pc, #48]	@ (80036d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80036a2:	490d      	ldr	r1, [pc, #52]	@ (80036d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036a4:	4a0d      	ldr	r2, [pc, #52]	@ (80036dc <LoopForever+0xe>)
  movs r3, #0
 80036a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80036a8:	e002      	b.n	80036b0 <LoopCopyDataInit>

080036aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ae:	3304      	adds	r3, #4

080036b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036b4:	d3f9      	bcc.n	80036aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036b6:	4a0a      	ldr	r2, [pc, #40]	@ (80036e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036b8:	4c0a      	ldr	r4, [pc, #40]	@ (80036e4 <LoopForever+0x16>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036bc:	e001      	b.n	80036c2 <LoopFillZerobss>

080036be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036c0:	3204      	adds	r2, #4

080036c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036c4:	d3fb      	bcc.n	80036be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036c6:	f005 ff39 	bl	800953c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036ca:	f7fe ffaf 	bl	800262c <main>

080036ce <LoopForever>:

LoopForever:
    b LoopForever
 80036ce:	e7fe      	b.n	80036ce <LoopForever>
  ldr   r0, =_estack
 80036d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036d8:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 80036dc:	08009620 	.word	0x08009620
  ldr r2, =_sbss
 80036e0:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80036e4:	2000116c 	.word	0x2000116c

080036e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036e8:	e7fe      	b.n	80036e8 <ADC1_2_IRQHandler>

080036ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f4:	2003      	movs	r0, #3
 80036f6:	f000 f939 	bl	800396c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036fa:	2000      	movs	r0, #0
 80036fc:	f000 f80e 	bl	800371c <HAL_InitTick>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	71fb      	strb	r3, [r7, #7]
 800370a:	e001      	b.n	8003710 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800370c:	f7ff fd20 	bl	8003150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003710:	79fb      	ldrb	r3, [r7, #7]

}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003728:	4b16      	ldr	r3, [pc, #88]	@ (8003784 <HAL_InitTick+0x68>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d022      	beq.n	8003776 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003730:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_InitTick+0x6c>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b13      	ldr	r3, [pc, #76]	@ (8003784 <HAL_InitTick+0x68>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800373c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f944 	bl	80039d2 <HAL_SYSTICK_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10f      	bne.n	8003770 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d809      	bhi.n	800376a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003756:	2200      	movs	r2, #0
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	f04f 30ff 	mov.w	r0, #4294967295
 800375e:	f000 f910 	bl	8003982 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003762:	4a0a      	ldr	r2, [pc, #40]	@ (800378c <HAL_InitTick+0x70>)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	e007      	b.n	800377a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e004      	b.n	800377a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	e001      	b.n	800377a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000238 	.word	0x20000238
 8003788:	20000230 	.word	0x20000230
 800378c:	20000234 	.word	0x20000234

08003790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003794:	4b05      	ldr	r3, [pc, #20]	@ (80037ac <HAL_IncTick+0x1c>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_IncTick+0x20>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4413      	add	r3, r2
 800379e:	4a03      	ldr	r2, [pc, #12]	@ (80037ac <HAL_IncTick+0x1c>)
 80037a0:	6013      	str	r3, [r2, #0]
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	20001168 	.word	0x20001168
 80037b0:	20000238 	.word	0x20000238

080037b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return uwTick;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <HAL_GetTick+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20001168 	.word	0x20001168

080037cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fe:	4a04      	ldr	r2, [pc, #16]	@ (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	60d3      	str	r3, [r2, #12]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b04      	ldr	r3, [pc, #16]	@ (800382c <__NVIC_GetPriorityGrouping+0x18>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 0307 	and.w	r3, r3, #7
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	db0b      	blt.n	800385a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4907      	ldr	r1, [pc, #28]	@ (8003868 <__NVIC_EnableIRQ+0x38>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2001      	movs	r0, #1
 8003852:	fa00 f202 	lsl.w	r2, r0, r2
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000e100 	.word	0xe000e100

0800386c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	2b00      	cmp	r3, #0
 800387e:	db0a      	blt.n	8003896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	490c      	ldr	r1, [pc, #48]	@ (80038b8 <__NVIC_SetPriority+0x4c>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	440b      	add	r3, r1
 8003890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003894:	e00a      	b.n	80038ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4908      	ldr	r1, [pc, #32]	@ (80038bc <__NVIC_SetPriority+0x50>)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3b04      	subs	r3, #4
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	440b      	add	r3, r1
 80038aa:	761a      	strb	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000e100 	.word	0xe000e100
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f1c3 0307 	rsb	r3, r3, #7
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf28      	it	cs
 80038de:	2304      	movcs	r3, #4
 80038e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d902      	bls.n	80038f0 <NVIC_EncodePriority+0x30>
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3b03      	subs	r3, #3
 80038ee:	e000      	b.n	80038f2 <NVIC_EncodePriority+0x32>
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	401a      	ands	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	43d9      	mvns	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	4313      	orrs	r3, r2
         );
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	@ 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003938:	d301      	bcc.n	800393e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393e:	4a0a      	ldr	r2, [pc, #40]	@ (8003968 <SysTick_Config+0x40>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003946:	210f      	movs	r1, #15
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	f7ff ff8e 	bl	800386c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003950:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <SysTick_Config+0x40>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003956:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <SysTick_Config+0x40>)
 8003958:	2207      	movs	r2, #7
 800395a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff29 	bl	80037cc <__NVIC_SetPriorityGrouping>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003990:	f7ff ff40 	bl	8003814 <__NVIC_GetPriorityGrouping>
 8003994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	6978      	ldr	r0, [r7, #20]
 800399c:	f7ff ff90 	bl	80038c0 <NVIC_EncodePriority>
 80039a0:	4602      	mov	r2, r0
 80039a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff ff5f 	bl	800386c <__NVIC_SetPriority>
}
 80039ae:	bf00      	nop
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	4603      	mov	r3, r0
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ff33 	bl	8003830 <__NVIC_EnableIRQ>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ffa4 	bl	8003928 <SysTick_Config>
 80039e0:	4603      	mov	r3, r0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e08d      	b.n	8003b1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b47      	ldr	r3, [pc, #284]	@ (8003b24 <HAL_DMA_Init+0x138>)
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d80f      	bhi.n	8003a2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b45      	ldr	r3, [pc, #276]	@ (8003b28 <HAL_DMA_Init+0x13c>)
 8003a12:	4413      	add	r3, r2
 8003a14:	4a45      	ldr	r2, [pc, #276]	@ (8003b2c <HAL_DMA_Init+0x140>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a42      	ldr	r2, [pc, #264]	@ (8003b30 <HAL_DMA_Init+0x144>)
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a28:	e00e      	b.n	8003a48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4b40      	ldr	r3, [pc, #256]	@ (8003b34 <HAL_DMA_Init+0x148>)
 8003a32:	4413      	add	r3, r2
 8003a34:	4a3d      	ldr	r2, [pc, #244]	@ (8003b2c <HAL_DMA_Init+0x140>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	009a      	lsls	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a3c      	ldr	r2, [pc, #240]	@ (8003b38 <HAL_DMA_Init+0x14c>)
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa76 	bl	8003f8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aa8:	d102      	bne.n	8003ab0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ac4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d010      	beq.n	8003af0 <HAL_DMA_Init+0x104>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d80c      	bhi.n	8003af0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa96 	bl	8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	e008      	b.n	8003b02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40020407 	.word	0x40020407
 8003b28:	bffdfff8 	.word	0xbffdfff8
 8003b2c:	cccccccd 	.word	0xcccccccd
 8003b30:	40020000 	.word	0x40020000
 8003b34:	bffdfbf8 	.word	0xbffdfbf8
 8003b38:	40020400 	.word	0x40020400

08003b3c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_DMA_Start_IT+0x20>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e066      	b.n	8003c2a <HAL_DMA_Start_IT+0xee>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d155      	bne.n	8003c1c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f9bb 	bl	8003f10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 020e 	orr.w	r2, r2, #14
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e00f      	b.n	8003bd4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0204 	bic.w	r2, r2, #4
 8003bc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 020a 	orr.w	r2, r2, #10
 8003bd2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e005      	b.n	8003c28 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
 8003c26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d005      	beq.n	8003c56 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
 8003c54:	e037      	b.n	8003cc6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 020e 	bic.w	r2, r2, #14
 8003c64:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c74:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0201 	bic.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	f003 021f 	and.w	r2, r3, #31
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f202 	lsl.w	r2, r1, r2
 8003c98:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ca2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cc4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d00d      	beq.n	8003d18 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2204      	movs	r2, #4
 8003d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
 8003d16:	e047      	b.n	8003da8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 020e 	bic.w	r2, r2, #14
 8003d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d64:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d86:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
    }
  }
  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d026      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x7a>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d021      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d107      	bne.n	8003e06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0204 	bic.w	r2, r2, #4
 8003e04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	f003 021f 	and.w	r2, r3, #31
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	2104      	movs	r1, #4
 8003e14:	fa01 f202 	lsl.w	r2, r1, r2
 8003e18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d071      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e2a:	e06c      	b.n	8003f06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2202      	movs	r2, #2
 8003e36:	409a      	lsls	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d02e      	beq.n	8003e9e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d029      	beq.n	8003e9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 020a 	bic.w	r2, r2, #10
 8003e66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d038      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e9c:	e033      	b.n	8003f06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02a      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d025      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 020e 	bic.w	r2, r2, #14
 8003eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	2101      	movs	r1, #1
 8003eda:	fa01 f202 	lsl.w	r2, r1, r2
 8003ede:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f06:	bf00      	nop
 8003f08:	bf00      	nop
}
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f003 021f 	and.w	r2, r3, #31
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	2101      	movs	r1, #1
 8003f48:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d108      	bne.n	8003f70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f6e:	e007      	b.n	8003f80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4b16      	ldr	r3, [pc, #88]	@ (8003ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d802      	bhi.n	8003fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003fa0:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e001      	b.n	8003faa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003fa6:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fa8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	3b08      	subs	r3, #8
 8003fb6:	4a12      	ldr	r2, [pc, #72]	@ (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	009a      	lsls	r2, r3, #2
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2201      	movs	r2, #1
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40020407 	.word	0x40020407
 8003ff8:	40020800 	.word	0x40020800
 8003ffc:	40020820 	.word	0x40020820
 8004000:	cccccccd 	.word	0xcccccccd
 8004004:	40020880 	.word	0x40020880

08004008 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	461a      	mov	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a08      	ldr	r2, [pc, #32]	@ (800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800402a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3b01      	subs	r3, #1
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2201      	movs	r2, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	1000823f 	.word	0x1000823f
 800404c:	40020940 	.word	0x40020940

08004050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800405e:	e15a      	b.n	8004316 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2101      	movs	r1, #1
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 814c 	beq.w	8004310 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d005      	beq.n	8004090 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800408c:	2b02      	cmp	r3, #2
 800408e:	d130      	bne.n	80040f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040c6:	2201      	movs	r2, #1
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 0201 	and.w	r2, r3, #1
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d017      	beq.n	800412e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	2203      	movs	r2, #3
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d123      	bne.n	8004182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	08da      	lsrs	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3208      	adds	r2, #8
 8004142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4013      	ands	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	08da      	lsrs	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3208      	adds	r2, #8
 800417c:	6939      	ldr	r1, [r7, #16]
 800417e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	2203      	movs	r2, #3
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4013      	ands	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0203 	and.w	r2, r3, #3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80a6 	beq.w	8004310 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004334 <HAL_GPIO_Init+0x2e4>)
 80041c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004334 <HAL_GPIO_Init+0x2e4>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80041d0:	4b58      	ldr	r3, [pc, #352]	@ (8004334 <HAL_GPIO_Init+0x2e4>)
 80041d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041dc:	4a56      	ldr	r2, [pc, #344]	@ (8004338 <HAL_GPIO_Init+0x2e8>)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	089b      	lsrs	r3, r3, #2
 80041e2:	3302      	adds	r3, #2
 80041e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	220f      	movs	r2, #15
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	43db      	mvns	r3, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004206:	d01f      	beq.n	8004248 <HAL_GPIO_Init+0x1f8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a4c      	ldr	r2, [pc, #304]	@ (800433c <HAL_GPIO_Init+0x2ec>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d019      	beq.n	8004244 <HAL_GPIO_Init+0x1f4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a4b      	ldr	r2, [pc, #300]	@ (8004340 <HAL_GPIO_Init+0x2f0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <HAL_GPIO_Init+0x1f0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a4a      	ldr	r2, [pc, #296]	@ (8004344 <HAL_GPIO_Init+0x2f4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00d      	beq.n	800423c <HAL_GPIO_Init+0x1ec>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a49      	ldr	r2, [pc, #292]	@ (8004348 <HAL_GPIO_Init+0x2f8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <HAL_GPIO_Init+0x1e8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a48      	ldr	r2, [pc, #288]	@ (800434c <HAL_GPIO_Init+0x2fc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_GPIO_Init+0x1e4>
 8004230:	2305      	movs	r3, #5
 8004232:	e00a      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004234:	2306      	movs	r3, #6
 8004236:	e008      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004238:	2304      	movs	r3, #4
 800423a:	e006      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 800423c:	2303      	movs	r3, #3
 800423e:	e004      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004240:	2302      	movs	r3, #2
 8004242:	e002      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004248:	2300      	movs	r3, #0
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	f002 0203 	and.w	r2, r2, #3
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	4093      	lsls	r3, r2
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800425a:	4937      	ldr	r1, [pc, #220]	@ (8004338 <HAL_GPIO_Init+0x2e8>)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	3302      	adds	r3, #2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004268:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <HAL_GPIO_Init+0x300>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	43db      	mvns	r3, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800428c:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <HAL_GPIO_Init+0x300>)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004292:	4b2f      	ldr	r3, [pc, #188]	@ (8004350 <HAL_GPIO_Init+0x300>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	43db      	mvns	r3, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042b6:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <HAL_GPIO_Init+0x300>)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042bc:	4b24      	ldr	r3, [pc, #144]	@ (8004350 <HAL_GPIO_Init+0x300>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4013      	ands	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HAL_GPIO_Init+0x300>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <HAL_GPIO_Init+0x300>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4013      	ands	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800430a:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <HAL_GPIO_Init+0x300>)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3301      	adds	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f ae9d 	bne.w	8004060 <HAL_GPIO_Init+0x10>
  }
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40021000 	.word	0x40021000
 8004338:	40010000 	.word	0x40010000
 800433c:	48000400 	.word	0x48000400
 8004340:	48000800 	.word	0x48000800
 8004344:	48000c00 	.word	0x48000c00
 8004348:	48001000 	.word	0x48001000
 800434c:	48001400 	.word	0x48001400
 8004350:	40010400 	.word	0x40010400

08004354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	887b      	ldrh	r3, [r7, #2]
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
 8004370:	e001      	b.n	8004376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004376:	7bfb      	ldrb	r3, [r7, #15]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
 8004390:	4613      	mov	r3, r2
 8004392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004394:	787b      	ldrb	r3, [r7, #1]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043a0:	e002      	b.n	80043a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043be:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d006      	beq.n	80043d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ca:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f806 	bl	80043e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40010400 	.word	0x40010400

080043e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d141      	bne.n	800448e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800440a:	4b4b      	ldr	r3, [pc, #300]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004416:	d131      	bne.n	800447c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004418:	4b47      	ldr	r3, [pc, #284]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800441e:	4a46      	ldr	r2, [pc, #280]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004424:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004428:	4b43      	ldr	r3, [pc, #268]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004430:	4a41      	ldr	r2, [pc, #260]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004436:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004438:	4b40      	ldr	r3, [pc, #256]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2232      	movs	r2, #50	@ 0x32
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	4a3f      	ldr	r2, [pc, #252]	@ (8004540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	0c9b      	lsrs	r3, r3, #18
 800444a:	3301      	adds	r3, #1
 800444c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800444e:	e002      	b.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3b01      	subs	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004456:	4b38      	ldr	r3, [pc, #224]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004462:	d102      	bne.n	800446a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f2      	bne.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800446a:	4b33      	ldr	r3, [pc, #204]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004476:	d158      	bne.n	800452a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e057      	b.n	800452c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800447c:	4b2e      	ldr	r3, [pc, #184]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004482:	4a2d      	ldr	r2, [pc, #180]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800448c:	e04d      	b.n	800452a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004494:	d141      	bne.n	800451a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004496:	4b28      	ldr	r3, [pc, #160]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a2:	d131      	bne.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044a4:	4b24      	ldr	r3, [pc, #144]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044aa:	4a23      	ldr	r2, [pc, #140]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044b4:	4b20      	ldr	r3, [pc, #128]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2232      	movs	r2, #50	@ 0x32
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	0c9b      	lsrs	r3, r3, #18
 80044d6:	3301      	adds	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044da:	e002      	b.n	80044e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044e2:	4b15      	ldr	r3, [pc, #84]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ee:	d102      	bne.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f2      	bne.n	80044dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044f6:	4b10      	ldr	r3, [pc, #64]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004502:	d112      	bne.n	800452a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e011      	b.n	800452c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004508:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800450e:	4a0a      	ldr	r2, [pc, #40]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004514:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004518:	e007      	b.n	800452a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800451a:	4b07      	ldr	r3, [pc, #28]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004522:	4a05      	ldr	r2, [pc, #20]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004524:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004528:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40007000 	.word	0x40007000
 800453c:	20000230 	.word	0x20000230
 8004540:	431bde83 	.word	0x431bde83

08004544 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004548:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a04      	ldr	r2, [pc, #16]	@ (8004560 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800454e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004552:	6093      	str	r3, [r2, #8]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40007000 	.word	0x40007000

08004564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e2fe      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d075      	beq.n	800466e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004582:	4b97      	ldr	r3, [pc, #604]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800458c:	4b94      	ldr	r3, [pc, #592]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d102      	bne.n	80045a2 <HAL_RCC_OscConfig+0x3e>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d002      	beq.n	80045a8 <HAL_RCC_OscConfig+0x44>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b8d      	ldr	r3, [pc, #564]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x108>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e2d9      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x74>
 80045ca:	4b85      	ldr	r3, [pc, #532]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a84      	ldr	r2, [pc, #528]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x98>
 80045e2:	4b7f      	ldr	r3, [pc, #508]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7e      	ldr	r2, [pc, #504]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b7c      	ldr	r3, [pc, #496]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7b      	ldr	r2, [pc, #492]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045fc:	4b78      	ldr	r3, [pc, #480]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a77      	ldr	r2, [pc, #476]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b75      	ldr	r3, [pc, #468]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a74      	ldr	r2, [pc, #464]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7ff f8ca 	bl	80037b4 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004624:	f7ff f8c6 	bl	80037b4 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e29e      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004636:	4b6a      	ldr	r3, [pc, #424]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xc0>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7ff f8b6 	bl	80037b4 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7ff f8b2 	bl	80037b4 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	@ 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e28a      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465e:	4b60      	ldr	r3, [pc, #384]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0xe8>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d075      	beq.n	8004766 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467a:	4b59      	ldr	r3, [pc, #356]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004684:	4b56      	ldr	r3, [pc, #344]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d102      	bne.n	800469a <HAL_RCC_OscConfig+0x136>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d002      	beq.n	80046a0 <HAL_RCC_OscConfig+0x13c>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d11f      	bne.n	80046e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a0:	4b4f      	ldr	r3, [pc, #316]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_OscConfig+0x154>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e25d      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b8:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	4946      	ldr	r1, [pc, #280]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046cc:	4b45      	ldr	r3, [pc, #276]	@ (80047e4 <HAL_RCC_OscConfig+0x280>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff f823 	bl	800371c <HAL_InitTick>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d043      	beq.n	8004764 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e249      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d023      	beq.n	8004730 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e8:	4b3d      	ldr	r3, [pc, #244]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3c      	ldr	r2, [pc, #240]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7ff f85e 	bl	80037b4 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fc:	f7ff f85a 	bl	80037b4 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e232      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800470e:	4b34      	ldr	r3, [pc, #208]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471a:	4b31      	ldr	r3, [pc, #196]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	061b      	lsls	r3, r3, #24
 8004728:	492d      	ldr	r1, [pc, #180]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
 800472e:	e01a      	b.n	8004766 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004730:	4b2b      	ldr	r3, [pc, #172]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2a      	ldr	r2, [pc, #168]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004736:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800473a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7ff f83a 	bl	80037b4 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004744:	f7ff f836 	bl	80037b4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e20e      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004756:	4b22      	ldr	r3, [pc, #136]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x1e0>
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004764:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d041      	beq.n	80047f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800477a:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800477c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004780:	4a17      	ldr	r2, [pc, #92]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478a:	f7ff f813 	bl	80037b4 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004792:	f7ff f80f 	bl	80037b4 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1e7      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a4:	4b0e      	ldr	r3, [pc, #56]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80047a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ef      	beq.n	8004792 <HAL_RCC_OscConfig+0x22e>
 80047b2:	e020      	b.n	80047f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b4:	4b0a      	ldr	r3, [pc, #40]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ba:	4a09      	ldr	r2, [pc, #36]	@ (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fe fff6 	bl	80037b4 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047ca:	e00d      	b.n	80047e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fe fff2 	bl	80037b4 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d906      	bls.n	80047e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e1ca      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000
 80047e4:	20000234 	.word	0x20000234
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e8:	4b8c      	ldr	r3, [pc, #560]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ea      	bne.n	80047cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80a6 	beq.w	8004950 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004808:	4b84      	ldr	r3, [pc, #528]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_OscConfig+0x2b4>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x2b6>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00d      	beq.n	800483a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	4a7e      	ldr	r2, [pc, #504]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004828:	6593      	str	r3, [r2, #88]	@ 0x58
 800482a:	4b7c      	ldr	r3, [pc, #496]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004836:	2301      	movs	r3, #1
 8004838:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483a:	4b79      	ldr	r3, [pc, #484]	@ (8004a20 <HAL_RCC_OscConfig+0x4bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d118      	bne.n	8004878 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004846:	4b76      	ldr	r3, [pc, #472]	@ (8004a20 <HAL_RCC_OscConfig+0x4bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a75      	ldr	r2, [pc, #468]	@ (8004a20 <HAL_RCC_OscConfig+0x4bc>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004852:	f7fe ffaf 	bl	80037b4 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fe ffab 	bl	80037b4 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e183      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800486c:	4b6c      	ldr	r3, [pc, #432]	@ (8004a20 <HAL_RCC_OscConfig+0x4bc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d108      	bne.n	8004892 <HAL_RCC_OscConfig+0x32e>
 8004880:	4b66      	ldr	r3, [pc, #408]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004886:	4a65      	ldr	r2, [pc, #404]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004890:	e024      	b.n	80048dc <HAL_RCC_OscConfig+0x378>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b05      	cmp	r3, #5
 8004898:	d110      	bne.n	80048bc <HAL_RCC_OscConfig+0x358>
 800489a:	4b60      	ldr	r3, [pc, #384]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a0:	4a5e      	ldr	r2, [pc, #376]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048aa:	4b5c      	ldr	r3, [pc, #368]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b0:	4a5a      	ldr	r2, [pc, #360]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048ba:	e00f      	b.n	80048dc <HAL_RCC_OscConfig+0x378>
 80048bc:	4b57      	ldr	r3, [pc, #348]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c2:	4a56      	ldr	r2, [pc, #344]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048cc:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	4a52      	ldr	r2, [pc, #328]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048d4:	f023 0304 	bic.w	r3, r3, #4
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d016      	beq.n	8004912 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fe ff66 	bl	80037b4 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fe ff62 	bl	80037b4 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e138      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004902:	4b46      	ldr	r3, [pc, #280]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ed      	beq.n	80048ec <HAL_RCC_OscConfig+0x388>
 8004910:	e015      	b.n	800493e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fe ff4f 	bl	80037b4 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fe ff4b 	bl	80037b4 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e121      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004930:	4b3a      	ldr	r3, [pc, #232]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1ed      	bne.n	800491a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d105      	bne.n	8004950 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004944:	4b35      	ldr	r3, [pc, #212]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	4a34      	ldr	r2, [pc, #208]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800494a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800494e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d03c      	beq.n	80049d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01c      	beq.n	800499e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004964:	4b2d      	ldr	r3, [pc, #180]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800496a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fe ff1e 	bl	80037b4 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800497c:	f7fe ff1a 	bl	80037b4 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e0f2      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800498e:	4b23      	ldr	r3, [pc, #140]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004990:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0ef      	beq.n	800497c <HAL_RCC_OscConfig+0x418>
 800499c:	e01b      	b.n	80049d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800499e:	4b1f      	ldr	r3, [pc, #124]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049a4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fe ff01 	bl	80037b4 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b6:	f7fe fefd 	bl	80037b4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0d5      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049c8:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ef      	bne.n	80049b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80c9 	beq.w	8004b72 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	f000 8083 	beq.w	8004af4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d15e      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f6:	4b09      	ldr	r3, [pc, #36]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a08      	ldr	r2, [pc, #32]	@ (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fe fed7 	bl	80037b4 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a08:	e00c      	b.n	8004a24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0a:	f7fe fed3 	bl	80037b4 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d905      	bls.n	8004a24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0ab      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a24:	4b55      	ldr	r3, [pc, #340]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ec      	bne.n	8004a0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a30:	4b52      	ldr	r3, [pc, #328]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	4b52      	ldr	r3, [pc, #328]	@ (8004b80 <HAL_RCC_OscConfig+0x61c>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6a11      	ldr	r1, [r2, #32]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a40:	3a01      	subs	r2, #1
 8004a42:	0112      	lsls	r2, r2, #4
 8004a44:	4311      	orrs	r1, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a4a:	0212      	lsls	r2, r2, #8
 8004a4c:	4311      	orrs	r1, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a52:	0852      	lsrs	r2, r2, #1
 8004a54:	3a01      	subs	r2, #1
 8004a56:	0552      	lsls	r2, r2, #21
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a5e:	0852      	lsrs	r2, r2, #1
 8004a60:	3a01      	subs	r2, #1
 8004a62:	0652      	lsls	r2, r2, #25
 8004a64:	4311      	orrs	r1, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a6a:	06d2      	lsls	r2, r2, #27
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	4943      	ldr	r1, [pc, #268]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b41      	ldr	r3, [pc, #260]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a40      	ldr	r2, [pc, #256]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a80:	4b3e      	ldr	r3, [pc, #248]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a3d      	ldr	r2, [pc, #244]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fe fe92 	bl	80037b4 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fe fe8e 	bl	80037b4 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e066      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b35      	ldr	r3, [pc, #212]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x530>
 8004ab2:	e05e      	b.n	8004b72 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab4:	4b31      	ldr	r3, [pc, #196]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a30      	ldr	r2, [pc, #192]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fe fe78 	bl	80037b4 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fe fe74 	bl	80037b4 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e04c      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ada:	4b28      	ldr	r3, [pc, #160]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ae6:	4b25      	ldr	r3, [pc, #148]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	4924      	ldr	r1, [pc, #144]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004aec:	4b25      	ldr	r3, [pc, #148]	@ (8004b84 <HAL_RCC_OscConfig+0x620>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	60cb      	str	r3, [r1, #12]
 8004af2:	e03e      	b.n	8004b72 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e039      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b00:	4b1e      	ldr	r3, [pc, #120]	@ (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 0203 	and.w	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d12c      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d123      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d11b      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d113      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	3b01      	subs	r3, #1
 8004b54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d109      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	3b01      	subs	r3, #1
 8004b68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	019f800c 	.word	0x019f800c
 8004b84:	feeefffc 	.word	0xfeeefffc

08004b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e11e      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b91      	ldr	r3, [pc, #580]	@ (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d910      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b8e      	ldr	r3, [pc, #568]	@ (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 020f 	bic.w	r2, r3, #15
 8004bb6:	498c      	ldr	r1, [pc, #560]	@ (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b8a      	ldr	r3, [pc, #552]	@ (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e106      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d073      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d129      	bne.n	8004c38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be4:	4b81      	ldr	r3, [pc, #516]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0f4      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bf4:	f000 f99e 	bl	8004f34 <RCC_GetSysClockFreqFromPLLSource>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4a7c      	ldr	r2, [pc, #496]	@ (8004df0 <HAL_RCC_ClockConfig+0x268>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d93f      	bls.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c02:	4b7a      	ldr	r3, [pc, #488]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d033      	beq.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d12f      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c22:	4b72      	ldr	r3, [pc, #456]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c2a:	4a70      	ldr	r2, [pc, #448]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	e024      	b.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d107      	bne.n	8004c50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c40:	4b6a      	ldr	r3, [pc, #424]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0c6      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c50:	4b66      	ldr	r3, [pc, #408]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0be      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c60:	f000 f8ce 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4a61      	ldr	r2, [pc, #388]	@ (8004df0 <HAL_RCC_ClockConfig+0x268>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d909      	bls.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c76:	4a5d      	ldr	r2, [pc, #372]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c7e:	2380      	movs	r3, #128	@ 0x80
 8004c80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c82:	4b5a      	ldr	r3, [pc, #360]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f023 0203 	bic.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4957      	ldr	r1, [pc, #348]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c94:	f7fe fd8e 	bl	80037b4 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9c:	f7fe fd8a 	bl	80037b4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e095      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 020c 	and.w	r2, r3, #12
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1eb      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d023      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cdc:	4b43      	ldr	r3, [pc, #268]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a42      	ldr	r2, [pc, #264]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004ce2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ce6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004cfc:	4a3b      	ldr	r2, [pc, #236]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004cfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d04:	4b39      	ldr	r3, [pc, #228]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4936      	ldr	r1, [pc, #216]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b80      	cmp	r3, #128	@ 0x80
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d1e:	4b33      	ldr	r3, [pc, #204]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	4a32      	ldr	r2, [pc, #200]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d21d      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d38:	4b2b      	ldr	r3, [pc, #172]	@ (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f023 020f 	bic.w	r2, r3, #15
 8004d40:	4929      	ldr	r1, [pc, #164]	@ (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d48:	f7fe fd34 	bl	80037b4 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d50:	f7fe fd30 	bl	80037b4 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e03b      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d1ed      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b1a      	ldr	r3, [pc, #104]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4917      	ldr	r1, [pc, #92]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9e:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490f      	ldr	r1, [pc, #60]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004db2:	f000 f825 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490c      	ldr	r1, [pc, #48]	@ (8004df4 <HAL_RCC_ClockConfig+0x26c>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	4a0a      	ldr	r2, [pc, #40]	@ (8004df8 <HAL_RCC_ClockConfig+0x270>)
 8004dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dfc <HAL_RCC_ClockConfig+0x274>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe fca0 	bl	800371c <HAL_InitTick>
 8004ddc:	4603      	mov	r3, r0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40022000 	.word	0x40022000
 8004dec:	40021000 	.word	0x40021000
 8004df0:	04c4b400 	.word	0x04c4b400
 8004df4:	080095d0 	.word	0x080095d0
 8004df8:	20000230 	.word	0x20000230
 8004dfc:	20000234 	.word	0x20000234

08004e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e06:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d102      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e12:	4b2a      	ldr	r3, [pc, #168]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	e047      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e18:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 030c 	and.w	r3, r3, #12
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d102      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e24:	4b26      	ldr	r3, [pc, #152]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e03e      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e2a:	4b23      	ldr	r3, [pc, #140]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	2b0c      	cmp	r3, #12
 8004e34:	d136      	bne.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e36:	4b20      	ldr	r3, [pc, #128]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e40:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d10c      	bne.n	8004e6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e54:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	4a16      	ldr	r2, [pc, #88]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e5e:	68d2      	ldr	r2, [r2, #12]
 8004e60:	0a12      	lsrs	r2, r2, #8
 8004e62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	617b      	str	r3, [r7, #20]
      break;
 8004e6c:	e00c      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e6e:	4a13      	ldr	r2, [pc, #76]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	4a10      	ldr	r2, [pc, #64]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e78:	68d2      	ldr	r2, [r2, #12]
 8004e7a:	0a12      	lsrs	r2, r2, #8
 8004e7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]
      break;
 8004e86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	0e5b      	lsrs	r3, r3, #25
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	3301      	adds	r3, #1
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e001      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ea8:	693b      	ldr	r3, [r7, #16]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	00f42400 	.word	0x00f42400
 8004ec0:	016e3600 	.word	0x016e3600

08004ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000230 	.word	0x20000230

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ee0:	f7ff fff0 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b06      	ldr	r3, [pc, #24]	@ (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4904      	ldr	r1, [pc, #16]	@ (8004f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	080095e0 	.word	0x080095e0

08004f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f0c:	f7ff ffda 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0adb      	lsrs	r3, r3, #11
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4904      	ldr	r1, [pc, #16]	@ (8004f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	080095e0 	.word	0x080095e0

08004f34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f44:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d10c      	bne.n	8004f72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f58:	4a17      	ldr	r2, [pc, #92]	@ (8004fb8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	4a14      	ldr	r2, [pc, #80]	@ (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f62:	68d2      	ldr	r2, [r2, #12]
 8004f64:	0a12      	lsrs	r2, r2, #8
 8004f66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	617b      	str	r3, [r7, #20]
    break;
 8004f70:	e00c      	b.n	8004f8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f72:	4a12      	ldr	r2, [pc, #72]	@ (8004fbc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f7c:	68d2      	ldr	r2, [r2, #12]
 8004f7e:	0a12      	lsrs	r2, r2, #8
 8004f80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
    break;
 8004f8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f8c:	4b09      	ldr	r3, [pc, #36]	@ (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	0e5b      	lsrs	r3, r3, #25
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	3301      	adds	r3, #1
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004fa6:	687b      	ldr	r3, [r7, #4]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	016e3600 	.word	0x016e3600
 8004fbc:	00f42400 	.word	0x00f42400

08004fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fcc:	2300      	movs	r3, #0
 8004fce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8098 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe2:	4b43      	ldr	r3, [pc, #268]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10d      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	4b40      	ldr	r3, [pc, #256]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005006:	2301      	movs	r3, #1
 8005008:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800500a:	4b3a      	ldr	r3, [pc, #232]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a39      	ldr	r2, [pc, #228]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005014:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005016:	f7fe fbcd 	bl	80037b4 <HAL_GetTick>
 800501a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800501c:	e009      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501e:	f7fe fbc9 	bl	80037b4 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d902      	bls.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	74fb      	strb	r3, [r7, #19]
        break;
 8005030:	e005      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005032:	4b30      	ldr	r3, [pc, #192]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0ef      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800503e:	7cfb      	ldrb	r3, [r7, #19]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d159      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005044:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01e      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	429a      	cmp	r2, r3
 800505e:	d019      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005060:	4b23      	ldr	r3, [pc, #140]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800506a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800506c:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	4a1f      	ldr	r2, [pc, #124]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	4a1b      	ldr	r2, [pc, #108]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800508c:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fe fb89 	bl	80037b4 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a4:	e00b      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fe fb85 	bl	80037b4 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d902      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	74fb      	strb	r3, [r7, #19]
            break;
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050be:	4b0c      	ldr	r3, [pc, #48]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ec      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d2:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e0:	4903      	ldr	r1, [pc, #12]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050e8:	e008      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	74bb      	strb	r3, [r7, #18]
 80050ee:	e005      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	7cfb      	ldrb	r3, [r7, #19]
 80050fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050fc:	7c7b      	ldrb	r3, [r7, #17]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005102:	4ba7      	ldr	r3, [pc, #668]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005106:	4aa6      	ldr	r2, [pc, #664]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800510c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800511a:	4ba1      	ldr	r3, [pc, #644]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005120:	f023 0203 	bic.w	r2, r3, #3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	499d      	ldr	r1, [pc, #628]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800513c:	4b98      	ldr	r3, [pc, #608]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005142:	f023 020c 	bic.w	r2, r3, #12
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4995      	ldr	r1, [pc, #596]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800515e:	4b90      	ldr	r3, [pc, #576]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	498c      	ldr	r1, [pc, #560]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005180:	4b87      	ldr	r3, [pc, #540]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005186:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	4984      	ldr	r1, [pc, #528]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051a2:	4b7f      	ldr	r3, [pc, #508]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	497b      	ldr	r1, [pc, #492]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051c4:	4b76      	ldr	r3, [pc, #472]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	4973      	ldr	r1, [pc, #460]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051e6:	4b6e      	ldr	r3, [pc, #440]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	496a      	ldr	r1, [pc, #424]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005208:	4b65      	ldr	r3, [pc, #404]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4962      	ldr	r1, [pc, #392]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800522a:	4b5d      	ldr	r3, [pc, #372]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005230:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005238:	4959      	ldr	r1, [pc, #356]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800524c:	4b54      	ldr	r3, [pc, #336]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	4951      	ldr	r1, [pc, #324]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800526e:	4b4c      	ldr	r3, [pc, #304]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	4948      	ldr	r1, [pc, #288]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005290:	4b43      	ldr	r3, [pc, #268]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529e:	4940      	ldr	r1, [pc, #256]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ae:	d105      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b0:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a3a      	ldr	r2, [pc, #232]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d015      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052c8:	4b35      	ldr	r3, [pc, #212]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d6:	4932      	ldr	r1, [pc, #200]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052e6:	d105      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e8:	4b2d      	ldr	r3, [pc, #180]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4a2c      	ldr	r2, [pc, #176]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d015      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005300:	4b27      	ldr	r3, [pc, #156]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005306:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530e:	4924      	ldr	r1, [pc, #144]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800531e:	d105      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005320:	4b1f      	ldr	r3, [pc, #124]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4a1e      	ldr	r2, [pc, #120]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800532a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d015      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005338:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005346:	4916      	ldr	r1, [pc, #88]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005356:	d105      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005358:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a10      	ldr	r2, [pc, #64]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005362:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d019      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005370:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005376:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	4908      	ldr	r1, [pc, #32]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800538e:	d109      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005390:	4b03      	ldr	r3, [pc, #12]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4a02      	ldr	r2, [pc, #8]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800539a:	60d3      	str	r3, [r2, #12]
 800539c:	e002      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d015      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053b0:	4b29      	ldr	r3, [pc, #164]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053be:	4926      	ldr	r1, [pc, #152]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ce:	d105      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053d0:	4b21      	ldr	r3, [pc, #132]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	4a20      	ldr	r2, [pc, #128]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d015      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80053e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f6:	4918      	ldr	r1, [pc, #96]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005406:	d105      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005408:	4b13      	ldr	r3, [pc, #76]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4a12      	ldr	r2, [pc, #72]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800540e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005412:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d015      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005420:	4b0d      	ldr	r3, [pc, #52]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005422:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005426:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542e:	490a      	ldr	r1, [pc, #40]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800543e:	d105      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005440:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4a04      	ldr	r2, [pc, #16]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800544a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800544c:	7cbb      	ldrb	r3, [r7, #18]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40021000 	.word	0x40021000

0800545c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e054      	b.n	8005518 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d111      	bne.n	800549e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 ff3a 	bl	80072fc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a23      	ldr	r2, [pc, #140]	@ (8005520 <HAL_TIM_Base_Init+0xc4>)
 8005494:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f001 fa83 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	08003219 	.word	0x08003219

08005524 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e04c      	b.n	80055d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a26      	ldr	r2, [pc, #152]	@ (80055e4 <HAL_TIM_Base_Start+0xc0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d022      	beq.n	8005594 <HAL_TIM_Base_Start+0x70>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005556:	d01d      	beq.n	8005594 <HAL_TIM_Base_Start+0x70>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a22      	ldr	r2, [pc, #136]	@ (80055e8 <HAL_TIM_Base_Start+0xc4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d018      	beq.n	8005594 <HAL_TIM_Base_Start+0x70>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a21      	ldr	r2, [pc, #132]	@ (80055ec <HAL_TIM_Base_Start+0xc8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <HAL_TIM_Base_Start+0x70>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1f      	ldr	r2, [pc, #124]	@ (80055f0 <HAL_TIM_Base_Start+0xcc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_TIM_Base_Start+0x70>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1e      	ldr	r2, [pc, #120]	@ (80055f4 <HAL_TIM_Base_Start+0xd0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_TIM_Base_Start+0x70>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1c      	ldr	r2, [pc, #112]	@ (80055f8 <HAL_TIM_Base_Start+0xd4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_TIM_Base_Start+0x70>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1b      	ldr	r2, [pc, #108]	@ (80055fc <HAL_TIM_Base_Start+0xd8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d115      	bne.n	80055c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	4b19      	ldr	r3, [pc, #100]	@ (8005600 <HAL_TIM_Base_Start+0xdc>)
 800559c:	4013      	ands	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b06      	cmp	r3, #6
 80055a4:	d015      	beq.n	80055d2 <HAL_TIM_Base_Start+0xae>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ac:	d011      	beq.n	80055d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055be:	e008      	b.n	80055d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	e000      	b.n	80055d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40013400 	.word	0x40013400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40015000 	.word	0x40015000
 8005600:	00010007 	.word	0x00010007

08005604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d001      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e054      	b.n	80056c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a26      	ldr	r2, [pc, #152]	@ (80056d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d022      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005646:	d01d      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a22      	ldr	r2, [pc, #136]	@ (80056d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d018      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a21      	ldr	r2, [pc, #132]	@ (80056dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1f      	ldr	r2, [pc, #124]	@ (80056e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00e      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1e      	ldr	r2, [pc, #120]	@ (80056e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d009      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1c      	ldr	r2, [pc, #112]	@ (80056e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x80>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1b      	ldr	r2, [pc, #108]	@ (80056ec <HAL_TIM_Base_Start_IT+0xe8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d115      	bne.n	80056b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	4b19      	ldr	r3, [pc, #100]	@ (80056f0 <HAL_TIM_Base_Start_IT+0xec>)
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b06      	cmp	r3, #6
 8005694:	d015      	beq.n	80056c2 <HAL_TIM_Base_Start_IT+0xbe>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800569c:	d011      	beq.n	80056c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	e008      	b.n	80056c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e000      	b.n	80056c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40015000 	.word	0x40015000
 80056f0:	00010007 	.word	0x00010007

080056f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e054      	b.n	80057b0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d111      	bne.n	8005736 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f001 fdee 	bl	80072fc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a23      	ldr	r2, [pc, #140]	@ (80057b8 <HAL_TIM_PWM_Init+0xc4>)
 800572c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3304      	adds	r3, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f001 f937 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	080057bd 	.word	0x080057bd

080057bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <HAL_TIM_PWM_Start_IT+0x28>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	e03c      	b.n	8005872 <HAL_TIM_PWM_Start_IT+0xa2>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d109      	bne.n	8005812 <HAL_TIM_PWM_Start_IT+0x42>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b01      	cmp	r3, #1
 8005808:	bf14      	ite	ne
 800580a:	2301      	movne	r3, #1
 800580c:	2300      	moveq	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	e02f      	b.n	8005872 <HAL_TIM_PWM_Start_IT+0xa2>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b08      	cmp	r3, #8
 8005816:	d109      	bne.n	800582c <HAL_TIM_PWM_Start_IT+0x5c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	e022      	b.n	8005872 <HAL_TIM_PWM_Start_IT+0xa2>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b0c      	cmp	r3, #12
 8005830:	d109      	bne.n	8005846 <HAL_TIM_PWM_Start_IT+0x76>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b01      	cmp	r3, #1
 800583c:	bf14      	ite	ne
 800583e:	2301      	movne	r3, #1
 8005840:	2300      	moveq	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	e015      	b.n	8005872 <HAL_TIM_PWM_Start_IT+0xa2>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b10      	cmp	r3, #16
 800584a:	d109      	bne.n	8005860 <HAL_TIM_PWM_Start_IT+0x90>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	bf14      	ite	ne
 8005858:	2301      	movne	r3, #1
 800585a:	2300      	moveq	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e008      	b.n	8005872 <HAL_TIM_PWM_Start_IT+0xa2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e0f1      	b.n	8005a5e <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <HAL_TIM_PWM_Start_IT+0xba>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005888:	e023      	b.n	80058d2 <HAL_TIM_PWM_Start_IT+0x102>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b04      	cmp	r3, #4
 800588e:	d104      	bne.n	800589a <HAL_TIM_PWM_Start_IT+0xca>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005898:	e01b      	b.n	80058d2 <HAL_TIM_PWM_Start_IT+0x102>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d104      	bne.n	80058aa <HAL_TIM_PWM_Start_IT+0xda>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a8:	e013      	b.n	80058d2 <HAL_TIM_PWM_Start_IT+0x102>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_PWM_Start_IT+0xea>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058b8:	e00b      	b.n	80058d2 <HAL_TIM_PWM_Start_IT+0x102>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d104      	bne.n	80058ca <HAL_TIM_PWM_Start_IT+0xfa>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058c8:	e003      	b.n	80058d2 <HAL_TIM_PWM_Start_IT+0x102>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b0c      	cmp	r3, #12
 80058d6:	d841      	bhi.n	800595c <HAL_TIM_PWM_Start_IT+0x18c>
 80058d8:	a201      	add	r2, pc, #4	@ (adr r2, 80058e0 <HAL_TIM_PWM_Start_IT+0x110>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005915 	.word	0x08005915
 80058e4:	0800595d 	.word	0x0800595d
 80058e8:	0800595d 	.word	0x0800595d
 80058ec:	0800595d 	.word	0x0800595d
 80058f0:	08005927 	.word	0x08005927
 80058f4:	0800595d 	.word	0x0800595d
 80058f8:	0800595d 	.word	0x0800595d
 80058fc:	0800595d 	.word	0x0800595d
 8005900:	08005939 	.word	0x08005939
 8005904:	0800595d 	.word	0x0800595d
 8005908:	0800595d 	.word	0x0800595d
 800590c:	0800595d 	.word	0x0800595d
 8005910:	0800594b 	.word	0x0800594b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0202 	orr.w	r2, r2, #2
 8005922:	60da      	str	r2, [r3, #12]
      break;
 8005924:	e01d      	b.n	8005962 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0204 	orr.w	r2, r2, #4
 8005934:	60da      	str	r2, [r3, #12]
      break;
 8005936:	e014      	b.n	8005962 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0208 	orr.w	r2, r2, #8
 8005946:	60da      	str	r2, [r3, #12]
      break;
 8005948:	e00b      	b.n	8005962 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0210 	orr.w	r2, r2, #16
 8005958:	60da      	str	r2, [r3, #12]
      break;
 800595a:	e002      	b.n	8005962 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
      break;
 8005960:	bf00      	nop
  }

  if (status == HAL_OK)
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d179      	bne.n	8005a5c <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2201      	movs	r2, #1
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f001 fc9d 	bl	80072b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a68 <HAL_TIM_PWM_Start_IT+0x298>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d018      	beq.n	80059b2 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a39      	ldr	r2, [pc, #228]	@ (8005a6c <HAL_TIM_PWM_Start_IT+0x29c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_TIM_PWM_Start_IT+0x1e2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a38      	ldr	r2, [pc, #224]	@ (8005a70 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a36      	ldr	r2, [pc, #216]	@ (8005a74 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_TIM_PWM_Start_IT+0x1e2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a35      	ldr	r2, [pc, #212]	@ (8005a78 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIM_PWM_Start_IT+0x1e2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a33      	ldr	r2, [pc, #204]	@ (8005a7c <HAL_TIM_PWM_Start_IT+0x2ac>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_PWM_Start_IT+0x1e6>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_TIM_PWM_Start_IT+0x1e8>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a25      	ldr	r2, [pc, #148]	@ (8005a68 <HAL_TIM_PWM_Start_IT+0x298>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d022      	beq.n	8005a1c <HAL_TIM_PWM_Start_IT+0x24c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059de:	d01d      	beq.n	8005a1c <HAL_TIM_PWM_Start_IT+0x24c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a26      	ldr	r2, [pc, #152]	@ (8005a80 <HAL_TIM_PWM_Start_IT+0x2b0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d018      	beq.n	8005a1c <HAL_TIM_PWM_Start_IT+0x24c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a25      	ldr	r2, [pc, #148]	@ (8005a84 <HAL_TIM_PWM_Start_IT+0x2b4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d013      	beq.n	8005a1c <HAL_TIM_PWM_Start_IT+0x24c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a23      	ldr	r2, [pc, #140]	@ (8005a88 <HAL_TIM_PWM_Start_IT+0x2b8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_PWM_Start_IT+0x24c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1a      	ldr	r2, [pc, #104]	@ (8005a6c <HAL_TIM_PWM_Start_IT+0x29c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIM_PWM_Start_IT+0x24c>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a18      	ldr	r2, [pc, #96]	@ (8005a70 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIM_PWM_Start_IT+0x24c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a19      	ldr	r2, [pc, #100]	@ (8005a7c <HAL_TIM_PWM_Start_IT+0x2ac>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d115      	bne.n	8005a48 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	4b1a      	ldr	r3, [pc, #104]	@ (8005a8c <HAL_TIM_PWM_Start_IT+0x2bc>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d015      	beq.n	8005a5a <HAL_TIM_PWM_Start_IT+0x28a>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a34:	d011      	beq.n	8005a5a <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0201 	orr.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a46:	e008      	b.n	8005a5a <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e000      	b.n	8005a5c <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40013400 	.word	0x40013400
 8005a70:	40014000 	.word	0x40014000
 8005a74:	40014400 	.word	0x40014400
 8005a78:	40014800 	.word	0x40014800
 8005a7c:	40015000 	.word	0x40015000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	00010007 	.word	0x00010007

08005a90 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e04c      	b.n	8005b3e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d111      	bne.n	8005ad4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 fc1f 	bl	80072fc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b48 <HAL_TIM_OnePulse_Init+0xb8>)
 8005aca:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	f000 ff68 	bl	80069bc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0208 	bic.w	r2, r2, #8
 8005afa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08005b4d 	.word	0x08005b4d

08005b4c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b88:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d108      	bne.n	8005ba2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b90:	7bbb      	ldrb	r3, [r7, #14]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d105      	bne.n	8005ba2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b96:	7b7b      	ldrb	r3, [r7, #13]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d102      	bne.n	8005ba2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b9c:	7b3b      	ldrb	r3, [r7, #12]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d001      	beq.n	8005ba6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e059      	b.n	8005c5a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0202 	orr.w	r2, r2, #2
 8005bd4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0204 	orr.w	r2, r2, #4
 8005be4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2201      	movs	r2, #1
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fb5e 	bl	80072b0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fb57 	bl	80072b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a17      	ldr	r2, [pc, #92]	@ (8005c64 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a15      	ldr	r2, [pc, #84]	@ (8005c68 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a14      	ldr	r2, [pc, #80]	@ (8005c6c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a12      	ldr	r2, [pc, #72]	@ (8005c70 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a11      	ldr	r2, [pc, #68]	@ (8005c74 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0f      	ldr	r2, [pc, #60]	@ (8005c78 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8005c42:	2300      	movs	r3, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40013400 	.word	0x40013400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800
 8005c78:	40015000 	.word	0x40015000

08005c7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0a2      	b.n	8005dd6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d111      	bne.n	8005cc0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fb29 	bl	80072fc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d102      	bne.n	8005cb8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8005de0 <HAL_TIM_Encoder_Init+0x164>)
 8005cb6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005cd6:	f023 0307 	bic.w	r3, r3, #7
 8005cda:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f000 fe68 	bl	80069bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d14:	f023 0303 	bic.w	r3, r3, #3
 8005d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	4313      	orrs	r3, r2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d32:	f023 030c 	bic.w	r3, r3, #12
 8005d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	011a      	lsls	r2, r3, #4
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	031b      	lsls	r3, r3, #12
 8005d62:	4313      	orrs	r3, r2
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d70:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d78:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	4313      	orrs	r3, r2
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	08003199 	.word	0x08003199

08005de4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005df4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005dfc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d110      	bne.n	8005e36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d102      	bne.n	8005e20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e1a:	7b7b      	ldrb	r3, [r7, #13]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d001      	beq.n	8005e24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e069      	b.n	8005ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e34:	e031      	b.n	8005e9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d110      	bne.n	8005e5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d102      	bne.n	8005e48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e42:	7b3b      	ldrb	r3, [r7, #12]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d001      	beq.n	8005e4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e055      	b.n	8005ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e5c:	e01d      	b.n	8005e9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d108      	bne.n	8005e76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e64:	7bbb      	ldrb	r3, [r7, #14]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d105      	bne.n	8005e76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e6a:	7b7b      	ldrb	r3, [r7, #13]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d102      	bne.n	8005e76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e70:	7b3b      	ldrb	r3, [r7, #12]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d001      	beq.n	8005e7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e03e      	b.n	8005ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_TIM_Encoder_Start+0xc4>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d008      	beq.n	8005eb8 <HAL_TIM_Encoder_Start+0xd4>
 8005ea6:	e00f      	b.n	8005ec8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2201      	movs	r2, #1
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 f9fd 	bl	80072b0 <TIM_CCxChannelCmd>
      break;
 8005eb6:	e016      	b.n	8005ee6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 f9f5 	bl	80072b0 <TIM_CCxChannelCmd>
      break;
 8005ec6:	e00e      	b.n	8005ee6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 f9ed 	bl	80072b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2201      	movs	r2, #1
 8005edc:	2104      	movs	r1, #4
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 f9e6 	bl	80072b0 <TIM_CCxChannelCmd>
      break;
 8005ee4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d026      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d021      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0202 	mvn.w	r2, #2
 8005f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
 8005f54:	e009      	b.n	8005f6a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d026      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d021      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0204 	mvn.w	r2, #4
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
 8005fac:	e009      	b.n	8005fc2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d026      	beq.n	8006020 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d021      	beq.n	8006020 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0208 	mvn.w	r2, #8
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2204      	movs	r2, #4
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d005      	beq.n	8006006 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
 8006004:	e009      	b.n	800601a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b00      	cmp	r3, #0
 8006028:	d026      	beq.n	8006078 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d021      	beq.n	8006078 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0210 	mvn.w	r2, #16
 800603c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2208      	movs	r2, #8
 8006042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	4798      	blx	r3
 800605c:	e009      	b.n	8006072 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00e      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0201 	mvn.w	r2, #1
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00e      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00e      	beq.n	80060fa <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d009      	beq.n	80060fa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00e      	beq.n	8006122 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d009      	beq.n	800614a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0220 	mvn.w	r2, #32
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00e      	beq.n	800619a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800618e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00e      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80061b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80061de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800620e:	2302      	movs	r3, #2
 8006210:	e0ff      	b.n	8006412 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b14      	cmp	r3, #20
 800621e:	f200 80f0 	bhi.w	8006402 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006222:	a201      	add	r2, pc, #4	@ (adr r2, 8006228 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	0800627d 	.word	0x0800627d
 800622c:	08006403 	.word	0x08006403
 8006230:	08006403 	.word	0x08006403
 8006234:	08006403 	.word	0x08006403
 8006238:	080062bd 	.word	0x080062bd
 800623c:	08006403 	.word	0x08006403
 8006240:	08006403 	.word	0x08006403
 8006244:	08006403 	.word	0x08006403
 8006248:	080062ff 	.word	0x080062ff
 800624c:	08006403 	.word	0x08006403
 8006250:	08006403 	.word	0x08006403
 8006254:	08006403 	.word	0x08006403
 8006258:	0800633f 	.word	0x0800633f
 800625c:	08006403 	.word	0x08006403
 8006260:	08006403 	.word	0x08006403
 8006264:	08006403 	.word	0x08006403
 8006268:	08006381 	.word	0x08006381
 800626c:	08006403 	.word	0x08006403
 8006270:	08006403 	.word	0x08006403
 8006274:	08006403 	.word	0x08006403
 8006278:	080063c1 	.word	0x080063c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fc4e 	bl	8006b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0208 	orr.w	r2, r2, #8
 8006296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0204 	bic.w	r2, r2, #4
 80062a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6999      	ldr	r1, [r3, #24]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	619a      	str	r2, [r3, #24]
      break;
 80062ba:	e0a5      	b.n	8006408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68b9      	ldr	r1, [r7, #8]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fcc8 	bl	8006c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6999      	ldr	r1, [r3, #24]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	021a      	lsls	r2, r3, #8
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	619a      	str	r2, [r3, #24]
      break;
 80062fc:	e084      	b.n	8006408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fd3b 	bl	8006d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0208 	orr.w	r2, r2, #8
 8006318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69da      	ldr	r2, [r3, #28]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0204 	bic.w	r2, r2, #4
 8006328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69d9      	ldr	r1, [r3, #28]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	61da      	str	r2, [r3, #28]
      break;
 800633c:	e064      	b.n	8006408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fdad 	bl	8006ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69d9      	ldr	r1, [r3, #28]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	021a      	lsls	r2, r3, #8
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	61da      	str	r2, [r3, #28]
      break;
 800637e:	e043      	b.n	8006408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fe20 	bl	8006fcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0208 	orr.w	r2, r2, #8
 800639a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0204 	bic.w	r2, r2, #4
 80063aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80063be:	e023      	b.n	8006408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fe6a 	bl	80070a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	021a      	lsls	r2, r3, #8
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006400:	e002      	b.n	8006408 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
      break;
 8006406:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop

0800641c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_TIM_ConfigClockSource+0x1c>
 8006434:	2302      	movs	r3, #2
 8006436:	e0f6      	b.n	8006626 <HAL_TIM_ConfigClockSource+0x20a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006456:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800645a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006462:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a6f      	ldr	r2, [pc, #444]	@ (8006630 <HAL_TIM_ConfigClockSource+0x214>)
 8006472:	4293      	cmp	r3, r2
 8006474:	f000 80c1 	beq.w	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 8006478:	4a6d      	ldr	r2, [pc, #436]	@ (8006630 <HAL_TIM_ConfigClockSource+0x214>)
 800647a:	4293      	cmp	r3, r2
 800647c:	f200 80c6 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 8006480:	4a6c      	ldr	r2, [pc, #432]	@ (8006634 <HAL_TIM_ConfigClockSource+0x218>)
 8006482:	4293      	cmp	r3, r2
 8006484:	f000 80b9 	beq.w	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 8006488:	4a6a      	ldr	r2, [pc, #424]	@ (8006634 <HAL_TIM_ConfigClockSource+0x218>)
 800648a:	4293      	cmp	r3, r2
 800648c:	f200 80be 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 8006490:	4a69      	ldr	r2, [pc, #420]	@ (8006638 <HAL_TIM_ConfigClockSource+0x21c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	f000 80b1 	beq.w	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 8006498:	4a67      	ldr	r2, [pc, #412]	@ (8006638 <HAL_TIM_ConfigClockSource+0x21c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	f200 80b6 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 80064a0:	4a66      	ldr	r2, [pc, #408]	@ (800663c <HAL_TIM_ConfigClockSource+0x220>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	f000 80a9 	beq.w	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 80064a8:	4a64      	ldr	r2, [pc, #400]	@ (800663c <HAL_TIM_ConfigClockSource+0x220>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	f200 80ae 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 80064b0:	4a63      	ldr	r2, [pc, #396]	@ (8006640 <HAL_TIM_ConfigClockSource+0x224>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	f000 80a1 	beq.w	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 80064b8:	4a61      	ldr	r2, [pc, #388]	@ (8006640 <HAL_TIM_ConfigClockSource+0x224>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	f200 80a6 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 80064c0:	4a60      	ldr	r2, [pc, #384]	@ (8006644 <HAL_TIM_ConfigClockSource+0x228>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	f000 8099 	beq.w	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 80064c8:	4a5e      	ldr	r2, [pc, #376]	@ (8006644 <HAL_TIM_ConfigClockSource+0x228>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	f200 809e 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 80064d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80064d4:	f000 8091 	beq.w	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 80064d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80064dc:	f200 8096 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 80064e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064e4:	f000 8089 	beq.w	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 80064e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ec:	f200 808e 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 80064f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f4:	d03e      	beq.n	8006574 <HAL_TIM_ConfigClockSource+0x158>
 80064f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064fa:	f200 8087 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 80064fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006502:	f000 8086 	beq.w	8006612 <HAL_TIM_ConfigClockSource+0x1f6>
 8006506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800650a:	d87f      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 800650c:	2b70      	cmp	r3, #112	@ 0x70
 800650e:	d01a      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x12a>
 8006510:	2b70      	cmp	r3, #112	@ 0x70
 8006512:	d87b      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 8006514:	2b60      	cmp	r3, #96	@ 0x60
 8006516:	d050      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x19e>
 8006518:	2b60      	cmp	r3, #96	@ 0x60
 800651a:	d877      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 800651c:	2b50      	cmp	r3, #80	@ 0x50
 800651e:	d03c      	beq.n	800659a <HAL_TIM_ConfigClockSource+0x17e>
 8006520:	2b50      	cmp	r3, #80	@ 0x50
 8006522:	d873      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 8006524:	2b40      	cmp	r3, #64	@ 0x40
 8006526:	d058      	beq.n	80065da <HAL_TIM_ConfigClockSource+0x1be>
 8006528:	2b40      	cmp	r3, #64	@ 0x40
 800652a:	d86f      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 800652c:	2b30      	cmp	r3, #48	@ 0x30
 800652e:	d064      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 8006530:	2b30      	cmp	r3, #48	@ 0x30
 8006532:	d86b      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 8006534:	2b20      	cmp	r3, #32
 8006536:	d060      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 8006538:	2b20      	cmp	r3, #32
 800653a:	d867      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x1f0>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d05c      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 8006540:	2b10      	cmp	r3, #16
 8006542:	d05a      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x1de>
 8006544:	e062      	b.n	800660c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006556:	f000 fe8b 	bl	8007270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006568:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	609a      	str	r2, [r3, #8]
      break;
 8006572:	e04f      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006584:	f000 fe74 	bl	8007270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006596:	609a      	str	r2, [r3, #8]
      break;
 8006598:	e03c      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a6:	461a      	mov	r2, r3
 80065a8:	f000 fde6 	bl	8007178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2150      	movs	r1, #80	@ 0x50
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fe3f 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 80065b8:	e02c      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c6:	461a      	mov	r2, r3
 80065c8:	f000 fe05 	bl	80071d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2160      	movs	r1, #96	@ 0x60
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fe2f 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 80065d8:	e01c      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e6:	461a      	mov	r2, r3
 80065e8:	f000 fdc6 	bl	8007178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2140      	movs	r1, #64	@ 0x40
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fe1f 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 80065f8:	e00c      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f000 fe16 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 800660a:	e003      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
      break;
 8006610:	e000      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006624:	7bfb      	ldrb	r3, [r7, #15]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	00100070 	.word	0x00100070
 8006634:	00100060 	.word	0x00100060
 8006638:	00100050 	.word	0x00100050
 800663c:	00100040 	.word	0x00100040
 8006640:	00100030 	.word	0x00100030
 8006644:	00100020 	.word	0x00100020

08006648 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	460b      	mov	r3, r1
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e14a      	b.n	80069ae <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	f040 80dd 	bne.w	80068e0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	2b1f      	cmp	r3, #31
 800672a:	f200 80d6 	bhi.w	80068da <HAL_TIM_RegisterCallback+0x1de>
 800672e:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <HAL_TIM_RegisterCallback+0x38>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	080067b5 	.word	0x080067b5
 8006738:	080067bd 	.word	0x080067bd
 800673c:	080067c5 	.word	0x080067c5
 8006740:	080067cd 	.word	0x080067cd
 8006744:	080067d5 	.word	0x080067d5
 8006748:	080067dd 	.word	0x080067dd
 800674c:	080067e5 	.word	0x080067e5
 8006750:	080067ed 	.word	0x080067ed
 8006754:	080067f5 	.word	0x080067f5
 8006758:	080067fd 	.word	0x080067fd
 800675c:	08006805 	.word	0x08006805
 8006760:	0800680d 	.word	0x0800680d
 8006764:	08006815 	.word	0x08006815
 8006768:	0800681d 	.word	0x0800681d
 800676c:	08006827 	.word	0x08006827
 8006770:	08006831 	.word	0x08006831
 8006774:	0800683b 	.word	0x0800683b
 8006778:	08006845 	.word	0x08006845
 800677c:	0800684f 	.word	0x0800684f
 8006780:	08006859 	.word	0x08006859
 8006784:	08006863 	.word	0x08006863
 8006788:	0800686d 	.word	0x0800686d
 800678c:	08006877 	.word	0x08006877
 8006790:	08006881 	.word	0x08006881
 8006794:	0800688b 	.word	0x0800688b
 8006798:	08006895 	.word	0x08006895
 800679c:	0800689f 	.word	0x0800689f
 80067a0:	080068a9 	.word	0x080068a9
 80067a4:	080068b3 	.word	0x080068b3
 80067a8:	080068bd 	.word	0x080068bd
 80067ac:	080068c7 	.word	0x080068c7
 80067b0:	080068d1 	.word	0x080068d1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80067ba:	e0f7      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80067c2:	e0f3      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80067ca:	e0ef      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80067d2:	e0eb      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80067da:	e0e7      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80067e2:	e0e3      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80067ea:	e0df      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80067f2:	e0db      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80067fa:	e0d7      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006802:	e0d3      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800680a:	e0cf      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006812:	e0cb      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800681a:	e0c7      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006824:	e0c2      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800682e:	e0bd      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006838:	e0b8      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8006842:	e0b3      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800684c:	e0ae      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006856:	e0a9      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006860:	e0a4      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800686a:	e09f      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006874:	e09a      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800687e:	e095      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006888:	e090      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8006892:	e08b      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800689c:	e086      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80068a6:	e081      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80068b0:	e07c      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80068ba:	e077      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80068c4:	e072      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80068ce:	e06d      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80068d8:	e068      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	75fb      	strb	r3, [r7, #23]
        break;
 80068de:	e065      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d15d      	bne.n	80069a8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80068ec:	7afb      	ldrb	r3, [r7, #11]
 80068ee:	2b0d      	cmp	r3, #13
 80068f0:	d857      	bhi.n	80069a2 <HAL_TIM_RegisterCallback+0x2a6>
 80068f2:	a201      	add	r2, pc, #4	@ (adr r2, 80068f8 <HAL_TIM_RegisterCallback+0x1fc>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	08006931 	.word	0x08006931
 80068fc:	08006939 	.word	0x08006939
 8006900:	08006941 	.word	0x08006941
 8006904:	08006949 	.word	0x08006949
 8006908:	08006951 	.word	0x08006951
 800690c:	08006959 	.word	0x08006959
 8006910:	08006961 	.word	0x08006961
 8006914:	08006969 	.word	0x08006969
 8006918:	08006971 	.word	0x08006971
 800691c:	08006979 	.word	0x08006979
 8006920:	08006981 	.word	0x08006981
 8006924:	08006989 	.word	0x08006989
 8006928:	08006991 	.word	0x08006991
 800692c:	08006999 	.word	0x08006999
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006936:	e039      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800693e:	e035      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006946:	e031      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800694e:	e02d      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006956:	e029      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800695e:	e025      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006966:	e021      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800696e:	e01d      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006976:	e019      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800697e:	e015      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006986:	e011      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800698e:	e00d      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006996:	e009      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80069a0:	e004      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
        break;
 80069a6:	e001      	b.n	80069ac <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop

080069bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006b00 <TIM_Base_SetConfig+0x144>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d017      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069da:	d013      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a49      	ldr	r2, [pc, #292]	@ (8006b04 <TIM_Base_SetConfig+0x148>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00f      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a48      	ldr	r2, [pc, #288]	@ (8006b08 <TIM_Base_SetConfig+0x14c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a47      	ldr	r2, [pc, #284]	@ (8006b0c <TIM_Base_SetConfig+0x150>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a46      	ldr	r2, [pc, #280]	@ (8006b10 <TIM_Base_SetConfig+0x154>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a45      	ldr	r2, [pc, #276]	@ (8006b14 <TIM_Base_SetConfig+0x158>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d108      	bne.n	8006a16 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a39      	ldr	r2, [pc, #228]	@ (8006b00 <TIM_Base_SetConfig+0x144>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d023      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a24:	d01f      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a36      	ldr	r2, [pc, #216]	@ (8006b04 <TIM_Base_SetConfig+0x148>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01b      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a35      	ldr	r2, [pc, #212]	@ (8006b08 <TIM_Base_SetConfig+0x14c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d017      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a34      	ldr	r2, [pc, #208]	@ (8006b0c <TIM_Base_SetConfig+0x150>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a33      	ldr	r2, [pc, #204]	@ (8006b10 <TIM_Base_SetConfig+0x154>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00f      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a33      	ldr	r2, [pc, #204]	@ (8006b18 <TIM_Base_SetConfig+0x15c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00b      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a32      	ldr	r2, [pc, #200]	@ (8006b1c <TIM_Base_SetConfig+0x160>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d007      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a31      	ldr	r2, [pc, #196]	@ (8006b20 <TIM_Base_SetConfig+0x164>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a2c      	ldr	r2, [pc, #176]	@ (8006b14 <TIM_Base_SetConfig+0x158>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d108      	bne.n	8006a78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a18      	ldr	r2, [pc, #96]	@ (8006b00 <TIM_Base_SetConfig+0x144>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d013      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b10 <TIM_Base_SetConfig+0x154>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00f      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a1a      	ldr	r2, [pc, #104]	@ (8006b18 <TIM_Base_SetConfig+0x15c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00b      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a19      	ldr	r2, [pc, #100]	@ (8006b1c <TIM_Base_SetConfig+0x160>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d007      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a18      	ldr	r2, [pc, #96]	@ (8006b20 <TIM_Base_SetConfig+0x164>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a13      	ldr	r2, [pc, #76]	@ (8006b14 <TIM_Base_SetConfig+0x158>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d103      	bne.n	8006ad4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d105      	bne.n	8006af2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f023 0201 	bic.w	r2, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	611a      	str	r2, [r3, #16]
  }
}
 8006af2:	bf00      	nop
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40012c00 	.word	0x40012c00
 8006b04:	40000400 	.word	0x40000400
 8006b08:	40000800 	.word	0x40000800
 8006b0c:	40000c00 	.word	0x40000c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40015000 	.word	0x40015000
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	40014400 	.word	0x40014400
 8006b20:	40014800 	.word	0x40014800

08006b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f023 0201 	bic.w	r2, r3, #1
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0303 	bic.w	r3, r3, #3
 8006b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 0302 	bic.w	r3, r3, #2
 8006b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a30      	ldr	r2, [pc, #192]	@ (8006c40 <TIM_OC1_SetConfig+0x11c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <TIM_OC1_SetConfig+0x88>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a2f      	ldr	r2, [pc, #188]	@ (8006c44 <TIM_OC1_SetConfig+0x120>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00f      	beq.n	8006bac <TIM_OC1_SetConfig+0x88>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a2e      	ldr	r2, [pc, #184]	@ (8006c48 <TIM_OC1_SetConfig+0x124>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00b      	beq.n	8006bac <TIM_OC1_SetConfig+0x88>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a2d      	ldr	r2, [pc, #180]	@ (8006c4c <TIM_OC1_SetConfig+0x128>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d007      	beq.n	8006bac <TIM_OC1_SetConfig+0x88>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8006c50 <TIM_OC1_SetConfig+0x12c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_OC1_SetConfig+0x88>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8006c54 <TIM_OC1_SetConfig+0x130>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d10c      	bne.n	8006bc6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f023 0308 	bic.w	r3, r3, #8
 8006bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f023 0304 	bic.w	r3, r3, #4
 8006bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c40 <TIM_OC1_SetConfig+0x11c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d013      	beq.n	8006bf6 <TIM_OC1_SetConfig+0xd2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c44 <TIM_OC1_SetConfig+0x120>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00f      	beq.n	8006bf6 <TIM_OC1_SetConfig+0xd2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c48 <TIM_OC1_SetConfig+0x124>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_OC1_SetConfig+0xd2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a1a      	ldr	r2, [pc, #104]	@ (8006c4c <TIM_OC1_SetConfig+0x128>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d007      	beq.n	8006bf6 <TIM_OC1_SetConfig+0xd2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a19      	ldr	r2, [pc, #100]	@ (8006c50 <TIM_OC1_SetConfig+0x12c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_OC1_SetConfig+0xd2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a18      	ldr	r2, [pc, #96]	@ (8006c54 <TIM_OC1_SetConfig+0x130>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d111      	bne.n	8006c1a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	621a      	str	r2, [r3, #32]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40014800 	.word	0x40014800
 8006c54:	40015000 	.word	0x40015000

08006c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f023 0210 	bic.w	r2, r3, #16
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f023 0320 	bic.w	r3, r3, #32
 8006ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d68 <TIM_OC2_SetConfig+0x110>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d007      	beq.n	8006ccc <TIM_OC2_SetConfig+0x74>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8006d6c <TIM_OC2_SetConfig+0x114>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d003      	beq.n	8006ccc <TIM_OC2_SetConfig+0x74>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8006d70 <TIM_OC2_SetConfig+0x118>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d10d      	bne.n	8006ce8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a1f      	ldr	r2, [pc, #124]	@ (8006d68 <TIM_OC2_SetConfig+0x110>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <TIM_OC2_SetConfig+0xc0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d6c <TIM_OC2_SetConfig+0x114>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00f      	beq.n	8006d18 <TIM_OC2_SetConfig+0xc0>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8006d74 <TIM_OC2_SetConfig+0x11c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00b      	beq.n	8006d18 <TIM_OC2_SetConfig+0xc0>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a1d      	ldr	r2, [pc, #116]	@ (8006d78 <TIM_OC2_SetConfig+0x120>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d007      	beq.n	8006d18 <TIM_OC2_SetConfig+0xc0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d7c <TIM_OC2_SetConfig+0x124>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <TIM_OC2_SetConfig+0xc0>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a17      	ldr	r2, [pc, #92]	@ (8006d70 <TIM_OC2_SetConfig+0x118>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d113      	bne.n	8006d40 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40013400 	.word	0x40013400
 8006d70:	40015000 	.word	0x40015000
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40014400 	.word	0x40014400
 8006d7c:	40014800 	.word	0x40014800

08006d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0303 	bic.w	r3, r3, #3
 8006dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8006e8c <TIM_OC3_SetConfig+0x10c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d007      	beq.n	8006df2 <TIM_OC3_SetConfig+0x72>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2a      	ldr	r2, [pc, #168]	@ (8006e90 <TIM_OC3_SetConfig+0x110>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d003      	beq.n	8006df2 <TIM_OC3_SetConfig+0x72>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a29      	ldr	r2, [pc, #164]	@ (8006e94 <TIM_OC3_SetConfig+0x114>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10d      	bne.n	8006e0e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a1e      	ldr	r2, [pc, #120]	@ (8006e8c <TIM_OC3_SetConfig+0x10c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d013      	beq.n	8006e3e <TIM_OC3_SetConfig+0xbe>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a1d      	ldr	r2, [pc, #116]	@ (8006e90 <TIM_OC3_SetConfig+0x110>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00f      	beq.n	8006e3e <TIM_OC3_SetConfig+0xbe>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a1d      	ldr	r2, [pc, #116]	@ (8006e98 <TIM_OC3_SetConfig+0x118>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00b      	beq.n	8006e3e <TIM_OC3_SetConfig+0xbe>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a1c      	ldr	r2, [pc, #112]	@ (8006e9c <TIM_OC3_SetConfig+0x11c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d007      	beq.n	8006e3e <TIM_OC3_SetConfig+0xbe>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea0 <TIM_OC3_SetConfig+0x120>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d003      	beq.n	8006e3e <TIM_OC3_SetConfig+0xbe>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a16      	ldr	r2, [pc, #88]	@ (8006e94 <TIM_OC3_SetConfig+0x114>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d113      	bne.n	8006e66 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	621a      	str	r2, [r3, #32]
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40013400 	.word	0x40013400
 8006e94:	40015000 	.word	0x40015000
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	40014400 	.word	0x40014400
 8006ea0:	40014800 	.word	0x40014800

08006ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	031b      	lsls	r3, r3, #12
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a2c      	ldr	r2, [pc, #176]	@ (8006fb4 <TIM_OC4_SetConfig+0x110>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d007      	beq.n	8006f18 <TIM_OC4_SetConfig+0x74>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006fb8 <TIM_OC4_SetConfig+0x114>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d003      	beq.n	8006f18 <TIM_OC4_SetConfig+0x74>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a2a      	ldr	r2, [pc, #168]	@ (8006fbc <TIM_OC4_SetConfig+0x118>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d10d      	bne.n	8006f34 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	031b      	lsls	r3, r3, #12
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb4 <TIM_OC4_SetConfig+0x110>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d013      	beq.n	8006f64 <TIM_OC4_SetConfig+0xc0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb8 <TIM_OC4_SetConfig+0x114>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00f      	beq.n	8006f64 <TIM_OC4_SetConfig+0xc0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a1e      	ldr	r2, [pc, #120]	@ (8006fc0 <TIM_OC4_SetConfig+0x11c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_OC4_SetConfig+0xc0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc4 <TIM_OC4_SetConfig+0x120>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_OC4_SetConfig+0xc0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc8 <TIM_OC4_SetConfig+0x124>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_OC4_SetConfig+0xc0>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a17      	ldr	r2, [pc, #92]	@ (8006fbc <TIM_OC4_SetConfig+0x118>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d113      	bne.n	8006f8c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	019b      	lsls	r3, r3, #6
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	019b      	lsls	r3, r3, #6
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	621a      	str	r2, [r3, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40012c00 	.word	0x40012c00
 8006fb8:	40013400 	.word	0x40013400
 8006fbc:	40015000 	.word	0x40015000
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800

08006fcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007010:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	041b      	lsls	r3, r3, #16
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a19      	ldr	r2, [pc, #100]	@ (8007088 <TIM_OC5_SetConfig+0xbc>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d013      	beq.n	800704e <TIM_OC5_SetConfig+0x82>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a18      	ldr	r2, [pc, #96]	@ (800708c <TIM_OC5_SetConfig+0xc0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d00f      	beq.n	800704e <TIM_OC5_SetConfig+0x82>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a17      	ldr	r2, [pc, #92]	@ (8007090 <TIM_OC5_SetConfig+0xc4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00b      	beq.n	800704e <TIM_OC5_SetConfig+0x82>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a16      	ldr	r2, [pc, #88]	@ (8007094 <TIM_OC5_SetConfig+0xc8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d007      	beq.n	800704e <TIM_OC5_SetConfig+0x82>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a15      	ldr	r2, [pc, #84]	@ (8007098 <TIM_OC5_SetConfig+0xcc>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d003      	beq.n	800704e <TIM_OC5_SetConfig+0x82>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a14      	ldr	r2, [pc, #80]	@ (800709c <TIM_OC5_SetConfig+0xd0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d109      	bne.n	8007062 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007054:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	621a      	str	r2, [r3, #32]
}
 800707c:	bf00      	nop
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	40012c00 	.word	0x40012c00
 800708c:	40013400 	.word	0x40013400
 8007090:	40014000 	.word	0x40014000
 8007094:	40014400 	.word	0x40014400
 8007098:	40014800 	.word	0x40014800
 800709c:	40015000 	.word	0x40015000

080070a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	021b      	lsls	r3, r3, #8
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	051b      	lsls	r3, r3, #20
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a1a      	ldr	r2, [pc, #104]	@ (8007160 <TIM_OC6_SetConfig+0xc0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d013      	beq.n	8007124 <TIM_OC6_SetConfig+0x84>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a19      	ldr	r2, [pc, #100]	@ (8007164 <TIM_OC6_SetConfig+0xc4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00f      	beq.n	8007124 <TIM_OC6_SetConfig+0x84>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a18      	ldr	r2, [pc, #96]	@ (8007168 <TIM_OC6_SetConfig+0xc8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00b      	beq.n	8007124 <TIM_OC6_SetConfig+0x84>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a17      	ldr	r2, [pc, #92]	@ (800716c <TIM_OC6_SetConfig+0xcc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d007      	beq.n	8007124 <TIM_OC6_SetConfig+0x84>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a16      	ldr	r2, [pc, #88]	@ (8007170 <TIM_OC6_SetConfig+0xd0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_OC6_SetConfig+0x84>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a15      	ldr	r2, [pc, #84]	@ (8007174 <TIM_OC6_SetConfig+0xd4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d109      	bne.n	8007138 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800712a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	029b      	lsls	r3, r3, #10
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40012c00 	.word	0x40012c00
 8007164:	40013400 	.word	0x40013400
 8007168:	40014000 	.word	0x40014000
 800716c:	40014400 	.word	0x40014400
 8007170:	40014800 	.word	0x40014800
 8007174:	40015000 	.word	0x40015000

08007178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f023 0201 	bic.w	r2, r3, #1
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f023 030a 	bic.w	r3, r3, #10
 80071b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b087      	sub	sp, #28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	f023 0210 	bic.w	r2, r3, #16
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	031b      	lsls	r3, r3, #12
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007212:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	621a      	str	r2, [r3, #32]
}
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800724c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	f043 0307 	orr.w	r3, r3, #7
 800725c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	609a      	str	r2, [r3, #8]
}
 8007264:	bf00      	nop
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800728a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	021a      	lsls	r2, r3, #8
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	431a      	orrs	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4313      	orrs	r3, r2
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	609a      	str	r2, [r3, #8]
}
 80072a4:	bf00      	nop
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	2201      	movs	r2, #1
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	43db      	mvns	r3, r3
 80072d2:	401a      	ands	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a1a      	ldr	r2, [r3, #32]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	fa01 f303 	lsl.w	r3, r1, r3
 80072e8:	431a      	orrs	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
	...

080072fc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a26      	ldr	r2, [pc, #152]	@ (80073a0 <TIM_ResetCallback+0xa4>)
 8007308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a25      	ldr	r2, [pc, #148]	@ (80073a4 <TIM_ResetCallback+0xa8>)
 8007310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a24      	ldr	r2, [pc, #144]	@ (80073a8 <TIM_ResetCallback+0xac>)
 8007318:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a23      	ldr	r2, [pc, #140]	@ (80073ac <TIM_ResetCallback+0xb0>)
 8007320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a22      	ldr	r2, [pc, #136]	@ (80073b0 <TIM_ResetCallback+0xb4>)
 8007328:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a21      	ldr	r2, [pc, #132]	@ (80073b4 <TIM_ResetCallback+0xb8>)
 8007330:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a20      	ldr	r2, [pc, #128]	@ (80073b8 <TIM_ResetCallback+0xbc>)
 8007338:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a1f      	ldr	r2, [pc, #124]	@ (80073bc <TIM_ResetCallback+0xc0>)
 8007340:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a1e      	ldr	r2, [pc, #120]	@ (80073c0 <TIM_ResetCallback+0xc4>)
 8007348:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a1d      	ldr	r2, [pc, #116]	@ (80073c4 <TIM_ResetCallback+0xc8>)
 8007350:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a1c      	ldr	r2, [pc, #112]	@ (80073c8 <TIM_ResetCallback+0xcc>)
 8007358:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a1b      	ldr	r2, [pc, #108]	@ (80073cc <TIM_ResetCallback+0xd0>)
 8007360:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a1a      	ldr	r2, [pc, #104]	@ (80073d0 <TIM_ResetCallback+0xd4>)
 8007368:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a19      	ldr	r2, [pc, #100]	@ (80073d4 <TIM_ResetCallback+0xd8>)
 8007370:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a18      	ldr	r2, [pc, #96]	@ (80073d8 <TIM_ResetCallback+0xdc>)
 8007378:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a17      	ldr	r2, [pc, #92]	@ (80073dc <TIM_ResetCallback+0xe0>)
 8007380:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a16      	ldr	r2, [pc, #88]	@ (80073e0 <TIM_ResetCallback+0xe4>)
 8007388:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a15      	ldr	r2, [pc, #84]	@ (80073e4 <TIM_ResetCallback+0xe8>)
 8007390:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	080030b1 	.word	0x080030b1
 80073a4:	08006649 	.word	0x08006649
 80073a8:	080066c1 	.word	0x080066c1
 80073ac:	080066d5 	.word	0x080066d5
 80073b0:	08006671 	.word	0x08006671
 80073b4:	08006685 	.word	0x08006685
 80073b8:	0800665d 	.word	0x0800665d
 80073bc:	08006699 	.word	0x08006699
 80073c0:	080066ad 	.word	0x080066ad
 80073c4:	080066e9 	.word	0x080066e9
 80073c8:	08007515 	.word	0x08007515
 80073cc:	08007529 	.word	0x08007529
 80073d0:	0800753d 	.word	0x0800753d
 80073d4:	08007551 	.word	0x08007551
 80073d8:	08007565 	.word	0x08007565
 80073dc:	08007579 	.word	0x08007579
 80073e0:	0800758d 	.word	0x0800758d
 80073e4:	080075a1 	.word	0x080075a1

080073e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e074      	b.n	80074ea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a34      	ldr	r2, [pc, #208]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a33      	ldr	r2, [pc, #204]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a31      	ldr	r2, [pc, #196]	@ (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d108      	bne.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007444:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a21      	ldr	r2, [pc, #132]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d022      	beq.n	80074be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007480:	d01d      	beq.n	80074be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1f      	ldr	r2, [pc, #124]	@ (8007504 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d018      	beq.n	80074be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1d      	ldr	r2, [pc, #116]	@ (8007508 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d013      	beq.n	80074be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1c      	ldr	r2, [pc, #112]	@ (800750c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00e      	beq.n	80074be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a15      	ldr	r2, [pc, #84]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d009      	beq.n	80074be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a18      	ldr	r2, [pc, #96]	@ (8007510 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d004      	beq.n	80074be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a11      	ldr	r2, [pc, #68]	@ (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d10c      	bne.n	80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40013400 	.word	0x40013400
 8007500:	40015000 	.word	0x40015000
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40000c00 	.word	0x40000c00
 8007510:	40014000 	.word	0x40014000

08007514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e050      	b.n	8007668 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d114      	bne.n	80075fa <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fe8d 	bl	80082f8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a21      	ldr	r2, [pc, #132]	@ (8007670 <HAL_UART_Init+0xbc>)
 80075ec:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2224      	movs	r2, #36	@ 0x24
 80075fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f9ba 	bl	8008994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 febb 	bl	800839c <UART_SetConfig>
 8007626:	4603      	mov	r3, r0
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e01b      	b.n	8007668 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800763e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800764e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0201 	orr.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 fa39 	bl	8008ad8 <UART_CheckIdleState>
 8007666:	4603      	mov	r3, r0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	08003395 	.word	0x08003395

08007674 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	460b      	mov	r3, r1
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007692:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e09c      	b.n	80077da <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d16c      	bne.n	8007784 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80076aa:	7afb      	ldrb	r3, [r7, #11]
 80076ac:	2b0c      	cmp	r3, #12
 80076ae:	d85e      	bhi.n	800776e <HAL_UART_RegisterCallback+0xfa>
 80076b0:	a201      	add	r2, pc, #4	@ (adr r2, 80076b8 <HAL_UART_RegisterCallback+0x44>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076ed 	.word	0x080076ed
 80076bc:	080076f7 	.word	0x080076f7
 80076c0:	08007701 	.word	0x08007701
 80076c4:	0800770b 	.word	0x0800770b
 80076c8:	08007715 	.word	0x08007715
 80076cc:	0800771f 	.word	0x0800771f
 80076d0:	08007729 	.word	0x08007729
 80076d4:	08007733 	.word	0x08007733
 80076d8:	0800773d 	.word	0x0800773d
 80076dc:	08007747 	.word	0x08007747
 80076e0:	08007751 	.word	0x08007751
 80076e4:	0800775b 	.word	0x0800775b
 80076e8:	08007765 	.word	0x08007765
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80076f4:	e070      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80076fe:	e06b      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007708:	e066      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007712:	e061      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800771c:	e05c      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007726:	e057      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007730:	e052      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800773a:	e04d      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007744:	e048      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800774e:	e043      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007758:	e03e      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007762:	e039      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800776c:	e034      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007774:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	75fb      	strb	r3, [r7, #23]
        break;
 8007782:	e029      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778a:	2b00      	cmp	r3, #0
 800778c:	d11a      	bne.n	80077c4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	2b0b      	cmp	r3, #11
 8007792:	d002      	beq.n	800779a <HAL_UART_RegisterCallback+0x126>
 8007794:	2b0c      	cmp	r3, #12
 8007796:	d005      	beq.n	80077a4 <HAL_UART_RegisterCallback+0x130>
 8007798:	e009      	b.n	80077ae <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80077a2:	e019      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80077ac:	e014      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]
        break;
 80077c2:	e009      	b.n	80077d8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop

080077e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	@ 0x28
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	4613      	mov	r3, r2
 80077f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077fe:	2b20      	cmp	r3, #32
 8007800:	f040 80b5 	bne.w	800796e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_UART_Receive+0x28>
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e0ad      	b.n	8007970 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2222      	movs	r2, #34	@ 0x22
 8007820:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800782a:	f7fb ffc3 	bl	80037b4 <HAL_GetTick>
 800782e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	88fa      	ldrh	r2, [r7, #6]
 8007834:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007848:	d10e      	bne.n	8007868 <HAL_UART_Receive+0x80>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <HAL_UART_Receive+0x76>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800785c:	e02d      	b.n	80078ba <HAL_UART_Receive+0xd2>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	22ff      	movs	r2, #255	@ 0xff
 8007862:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007866:	e028      	b.n	80078ba <HAL_UART_Receive+0xd2>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10d      	bne.n	800788c <HAL_UART_Receive+0xa4>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <HAL_UART_Receive+0x9a>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	22ff      	movs	r2, #255	@ 0xff
 800787c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007880:	e01b      	b.n	80078ba <HAL_UART_Receive+0xd2>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	227f      	movs	r2, #127	@ 0x7f
 8007886:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800788a:	e016      	b.n	80078ba <HAL_UART_Receive+0xd2>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007894:	d10d      	bne.n	80078b2 <HAL_UART_Receive+0xca>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d104      	bne.n	80078a8 <HAL_UART_Receive+0xc0>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	227f      	movs	r2, #127	@ 0x7f
 80078a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078a6:	e008      	b.n	80078ba <HAL_UART_Receive+0xd2>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	223f      	movs	r2, #63	@ 0x3f
 80078ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078b0:	e003      	b.n	80078ba <HAL_UART_Receive+0xd2>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078c0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ca:	d108      	bne.n	80078de <HAL_UART_Receive+0xf6>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	61bb      	str	r3, [r7, #24]
 80078dc:	e003      	b.n	80078e6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80078e6:	e036      	b.n	8007956 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2200      	movs	r2, #0
 80078f0:	2120      	movs	r1, #32
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f001 f99a 	bl	8008c2c <UART_WaitOnFlagUntilTimeout>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2220      	movs	r2, #32
 8007902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e032      	b.n	8007970 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10c      	bne.n	800792a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007916:	b29a      	uxth	r2, r3
 8007918:	8a7b      	ldrh	r3, [r7, #18]
 800791a:	4013      	ands	r3, r2
 800791c:	b29a      	uxth	r2, r3
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	3302      	adds	r3, #2
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	e00c      	b.n	8007944 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	b2da      	uxtb	r2, r3
 8007932:	8a7b      	ldrh	r3, [r7, #18]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	4013      	ands	r3, r2
 8007938:	b2da      	uxtb	r2, r3
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	3301      	adds	r3, #1
 8007942:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1c2      	bne.n	80078e8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	e000      	b.n	8007970 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800796e:	2302      	movs	r3, #2
  }
}
 8007970:	4618      	mov	r0, r3
 8007972:	3720      	adds	r7, #32
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08a      	sub	sp, #40	@ 0x28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800798c:	2b20      	cmp	r3, #32
 800798e:	d167      	bne.n	8007a60 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_UART_Transmit_DMA+0x24>
 8007996:	88fb      	ldrh	r3, [r7, #6]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e060      	b.n	8007a62 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2221      	movs	r2, #33	@ 0x21
 80079c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d028      	beq.n	8007a20 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079d2:	4a26      	ldr	r2, [pc, #152]	@ (8007a6c <HAL_UART_Transmit_DMA+0xf4>)
 80079d4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079da:	4a25      	ldr	r2, [pc, #148]	@ (8007a70 <HAL_UART_Transmit_DMA+0xf8>)
 80079dc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079e2:	4a24      	ldr	r2, [pc, #144]	@ (8007a74 <HAL_UART_Transmit_DMA+0xfc>)
 80079e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079ea:	2200      	movs	r2, #0
 80079ec:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f6:	4619      	mov	r1, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3328      	adds	r3, #40	@ 0x28
 80079fe:	461a      	mov	r2, r3
 8007a00:	88fb      	ldrh	r3, [r7, #6]
 8007a02:	f7fc f89b 	bl	8003b3c <HAL_DMA_Start_IT>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d009      	beq.n	8007a20 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2210      	movs	r2, #16
 8007a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e020      	b.n	8007a62 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2240      	movs	r2, #64	@ 0x40
 8007a26:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	613b      	str	r3, [r7, #16]
   return(result);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3308      	adds	r3, #8
 8007a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a48:	623a      	str	r2, [r7, #32]
 8007a4a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	69f9      	ldr	r1, [r7, #28]
 8007a4e:	6a3a      	ldr	r2, [r7, #32]
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e5      	bne.n	8007a28 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e000      	b.n	8007a62 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007a60:	2302      	movs	r3, #2
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3728      	adds	r7, #40	@ 0x28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	08008fa3 	.word	0x08008fa3
 8007a70:	08009041 	.word	0x08009041
 8007a74:	080091db 	.word	0x080091db

08007a78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08a      	sub	sp, #40	@ 0x28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d137      	bne.n	8007b00 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_UART_Receive_DMA+0x24>
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e030      	b.n	8007b02 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a18      	ldr	r2, [pc, #96]	@ (8007b0c <HAL_UART_Receive_DMA+0x94>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d01f      	beq.n	8007af0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d018      	beq.n	8007af0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	613b      	str	r3, [r7, #16]
   return(result);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	623b      	str	r3, [r7, #32]
 8007ade:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	69f9      	ldr	r1, [r7, #28]
 8007ae2:	6a3a      	ldr	r2, [r7, #32]
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e6      	bne.n	8007abe <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	461a      	mov	r2, r3
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f001 f906 	bl	8008d08 <UART_Start_Receive_DMA>
 8007afc:	4603      	mov	r3, r0
 8007afe:	e000      	b.n	8007b02 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
  }
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3728      	adds	r7, #40	@ 0x28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40008000 	.word	0x40008000

08007b10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b0ba      	sub	sp, #232	@ 0xe8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007b3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007b3e:	4013      	ands	r3, r2
 8007b40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d11b      	bne.n	8007b84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d015      	beq.n	8007b84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 82f3 	beq.w	8008160 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
      }
      return;
 8007b82:	e2ed      	b.n	8008160 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8129 	beq.w	8007de0 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b92:	4b90      	ldr	r3, [pc, #576]	@ (8007dd4 <HAL_UART_IRQHandler+0x2c4>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b9e:	4b8e      	ldr	r3, [pc, #568]	@ (8007dd8 <HAL_UART_IRQHandler+0x2c8>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 811c 	beq.w	8007de0 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d011      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xc8>
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bce:	f043 0201 	orr.w	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d011      	beq.n	8007c08 <HAL_UART_IRQHandler+0xf8>
 8007be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bfe:	f043 0204 	orr.w	r2, r3, #4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d011      	beq.n	8007c38 <HAL_UART_IRQHandler+0x128>
 8007c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2204      	movs	r2, #4
 8007c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2e:	f043 0202 	orr.w	r2, r3, #2
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d017      	beq.n	8007c74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d105      	bne.n	8007c5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c54:	4b5f      	ldr	r3, [pc, #380]	@ (8007dd4 <HAL_UART_IRQHandler+0x2c4>)
 8007c56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2208      	movs	r2, #8
 8007c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6a:	f043 0208 	orr.w	r2, r3, #8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d012      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x196>
 8007c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00c      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c9c:	f043 0220 	orr.w	r2, r3, #32
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8259 	beq.w	8008164 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d013      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cfa:	2b40      	cmp	r3, #64	@ 0x40
 8007cfc:	d005      	beq.n	8007d0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d058      	beq.n	8007dbc <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 f8e3 	bl	8008ed6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1a:	2b40      	cmp	r3, #64	@ 0x40
 8007d1c:	d148      	bne.n	8007db0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3308      	adds	r3, #8
 8007d24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1d9      	bne.n	8007d1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d017      	beq.n	8007da4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d7a:	4a18      	ldr	r2, [pc, #96]	@ (8007ddc <HAL_UART_IRQHandler+0x2cc>)
 8007d7c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fb ffad 	bl	8003ce4 <HAL_DMA_Abort_IT>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01f      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d9e:	4610      	mov	r0, r2
 8007da0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da2:	e015      	b.n	8007dd0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dae:	e00f      	b.n	8007dd0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dba:	e009      	b.n	8007dd0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007dce:	e1c9      	b.n	8008164 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd0:	bf00      	nop
    return;
 8007dd2:	e1c7      	b.n	8008164 <HAL_UART_IRQHandler+0x654>
 8007dd4:	10000001 	.word	0x10000001
 8007dd8:	04000120 	.word	0x04000120
 8007ddc:	0800925f 	.word	0x0800925f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	f040 8157 	bne.w	8008098 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 8150 	beq.w	8008098 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfc:	f003 0310 	and.w	r3, r3, #16
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8149 	beq.w	8008098 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e18:	2b40      	cmp	r3, #64	@ 0x40
 8007e1a:	f040 80bd 	bne.w	8007f98 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8199 	beq.w	8008168 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e40:	429a      	cmp	r2, r3
 8007e42:	f080 8191 	bcs.w	8008168 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f040 8087 	bne.w	8007f72 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e92:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1da      	bne.n	8007e64 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ebe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ed2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ee4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e1      	bne.n	8007eae <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e3      	bne.n	8007eea <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f40:	f023 0310 	bic.w	r3, r3, #16
 8007f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e4      	bne.n	8007f30 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fb fe60 	bl	8003c32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8007f8a:	b292      	uxth	r2, r2
 8007f8c:	1a8a      	subs	r2, r1, r2
 8007f8e:	b292      	uxth	r2, r2
 8007f90:	4611      	mov	r1, r2
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f96:	e0e7      	b.n	8008168 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80d9 	beq.w	800816c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8007fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 80d4 	beq.w	800816c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fe8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e4      	bne.n	8007fc4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3308      	adds	r3, #8
 8008000:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	623b      	str	r3, [r7, #32]
   return(result);
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008010:	f023 0301 	bic.w	r3, r3, #1
 8008014:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008022:	633a      	str	r2, [r7, #48]	@ 0x30
 8008024:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e1      	bne.n	8007ffa <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	60fb      	str	r3, [r7, #12]
   return(result);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0310 	bic.w	r3, r3, #16
 800805e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	69b9      	ldr	r1, [r7, #24]
 8008072:	69fa      	ldr	r2, [r7, #28]
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	617b      	str	r3, [r7, #20]
   return(result);
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e4      	bne.n	800804a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800808c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008090:	4611      	mov	r1, r2
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008096:	e069      	b.n	800816c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800809c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d010      	beq.n	80080c6 <HAL_UART_IRQHandler+0x5b6>
 80080a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80080b8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080c4:	e055      	b.n	8008172 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d014      	beq.n	80080fc <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d105      	bne.n	80080ea <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d008      	beq.n	80080fc <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d03e      	beq.n	8008170 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
    }
    return;
 80080fa:	e039      	b.n	8008170 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	d009      	beq.n	800811c <HAL_UART_IRQHandler+0x60c>
 8008108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800810c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 f8ba 	bl	800928e <UART_EndTransmit_IT>
    return;
 800811a:	e02a      	b.n	8008172 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800811c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <HAL_UART_IRQHandler+0x630>
 8008128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800812c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800813e:	e018      	b.n	8008172 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d012      	beq.n	8008172 <HAL_UART_IRQHandler+0x662>
 800814c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008150:	2b00      	cmp	r3, #0
 8008152:	da0e      	bge.n	8008172 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800815e:	e008      	b.n	8008172 <HAL_UART_IRQHandler+0x662>
      return;
 8008160:	bf00      	nop
 8008162:	e006      	b.n	8008172 <HAL_UART_IRQHandler+0x662>
    return;
 8008164:	bf00      	nop
 8008166:	e004      	b.n	8008172 <HAL_UART_IRQHandler+0x662>
      return;
 8008168:	bf00      	nop
 800816a:	e002      	b.n	8008172 <HAL_UART_IRQHandler+0x662>
      return;
 800816c:	bf00      	nop
 800816e:	e000      	b.n	8008172 <HAL_UART_IRQHandler+0x662>
    return;
 8008170:	bf00      	nop
  }
}
 8008172:	37e8      	adds	r7, #232	@ 0xe8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a09      	ldr	r2, [pc, #36]	@ (8008264 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d009      	beq.n	8008258 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	615a      	str	r2, [r3, #20]
  }
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40008000 	.word	0x40008000

08008268 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a18      	ldr	r2, [pc, #96]	@ (80082d8 <HAL_UART_EnableReceiverTimeout+0x70>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d027      	beq.n	80082ca <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008280:	2b20      	cmp	r3, #32
 8008282:	d120      	bne.n	80082c6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800828a:	2b01      	cmp	r3, #1
 800828c:	d101      	bne.n	8008292 <HAL_UART_EnableReceiverTimeout+0x2a>
 800828e:	2302      	movs	r3, #2
 8008290:	e01c      	b.n	80082cc <HAL_UART_EnableReceiverTimeout+0x64>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2224      	movs	r2, #36	@ 0x24
 800829e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80082b0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e002      	b.n	80082cc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80082c6:	2302      	movs	r3, #2
 80082c8:	e000      	b.n	80082cc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
  }
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	40008000 	.word	0x40008000

080082dc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
	...

080082f8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a1a      	ldr	r2, [pc, #104]	@ (800836c <UART_InitCallbacksToDefault+0x74>)
 8008304:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a19      	ldr	r2, [pc, #100]	@ (8008370 <UART_InitCallbacksToDefault+0x78>)
 800830c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a18      	ldr	r2, [pc, #96]	@ (8008374 <UART_InitCallbacksToDefault+0x7c>)
 8008314:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a17      	ldr	r2, [pc, #92]	@ (8008378 <UART_InitCallbacksToDefault+0x80>)
 800831c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a16      	ldr	r2, [pc, #88]	@ (800837c <UART_InitCallbacksToDefault+0x84>)
 8008324:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a15      	ldr	r2, [pc, #84]	@ (8008380 <UART_InitCallbacksToDefault+0x88>)
 800832c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a14      	ldr	r2, [pc, #80]	@ (8008384 <UART_InitCallbacksToDefault+0x8c>)
 8008334:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a13      	ldr	r2, [pc, #76]	@ (8008388 <UART_InitCallbacksToDefault+0x90>)
 800833c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a12      	ldr	r2, [pc, #72]	@ (800838c <UART_InitCallbacksToDefault+0x94>)
 8008344:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a11      	ldr	r2, [pc, #68]	@ (8008390 <UART_InitCallbacksToDefault+0x98>)
 800834c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a10      	ldr	r2, [pc, #64]	@ (8008394 <UART_InitCallbacksToDefault+0x9c>)
 8008354:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a0f      	ldr	r2, [pc, #60]	@ (8008398 <UART_InitCallbacksToDefault+0xa0>)
 800835c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	0800818d 	.word	0x0800818d
 8008370:	08008179 	.word	0x08008179
 8008374:	080081b5 	.word	0x080081b5
 8008378:	080081a1 	.word	0x080081a1
 800837c:	080081c9 	.word	0x080081c9
 8008380:	080081dd 	.word	0x080081dd
 8008384:	080081f1 	.word	0x080081f1
 8008388:	08008205 	.word	0x08008205
 800838c:	080092e9 	.word	0x080092e9
 8008390:	080092fd 	.word	0x080092fd
 8008394:	08009311 	.word	0x08009311
 8008398:	08008219 	.word	0x08008219

0800839c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800839c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083a0:	b08c      	sub	sp, #48	@ 0x30
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	431a      	orrs	r2, r3
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	431a      	orrs	r2, r3
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4baa      	ldr	r3, [pc, #680]	@ (8008674 <UART_SetConfig+0x2d8>)
 80083cc:	4013      	ands	r3, r2
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083d4:	430b      	orrs	r3, r1
 80083d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a9f      	ldr	r2, [pc, #636]	@ (8008678 <UART_SetConfig+0x2dc>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d004      	beq.n	8008408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008404:	4313      	orrs	r3, r2
 8008406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008412:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	6812      	ldr	r2, [r2, #0]
 800841a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800841c:	430b      	orrs	r3, r1
 800841e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008426:	f023 010f 	bic.w	r1, r3, #15
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a90      	ldr	r2, [pc, #576]	@ (800867c <UART_SetConfig+0x2e0>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d125      	bne.n	800848c <UART_SetConfig+0xf0>
 8008440:	4b8f      	ldr	r3, [pc, #572]	@ (8008680 <UART_SetConfig+0x2e4>)
 8008442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	2b03      	cmp	r3, #3
 800844c:	d81a      	bhi.n	8008484 <UART_SetConfig+0xe8>
 800844e:	a201      	add	r2, pc, #4	@ (adr r2, 8008454 <UART_SetConfig+0xb8>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008465 	.word	0x08008465
 8008458:	08008475 	.word	0x08008475
 800845c:	0800846d 	.word	0x0800846d
 8008460:	0800847d 	.word	0x0800847d
 8008464:	2301      	movs	r3, #1
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800846a:	e116      	b.n	800869a <UART_SetConfig+0x2fe>
 800846c:	2302      	movs	r3, #2
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008472:	e112      	b.n	800869a <UART_SetConfig+0x2fe>
 8008474:	2304      	movs	r3, #4
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800847a:	e10e      	b.n	800869a <UART_SetConfig+0x2fe>
 800847c:	2308      	movs	r3, #8
 800847e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008482:	e10a      	b.n	800869a <UART_SetConfig+0x2fe>
 8008484:	2310      	movs	r3, #16
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800848a:	e106      	b.n	800869a <UART_SetConfig+0x2fe>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a7c      	ldr	r2, [pc, #496]	@ (8008684 <UART_SetConfig+0x2e8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d138      	bne.n	8008508 <UART_SetConfig+0x16c>
 8008496:	4b7a      	ldr	r3, [pc, #488]	@ (8008680 <UART_SetConfig+0x2e4>)
 8008498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849c:	f003 030c 	and.w	r3, r3, #12
 80084a0:	2b0c      	cmp	r3, #12
 80084a2:	d82d      	bhi.n	8008500 <UART_SetConfig+0x164>
 80084a4:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <UART_SetConfig+0x110>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	080084e1 	.word	0x080084e1
 80084b0:	08008501 	.word	0x08008501
 80084b4:	08008501 	.word	0x08008501
 80084b8:	08008501 	.word	0x08008501
 80084bc:	080084f1 	.word	0x080084f1
 80084c0:	08008501 	.word	0x08008501
 80084c4:	08008501 	.word	0x08008501
 80084c8:	08008501 	.word	0x08008501
 80084cc:	080084e9 	.word	0x080084e9
 80084d0:	08008501 	.word	0x08008501
 80084d4:	08008501 	.word	0x08008501
 80084d8:	08008501 	.word	0x08008501
 80084dc:	080084f9 	.word	0x080084f9
 80084e0:	2300      	movs	r3, #0
 80084e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084e6:	e0d8      	b.n	800869a <UART_SetConfig+0x2fe>
 80084e8:	2302      	movs	r3, #2
 80084ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ee:	e0d4      	b.n	800869a <UART_SetConfig+0x2fe>
 80084f0:	2304      	movs	r3, #4
 80084f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084f6:	e0d0      	b.n	800869a <UART_SetConfig+0x2fe>
 80084f8:	2308      	movs	r3, #8
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084fe:	e0cc      	b.n	800869a <UART_SetConfig+0x2fe>
 8008500:	2310      	movs	r3, #16
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008506:	e0c8      	b.n	800869a <UART_SetConfig+0x2fe>
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a5e      	ldr	r2, [pc, #376]	@ (8008688 <UART_SetConfig+0x2ec>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d125      	bne.n	800855e <UART_SetConfig+0x1c2>
 8008512:	4b5b      	ldr	r3, [pc, #364]	@ (8008680 <UART_SetConfig+0x2e4>)
 8008514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008518:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800851c:	2b30      	cmp	r3, #48	@ 0x30
 800851e:	d016      	beq.n	800854e <UART_SetConfig+0x1b2>
 8008520:	2b30      	cmp	r3, #48	@ 0x30
 8008522:	d818      	bhi.n	8008556 <UART_SetConfig+0x1ba>
 8008524:	2b20      	cmp	r3, #32
 8008526:	d00a      	beq.n	800853e <UART_SetConfig+0x1a2>
 8008528:	2b20      	cmp	r3, #32
 800852a:	d814      	bhi.n	8008556 <UART_SetConfig+0x1ba>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <UART_SetConfig+0x19a>
 8008530:	2b10      	cmp	r3, #16
 8008532:	d008      	beq.n	8008546 <UART_SetConfig+0x1aa>
 8008534:	e00f      	b.n	8008556 <UART_SetConfig+0x1ba>
 8008536:	2300      	movs	r3, #0
 8008538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800853c:	e0ad      	b.n	800869a <UART_SetConfig+0x2fe>
 800853e:	2302      	movs	r3, #2
 8008540:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008544:	e0a9      	b.n	800869a <UART_SetConfig+0x2fe>
 8008546:	2304      	movs	r3, #4
 8008548:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800854c:	e0a5      	b.n	800869a <UART_SetConfig+0x2fe>
 800854e:	2308      	movs	r3, #8
 8008550:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008554:	e0a1      	b.n	800869a <UART_SetConfig+0x2fe>
 8008556:	2310      	movs	r3, #16
 8008558:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800855c:	e09d      	b.n	800869a <UART_SetConfig+0x2fe>
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a4a      	ldr	r2, [pc, #296]	@ (800868c <UART_SetConfig+0x2f0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d125      	bne.n	80085b4 <UART_SetConfig+0x218>
 8008568:	4b45      	ldr	r3, [pc, #276]	@ (8008680 <UART_SetConfig+0x2e4>)
 800856a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008572:	2bc0      	cmp	r3, #192	@ 0xc0
 8008574:	d016      	beq.n	80085a4 <UART_SetConfig+0x208>
 8008576:	2bc0      	cmp	r3, #192	@ 0xc0
 8008578:	d818      	bhi.n	80085ac <UART_SetConfig+0x210>
 800857a:	2b80      	cmp	r3, #128	@ 0x80
 800857c:	d00a      	beq.n	8008594 <UART_SetConfig+0x1f8>
 800857e:	2b80      	cmp	r3, #128	@ 0x80
 8008580:	d814      	bhi.n	80085ac <UART_SetConfig+0x210>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <UART_SetConfig+0x1f0>
 8008586:	2b40      	cmp	r3, #64	@ 0x40
 8008588:	d008      	beq.n	800859c <UART_SetConfig+0x200>
 800858a:	e00f      	b.n	80085ac <UART_SetConfig+0x210>
 800858c:	2300      	movs	r3, #0
 800858e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008592:	e082      	b.n	800869a <UART_SetConfig+0x2fe>
 8008594:	2302      	movs	r3, #2
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800859a:	e07e      	b.n	800869a <UART_SetConfig+0x2fe>
 800859c:	2304      	movs	r3, #4
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085a2:	e07a      	b.n	800869a <UART_SetConfig+0x2fe>
 80085a4:	2308      	movs	r3, #8
 80085a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085aa:	e076      	b.n	800869a <UART_SetConfig+0x2fe>
 80085ac:	2310      	movs	r3, #16
 80085ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085b2:	e072      	b.n	800869a <UART_SetConfig+0x2fe>
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a35      	ldr	r2, [pc, #212]	@ (8008690 <UART_SetConfig+0x2f4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d12a      	bne.n	8008614 <UART_SetConfig+0x278>
 80085be:	4b30      	ldr	r3, [pc, #192]	@ (8008680 <UART_SetConfig+0x2e4>)
 80085c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085cc:	d01a      	beq.n	8008604 <UART_SetConfig+0x268>
 80085ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085d2:	d81b      	bhi.n	800860c <UART_SetConfig+0x270>
 80085d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085d8:	d00c      	beq.n	80085f4 <UART_SetConfig+0x258>
 80085da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085de:	d815      	bhi.n	800860c <UART_SetConfig+0x270>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <UART_SetConfig+0x250>
 80085e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e8:	d008      	beq.n	80085fc <UART_SetConfig+0x260>
 80085ea:	e00f      	b.n	800860c <UART_SetConfig+0x270>
 80085ec:	2300      	movs	r3, #0
 80085ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085f2:	e052      	b.n	800869a <UART_SetConfig+0x2fe>
 80085f4:	2302      	movs	r3, #2
 80085f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085fa:	e04e      	b.n	800869a <UART_SetConfig+0x2fe>
 80085fc:	2304      	movs	r3, #4
 80085fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008602:	e04a      	b.n	800869a <UART_SetConfig+0x2fe>
 8008604:	2308      	movs	r3, #8
 8008606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800860a:	e046      	b.n	800869a <UART_SetConfig+0x2fe>
 800860c:	2310      	movs	r3, #16
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008612:	e042      	b.n	800869a <UART_SetConfig+0x2fe>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a17      	ldr	r2, [pc, #92]	@ (8008678 <UART_SetConfig+0x2dc>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d13a      	bne.n	8008694 <UART_SetConfig+0x2f8>
 800861e:	4b18      	ldr	r3, [pc, #96]	@ (8008680 <UART_SetConfig+0x2e4>)
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008624:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008628:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800862c:	d01a      	beq.n	8008664 <UART_SetConfig+0x2c8>
 800862e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008632:	d81b      	bhi.n	800866c <UART_SetConfig+0x2d0>
 8008634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008638:	d00c      	beq.n	8008654 <UART_SetConfig+0x2b8>
 800863a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800863e:	d815      	bhi.n	800866c <UART_SetConfig+0x2d0>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <UART_SetConfig+0x2b0>
 8008644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008648:	d008      	beq.n	800865c <UART_SetConfig+0x2c0>
 800864a:	e00f      	b.n	800866c <UART_SetConfig+0x2d0>
 800864c:	2300      	movs	r3, #0
 800864e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008652:	e022      	b.n	800869a <UART_SetConfig+0x2fe>
 8008654:	2302      	movs	r3, #2
 8008656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800865a:	e01e      	b.n	800869a <UART_SetConfig+0x2fe>
 800865c:	2304      	movs	r3, #4
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008662:	e01a      	b.n	800869a <UART_SetConfig+0x2fe>
 8008664:	2308      	movs	r3, #8
 8008666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800866a:	e016      	b.n	800869a <UART_SetConfig+0x2fe>
 800866c:	2310      	movs	r3, #16
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008672:	e012      	b.n	800869a <UART_SetConfig+0x2fe>
 8008674:	cfff69f3 	.word	0xcfff69f3
 8008678:	40008000 	.word	0x40008000
 800867c:	40013800 	.word	0x40013800
 8008680:	40021000 	.word	0x40021000
 8008684:	40004400 	.word	0x40004400
 8008688:	40004800 	.word	0x40004800
 800868c:	40004c00 	.word	0x40004c00
 8008690:	40005000 	.word	0x40005000
 8008694:	2310      	movs	r3, #16
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4aae      	ldr	r2, [pc, #696]	@ (8008958 <UART_SetConfig+0x5bc>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	f040 8097 	bne.w	80087d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086aa:	2b08      	cmp	r3, #8
 80086ac:	d823      	bhi.n	80086f6 <UART_SetConfig+0x35a>
 80086ae:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <UART_SetConfig+0x318>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086f7 	.word	0x080086f7
 80086bc:	080086e1 	.word	0x080086e1
 80086c0:	080086f7 	.word	0x080086f7
 80086c4:	080086e7 	.word	0x080086e7
 80086c8:	080086f7 	.word	0x080086f7
 80086cc:	080086f7 	.word	0x080086f7
 80086d0:	080086f7 	.word	0x080086f7
 80086d4:	080086ef 	.word	0x080086ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d8:	f7fc fc00 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80086dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086de:	e010      	b.n	8008702 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e0:	4b9e      	ldr	r3, [pc, #632]	@ (800895c <UART_SetConfig+0x5c0>)
 80086e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086e4:	e00d      	b.n	8008702 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086e6:	f7fc fb8b 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 80086ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086ec:	e009      	b.n	8008702 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086f4:	e005      	b.n	8008702 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 8130 	beq.w	800896a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870e:	4a94      	ldr	r2, [pc, #592]	@ (8008960 <UART_SetConfig+0x5c4>)
 8008710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008714:	461a      	mov	r2, r3
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	fbb3 f3f2 	udiv	r3, r3, r2
 800871c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	4413      	add	r3, r2
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	429a      	cmp	r2, r3
 800872c:	d305      	bcc.n	800873a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	429a      	cmp	r2, r3
 8008738:	d903      	bls.n	8008742 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008740:	e113      	b.n	800896a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	2200      	movs	r2, #0
 8008746:	60bb      	str	r3, [r7, #8]
 8008748:	60fa      	str	r2, [r7, #12]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874e:	4a84      	ldr	r2, [pc, #528]	@ (8008960 <UART_SetConfig+0x5c4>)
 8008750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008754:	b29b      	uxth	r3, r3
 8008756:	2200      	movs	r2, #0
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008760:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008764:	f7f8 fb54 	bl	8000e10 <__aeabi_uldivmod>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4610      	mov	r0, r2
 800876e:	4619      	mov	r1, r3
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	020b      	lsls	r3, r1, #8
 800877a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800877e:	0202      	lsls	r2, r0, #8
 8008780:	6979      	ldr	r1, [r7, #20]
 8008782:	6849      	ldr	r1, [r1, #4]
 8008784:	0849      	lsrs	r1, r1, #1
 8008786:	2000      	movs	r0, #0
 8008788:	460c      	mov	r4, r1
 800878a:	4605      	mov	r5, r0
 800878c:	eb12 0804 	adds.w	r8, r2, r4
 8008790:	eb43 0905 	adc.w	r9, r3, r5
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	469a      	mov	sl, r3
 800879c:	4693      	mov	fp, r2
 800879e:	4652      	mov	r2, sl
 80087a0:	465b      	mov	r3, fp
 80087a2:	4640      	mov	r0, r8
 80087a4:	4649      	mov	r1, r9
 80087a6:	f7f8 fb33 	bl	8000e10 <__aeabi_uldivmod>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4613      	mov	r3, r2
 80087b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087b8:	d308      	bcc.n	80087cc <UART_SetConfig+0x430>
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087c0:	d204      	bcs.n	80087cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6a3a      	ldr	r2, [r7, #32]
 80087c8:	60da      	str	r2, [r3, #12]
 80087ca:	e0ce      	b.n	800896a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80087d2:	e0ca      	b.n	800896a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087dc:	d166      	bne.n	80088ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80087de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087e2:	2b08      	cmp	r3, #8
 80087e4:	d827      	bhi.n	8008836 <UART_SetConfig+0x49a>
 80087e6:	a201      	add	r2, pc, #4	@ (adr r2, 80087ec <UART_SetConfig+0x450>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	08008811 	.word	0x08008811
 80087f0:	08008819 	.word	0x08008819
 80087f4:	08008821 	.word	0x08008821
 80087f8:	08008837 	.word	0x08008837
 80087fc:	08008827 	.word	0x08008827
 8008800:	08008837 	.word	0x08008837
 8008804:	08008837 	.word	0x08008837
 8008808:	08008837 	.word	0x08008837
 800880c:	0800882f 	.word	0x0800882f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008810:	f7fc fb64 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8008814:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008816:	e014      	b.n	8008842 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008818:	f7fc fb76 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 800881c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800881e:	e010      	b.n	8008842 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008820:	4b4e      	ldr	r3, [pc, #312]	@ (800895c <UART_SetConfig+0x5c0>)
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008824:	e00d      	b.n	8008842 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008826:	f7fc faeb 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 800882a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800882c:	e009      	b.n	8008842 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800882e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008832:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008834:	e005      	b.n	8008842 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008840:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8090 	beq.w	800896a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884e:	4a44      	ldr	r2, [pc, #272]	@ (8008960 <UART_SetConfig+0x5c4>)
 8008850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008854:	461a      	mov	r2, r3
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	fbb3 f3f2 	udiv	r3, r3, r2
 800885c:	005a      	lsls	r2, r3, #1
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	441a      	add	r2, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	fbb2 f3f3 	udiv	r3, r2, r3
 800886e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b0f      	cmp	r3, #15
 8008874:	d916      	bls.n	80088a4 <UART_SetConfig+0x508>
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800887c:	d212      	bcs.n	80088a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	b29b      	uxth	r3, r3
 8008882:	f023 030f 	bic.w	r3, r3, #15
 8008886:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	085b      	lsrs	r3, r3, #1
 800888c:	b29b      	uxth	r3, r3
 800888e:	f003 0307 	and.w	r3, r3, #7
 8008892:	b29a      	uxth	r2, r3
 8008894:	8bfb      	ldrh	r3, [r7, #30]
 8008896:	4313      	orrs	r3, r2
 8008898:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	8bfa      	ldrh	r2, [r7, #30]
 80088a0:	60da      	str	r2, [r3, #12]
 80088a2:	e062      	b.n	800896a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088aa:	e05e      	b.n	800896a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d828      	bhi.n	8008906 <UART_SetConfig+0x56a>
 80088b4:	a201      	add	r2, pc, #4	@ (adr r2, 80088bc <UART_SetConfig+0x520>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	080088e9 	.word	0x080088e9
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	08008907 	.word	0x08008907
 80088cc:	080088f7 	.word	0x080088f7
 80088d0:	08008907 	.word	0x08008907
 80088d4:	08008907 	.word	0x08008907
 80088d8:	08008907 	.word	0x08008907
 80088dc:	080088ff 	.word	0x080088ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088e0:	f7fc fafc 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80088e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088e6:	e014      	b.n	8008912 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088e8:	f7fc fb0e 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 80088ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088ee:	e010      	b.n	8008912 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088f0:	4b1a      	ldr	r3, [pc, #104]	@ (800895c <UART_SetConfig+0x5c0>)
 80088f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088f4:	e00d      	b.n	8008912 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088f6:	f7fc fa83 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 80088fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088fc:	e009      	b.n	8008912 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008904:	e005      	b.n	8008912 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008910:	bf00      	nop
    }

    if (pclk != 0U)
 8008912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d028      	beq.n	800896a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891c:	4a10      	ldr	r2, [pc, #64]	@ (8008960 <UART_SetConfig+0x5c4>)
 800891e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008922:	461a      	mov	r2, r3
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	fbb3 f2f2 	udiv	r2, r3, r2
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	085b      	lsrs	r3, r3, #1
 8008930:	441a      	add	r2, r3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	fbb2 f3f3 	udiv	r3, r2, r3
 800893a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	2b0f      	cmp	r3, #15
 8008940:	d910      	bls.n	8008964 <UART_SetConfig+0x5c8>
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008948:	d20c      	bcs.n	8008964 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	b29a      	uxth	r2, r3
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60da      	str	r2, [r3, #12]
 8008954:	e009      	b.n	800896a <UART_SetConfig+0x5ce>
 8008956:	bf00      	nop
 8008958:	40008000 	.word	0x40008000
 800895c:	00f42400 	.word	0x00f42400
 8008960:	080095e8 	.word	0x080095e8
      }
      else
      {
        ret = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2201      	movs	r2, #1
 800896e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2201      	movs	r2, #1
 8008976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2200      	movs	r2, #0
 800897e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2200      	movs	r2, #0
 8008984:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008986:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800898a:	4618      	mov	r0, r3
 800898c:	3730      	adds	r7, #48	@ 0x30
 800898e:	46bd      	mov	sp, r7
 8008990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00a      	beq.n	80089be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00a      	beq.n	8008a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a06:	f003 0304 	and.w	r3, r3, #4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00a      	beq.n	8008a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01a      	beq.n	8008aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a92:	d10a      	bne.n	8008aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	605a      	str	r2, [r3, #4]
  }
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b098      	sub	sp, #96	@ 0x60
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ae8:	f7fa fe64 	bl	80037b4 <HAL_GetTick>
 8008aec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0308 	and.w	r3, r3, #8
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d12f      	bne.n	8008b5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008afc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b04:	2200      	movs	r2, #0
 8008b06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f88e 	bl	8008c2c <UART_WaitOnFlagUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d022      	beq.n	8008b5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e6      	bne.n	8008b16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e063      	b.n	8008c24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0304 	and.w	r3, r3, #4
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d149      	bne.n	8008bfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b72:	2200      	movs	r2, #0
 8008b74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f857 	bl	8008c2c <UART_WaitOnFlagUntilTimeout>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d03c      	beq.n	8008bfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	623b      	str	r3, [r7, #32]
   return(result);
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ba4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e6      	bne.n	8008b84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bd6:	61fa      	str	r2, [r7, #28]
 8008bd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	69b9      	ldr	r1, [r7, #24]
 8008bdc:	69fa      	ldr	r2, [r7, #28]
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	617b      	str	r3, [r7, #20]
   return(result);
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e012      	b.n	8008c24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3758      	adds	r7, #88	@ 0x58
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	603b      	str	r3, [r7, #0]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c3c:	e04f      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c44:	d04b      	beq.n	8008cde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c46:	f7fa fdb5 	bl	80037b4 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d302      	bcc.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e04e      	b.n	8008cfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0304 	and.w	r3, r3, #4
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d037      	beq.n	8008cde <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b80      	cmp	r3, #128	@ 0x80
 8008c72:	d034      	beq.n	8008cde <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b40      	cmp	r3, #64	@ 0x40
 8008c78:	d031      	beq.n	8008cde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d110      	bne.n	8008caa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2208      	movs	r2, #8
 8008c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f920 	bl	8008ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2208      	movs	r2, #8
 8008c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e029      	b.n	8008cfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cb8:	d111      	bne.n	8008cde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f906 	bl	8008ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e00f      	b.n	8008cfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69da      	ldr	r2, [r3, #28]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	bf0c      	ite	eq
 8008cee:	2301      	moveq	r3, #1
 8008cf0:	2300      	movne	r3, #0
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d0a0      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b096      	sub	sp, #88	@ 0x58
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	4613      	mov	r3, r2
 8008d14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	88fa      	ldrh	r2, [r7, #6]
 8008d20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2222      	movs	r2, #34	@ 0x22
 8008d30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d02d      	beq.n	8008d9a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d44:	4a40      	ldr	r2, [pc, #256]	@ (8008e48 <UART_Start_Receive_DMA+0x140>)
 8008d46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8008e4c <UART_Start_Receive_DMA+0x144>)
 8008d50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d58:	4a3d      	ldr	r2, [pc, #244]	@ (8008e50 <UART_Start_Receive_DMA+0x148>)
 8008d5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d62:	2200      	movs	r2, #0
 8008d64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3324      	adds	r3, #36	@ 0x24
 8008d72:	4619      	mov	r1, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d78:	461a      	mov	r2, r3
 8008d7a:	88fb      	ldrh	r3, [r7, #6]
 8008d7c:	f7fa fede 	bl	8003b3c <HAL_DMA_Start_IT>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d009      	beq.n	8008d9a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2210      	movs	r2, #16
 8008d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e051      	b.n	8008e3e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d018      	beq.n	8008dd4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008db6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dc2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008dc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e6      	bne.n	8008da2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	f043 0301 	orr.w	r3, r3, #1
 8008dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3308      	adds	r3, #8
 8008df2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008df4:	637a      	str	r2, [r7, #52]	@ 0x34
 8008df6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e5      	bne.n	8008dd4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	613b      	str	r3, [r7, #16]
   return(result);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3308      	adds	r3, #8
 8008e26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e28:	623a      	str	r2, [r7, #32]
 8008e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	69f9      	ldr	r1, [r7, #28]
 8008e2e:	6a3a      	ldr	r2, [r7, #32]
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e5      	bne.n	8008e08 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3758      	adds	r7, #88	@ 0x58
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	08009061 	.word	0x08009061
 8008e4c:	08009195 	.word	0x08009195
 8008e50:	080091db 	.word	0x080091db

08008e54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b08f      	sub	sp, #60	@ 0x3c
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e7c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e6      	bne.n	8008e5c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3308      	adds	r3, #8
 8008e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eae:	61ba      	str	r2, [r7, #24]
 8008eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6979      	ldr	r1, [r7, #20]
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	613b      	str	r3, [r7, #16]
   return(result);
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e5      	bne.n	8008e8e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008eca:	bf00      	nop
 8008ecc:	373c      	adds	r7, #60	@ 0x3c
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b095      	sub	sp, #84	@ 0x54
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008efe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3308      	adds	r3, #8
 8008f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	e853 3f00 	ldrex	r3, [r3]
 8008f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f26:	f023 0301 	bic.w	r3, r3, #1
 8008f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3308      	adds	r3, #8
 8008f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f3c:	e841 2300 	strex	r3, r2, [r1]
 8008f40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1e3      	bne.n	8008f10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d118      	bne.n	8008f82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	e853 3f00 	ldrex	r3, [r3]
 8008f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f023 0310 	bic.w	r3, r3, #16
 8008f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f6e:	61bb      	str	r3, [r7, #24]
 8008f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	6979      	ldr	r1, [r7, #20]
 8008f74:	69ba      	ldr	r2, [r7, #24]
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e6      	bne.n	8008f50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f96:	bf00      	nop
 8008f98:	3754      	adds	r7, #84	@ 0x54
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b090      	sub	sp, #64	@ 0x40
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d137      	bne.n	800902e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fe6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e5      	bne.n	8008fc6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	60fb      	str	r3, [r7, #12]
   return(result);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800900e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	69b9      	ldr	r1, [r7, #24]
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	617b      	str	r3, [r7, #20]
   return(result);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e6      	bne.n	8008ffa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800902c:	e004      	b.n	8009038 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800902e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009030:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009034:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009036:	4798      	blx	r3
}
 8009038:	bf00      	nop
 800903a:	3740      	adds	r7, #64	@ 0x40
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009058:	bf00      	nop
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b09c      	sub	sp, #112	@ 0x70
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b00      	cmp	r3, #0
 800907a:	d171      	bne.n	8009160 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800907c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800907e:	2200      	movs	r2, #0
 8009080:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800909a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e6      	bne.n	8009084 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80090ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3308      	adds	r3, #8
 80090d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80090d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80090d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e5      	bne.n	80090b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3308      	adds	r3, #8
 80090f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	623b      	str	r3, [r7, #32]
   return(result);
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009100:	663b      	str	r3, [r7, #96]	@ 0x60
 8009102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3308      	adds	r3, #8
 8009108:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800910a:	633a      	str	r2, [r7, #48]	@ 0x30
 800910c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009112:	e841 2300 	strex	r3, r2, [r1]
 8009116:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1e5      	bne.n	80090ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800911e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009120:	2220      	movs	r2, #32
 8009122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800912a:	2b01      	cmp	r3, #1
 800912c:	d118      	bne.n	8009160 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	60fb      	str	r3, [r7, #12]
   return(result);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f023 0310 	bic.w	r3, r3, #16
 8009142:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800914c:	61fb      	str	r3, [r7, #28]
 800914e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	69b9      	ldr	r1, [r7, #24]
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	617b      	str	r3, [r7, #20]
   return(result);
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e6      	bne.n	800912e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009162:	2200      	movs	r2, #0
 8009164:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800916a:	2b01      	cmp	r3, #1
 800916c:	d109      	bne.n	8009182 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800916e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009170:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009174:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009176:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800917a:	4611      	mov	r1, r2
 800917c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800917e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009180:	e004      	b.n	800918c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8009182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009184:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009188:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800918a:	4798      	blx	r3
}
 800918c:	bf00      	nop
 800918e:	3770      	adds	r7, #112	@ 0x70
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2201      	movs	r2, #1
 80091a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d10b      	bne.n	80091c8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80091bc:	0852      	lsrs	r2, r2, #1
 80091be:	b292      	uxth	r2, r2
 80091c0:	4611      	mov	r1, r2
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091c6:	e004      	b.n	80091d2 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	4798      	blx	r3
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b086      	sub	sp, #24
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009202:	2b80      	cmp	r3, #128	@ 0x80
 8009204:	d109      	bne.n	800921a <UART_DMAError+0x40>
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b21      	cmp	r3, #33	@ 0x21
 800920a:	d106      	bne.n	800921a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2200      	movs	r2, #0
 8009210:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009214:	6978      	ldr	r0, [r7, #20]
 8009216:	f7ff fe1d 	bl	8008e54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009224:	2b40      	cmp	r3, #64	@ 0x40
 8009226:	d109      	bne.n	800923c <UART_DMAError+0x62>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b22      	cmp	r3, #34	@ 0x22
 800922c:	d106      	bne.n	800923c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2200      	movs	r2, #0
 8009232:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009236:	6978      	ldr	r0, [r7, #20]
 8009238:	f7ff fe4d 	bl	8008ed6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009242:	f043 0210 	orr.w	r2, r3, #16
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009252:	6978      	ldr	r0, [r7, #20]
 8009254:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009256:	bf00      	nop
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009286:	bf00      	nop
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b088      	sub	sp, #32
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092aa:	61fb      	str	r3, [r7, #28]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	61bb      	str	r3, [r7, #24]
 80092b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	6979      	ldr	r1, [r7, #20]
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	613b      	str	r3, [r7, #16]
   return(result);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e6      	bne.n	8009296 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092e0:	bf00      	nop
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009332:	2b01      	cmp	r3, #1
 8009334:	d101      	bne.n	800933a <HAL_UARTEx_DisableFifoMode+0x16>
 8009336:	2302      	movs	r3, #2
 8009338:	e027      	b.n	800938a <HAL_UARTEx_DisableFifoMode+0x66>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2224      	movs	r2, #36	@ 0x24
 8009346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f022 0201 	bic.w	r2, r2, #1
 8009360:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009368:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2220      	movs	r2, #32
 800937c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093aa:	2302      	movs	r3, #2
 80093ac:	e02d      	b.n	800940a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2224      	movs	r2, #36	@ 0x24
 80093ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 0201 	bic.w	r2, r2, #1
 80093d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f850 	bl	8009490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009426:	2302      	movs	r3, #2
 8009428:	e02d      	b.n	8009486 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2224      	movs	r2, #36	@ 0x24
 8009436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 0201 	bic.w	r2, r2, #1
 8009450:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f812 	bl	8009490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800949c:	2b00      	cmp	r3, #0
 800949e:	d108      	bne.n	80094b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094b0:	e031      	b.n	8009516 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094b2:	2308      	movs	r3, #8
 80094b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094b6:	2308      	movs	r3, #8
 80094b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	0e5b      	lsrs	r3, r3, #25
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	f003 0307 	and.w	r3, r3, #7
 80094c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	0f5b      	lsrs	r3, r3, #29
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f003 0307 	and.w	r3, r3, #7
 80094d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	7b3a      	ldrb	r2, [r7, #12]
 80094de:	4911      	ldr	r1, [pc, #68]	@ (8009524 <UARTEx_SetNbDataToProcess+0x94>)
 80094e0:	5c8a      	ldrb	r2, [r1, r2]
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094e6:	7b3a      	ldrb	r2, [r7, #12]
 80094e8:	490f      	ldr	r1, [pc, #60]	@ (8009528 <UARTEx_SetNbDataToProcess+0x98>)
 80094ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	7b7a      	ldrb	r2, [r7, #13]
 80094fc:	4909      	ldr	r1, [pc, #36]	@ (8009524 <UARTEx_SetNbDataToProcess+0x94>)
 80094fe:	5c8a      	ldrb	r2, [r1, r2]
 8009500:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009504:	7b7a      	ldrb	r2, [r7, #13]
 8009506:	4908      	ldr	r1, [pc, #32]	@ (8009528 <UARTEx_SetNbDataToProcess+0x98>)
 8009508:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800950a:	fb93 f3f2 	sdiv	r3, r3, r2
 800950e:	b29a      	uxth	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009516:	bf00      	nop
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	08009600 	.word	0x08009600
 8009528:	08009608 	.word	0x08009608

0800952c <memset>:
 800952c:	4402      	add	r2, r0
 800952e:	4603      	mov	r3, r0
 8009530:	4293      	cmp	r3, r2
 8009532:	d100      	bne.n	8009536 <memset+0xa>
 8009534:	4770      	bx	lr
 8009536:	f803 1b01 	strb.w	r1, [r3], #1
 800953a:	e7f9      	b.n	8009530 <memset+0x4>

0800953c <__libc_init_array>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	4d0d      	ldr	r5, [pc, #52]	@ (8009574 <__libc_init_array+0x38>)
 8009540:	4c0d      	ldr	r4, [pc, #52]	@ (8009578 <__libc_init_array+0x3c>)
 8009542:	1b64      	subs	r4, r4, r5
 8009544:	10a4      	asrs	r4, r4, #2
 8009546:	2600      	movs	r6, #0
 8009548:	42a6      	cmp	r6, r4
 800954a:	d109      	bne.n	8009560 <__libc_init_array+0x24>
 800954c:	4d0b      	ldr	r5, [pc, #44]	@ (800957c <__libc_init_array+0x40>)
 800954e:	4c0c      	ldr	r4, [pc, #48]	@ (8009580 <__libc_init_array+0x44>)
 8009550:	f000 f826 	bl	80095a0 <_init>
 8009554:	1b64      	subs	r4, r4, r5
 8009556:	10a4      	asrs	r4, r4, #2
 8009558:	2600      	movs	r6, #0
 800955a:	42a6      	cmp	r6, r4
 800955c:	d105      	bne.n	800956a <__libc_init_array+0x2e>
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	f855 3b04 	ldr.w	r3, [r5], #4
 8009564:	4798      	blx	r3
 8009566:	3601      	adds	r6, #1
 8009568:	e7ee      	b.n	8009548 <__libc_init_array+0xc>
 800956a:	f855 3b04 	ldr.w	r3, [r5], #4
 800956e:	4798      	blx	r3
 8009570:	3601      	adds	r6, #1
 8009572:	e7f2      	b.n	800955a <__libc_init_array+0x1e>
 8009574:	08009618 	.word	0x08009618
 8009578:	08009618 	.word	0x08009618
 800957c:	08009618 	.word	0x08009618
 8009580:	0800961c 	.word	0x0800961c

08009584 <memcpy>:
 8009584:	440a      	add	r2, r1
 8009586:	4291      	cmp	r1, r2
 8009588:	f100 33ff 	add.w	r3, r0, #4294967295
 800958c:	d100      	bne.n	8009590 <memcpy+0xc>
 800958e:	4770      	bx	lr
 8009590:	b510      	push	{r4, lr}
 8009592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800959a:	4291      	cmp	r1, r2
 800959c:	d1f9      	bne.n	8009592 <memcpy+0xe>
 800959e:	bd10      	pop	{r4, pc}

080095a0 <_init>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	bf00      	nop
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr

080095ac <_fini>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	bf00      	nop
 80095b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b2:	bc08      	pop	{r3}
 80095b4:	469e      	mov	lr, r3
 80095b6:	4770      	bx	lr
