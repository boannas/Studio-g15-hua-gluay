
Traj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004304  08004304  00005304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004344  08004344  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  08004344  08004344  00005344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800434c  0800434c  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800434c  0800434c  0000534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004350  08004350  00005350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004354  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000078  080043cc  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080043cc  000062e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001146c  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002135  00000000  00000000  00017514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00019650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4f  00000000  00000000  0001a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256b6  00000000  00000000  0001b237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001219b  00000000  00000000  000408ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7d6c  00000000  00000000  00052a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a7f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004670  00000000  00000000  0014a838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080042ec 	.word	0x080042ec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	080042ec 	.word	0x080042ec

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f000 fd0b 	bl	800189e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f83e 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 f908 	bl	80010a0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000e90:	f000 f886 	bl	8000fa0 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8000e94:	f000 f8ce 	bl	8001034 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000e98:	4817      	ldr	r0, [pc, #92]	@ (8000ef8 <main+0x78>)
 8000e9a:	f002 f8c7 	bl	800302c <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  if (__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET)
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <main+0x78>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d1f8      	bne.n	8000e9e <main+0x1e>
		         {
		             // Clear the update flag
		             __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <main+0x78>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f06f 0201 	mvn.w	r2, #1
 8000eb4:	611a      	str	r2, [r3, #16]
		             elapsedTime += 0.00001;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <main+0x7c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fb10 	bl	80004e0 <__aeabi_f2d>
 8000ec0:	a30b      	add	r3, pc, #44	@ (adr r3, 8000ef0 <main+0x70>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff f9ad 	bl	8000224 <__adddf3>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fe0d 	bl	8000af0 <__aeabi_d2f>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a08      	ldr	r2, [pc, #32]	@ (8000efc <main+0x7c>)
 8000eda:	6013      	str	r3, [r2, #0]
		            	 Traject(500.0,0.0);
 8000edc:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8000f00 <main+0x80>
 8000ee0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000f04 <main+0x84>
 8000ee4:	f000 f958 	bl	8001198 <Traject>
		  if (__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET)
 8000ee8:	e7d9      	b.n	8000e9e <main+0x1e>
 8000eea:	bf00      	nop
 8000eec:	f3af 8000 	nop.w
 8000ef0:	88e368f1 	.word	0x88e368f1
 8000ef4:	3ee4f8b5 	.word	0x3ee4f8b5
 8000ef8:	20000128 	.word	0x20000128
 8000efc:	20000180 	.word	0x20000180
 8000f00:	00000000 	.word	0x00000000
 8000f04:	43fa0000 	.word	0x43fa0000

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	@ 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	2238      	movs	r2, #56	@ 0x38
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 f8b0 	bl	800407c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 fff6 	bl	8001f1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3a:	2340      	movs	r3, #64	@ 0x40
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f42:	2302      	movs	r3, #2
 8000f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f4a:	2355      	movs	r3, #85	@ 0x55
 8000f4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 f890 	bl	8002084 <HAL_RCC_OscConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f6a:	f000 fb83 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6e:	230f      	movs	r3, #15
 8000f70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f72:	2303      	movs	r3, #3
 8000f74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2104      	movs	r1, #4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 fb8e 	bl	80026a8 <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f92:	f000 fb6f 	bl	8001674 <Error_Handler>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3750      	adds	r7, #80	@ 0x50
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fa4:	4b21      	ldr	r3, [pc, #132]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fa6:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <MX_LPUART1_UART_Init+0x90>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000faa:	4b20      	ldr	r3, [pc, #128]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fe2:	4812      	ldr	r0, [pc, #72]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000fe4:	f002 f9dc 	bl	80033a0 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fee:	f000 fb41 	bl	8001674 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	480d      	ldr	r0, [pc, #52]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8000ff6:	f002 ff77 	bl	8003ee8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001000:	f000 fb38 	bl	8001674 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001004:	2100      	movs	r1, #0
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8001008:	f002 ffac 	bl	8003f64 <HAL_UARTEx_SetRxFifoThreshold>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001012:	f000 fb2f 	bl	8001674 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_LPUART1_UART_Init+0x8c>)
 8001018:	f002 ff2d 	bl	8003e76 <HAL_UARTEx_DisableFifoMode>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001022:	f000 fb27 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000094 	.word	0x20000094
 8001030:	40008000 	.word	0x40008000

08001034 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_TIM6_Init+0x64>)
 8001046:	4a15      	ldr	r2, [pc, #84]	@ (800109c <MX_TIM6_Init+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <MX_TIM6_Init+0x64>)
 800104c:	22a9      	movs	r2, #169	@ 0xa9
 800104e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_TIM6_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <MX_TIM6_Init+0x64>)
 8001058:	220a      	movs	r2, #10
 800105a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_TIM6_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001062:	480d      	ldr	r0, [pc, #52]	@ (8001098 <MX_TIM6_Init+0x64>)
 8001064:	f001 ff8a 	bl	8002f7c <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800106e:	f000 fb01 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001072:	2320      	movs	r3, #32
 8001074:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <MX_TIM6_Init+0x64>)
 8001080:	f002 f8f8 	bl	8003274 <HAL_TIMEx_MasterConfigSynchronization>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800108a:	f000 faf3 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000128 	.word	0x20000128
 800109c:	40001000 	.word	0x40001000

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	@ 0x28
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <MX_GPIO_Init+0xf0>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	4a35      	ldr	r2, [pc, #212]	@ (8001190 <MX_GPIO_Init+0xf0>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c2:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <MX_GPIO_Init+0xf0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ce:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <MX_GPIO_Init+0xf0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001190 <MX_GPIO_Init+0xf0>)
 80010d4:	f043 0320 	orr.w	r3, r3, #32
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <MX_GPIO_Init+0xf0>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0320 	and.w	r3, r3, #32
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <MX_GPIO_Init+0xf0>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	4a29      	ldr	r2, [pc, #164]	@ (8001190 <MX_GPIO_Init+0xf0>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f2:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_GPIO_Init+0xf0>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <MX_GPIO_Init+0xf0>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <MX_GPIO_Init+0xf0>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_GPIO_Init+0xf0>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2120      	movs	r1, #32
 800111a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111e:	f000 fec1 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001122:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001128:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4816      	ldr	r0, [pc, #88]	@ (8001194 <MX_GPIO_Init+0xf4>)
 800113a:	f000 fd31 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Photo_top_Pin Photo_Base_Pin */
  GPIO_InitStruct.Pin = Photo_top_Pin|Photo_Base_Pin;
 800113e:	2350      	movs	r3, #80	@ 0x50
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001142:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001156:	f000 fd23 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800115a:	2320      	movs	r3, #32
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001174:	f000 fd14 	bl	8001ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2028      	movs	r0, #40	@ 0x28
 800117e:	f000 fcda 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001182:	2028      	movs	r0, #40	@ 0x28
 8001184:	f000 fcf1 	bl	8001b6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	@ 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000
 8001194:	48000800 	.word	0x48000800

08001198 <Traject>:

/* USER CODE BEGIN 4 */
void Traject(float Pos_fi,float Pos_ini)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	ed87 0a01 	vstr	s0, [r7, #4]
 80011a2:	edc7 0a00 	vstr	s1, [r7]
	  Distance = Pos_fi - Pos_ini;
 80011a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011aa:	edd7 7a00 	vldr	s15, [r7]
 80011ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b2:	4bb9      	ldr	r3, [pc, #740]	@ (8001498 <Traject+0x300>)
 80011b4:	edc3 7a00 	vstr	s15, [r3]
	  Time_acc = Velo_max / Accel_max;
 80011b8:	4bb8      	ldr	r3, [pc, #736]	@ (800149c <Traject+0x304>)
 80011ba:	edd3 6a00 	vldr	s13, [r3]
 80011be:	4bb8      	ldr	r3, [pc, #736]	@ (80014a0 <Traject+0x308>)
 80011c0:	ed93 7a00 	vldr	s14, [r3]
 80011c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c8:	4bb6      	ldr	r3, [pc, #728]	@ (80014a4 <Traject+0x30c>)
 80011ca:	edc3 7a00 	vstr	s15, [r3]
	  Time_dec = Time_acc;
 80011ce:	4bb5      	ldr	r3, [pc, #724]	@ (80014a4 <Traject+0x30c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4ab5      	ldr	r2, [pc, #724]	@ (80014a8 <Traject+0x310>)
 80011d4:	6013      	str	r3, [r2, #0]
	  if (Distance >0)
 80011d6:	4bb0      	ldr	r3, [pc, #704]	@ (8001498 <Traject+0x300>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	dd1b      	ble.n	800121e <Traject+0x86>
			{
		  Distance_Velo_Max = Distance - (Velo_max * Time_acc);
 80011e6:	4bac      	ldr	r3, [pc, #688]	@ (8001498 <Traject+0x300>)
 80011e8:	ed93 7a00 	vldr	s14, [r3]
 80011ec:	4bab      	ldr	r3, [pc, #684]	@ (800149c <Traject+0x304>)
 80011ee:	edd3 6a00 	vldr	s13, [r3]
 80011f2:	4bac      	ldr	r3, [pc, #688]	@ (80014a4 <Traject+0x30c>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001200:	4baa      	ldr	r3, [pc, #680]	@ (80014ac <Traject+0x314>)
 8001202:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Velo_max;
 8001206:	4ba9      	ldr	r3, [pc, #676]	@ (80014ac <Traject+0x314>)
 8001208:	edd3 6a00 	vldr	s13, [r3]
 800120c:	4ba3      	ldr	r3, [pc, #652]	@ (800149c <Traject+0x304>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	4ba6      	ldr	r3, [pc, #664]	@ (80014b0 <Traject+0x318>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
 800121c:	e032      	b.n	8001284 <Traject+0xec>
			}
	  else if(Distance < 0)
 800121e:	4b9e      	ldr	r3, [pc, #632]	@ (8001498 <Traject+0x300>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	d52a      	bpl.n	8001284 <Traject+0xec>
	  {
		  Accel_max = -Accel_max;
 800122e:	4b9c      	ldr	r3, [pc, #624]	@ (80014a0 <Traject+0x308>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	eef1 7a67 	vneg.f32	s15, s15
 8001238:	4b99      	ldr	r3, [pc, #612]	@ (80014a0 <Traject+0x308>)
 800123a:	edc3 7a00 	vstr	s15, [r3]
		  Velo_max = -Velo_max;
 800123e:	4b97      	ldr	r3, [pc, #604]	@ (800149c <Traject+0x304>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	eef1 7a67 	vneg.f32	s15, s15
 8001248:	4b94      	ldr	r3, [pc, #592]	@ (800149c <Traject+0x304>)
 800124a:	edc3 7a00 	vstr	s15, [r3]
		  Distance_Velo_Max = Distance - (Velo_max * Time_acc);
 800124e:	4b92      	ldr	r3, [pc, #584]	@ (8001498 <Traject+0x300>)
 8001250:	ed93 7a00 	vldr	s14, [r3]
 8001254:	4b91      	ldr	r3, [pc, #580]	@ (800149c <Traject+0x304>)
 8001256:	edd3 6a00 	vldr	s13, [r3]
 800125a:	4b92      	ldr	r3, [pc, #584]	@ (80014a4 <Traject+0x30c>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001268:	4b90      	ldr	r3, [pc, #576]	@ (80014ac <Traject+0x314>)
 800126a:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Velo_max;
 800126e:	4b8f      	ldr	r3, [pc, #572]	@ (80014ac <Traject+0x314>)
 8001270:	edd3 6a00 	vldr	s13, [r3]
 8001274:	4b89      	ldr	r3, [pc, #548]	@ (800149c <Traject+0x304>)
 8001276:	ed93 7a00 	vldr	s14, [r3]
 800127a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127e:	4b8c      	ldr	r3, [pc, #560]	@ (80014b0 <Traject+0x318>)
 8001280:	edc3 7a00 	vstr	s15, [r3]
	}
	// Update trajectory phase
	float time_ref1 = Time_acc + Time_Velo_const;
 8001284:	4b87      	ldr	r3, [pc, #540]	@ (80014a4 <Traject+0x30c>)
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	4b89      	ldr	r3, [pc, #548]	@ (80014b0 <Traject+0x318>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001294:	edc7 7a05 	vstr	s15, [r7, #20]
	float time_ref2 = time_ref1 + Time_dec;
 8001298:	4b83      	ldr	r3, [pc, #524]	@ (80014a8 <Traject+0x310>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ed97 7a05 	vldr	s14, [r7, #20]
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	edc7 7a04 	vstr	s15, [r7, #16]
	if(Time_Velo_const >0)
 80012aa:	4b81      	ldr	r3, [pc, #516]	@ (80014b0 <Traject+0x318>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	f340 80e4 	ble.w	8001484 <Traject+0x2ec>
	{
		Time_acc_under = sqrt(Distance/Accel_max);
 80012bc:	4b76      	ldr	r3, [pc, #472]	@ (8001498 <Traject+0x300>)
 80012be:	ed93 7a00 	vldr	s14, [r3]
 80012c2:	4b77      	ldr	r3, [pc, #476]	@ (80014a0 <Traject+0x308>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012cc:	ee16 0a90 	vmov	r0, s13
 80012d0:	f7ff f906 	bl	80004e0 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	ec43 2b10 	vmov	d0, r2, r3
 80012dc:	f002 ff00 	bl	80040e0 <sqrt>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc02 	bl	8000af0 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a71      	ldr	r2, [pc, #452]	@ (80014b4 <Traject+0x31c>)
 80012f0:	6013      	str	r3, [r2, #0]
		if (elapsedTime < Time_acc)
 80012f2:	4b71      	ldr	r3, [pc, #452]	@ (80014b8 <Traject+0x320>)
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	4b6a      	ldr	r3, [pc, #424]	@ (80014a4 <Traject+0x30c>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	d52f      	bpl.n	8001368 <Traject+0x1d0>
		{
			// Acceleration phase
			currentAcceleration = Accel_max;
 8001308:	4b65      	ldr	r3, [pc, #404]	@ (80014a0 <Traject+0x308>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a6b      	ldr	r2, [pc, #428]	@ (80014bc <Traject+0x324>)
 800130e:	6013      	str	r3, [r2, #0]
			currentVelocity = Accel_max * elapsedTime;
 8001310:	4b63      	ldr	r3, [pc, #396]	@ (80014a0 <Traject+0x308>)
 8001312:	ed93 7a00 	vldr	s14, [r3]
 8001316:	4b68      	ldr	r3, [pc, #416]	@ (80014b8 <Traject+0x320>)
 8001318:	edd3 7a00 	vldr	s15, [r3]
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	4b67      	ldr	r3, [pc, #412]	@ (80014c0 <Traject+0x328>)
 8001322:	edc3 7a00 	vstr	s15, [r3]
			currentPosition = 0.5f * Accel_max * elapsedTime * elapsedTime + Pos_ini;
 8001326:	4b5e      	ldr	r3, [pc, #376]	@ (80014a0 <Traject+0x308>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001330:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001334:	4b60      	ldr	r3, [pc, #384]	@ (80014b8 <Traject+0x320>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800133e:	4b5e      	ldr	r3, [pc, #376]	@ (80014b8 <Traject+0x320>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001348:	edd7 7a00 	vldr	s15, [r7]
 800134c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001350:	4b5c      	ldr	r3, [pc, #368]	@ (80014c4 <Traject+0x32c>)
 8001352:	edc3 7a00 	vstr	s15, [r3]
			temp_pos_acc = currentPosition;
 8001356:	4b5b      	ldr	r3, [pc, #364]	@ (80014c4 <Traject+0x32c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5b      	ldr	r2, [pc, #364]	@ (80014c8 <Traject+0x330>)
 800135c:	6013      	str	r3, [r2, #0]
			temp_pos_const = currentPosition;
 800135e:	4b59      	ldr	r3, [pc, #356]	@ (80014c4 <Traject+0x32c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a5a      	ldr	r2, [pc, #360]	@ (80014cc <Traject+0x334>)
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e08d      	b.n	8001484 <Traject+0x2ec>
		}
		else if (elapsedTime < time_ref1 )
 8001368:	4b53      	ldr	r3, [pc, #332]	@ (80014b8 <Traject+0x320>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	dd21      	ble.n	80013c0 <Traject+0x228>
		{
			// Constant velocity phase
			currentAcceleration = 0;
 800137c:	4b4f      	ldr	r3, [pc, #316]	@ (80014bc <Traject+0x324>)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
			currentVelocity = Velo_max;
 8001384:	4b45      	ldr	r3, [pc, #276]	@ (800149c <Traject+0x304>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a4d      	ldr	r2, [pc, #308]	@ (80014c0 <Traject+0x328>)
 800138a:	6013      	str	r3, [r2, #0]
			currentPosition = (Velo_max * (elapsedTime-Time_acc)) + temp_pos_acc;
 800138c:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <Traject+0x320>)
 800138e:	ed93 7a00 	vldr	s14, [r3]
 8001392:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <Traject+0x30c>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800139c:	4b3f      	ldr	r3, [pc, #252]	@ (800149c <Traject+0x304>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a6:	4b48      	ldr	r3, [pc, #288]	@ (80014c8 <Traject+0x330>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b0:	4b44      	ldr	r3, [pc, #272]	@ (80014c4 <Traject+0x32c>)
 80013b2:	edc3 7a00 	vstr	s15, [r3]
			temp_pos_const = currentPosition;
 80013b6:	4b43      	ldr	r3, [pc, #268]	@ (80014c4 <Traject+0x32c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a44      	ldr	r2, [pc, #272]	@ (80014cc <Traject+0x334>)
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e061      	b.n	8001484 <Traject+0x2ec>
		}
		else if (elapsedTime < time_ref2)
 80013c0:	4b3d      	ldr	r3, [pc, #244]	@ (80014b8 <Traject+0x320>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80013ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	dd4b      	ble.n	800146c <Traject+0x2d4>
		{
			// Deceleration phase
			currentAcceleration = -Accel_max;
 80013d4:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <Traject+0x308>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	eef1 7a67 	vneg.f32	s15, s15
 80013de:	4b37      	ldr	r3, [pc, #220]	@ (80014bc <Traject+0x324>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]
			currentVelocity = -(Accel_max * (elapsedTime-time_ref1)) + Velo_max;
 80013e4:	4b2d      	ldr	r3, [pc, #180]	@ (800149c <Traject+0x304>)
 80013e6:	ed93 7a00 	vldr	s14, [r3]
 80013ea:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <Traject+0x320>)
 80013ec:	edd3 6a00 	vldr	s13, [r3]
 80013f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80013f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013f8:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <Traject+0x308>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	4b2e      	ldr	r3, [pc, #184]	@ (80014c0 <Traject+0x328>)
 8001408:	edc3 7a00 	vstr	s15, [r3]
			currentPosition = currentVelocity*(elapsedTime-time_ref1)+(0.5f*Accel_max*(elapsedTime-time_ref1)*(elapsedTime-time_ref1))+temp_pos_const ;
 800140c:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <Traject+0x320>)
 800140e:	ed93 7a00 	vldr	s14, [r3]
 8001412:	edd7 7a05 	vldr	s15, [r7, #20]
 8001416:	ee37 7a67 	vsub.f32	s14, s14, s15
 800141a:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <Traject+0x328>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001424:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <Traject+0x308>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800142e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <Traject+0x320>)
 8001434:	ed93 6a00 	vldr	s12, [r3]
 8001438:	edd7 7a05 	vldr	s15, [r7, #20]
 800143c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001440:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <Traject+0x320>)
 8001446:	ed93 6a00 	vldr	s12, [r3]
 800144a:	edd7 7a05 	vldr	s15, [r7, #20]
 800144e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <Traject+0x334>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <Traject+0x32c>)
 8001466:	edc3 7a00 	vstr	s15, [r3]
 800146a:	e00b      	b.n	8001484 <Traject+0x2ec>
		}
		else {
			// Trajectory complete
			currentAcceleration = 0.0f;
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <Traject+0x324>)
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
			currentVelocity = 0.0f;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <Traject+0x328>)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
			 elapsedTime = 0.0f;
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <Traject+0x320>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
//			 mode ++;
//						currentPosition = 0.0f;
		}
	}
	if (Time_Velo_const<0)
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <Traject+0x318>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d41d      	bmi.n	80014d0 <Traject+0x338>
//						currentPosition = 0.0f;
		}


	}
}
 8001494:	e0d9      	b.n	800164a <Traject+0x4b2>
 8001496:	bf00      	nop
 8001498:	20000184 	.word	0x20000184
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004
 80014a4:	20000188 	.word	0x20000188
 80014a8:	2000018c 	.word	0x2000018c
 80014ac:	20000194 	.word	0x20000194
 80014b0:	20000198 	.word	0x20000198
 80014b4:	20000190 	.word	0x20000190
 80014b8:	20000180 	.word	0x20000180
 80014bc:	2000017c 	.word	0x2000017c
 80014c0:	20000178 	.word	0x20000178
 80014c4:	20000174 	.word	0x20000174
 80014c8:	2000019c 	.word	0x2000019c
 80014cc:	200001a0 	.word	0x200001a0
		Time_acc_under = sqrt(Distance/Accel_max);
 80014d0:	4b60      	ldr	r3, [pc, #384]	@ (8001654 <Traject+0x4bc>)
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	4b60      	ldr	r3, [pc, #384]	@ (8001658 <Traject+0x4c0>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014e0:	ee16 0a90 	vmov	r0, s13
 80014e4:	f7fe fffc 	bl	80004e0 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	ec43 2b10 	vmov	d0, r2, r3
 80014f0:	f002 fdf6 	bl	80040e0 <sqrt>
 80014f4:	ec53 2b10 	vmov	r2, r3, d0
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff faf8 	bl	8000af0 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	4a56      	ldr	r2, [pc, #344]	@ (800165c <Traject+0x4c4>)
 8001504:	6013      	str	r3, [r2, #0]
		if (elapsedTime < Time_acc_under)
 8001506:	4b56      	ldr	r3, [pc, #344]	@ (8001660 <Traject+0x4c8>)
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	4b53      	ldr	r3, [pc, #332]	@ (800165c <Traject+0x4c4>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	d52e      	bpl.n	800157a <Traject+0x3e2>
			currentAcceleration = Accel_max;
 800151c:	4b4e      	ldr	r3, [pc, #312]	@ (8001658 <Traject+0x4c0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a50      	ldr	r2, [pc, #320]	@ (8001664 <Traject+0x4cc>)
 8001522:	6013      	str	r3, [r2, #0]
			currentVelocity = Accel_max * elapsedTime;
 8001524:	4b4c      	ldr	r3, [pc, #304]	@ (8001658 <Traject+0x4c0>)
 8001526:	ed93 7a00 	vldr	s14, [r3]
 800152a:	4b4d      	ldr	r3, [pc, #308]	@ (8001660 <Traject+0x4c8>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	4b4c      	ldr	r3, [pc, #304]	@ (8001668 <Traject+0x4d0>)
 8001536:	edc3 7a00 	vstr	s15, [r3]
			currentPosition = Pos_ini + 0.5f * Accel_max * elapsedTime * elapsedTime;
 800153a:	4b47      	ldr	r3, [pc, #284]	@ (8001658 <Traject+0x4c0>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001544:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001548:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <Traject+0x4c8>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001552:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <Traject+0x4c8>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155c:	edd7 7a00 	vldr	s15, [r7]
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	4b41      	ldr	r3, [pc, #260]	@ (800166c <Traject+0x4d4>)
 8001566:	edc3 7a00 	vstr	s15, [r3]
			temp_pos_acc = currentPosition;
 800156a:	4b40      	ldr	r3, [pc, #256]	@ (800166c <Traject+0x4d4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a40      	ldr	r2, [pc, #256]	@ (8001670 <Traject+0x4d8>)
 8001570:	6013      	str	r3, [r2, #0]
			temp_velo_acc = currentVelocity;
 8001572:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <Traject+0x4d0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
}
 8001578:	e067      	b.n	800164a <Traject+0x4b2>
		else if (elapsedTime < 2*Time_acc_under)
 800157a:	4b38      	ldr	r3, [pc, #224]	@ (800165c <Traject+0x4c4>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001584:	4b36      	ldr	r3, [pc, #216]	@ (8001660 <Traject+0x4c8>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	dd4e      	ble.n	8001632 <Traject+0x49a>
			currentAcceleration = -Accel_max;
 8001594:	4b30      	ldr	r3, [pc, #192]	@ (8001658 <Traject+0x4c0>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	eef1 7a67 	vneg.f32	s15, s15
 800159e:	4b31      	ldr	r3, [pc, #196]	@ (8001664 <Traject+0x4cc>)
 80015a0:	edc3 7a00 	vstr	s15, [r3]
			currentVelocity = temp_velo_acc - Accel_max*(elapsedTime-Time_acc_under);
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <Traject+0x4c8>)
 80015a6:	ed93 7a00 	vldr	s14, [r3]
 80015aa:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <Traject+0x4c4>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015b4:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <Traject+0x4c0>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015be:	ed97 7a03 	vldr	s14, [r7, #12]
 80015c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c6:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <Traject+0x4d0>)
 80015c8:	edc3 7a00 	vstr	s15, [r3]
			currentPosition = temp_pos_acc + currentVelocity *(elapsedTime-Time_acc_under)+(0.5f*Accel_max*(elapsedTime-Time_acc_under)*(elapsedTime-Time_acc_under));
 80015cc:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <Traject+0x4c8>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	4b22      	ldr	r3, [pc, #136]	@ (800165c <Traject+0x4c4>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015dc:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <Traject+0x4d0>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e6:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <Traject+0x4d8>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <Traject+0x4c0>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80015fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <Traject+0x4c8>)
 8001600:	ed93 6a00 	vldr	s12, [r3]
 8001604:	4b15      	ldr	r3, [pc, #84]	@ (800165c <Traject+0x4c4>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800160e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <Traject+0x4c8>)
 8001614:	ed93 6a00 	vldr	s12, [r3]
 8001618:	4b10      	ldr	r3, [pc, #64]	@ (800165c <Traject+0x4c4>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <Traject+0x4d4>)
 800162c:	edc3 7a00 	vstr	s15, [r3]
}
 8001630:	e00b      	b.n	800164a <Traject+0x4b2>
			currentAcceleration = 0.0f;
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <Traject+0x4cc>)
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
			currentVelocity = 0.0f;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <Traject+0x4d0>)
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
			 elapsedTime = 0.0f;
 8001642:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <Traject+0x4c8>)
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000184 	.word	0x20000184
 8001658:	20000004 	.word	0x20000004
 800165c:	20000190 	.word	0x20000190
 8001660:	20000180 	.word	0x20000180
 8001664:	2000017c 	.word	0x2000017c
 8001668:	20000178 	.word	0x20000178
 800166c:	20000174 	.word	0x20000174
 8001670:	2000019c 	.word	0x2000019c

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <Error_Handler+0x8>

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <HAL_MspInit+0x44>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	4a0e      	ldr	r2, [pc, #56]	@ (80016c4 <HAL_MspInit+0x44>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6613      	str	r3, [r2, #96]	@ 0x60
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <HAL_MspInit+0x44>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_MspInit+0x44>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <HAL_MspInit+0x44>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_MspInit+0x44>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016b6:	f000 fcd5 	bl	8002064 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b09e      	sub	sp, #120	@ 0x78
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2254      	movs	r2, #84	@ 0x54
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fcc7 	bl	800407c <memset>
  if(huart->Instance==LPUART1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001770 <HAL_UART_MspInit+0xa8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d136      	bne.n	8001766 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016f8:	2320      	movs	r3, #32
 80016fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4618      	mov	r0, r3
 8001706:	f001 f9eb 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001710:	f7ff ffb0 	bl	8001674 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <HAL_UART_MspInit+0xac>)
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	4a16      	ldr	r2, [pc, #88]	@ (8001774 <HAL_UART_MspInit+0xac>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <HAL_UART_MspInit+0xac>)
 8001722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_UART_MspInit+0xac>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001730:	4a10      	ldr	r2, [pc, #64]	@ (8001774 <HAL_UART_MspInit+0xac>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <HAL_UART_MspInit+0xac>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001744:	230c      	movs	r3, #12
 8001746:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001754:	230c      	movs	r3, #12
 8001756:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001762:	f000 fa1d 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3778      	adds	r7, #120	@ 0x78
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40008000 	.word	0x40008000
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <HAL_TIM_Base_MspInit+0x38>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10b      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_TIM_Base_MspInit+0x3c>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	4a09      	ldr	r2, [pc, #36]	@ (80017b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001790:	f043 0310 	orr.w	r3, r3, #16
 8001794:	6593      	str	r3, [r2, #88]	@ 0x58
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40001000 	.word	0x40001000
 80017b4:	40021000 	.word	0x40021000

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <NMI_Handler+0x4>

080017c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <MemManage_Handler+0x4>

080017d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <UsageFault_Handler+0x4>

080017e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180e:	f000 f899 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}

08001816 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800181a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800181e:	f000 fb59 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <SystemInit+0x20>)
 800182e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001832:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <SystemInit+0x20>)
 8001834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800184c:	480d      	ldr	r0, [pc, #52]	@ (8001884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800184e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001850:	f7ff ffea 	bl	8001828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480c      	ldr	r0, [pc, #48]	@ (8001888 <LoopForever+0x6>)
  ldr r1, =_edata
 8001856:	490d      	ldr	r1, [pc, #52]	@ (800188c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <LoopForever+0xe>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800186c:	4c0a      	ldr	r4, [pc, #40]	@ (8001898 <LoopForever+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187a:	f002 fc0d 	bl	8004098 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187e:	f7ff faff 	bl	8000e80 <main>

08001882 <LoopForever>:

LoopForever:
    b LoopForever
 8001882:	e7fe      	b.n	8001882 <LoopForever>
  ldr   r0, =_estack
 8001884:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800188c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001890:	08004354 	.word	0x08004354
  ldr r2, =_sbss
 8001894:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001898:	200002e0 	.word	0x200002e0

0800189c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC1_2_IRQHandler>

0800189e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f939 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f80e 	bl	80018d0 <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	71fb      	strb	r3, [r7, #7]
 80018be:	e001      	b.n	80018c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c0:	f7ff fede 	bl	8001680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c4:	79fb      	ldrb	r3, [r7, #7]

}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <HAL_InitTick+0x68>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d022      	beq.n	800192a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_InitTick+0x6c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <HAL_InitTick+0x68>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f944 	bl	8001b86 <HAL_SYSTICK_Config>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10f      	bne.n	8001924 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	d809      	bhi.n	800191e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190a:	2200      	movs	r2, #0
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
 8001912:	f000 f910 	bl	8001b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <HAL_InitTick+0x70>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e007      	b.n	800192e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e004      	b.n	800192e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e001      	b.n	800192e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000010 	.word	0x20000010
 800193c:	20000008 	.word	0x20000008
 8001940:	2000000c 	.word	0x2000000c

08001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_IncTick+0x1c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_IncTick+0x20>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4413      	add	r3, r2
 8001952:	4a03      	ldr	r2, [pc, #12]	@ (8001960 <HAL_IncTick+0x1c>)
 8001954:	6013      	str	r3, [r2, #0]
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	200001a4 	.word	0x200001a4
 8001964:	20000010 	.word	0x20000010

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200001a4 	.word	0x200001a4

08001980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4907      	ldr	r1, [pc, #28]	@ (8001a1c <__NVIC_EnableIRQ+0x38>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff29 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff40 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff90 	bl	8001a74 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5f 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff33 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa4 	bl	8001adc <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bae:	e15a      	b.n	8001e66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 814c 	beq.w	8001e60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 0201 	and.w	r2, r3, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d017      	beq.n	8001c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d123      	bne.n	8001cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	6939      	ldr	r1, [r7, #16]
 8001cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0203 	and.w	r2, r3, #3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80a6 	beq.w	8001e60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	4b5b      	ldr	r3, [pc, #364]	@ (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d18:	4a5a      	ldr	r2, [pc, #360]	@ (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d20:	4b58      	ldr	r3, [pc, #352]	@ (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2c:	4a56      	ldr	r2, [pc, #344]	@ (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d56:	d01f      	beq.n	8001d98 <HAL_GPIO_Init+0x1f8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d019      	beq.n	8001d94 <HAL_GPIO_Init+0x1f4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4b      	ldr	r2, [pc, #300]	@ (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x1f0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1ec>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a49      	ldr	r2, [pc, #292]	@ (8001e98 <HAL_GPIO_Init+0x2f8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1e8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a48      	ldr	r2, [pc, #288]	@ (8001e9c <HAL_GPIO_Init+0x2fc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1e4>
 8001d80:	2305      	movs	r3, #5
 8001d82:	e00a      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d84:	2306      	movs	r3, #6
 8001d86:	e008      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e004      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	f002 0203 	and.w	r2, r2, #3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4093      	lsls	r3, r2
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001daa:	4937      	ldr	r1, [pc, #220]	@ (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db8:	4b39      	ldr	r3, [pc, #228]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ddc:	4a30      	ldr	r2, [pc, #192]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001de2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e06:	4a26      	ldr	r2, [pc, #152]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e5a:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f ae9d 	bne.w	8001bb0 <HAL_GPIO_Init+0x10>
  }
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	48000c00 	.word	0x48000c00
 8001e98:	48001000 	.word	0x48001000
 8001e9c:	48001400 	.word	0x48001400
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb4:	787b      	ldrb	r3, [r7, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ede:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f806 	bl	8001f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d141      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f36:	d131      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f38:	4b47      	ldr	r3, [pc, #284]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f3e:	4a46      	ldr	r2, [pc, #280]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	4b43      	ldr	r3, [pc, #268]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f50:	4a41      	ldr	r2, [pc, #260]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f58:	4b40      	ldr	r3, [pc, #256]	@ (800205c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2232      	movs	r2, #50	@ 0x32
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4a3f      	ldr	r2, [pc, #252]	@ (8002060 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6e:	e002      	b.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f76:	4b38      	ldr	r3, [pc, #224]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f82:	d102      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8a:	4b33      	ldr	r3, [pc, #204]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f96:	d158      	bne.n	800204a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e057      	b.n	800204c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fac:	e04d      	b.n	800204a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fb4:	d141      	bne.n	800203a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fb6:	4b28      	ldr	r3, [pc, #160]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc2:	d131      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc4:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fca:	4a23      	ldr	r2, [pc, #140]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd4:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fe2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2232      	movs	r2, #50	@ 0x32
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	0c9b      	lsrs	r3, r3, #18
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffa:	e002      	b.n	8002002 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800200e:	d102      	bne.n	8002016 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f2      	bne.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002022:	d112      	bne.n	800204a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e011      	b.n	800204c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800202e:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002034:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002038:	e007      	b.n	800204a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800203a:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002042:	4a05      	ldr	r2, [pc, #20]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002048:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40007000 	.word	0x40007000
 800205c:	20000008 	.word	0x20000008
 8002060:	431bde83 	.word	0x431bde83

08002064 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800206e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002072:	6093      	str	r3, [r2, #8]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40007000 	.word	0x40007000

08002084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e2fe      	b.n	8002694 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d075      	beq.n	800218e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a2:	4b97      	ldr	r3, [pc, #604]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ac:	4b94      	ldr	r3, [pc, #592]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3e>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d002      	beq.n	80020c8 <HAL_RCC_OscConfig+0x44>
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d05b      	beq.n	800218c <HAL_RCC_OscConfig+0x108>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d157      	bne.n	800218c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e2d9      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e8:	d106      	bne.n	80020f8 <HAL_RCC_OscConfig+0x74>
 80020ea:	4b85      	ldr	r3, [pc, #532]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a84      	ldr	r2, [pc, #528]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e01d      	b.n	8002134 <HAL_RCC_OscConfig+0xb0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x98>
 8002102:	4b7f      	ldr	r3, [pc, #508]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7e      	ldr	r2, [pc, #504]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b7c      	ldr	r3, [pc, #496]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7b      	ldr	r2, [pc, #492]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0xb0>
 800211c:	4b78      	ldr	r3, [pc, #480]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b75      	ldr	r3, [pc, #468]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a74      	ldr	r2, [pc, #464]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 800212e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fc14 	bl	8001968 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff fc10 	bl	8001968 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	@ 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e29e      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002156:	4b6a      	ldr	r3, [pc, #424]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0xc0>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff fc00 	bl	8001968 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fbfc 	bl	8001968 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	@ 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e28a      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217e:	4b60      	ldr	r3, [pc, #384]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0xe8>
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d075      	beq.n	8002286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219a:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	4b56      	ldr	r3, [pc, #344]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b0c      	cmp	r3, #12
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_OscConfig+0x136>
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d002      	beq.n	80021c0 <HAL_RCC_OscConfig+0x13c>
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d11f      	bne.n	8002200 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x154>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e25d      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b49      	ldr	r3, [pc, #292]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	061b      	lsls	r3, r3, #24
 80021e6:	4946      	ldr	r1, [pc, #280]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021ec:	4b45      	ldr	r3, [pc, #276]	@ (8002304 <HAL_RCC_OscConfig+0x280>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb6d 	bl	80018d0 <HAL_InitTick>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d043      	beq.n	8002284 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e249      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d023      	beq.n	8002250 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002208:	4b3d      	ldr	r3, [pc, #244]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a3c      	ldr	r2, [pc, #240]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7ff fba8 	bl	8001968 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221c:	f7ff fba4 	bl	8001968 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e232      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222e:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	061b      	lsls	r3, r3, #24
 8002248:	492d      	ldr	r1, [pc, #180]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
 800224e:	e01a      	b.n	8002286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002250:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2a      	ldr	r2, [pc, #168]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002256:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800225a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff fb84 	bl	8001968 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002264:	f7ff fb80 	bl	8001968 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e20e      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002276:	4b22      	ldr	r3, [pc, #136]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1e0>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d041      	beq.n	8002316 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229a:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 800229c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a0:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7ff fb5d 	bl	8001968 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b2:	f7ff fb59 	bl	8001968 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e1e7      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0ef      	beq.n	80022b2 <HAL_RCC_OscConfig+0x22e>
 80022d2:	e020      	b.n	8002316 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022da:	4a09      	ldr	r2, [pc, #36]	@ (8002300 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7ff fb40 	bl	8001968 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ea:	e00d      	b.n	8002308 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7ff fb3c 	bl	8001968 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d906      	bls.n	8002308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1ca      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002308:	4b8c      	ldr	r3, [pc, #560]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 800230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ea      	bne.n	80022ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80a6 	beq.w	8002470 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002328:	4b84      	ldr	r3, [pc, #528]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_OscConfig+0x2b4>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x2b6>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4b7f      	ldr	r3, [pc, #508]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002342:	4a7e      	ldr	r2, [pc, #504]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002348:	6593      	str	r3, [r2, #88]	@ 0x58
 800234a:	4b7c      	ldr	r3, [pc, #496]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	4b79      	ldr	r3, [pc, #484]	@ (8002540 <HAL_RCC_OscConfig+0x4bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002366:	4b76      	ldr	r3, [pc, #472]	@ (8002540 <HAL_RCC_OscConfig+0x4bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a75      	ldr	r2, [pc, #468]	@ (8002540 <HAL_RCC_OscConfig+0x4bc>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7ff faf9 	bl	8001968 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7ff faf5 	bl	8001968 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e183      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238c:	4b6c      	ldr	r3, [pc, #432]	@ (8002540 <HAL_RCC_OscConfig+0x4bc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d108      	bne.n	80023b2 <HAL_RCC_OscConfig+0x32e>
 80023a0:	4b66      	ldr	r3, [pc, #408]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a6:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023b0:	e024      	b.n	80023fc <HAL_RCC_OscConfig+0x378>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b05      	cmp	r3, #5
 80023b8:	d110      	bne.n	80023dc <HAL_RCC_OscConfig+0x358>
 80023ba:	4b60      	ldr	r3, [pc, #384]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c0:	4a5e      	ldr	r2, [pc, #376]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ca:	4b5c      	ldr	r3, [pc, #368]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d0:	4a5a      	ldr	r2, [pc, #360]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023da:	e00f      	b.n	80023fc <HAL_RCC_OscConfig+0x378>
 80023dc:	4b57      	ldr	r3, [pc, #348]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e2:	4a56      	ldr	r2, [pc, #344]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ec:	4b53      	ldr	r3, [pc, #332]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f2:	4a52      	ldr	r2, [pc, #328]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d016      	beq.n	8002432 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff fab0 	bl	8001968 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7ff faac 	bl	8001968 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e138      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002422:	4b46      	ldr	r3, [pc, #280]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ed      	beq.n	800240c <HAL_RCC_OscConfig+0x388>
 8002430:	e015      	b.n	800245e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7ff fa99 	bl	8001968 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff fa95 	bl	8001968 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e121      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002450:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ed      	bne.n	800243a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800245e:	7ffb      	ldrb	r3, [r7, #31]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b35      	ldr	r3, [pc, #212]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	4a34      	ldr	r2, [pc, #208]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800246e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d03c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 8002486:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800248a:	4a2c      	ldr	r2, [pc, #176]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7ff fa68 	bl	8001968 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800249c:	f7ff fa64 	bl	8001968 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0f2      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ae:	4b23      	ldr	r3, [pc, #140]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ef      	beq.n	800249c <HAL_RCC_OscConfig+0x418>
 80024bc:	e01b      	b.n	80024f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024be:	4b1f      	ldr	r3, [pc, #124]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024c4:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7ff fa4b 	bl	8001968 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024d6:	f7ff fa47 	bl	8001968 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0d5      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e8:	4b14      	ldr	r3, [pc, #80]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 80024ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ef      	bne.n	80024d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80c9 	beq.w	8002692 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002500:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b0c      	cmp	r3, #12
 800250a:	f000 8083 	beq.w	8002614 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d15e      	bne.n	80025d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a08      	ldr	r2, [pc, #32]	@ (800253c <HAL_RCC_OscConfig+0x4b8>)
 800251c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7ff fa21 	bl	8001968 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002528:	e00c      	b.n	8002544 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff fa1d 	bl	8001968 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d905      	bls.n	8002544 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0ab      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
 800253c:	40021000 	.word	0x40021000
 8002540:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002544:	4b55      	ldr	r3, [pc, #340]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ec      	bne.n	800252a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002550:	4b52      	ldr	r3, [pc, #328]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	4b52      	ldr	r3, [pc, #328]	@ (80026a0 <HAL_RCC_OscConfig+0x61c>)
 8002556:	4013      	ands	r3, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6a11      	ldr	r1, [r2, #32]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002560:	3a01      	subs	r2, #1
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	4311      	orrs	r1, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800256a:	0212      	lsls	r2, r2, #8
 800256c:	4311      	orrs	r1, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002572:	0852      	lsrs	r2, r2, #1
 8002574:	3a01      	subs	r2, #1
 8002576:	0552      	lsls	r2, r2, #21
 8002578:	4311      	orrs	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800257e:	0852      	lsrs	r2, r2, #1
 8002580:	3a01      	subs	r2, #1
 8002582:	0652      	lsls	r2, r2, #25
 8002584:	4311      	orrs	r1, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800258a:	06d2      	lsls	r2, r2, #27
 800258c:	430a      	orrs	r2, r1
 800258e:	4943      	ldr	r1, [pc, #268]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002590:	4313      	orrs	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b41      	ldr	r3, [pc, #260]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a40      	ldr	r2, [pc, #256]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800259a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800259e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a0:	4b3e      	ldr	r3, [pc, #248]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a3d      	ldr	r2, [pc, #244]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f9dc 	bl	8001968 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff f9d8 	bl	8001968 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e066      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c6:	4b35      	ldr	r3, [pc, #212]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x530>
 80025d2:	e05e      	b.n	8002692 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b31      	ldr	r3, [pc, #196]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a30      	ldr	r2, [pc, #192]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff f9c2 	bl	8001968 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7ff f9be 	bl	8001968 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e04c      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fa:	4b28      	ldr	r3, [pc, #160]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002606:	4b25      	ldr	r3, [pc, #148]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	4924      	ldr	r1, [pc, #144]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800260c:	4b25      	ldr	r3, [pc, #148]	@ (80026a4 <HAL_RCC_OscConfig+0x620>)
 800260e:	4013      	ands	r3, r2
 8002610:	60cb      	str	r3, [r1, #12]
 8002612:	e03e      	b.n	8002692 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e039      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002620:	4b1e      	ldr	r3, [pc, #120]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	429a      	cmp	r2, r3
 8002632:	d12c      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	3b01      	subs	r3, #1
 8002640:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d123      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d11b      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d113      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	3b01      	subs	r3, #1
 8002674:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d109      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	019f800c 	.word	0x019f800c
 80026a4:	feeefffc 	.word	0xfeeefffc

080026a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e11e      	b.n	80028fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b91      	ldr	r3, [pc, #580]	@ (8002908 <HAL_RCC_ClockConfig+0x260>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d910      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002908 <HAL_RCC_ClockConfig+0x260>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 020f 	bic.w	r2, r3, #15
 80026d6:	498c      	ldr	r1, [pc, #560]	@ (8002908 <HAL_RCC_ClockConfig+0x260>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b8a      	ldr	r3, [pc, #552]	@ (8002908 <HAL_RCC_ClockConfig+0x260>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e106      	b.n	80028fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d073      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d129      	bne.n	8002758 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002704:	4b81      	ldr	r3, [pc, #516]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0f4      	b.n	80028fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002714:	f000 f99e 	bl	8002a54 <RCC_GetSysClockFreqFromPLLSource>
 8002718:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4a7c      	ldr	r2, [pc, #496]	@ (8002910 <HAL_RCC_ClockConfig+0x268>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d93f      	bls.n	80027a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002722:	4b7a      	ldr	r3, [pc, #488]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002736:	2b00      	cmp	r3, #0
 8002738:	d033      	beq.n	80027a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	d12f      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002742:	4b72      	ldr	r3, [pc, #456]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800274a:	4a70      	ldr	r2, [pc, #448]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 800274c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002750:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e024      	b.n	80027a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d107      	bne.n	8002770 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002760:	4b6a      	ldr	r3, [pc, #424]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0c6      	b.n	80028fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002770:	4b66      	ldr	r3, [pc, #408]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0be      	b.n	80028fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002780:	f000 f8ce 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 8002784:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4a61      	ldr	r2, [pc, #388]	@ (8002910 <HAL_RCC_ClockConfig+0x268>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d909      	bls.n	80027a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800278e:	4b5f      	ldr	r3, [pc, #380]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002796:	4a5d      	ldr	r2, [pc, #372]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800279c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a2:	4b5a      	ldr	r3, [pc, #360]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4957      	ldr	r1, [pc, #348]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b4:	f7ff f8d8 	bl	8001968 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7ff f8d4 	bl	8001968 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e095      	b.n	80028fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	4b4e      	ldr	r3, [pc, #312]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1eb      	bne.n	80027bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d023      	beq.n	8002838 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027fc:	4b43      	ldr	r3, [pc, #268]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a42      	ldr	r2, [pc, #264]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002802:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002806:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002814:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800281c:	4a3b      	ldr	r2, [pc, #236]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 800281e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002822:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b39      	ldr	r3, [pc, #228]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4936      	ldr	r1, [pc, #216]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
 8002836:	e008      	b.n	800284a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b80      	cmp	r3, #128	@ 0x80
 800283c:	d105      	bne.n	800284a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800283e:	4b33      	ldr	r3, [pc, #204]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4a32      	ldr	r2, [pc, #200]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 8002844:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002848:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800284a:	4b2f      	ldr	r3, [pc, #188]	@ (8002908 <HAL_RCC_ClockConfig+0x260>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d21d      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_RCC_ClockConfig+0x260>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 020f 	bic.w	r2, r3, #15
 8002860:	4929      	ldr	r1, [pc, #164]	@ (8002908 <HAL_RCC_ClockConfig+0x260>)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002868:	f7ff f87e 	bl	8001968 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7ff f87a 	bl	8001968 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e03b      	b.n	80028fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <HAL_RCC_ClockConfig+0x260>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d1ed      	bne.n	8002870 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a0:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4917      	ldr	r1, [pc, #92]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028be:	4b13      	ldr	r3, [pc, #76]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	490f      	ldr	r1, [pc, #60]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028d2:	f000 f825 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028d6:	4602      	mov	r2, r0
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <HAL_RCC_ClockConfig+0x264>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	490c      	ldr	r1, [pc, #48]	@ (8002914 <HAL_RCC_ClockConfig+0x26c>)
 80028e4:	5ccb      	ldrb	r3, [r1, r3]
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	fa22 f303 	lsr.w	r3, r2, r3
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <HAL_RCC_ClockConfig+0x270>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <HAL_RCC_ClockConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe ffea 	bl	80018d0 <HAL_InitTick>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40022000 	.word	0x40022000
 800290c:	40021000 	.word	0x40021000
 8002910:	04c4b400 	.word	0x04c4b400
 8002914:	08004304 	.word	0x08004304
 8002918:	20000008 	.word	0x20000008
 800291c:	2000000c 	.word	0x2000000c

08002920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002926:	4b2c      	ldr	r3, [pc, #176]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d102      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002932:	4b2a      	ldr	r3, [pc, #168]	@ (80029dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e047      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002938:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b08      	cmp	r3, #8
 8002942:	d102      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002944:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e03e      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800294a:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d136      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002960:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3301      	adds	r3, #1
 800296c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d10c      	bne.n	800298e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002974:	4a1a      	ldr	r2, [pc, #104]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800297e:	68d2      	ldr	r2, [r2, #12]
 8002980:	0a12      	lsrs	r2, r2, #8
 8002982:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	617b      	str	r3, [r7, #20]
      break;
 800298c:	e00c      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800298e:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4a10      	ldr	r2, [pc, #64]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002998:	68d2      	ldr	r2, [r2, #12]
 800299a:	0a12      	lsrs	r2, r2, #8
 800299c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029a0:	fb02 f303 	mul.w	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
      break;
 80029a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0e5b      	lsrs	r3, r3, #25
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	3301      	adds	r3, #1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	e001      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029c8:	693b      	ldr	r3, [r7, #16]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	00f42400 	.word	0x00f42400
 80029e0:	016e3600 	.word	0x016e3600

080029e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e8:	4b03      	ldr	r3, [pc, #12]	@ (80029f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000008 	.word	0x20000008

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a00:	f7ff fff0 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4904      	ldr	r1, [pc, #16]	@ (8002a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08004314 	.word	0x08004314

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a2c:	f7ff ffda 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0adb      	lsrs	r3, r3, #11
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4904      	ldr	r1, [pc, #16]	@ (8002a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	08004314 	.word	0x08004314

08002a54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d10c      	bne.n	8002a92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a78:	4a17      	ldr	r2, [pc, #92]	@ (8002ad8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a82:	68d2      	ldr	r2, [r2, #12]
 8002a84:	0a12      	lsrs	r2, r2, #8
 8002a86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	617b      	str	r3, [r7, #20]
    break;
 8002a90:	e00c      	b.n	8002aac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a92:	4a12      	ldr	r2, [pc, #72]	@ (8002adc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a9c:	68d2      	ldr	r2, [r2, #12]
 8002a9e:	0a12      	lsrs	r2, r2, #8
 8002aa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    break;
 8002aaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	0e5b      	lsrs	r3, r3, #25
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002ac6:	687b      	ldr	r3, [r7, #4]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	016e3600 	.word	0x016e3600
 8002adc:	00f42400 	.word	0x00f42400

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ae8:	2300      	movs	r3, #0
 8002aea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aec:	2300      	movs	r3, #0
 8002aee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8098 	beq.w	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b43      	ldr	r3, [pc, #268]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	4b40      	ldr	r3, [pc, #256]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	4a3f      	ldr	r2, [pc, #252]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b26:	2301      	movs	r3, #1
 8002b28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a39      	ldr	r2, [pc, #228]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b36:	f7fe ff17 	bl	8001968 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b3c:	e009      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3e:	f7fe ff13 	bl	8001968 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d902      	bls.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	74fb      	strb	r3, [r7, #19]
        break;
 8002b50:	e005      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b52:	4b30      	ldr	r3, [pc, #192]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ef      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d159      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b64:	4b2a      	ldr	r3, [pc, #168]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01e      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d019      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b80:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b8c:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b92:	4a1f      	ldr	r2, [pc, #124]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bac:	4a18      	ldr	r2, [pc, #96]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fed3 	bl	8001968 <HAL_GetTick>
 8002bc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc4:	e00b      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe fecf 	bl	8001968 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d902      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	74fb      	strb	r3, [r7, #19]
            break;
 8002bdc:	e006      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bde:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ec      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf2:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c00:	4903      	ldr	r1, [pc, #12]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c08:	e008      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	74bb      	strb	r3, [r7, #18]
 8002c0e:	e005      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1c:	7c7b      	ldrb	r3, [r7, #17]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d105      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c22:	4ba7      	ldr	r3, [pc, #668]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	4aa6      	ldr	r2, [pc, #664]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c3a:	4ba1      	ldr	r3, [pc, #644]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c40:	f023 0203 	bic.w	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	499d      	ldr	r1, [pc, #628]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c5c:	4b98      	ldr	r3, [pc, #608]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c62:	f023 020c 	bic.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4995      	ldr	r1, [pc, #596]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c7e:	4b90      	ldr	r3, [pc, #576]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	498c      	ldr	r1, [pc, #560]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ca0:	4b87      	ldr	r3, [pc, #540]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	4984      	ldr	r1, [pc, #528]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	497b      	ldr	r1, [pc, #492]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ce4:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	4973      	ldr	r1, [pc, #460]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d06:	4b6e      	ldr	r3, [pc, #440]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	496a      	ldr	r1, [pc, #424]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d28:	4b65      	ldr	r3, [pc, #404]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4962      	ldr	r1, [pc, #392]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	4959      	ldr	r1, [pc, #356]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d6c:	4b54      	ldr	r3, [pc, #336]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d72:	f023 0203 	bic.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	4951      	ldr	r1, [pc, #324]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	4948      	ldr	r1, [pc, #288]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002db0:	4b43      	ldr	r3, [pc, #268]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4940      	ldr	r1, [pc, #256]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dce:	d105      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d015      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002de8:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df6:	4932      	ldr	r1, [pc, #200]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e06:	d105      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e08:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d015      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e20:	4b27      	ldr	r3, [pc, #156]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2e:	4924      	ldr	r1, [pc, #144]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e40:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d015      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e66:	4916      	ldr	r1, [pc, #88]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e76:	d105      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a10      	ldr	r2, [pc, #64]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d019      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	4908      	ldr	r1, [pc, #32]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4a02      	ldr	r2, [pc, #8]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eba:	60d3      	str	r3, [r2, #12]
 8002ebc:	e002      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ed0:	4b29      	ldr	r3, [pc, #164]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	4926      	ldr	r1, [pc, #152]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eee:	d105      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ef0:	4b21      	ldr	r3, [pc, #132]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002f08:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f16:	4918      	ldr	r1, [pc, #96]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f26:	d105      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f28:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f40:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	490a      	ldr	r1, [pc, #40]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a04      	ldr	r2, [pc, #16]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000

08002f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e049      	b.n	8003022 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe fbe8 	bl	8001778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f000 f8a6 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d001      	beq.n	8003044 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e04c      	b.n	80030de <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a26      	ldr	r2, [pc, #152]	@ (80030ec <HAL_TIM_Base_Start+0xc0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d022      	beq.n	800309c <HAL_TIM_Base_Start+0x70>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305e:	d01d      	beq.n	800309c <HAL_TIM_Base_Start+0x70>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a22      	ldr	r2, [pc, #136]	@ (80030f0 <HAL_TIM_Base_Start+0xc4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d018      	beq.n	800309c <HAL_TIM_Base_Start+0x70>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a21      	ldr	r2, [pc, #132]	@ (80030f4 <HAL_TIM_Base_Start+0xc8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <HAL_TIM_Base_Start+0x70>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	@ (80030f8 <HAL_TIM_Base_Start+0xcc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_TIM_Base_Start+0x70>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1e      	ldr	r2, [pc, #120]	@ (80030fc <HAL_TIM_Base_Start+0xd0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_TIM_Base_Start+0x70>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <HAL_TIM_Base_Start+0xd4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_TIM_Base_Start+0x70>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <HAL_TIM_Base_Start+0xd8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d115      	bne.n	80030c8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <HAL_TIM_Base_Start+0xdc>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d015      	beq.n	80030da <HAL_TIM_Base_Start+0xae>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b4:	d011      	beq.n	80030da <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c6:	e008      	b.n	80030da <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e000      	b.n	80030dc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800
 80030f8:	40000c00 	.word	0x40000c00
 80030fc:	40013400 	.word	0x40013400
 8003100:	40014000 	.word	0x40014000
 8003104:	40015000 	.word	0x40015000
 8003108:	00010007 	.word	0x00010007

0800310c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a4c      	ldr	r2, [pc, #304]	@ (8003250 <TIM_Base_SetConfig+0x144>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d017      	beq.n	8003154 <TIM_Base_SetConfig+0x48>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312a:	d013      	beq.n	8003154 <TIM_Base_SetConfig+0x48>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a49      	ldr	r2, [pc, #292]	@ (8003254 <TIM_Base_SetConfig+0x148>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00f      	beq.n	8003154 <TIM_Base_SetConfig+0x48>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a48      	ldr	r2, [pc, #288]	@ (8003258 <TIM_Base_SetConfig+0x14c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00b      	beq.n	8003154 <TIM_Base_SetConfig+0x48>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a47      	ldr	r2, [pc, #284]	@ (800325c <TIM_Base_SetConfig+0x150>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <TIM_Base_SetConfig+0x48>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a46      	ldr	r2, [pc, #280]	@ (8003260 <TIM_Base_SetConfig+0x154>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_Base_SetConfig+0x48>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a45      	ldr	r2, [pc, #276]	@ (8003264 <TIM_Base_SetConfig+0x158>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d108      	bne.n	8003166 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a39      	ldr	r2, [pc, #228]	@ (8003250 <TIM_Base_SetConfig+0x144>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d023      	beq.n	80031b6 <TIM_Base_SetConfig+0xaa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003174:	d01f      	beq.n	80031b6 <TIM_Base_SetConfig+0xaa>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a36      	ldr	r2, [pc, #216]	@ (8003254 <TIM_Base_SetConfig+0x148>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01b      	beq.n	80031b6 <TIM_Base_SetConfig+0xaa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a35      	ldr	r2, [pc, #212]	@ (8003258 <TIM_Base_SetConfig+0x14c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d017      	beq.n	80031b6 <TIM_Base_SetConfig+0xaa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a34      	ldr	r2, [pc, #208]	@ (800325c <TIM_Base_SetConfig+0x150>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <TIM_Base_SetConfig+0xaa>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a33      	ldr	r2, [pc, #204]	@ (8003260 <TIM_Base_SetConfig+0x154>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00f      	beq.n	80031b6 <TIM_Base_SetConfig+0xaa>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a33      	ldr	r2, [pc, #204]	@ (8003268 <TIM_Base_SetConfig+0x15c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00b      	beq.n	80031b6 <TIM_Base_SetConfig+0xaa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a32      	ldr	r2, [pc, #200]	@ (800326c <TIM_Base_SetConfig+0x160>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <TIM_Base_SetConfig+0xaa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a31      	ldr	r2, [pc, #196]	@ (8003270 <TIM_Base_SetConfig+0x164>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_Base_SetConfig+0xaa>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003264 <TIM_Base_SetConfig+0x158>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <TIM_Base_SetConfig+0x144>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <TIM_Base_SetConfig+0x110>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003260 <TIM_Base_SetConfig+0x154>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00f      	beq.n	800321c <TIM_Base_SetConfig+0x110>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003268 <TIM_Base_SetConfig+0x15c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_Base_SetConfig+0x110>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a19      	ldr	r2, [pc, #100]	@ (800326c <TIM_Base_SetConfig+0x160>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0x110>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <TIM_Base_SetConfig+0x164>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0x110>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a13      	ldr	r2, [pc, #76]	@ (8003264 <TIM_Base_SetConfig+0x158>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]
  }
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40015000 	.word	0x40015000
 8003268:	40014000 	.word	0x40014000
 800326c:	40014400 	.word	0x40014400
 8003270:	40014800 	.word	0x40014800

08003274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003288:	2302      	movs	r3, #2
 800328a:	e074      	b.n	8003376 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a34      	ldr	r2, [pc, #208]	@ (8003384 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a33      	ldr	r2, [pc, #204]	@ (8003388 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a31      	ldr	r2, [pc, #196]	@ (800338c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80032d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80032e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a21      	ldr	r2, [pc, #132]	@ (8003384 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330c:	d01d      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d018      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1d      	ldr	r2, [pc, #116]	@ (8003394 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1c      	ldr	r2, [pc, #112]	@ (8003398 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a15      	ldr	r2, [pc, #84]	@ (8003388 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a18      	ldr	r2, [pc, #96]	@ (800339c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d004      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a11      	ldr	r2, [pc, #68]	@ (800338c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10c      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40013400 	.word	0x40013400
 800338c:	40015000 	.word	0x40015000
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	40014000 	.word	0x40014000

080033a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e042      	b.n	8003438 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d106      	bne.n	80033ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fe f97f 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2224      	movs	r2, #36	@ 0x24
 80033ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fb24 	bl	8003a38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f825 	bl	8003440 <UART_SetConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e01b      	b.n	8003438 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800340e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800341e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fba3 	bl	8003b7c <UART_CheckIdleState>
 8003436:	4603      	mov	r3, r0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b08c      	sub	sp, #48	@ 0x30
 8003446:	af00      	add	r7, sp, #0
 8003448:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	431a      	orrs	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	431a      	orrs	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4313      	orrs	r3, r2
 8003466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4baa      	ldr	r3, [pc, #680]	@ (8003718 <UART_SetConfig+0x2d8>)
 8003470:	4013      	ands	r3, r2
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003478:	430b      	orrs	r3, r1
 800347a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a9f      	ldr	r2, [pc, #636]	@ (800371c <UART_SetConfig+0x2dc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a8:	4313      	orrs	r3, r2
 80034aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80034b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	f023 010f 	bic.w	r1, r3, #15
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a90      	ldr	r2, [pc, #576]	@ (8003720 <UART_SetConfig+0x2e0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d125      	bne.n	8003530 <UART_SetConfig+0xf0>
 80034e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003724 <UART_SetConfig+0x2e4>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d81a      	bhi.n	8003528 <UART_SetConfig+0xe8>
 80034f2:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <UART_SetConfig+0xb8>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	08003509 	.word	0x08003509
 80034fc:	08003519 	.word	0x08003519
 8003500:	08003511 	.word	0x08003511
 8003504:	08003521 	.word	0x08003521
 8003508:	2301      	movs	r3, #1
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800350e:	e116      	b.n	800373e <UART_SetConfig+0x2fe>
 8003510:	2302      	movs	r3, #2
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003516:	e112      	b.n	800373e <UART_SetConfig+0x2fe>
 8003518:	2304      	movs	r3, #4
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351e:	e10e      	b.n	800373e <UART_SetConfig+0x2fe>
 8003520:	2308      	movs	r3, #8
 8003522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003526:	e10a      	b.n	800373e <UART_SetConfig+0x2fe>
 8003528:	2310      	movs	r3, #16
 800352a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352e:	e106      	b.n	800373e <UART_SetConfig+0x2fe>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a7c      	ldr	r2, [pc, #496]	@ (8003728 <UART_SetConfig+0x2e8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d138      	bne.n	80035ac <UART_SetConfig+0x16c>
 800353a:	4b7a      	ldr	r3, [pc, #488]	@ (8003724 <UART_SetConfig+0x2e4>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b0c      	cmp	r3, #12
 8003546:	d82d      	bhi.n	80035a4 <UART_SetConfig+0x164>
 8003548:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <UART_SetConfig+0x110>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003585 	.word	0x08003585
 8003554:	080035a5 	.word	0x080035a5
 8003558:	080035a5 	.word	0x080035a5
 800355c:	080035a5 	.word	0x080035a5
 8003560:	08003595 	.word	0x08003595
 8003564:	080035a5 	.word	0x080035a5
 8003568:	080035a5 	.word	0x080035a5
 800356c:	080035a5 	.word	0x080035a5
 8003570:	0800358d 	.word	0x0800358d
 8003574:	080035a5 	.word	0x080035a5
 8003578:	080035a5 	.word	0x080035a5
 800357c:	080035a5 	.word	0x080035a5
 8003580:	0800359d 	.word	0x0800359d
 8003584:	2300      	movs	r3, #0
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358a:	e0d8      	b.n	800373e <UART_SetConfig+0x2fe>
 800358c:	2302      	movs	r3, #2
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003592:	e0d4      	b.n	800373e <UART_SetConfig+0x2fe>
 8003594:	2304      	movs	r3, #4
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359a:	e0d0      	b.n	800373e <UART_SetConfig+0x2fe>
 800359c:	2308      	movs	r3, #8
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a2:	e0cc      	b.n	800373e <UART_SetConfig+0x2fe>
 80035a4:	2310      	movs	r3, #16
 80035a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035aa:	e0c8      	b.n	800373e <UART_SetConfig+0x2fe>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a5e      	ldr	r2, [pc, #376]	@ (800372c <UART_SetConfig+0x2ec>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d125      	bne.n	8003602 <UART_SetConfig+0x1c2>
 80035b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003724 <UART_SetConfig+0x2e4>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035c0:	2b30      	cmp	r3, #48	@ 0x30
 80035c2:	d016      	beq.n	80035f2 <UART_SetConfig+0x1b2>
 80035c4:	2b30      	cmp	r3, #48	@ 0x30
 80035c6:	d818      	bhi.n	80035fa <UART_SetConfig+0x1ba>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d00a      	beq.n	80035e2 <UART_SetConfig+0x1a2>
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d814      	bhi.n	80035fa <UART_SetConfig+0x1ba>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <UART_SetConfig+0x19a>
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d008      	beq.n	80035ea <UART_SetConfig+0x1aa>
 80035d8:	e00f      	b.n	80035fa <UART_SetConfig+0x1ba>
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e0:	e0ad      	b.n	800373e <UART_SetConfig+0x2fe>
 80035e2:	2302      	movs	r3, #2
 80035e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e8:	e0a9      	b.n	800373e <UART_SetConfig+0x2fe>
 80035ea:	2304      	movs	r3, #4
 80035ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f0:	e0a5      	b.n	800373e <UART_SetConfig+0x2fe>
 80035f2:	2308      	movs	r3, #8
 80035f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f8:	e0a1      	b.n	800373e <UART_SetConfig+0x2fe>
 80035fa:	2310      	movs	r3, #16
 80035fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003600:	e09d      	b.n	800373e <UART_SetConfig+0x2fe>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a4a      	ldr	r2, [pc, #296]	@ (8003730 <UART_SetConfig+0x2f0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d125      	bne.n	8003658 <UART_SetConfig+0x218>
 800360c:	4b45      	ldr	r3, [pc, #276]	@ (8003724 <UART_SetConfig+0x2e4>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003616:	2bc0      	cmp	r3, #192	@ 0xc0
 8003618:	d016      	beq.n	8003648 <UART_SetConfig+0x208>
 800361a:	2bc0      	cmp	r3, #192	@ 0xc0
 800361c:	d818      	bhi.n	8003650 <UART_SetConfig+0x210>
 800361e:	2b80      	cmp	r3, #128	@ 0x80
 8003620:	d00a      	beq.n	8003638 <UART_SetConfig+0x1f8>
 8003622:	2b80      	cmp	r3, #128	@ 0x80
 8003624:	d814      	bhi.n	8003650 <UART_SetConfig+0x210>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <UART_SetConfig+0x1f0>
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d008      	beq.n	8003640 <UART_SetConfig+0x200>
 800362e:	e00f      	b.n	8003650 <UART_SetConfig+0x210>
 8003630:	2300      	movs	r3, #0
 8003632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003636:	e082      	b.n	800373e <UART_SetConfig+0x2fe>
 8003638:	2302      	movs	r3, #2
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800363e:	e07e      	b.n	800373e <UART_SetConfig+0x2fe>
 8003640:	2304      	movs	r3, #4
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003646:	e07a      	b.n	800373e <UART_SetConfig+0x2fe>
 8003648:	2308      	movs	r3, #8
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364e:	e076      	b.n	800373e <UART_SetConfig+0x2fe>
 8003650:	2310      	movs	r3, #16
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003656:	e072      	b.n	800373e <UART_SetConfig+0x2fe>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a35      	ldr	r2, [pc, #212]	@ (8003734 <UART_SetConfig+0x2f4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d12a      	bne.n	80036b8 <UART_SetConfig+0x278>
 8003662:	4b30      	ldr	r3, [pc, #192]	@ (8003724 <UART_SetConfig+0x2e4>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003670:	d01a      	beq.n	80036a8 <UART_SetConfig+0x268>
 8003672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003676:	d81b      	bhi.n	80036b0 <UART_SetConfig+0x270>
 8003678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800367c:	d00c      	beq.n	8003698 <UART_SetConfig+0x258>
 800367e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003682:	d815      	bhi.n	80036b0 <UART_SetConfig+0x270>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <UART_SetConfig+0x250>
 8003688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800368c:	d008      	beq.n	80036a0 <UART_SetConfig+0x260>
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x270>
 8003690:	2300      	movs	r3, #0
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003696:	e052      	b.n	800373e <UART_SetConfig+0x2fe>
 8003698:	2302      	movs	r3, #2
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369e:	e04e      	b.n	800373e <UART_SetConfig+0x2fe>
 80036a0:	2304      	movs	r3, #4
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a6:	e04a      	b.n	800373e <UART_SetConfig+0x2fe>
 80036a8:	2308      	movs	r3, #8
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ae:	e046      	b.n	800373e <UART_SetConfig+0x2fe>
 80036b0:	2310      	movs	r3, #16
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b6:	e042      	b.n	800373e <UART_SetConfig+0x2fe>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a17      	ldr	r2, [pc, #92]	@ (800371c <UART_SetConfig+0x2dc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d13a      	bne.n	8003738 <UART_SetConfig+0x2f8>
 80036c2:	4b18      	ldr	r3, [pc, #96]	@ (8003724 <UART_SetConfig+0x2e4>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036d0:	d01a      	beq.n	8003708 <UART_SetConfig+0x2c8>
 80036d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036d6:	d81b      	bhi.n	8003710 <UART_SetConfig+0x2d0>
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036dc:	d00c      	beq.n	80036f8 <UART_SetConfig+0x2b8>
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036e2:	d815      	bhi.n	8003710 <UART_SetConfig+0x2d0>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <UART_SetConfig+0x2b0>
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ec:	d008      	beq.n	8003700 <UART_SetConfig+0x2c0>
 80036ee:	e00f      	b.n	8003710 <UART_SetConfig+0x2d0>
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f6:	e022      	b.n	800373e <UART_SetConfig+0x2fe>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fe:	e01e      	b.n	800373e <UART_SetConfig+0x2fe>
 8003700:	2304      	movs	r3, #4
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003706:	e01a      	b.n	800373e <UART_SetConfig+0x2fe>
 8003708:	2308      	movs	r3, #8
 800370a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370e:	e016      	b.n	800373e <UART_SetConfig+0x2fe>
 8003710:	2310      	movs	r3, #16
 8003712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003716:	e012      	b.n	800373e <UART_SetConfig+0x2fe>
 8003718:	cfff69f3 	.word	0xcfff69f3
 800371c:	40008000 	.word	0x40008000
 8003720:	40013800 	.word	0x40013800
 8003724:	40021000 	.word	0x40021000
 8003728:	40004400 	.word	0x40004400
 800372c:	40004800 	.word	0x40004800
 8003730:	40004c00 	.word	0x40004c00
 8003734:	40005000 	.word	0x40005000
 8003738:	2310      	movs	r3, #16
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4aae      	ldr	r2, [pc, #696]	@ (80039fc <UART_SetConfig+0x5bc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	f040 8097 	bne.w	8003878 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800374a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800374e:	2b08      	cmp	r3, #8
 8003750:	d823      	bhi.n	800379a <UART_SetConfig+0x35a>
 8003752:	a201      	add	r2, pc, #4	@ (adr r2, 8003758 <UART_SetConfig+0x318>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	0800377d 	.word	0x0800377d
 800375c:	0800379b 	.word	0x0800379b
 8003760:	08003785 	.word	0x08003785
 8003764:	0800379b 	.word	0x0800379b
 8003768:	0800378b 	.word	0x0800378b
 800376c:	0800379b 	.word	0x0800379b
 8003770:	0800379b 	.word	0x0800379b
 8003774:	0800379b 	.word	0x0800379b
 8003778:	08003793 	.word	0x08003793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7ff f93e 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8003780:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003782:	e010      	b.n	80037a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003784:	4b9e      	ldr	r3, [pc, #632]	@ (8003a00 <UART_SetConfig+0x5c0>)
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003788:	e00d      	b.n	80037a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378a:	f7ff f8c9 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 800378e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003790:	e009      	b.n	80037a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003798:	e005      	b.n	80037a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8130 	beq.w	8003a0e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	4a94      	ldr	r2, [pc, #592]	@ (8003a04 <UART_SetConfig+0x5c4>)
 80037b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d305      	bcc.n	80037de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d903      	bls.n	80037e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80037e4:	e113      	b.n	8003a0e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	2200      	movs	r2, #0
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	60fa      	str	r2, [r7, #12]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	4a84      	ldr	r2, [pc, #528]	@ (8003a04 <UART_SetConfig+0x5c4>)
 80037f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2200      	movs	r2, #0
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003804:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003808:	f7fd f9c2 	bl	8000b90 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	020b      	lsls	r3, r1, #8
 800381e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003822:	0202      	lsls	r2, r0, #8
 8003824:	6979      	ldr	r1, [r7, #20]
 8003826:	6849      	ldr	r1, [r1, #4]
 8003828:	0849      	lsrs	r1, r1, #1
 800382a:	2000      	movs	r0, #0
 800382c:	460c      	mov	r4, r1
 800382e:	4605      	mov	r5, r0
 8003830:	eb12 0804 	adds.w	r8, r2, r4
 8003834:	eb43 0905 	adc.w	r9, r3, r5
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	469a      	mov	sl, r3
 8003840:	4693      	mov	fp, r2
 8003842:	4652      	mov	r2, sl
 8003844:	465b      	mov	r3, fp
 8003846:	4640      	mov	r0, r8
 8003848:	4649      	mov	r1, r9
 800384a:	f7fd f9a1 	bl	8000b90 <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4613      	mov	r3, r2
 8003854:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800385c:	d308      	bcc.n	8003870 <UART_SetConfig+0x430>
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003864:	d204      	bcs.n	8003870 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a3a      	ldr	r2, [r7, #32]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	e0ce      	b.n	8003a0e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003876:	e0ca      	b.n	8003a0e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003880:	d166      	bne.n	8003950 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003882:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003886:	2b08      	cmp	r3, #8
 8003888:	d827      	bhi.n	80038da <UART_SetConfig+0x49a>
 800388a:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <UART_SetConfig+0x450>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038b5 	.word	0x080038b5
 8003894:	080038bd 	.word	0x080038bd
 8003898:	080038c5 	.word	0x080038c5
 800389c:	080038db 	.word	0x080038db
 80038a0:	080038cb 	.word	0x080038cb
 80038a4:	080038db 	.word	0x080038db
 80038a8:	080038db 	.word	0x080038db
 80038ac:	080038db 	.word	0x080038db
 80038b0:	080038d3 	.word	0x080038d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b4:	f7ff f8a2 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 80038b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038ba:	e014      	b.n	80038e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038bc:	f7ff f8b4 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 80038c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038c2:	e010      	b.n	80038e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003a00 <UART_SetConfig+0x5c0>)
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038c8:	e00d      	b.n	80038e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ca:	f7ff f829 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80038ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038d0:	e009      	b.n	80038e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038d8:	e005      	b.n	80038e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80038e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8090 	beq.w	8003a0e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	4a44      	ldr	r2, [pc, #272]	@ (8003a04 <UART_SetConfig+0x5c4>)
 80038f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038f8:	461a      	mov	r2, r3
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003900:	005a      	lsls	r2, r3, #1
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	441a      	add	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	d916      	bls.n	8003948 <UART_SetConfig+0x508>
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003920:	d212      	bcs.n	8003948 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	b29b      	uxth	r3, r3
 8003926:	f023 030f 	bic.w	r3, r3, #15
 800392a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	b29a      	uxth	r2, r3
 8003938:	8bfb      	ldrh	r3, [r7, #30]
 800393a:	4313      	orrs	r3, r2
 800393c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	8bfa      	ldrh	r2, [r7, #30]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	e062      	b.n	8003a0e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800394e:	e05e      	b.n	8003a0e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003950:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003954:	2b08      	cmp	r3, #8
 8003956:	d828      	bhi.n	80039aa <UART_SetConfig+0x56a>
 8003958:	a201      	add	r2, pc, #4	@ (adr r2, 8003960 <UART_SetConfig+0x520>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003985 	.word	0x08003985
 8003964:	0800398d 	.word	0x0800398d
 8003968:	08003995 	.word	0x08003995
 800396c:	080039ab 	.word	0x080039ab
 8003970:	0800399b 	.word	0x0800399b
 8003974:	080039ab 	.word	0x080039ab
 8003978:	080039ab 	.word	0x080039ab
 800397c:	080039ab 	.word	0x080039ab
 8003980:	080039a3 	.word	0x080039a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003984:	f7ff f83a 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800398a:	e014      	b.n	80039b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800398c:	f7ff f84c 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8003990:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003992:	e010      	b.n	80039b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003994:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <UART_SetConfig+0x5c0>)
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003998:	e00d      	b.n	80039b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399a:	f7fe ffc1 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 800399e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039a0:	e009      	b.n	80039b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039a8:	e005      	b.n	80039b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039b4:	bf00      	nop
    }

    if (pclk != 0U)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d028      	beq.n	8003a0e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	4a10      	ldr	r2, [pc, #64]	@ (8003a04 <UART_SetConfig+0x5c4>)
 80039c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c6:	461a      	mov	r2, r3
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	441a      	add	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	d910      	bls.n	8003a08 <UART_SetConfig+0x5c8>
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ec:	d20c      	bcs.n	8003a08 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	e009      	b.n	8003a0e <UART_SetConfig+0x5ce>
 80039fa:	bf00      	nop
 80039fc:	40008000 	.word	0x40008000
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	0800431c 	.word	0x0800431c
      }
      else
      {
        ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3730      	adds	r7, #48	@ 0x30
 8003a32:	46bd      	mov	sp, r7
 8003a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b36:	d10a      	bne.n	8003b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b098      	sub	sp, #96	@ 0x60
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b8c:	f7fd feec 	bl	8001968 <HAL_GetTick>
 8003b90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d12f      	bne.n	8003c00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f88e 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d022      	beq.n	8003c00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e6      	bne.n	8003bba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e063      	b.n	8003cc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d149      	bne.n	8003ca2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f857 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d03c      	beq.n	8003ca2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	623b      	str	r3, [r7, #32]
   return(result);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e6      	bne.n	8003c28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c7a:	61fa      	str	r2, [r7, #28]
 8003c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	617b      	str	r3, [r7, #20]
   return(result);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e5      	bne.n	8003c5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e012      	b.n	8003cc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3758      	adds	r7, #88	@ 0x58
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	e04f      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d04b      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fd fe3d 	bl	8001968 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e04e      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d037      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b80      	cmp	r3, #128	@ 0x80
 8003d16:	d034      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d031      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d110      	bne.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2208      	movs	r2, #8
 8003d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f838 	bl	8003daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e029      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d5c:	d111      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f81e 	bl	8003daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e00f      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d0a0      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b095      	sub	sp, #84	@ 0x54
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e6      	bne.n	8003db2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3308      	adds	r3, #8
 8003dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e3      	bne.n	8003de4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d118      	bne.n	8003e56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f023 0310 	bic.w	r3, r3, #16
 8003e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6979      	ldr	r1, [r7, #20]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e6      	bne.n	8003e24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e6a:	bf00      	nop
 8003e6c:	3754      	adds	r7, #84	@ 0x54
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_UARTEx_DisableFifoMode+0x16>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e027      	b.n	8003edc <HAL_UARTEx_DisableFifoMode+0x66>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	@ 0x24
 8003e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003eba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e02d      	b.n	8003f5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	@ 0x24
 8003f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f84f 	bl	8003fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e02d      	b.n	8003fd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	@ 0x24
 8003f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f811 	bl	8003fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d108      	bne.n	8004002 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004000:	e031      	b.n	8004066 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004002:	2308      	movs	r3, #8
 8004004:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004006:	2308      	movs	r3, #8
 8004008:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	0e5b      	lsrs	r3, r3, #25
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	0f5b      	lsrs	r3, r3, #29
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800402a:	7bbb      	ldrb	r3, [r7, #14]
 800402c:	7b3a      	ldrb	r2, [r7, #12]
 800402e:	4911      	ldr	r1, [pc, #68]	@ (8004074 <UARTEx_SetNbDataToProcess+0x94>)
 8004030:	5c8a      	ldrb	r2, [r1, r2]
 8004032:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004036:	7b3a      	ldrb	r2, [r7, #12]
 8004038:	490f      	ldr	r1, [pc, #60]	@ (8004078 <UARTEx_SetNbDataToProcess+0x98>)
 800403a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800403c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	7b7a      	ldrb	r2, [r7, #13]
 800404c:	4909      	ldr	r1, [pc, #36]	@ (8004074 <UARTEx_SetNbDataToProcess+0x94>)
 800404e:	5c8a      	ldrb	r2, [r1, r2]
 8004050:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004054:	7b7a      	ldrb	r2, [r7, #13]
 8004056:	4908      	ldr	r1, [pc, #32]	@ (8004078 <UARTEx_SetNbDataToProcess+0x98>)
 8004058:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800405a:	fb93 f3f2 	sdiv	r3, r3, r2
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	08004334 	.word	0x08004334
 8004078:	0800433c 	.word	0x0800433c

0800407c <memset>:
 800407c:	4402      	add	r2, r0
 800407e:	4603      	mov	r3, r0
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	f803 1b01 	strb.w	r1, [r3], #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <__errno>:
 800408c:	4b01      	ldr	r3, [pc, #4]	@ (8004094 <__errno+0x8>)
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000014 	.word	0x20000014

08004098 <__libc_init_array>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	4d0d      	ldr	r5, [pc, #52]	@ (80040d0 <__libc_init_array+0x38>)
 800409c:	4c0d      	ldr	r4, [pc, #52]	@ (80040d4 <__libc_init_array+0x3c>)
 800409e:	1b64      	subs	r4, r4, r5
 80040a0:	10a4      	asrs	r4, r4, #2
 80040a2:	2600      	movs	r6, #0
 80040a4:	42a6      	cmp	r6, r4
 80040a6:	d109      	bne.n	80040bc <__libc_init_array+0x24>
 80040a8:	4d0b      	ldr	r5, [pc, #44]	@ (80040d8 <__libc_init_array+0x40>)
 80040aa:	4c0c      	ldr	r4, [pc, #48]	@ (80040dc <__libc_init_array+0x44>)
 80040ac:	f000 f91e 	bl	80042ec <_init>
 80040b0:	1b64      	subs	r4, r4, r5
 80040b2:	10a4      	asrs	r4, r4, #2
 80040b4:	2600      	movs	r6, #0
 80040b6:	42a6      	cmp	r6, r4
 80040b8:	d105      	bne.n	80040c6 <__libc_init_array+0x2e>
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c0:	4798      	blx	r3
 80040c2:	3601      	adds	r6, #1
 80040c4:	e7ee      	b.n	80040a4 <__libc_init_array+0xc>
 80040c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ca:	4798      	blx	r3
 80040cc:	3601      	adds	r6, #1
 80040ce:	e7f2      	b.n	80040b6 <__libc_init_array+0x1e>
 80040d0:	0800434c 	.word	0x0800434c
 80040d4:	0800434c 	.word	0x0800434c
 80040d8:	0800434c 	.word	0x0800434c
 80040dc:	08004350 	.word	0x08004350

080040e0 <sqrt>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	ed2d 8b02 	vpush	{d8}
 80040e6:	ec55 4b10 	vmov	r4, r5, d0
 80040ea:	f000 f825 	bl	8004138 <__ieee754_sqrt>
 80040ee:	4622      	mov	r2, r4
 80040f0:	462b      	mov	r3, r5
 80040f2:	4620      	mov	r0, r4
 80040f4:	4629      	mov	r1, r5
 80040f6:	eeb0 8a40 	vmov.f32	s16, s0
 80040fa:	eef0 8a60 	vmov.f32	s17, s1
 80040fe:	f7fc fce1 	bl	8000ac4 <__aeabi_dcmpun>
 8004102:	b990      	cbnz	r0, 800412a <sqrt+0x4a>
 8004104:	2200      	movs	r2, #0
 8004106:	2300      	movs	r3, #0
 8004108:	4620      	mov	r0, r4
 800410a:	4629      	mov	r1, r5
 800410c:	f7fc fcb2 	bl	8000a74 <__aeabi_dcmplt>
 8004110:	b158      	cbz	r0, 800412a <sqrt+0x4a>
 8004112:	f7ff ffbb 	bl	800408c <__errno>
 8004116:	2321      	movs	r3, #33	@ 0x21
 8004118:	6003      	str	r3, [r0, #0]
 800411a:	2200      	movs	r2, #0
 800411c:	2300      	movs	r3, #0
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7fc fb5f 	bl	80007e4 <__aeabi_ddiv>
 8004126:	ec41 0b18 	vmov	d8, r0, r1
 800412a:	eeb0 0a48 	vmov.f32	s0, s16
 800412e:	eef0 0a68 	vmov.f32	s1, s17
 8004132:	ecbd 8b02 	vpop	{d8}
 8004136:	bd38      	pop	{r3, r4, r5, pc}

08004138 <__ieee754_sqrt>:
 8004138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	4a68      	ldr	r2, [pc, #416]	@ (80042e0 <__ieee754_sqrt+0x1a8>)
 800413e:	ec55 4b10 	vmov	r4, r5, d0
 8004142:	43aa      	bics	r2, r5
 8004144:	462b      	mov	r3, r5
 8004146:	4621      	mov	r1, r4
 8004148:	d110      	bne.n	800416c <__ieee754_sqrt+0x34>
 800414a:	4622      	mov	r2, r4
 800414c:	4620      	mov	r0, r4
 800414e:	4629      	mov	r1, r5
 8004150:	f7fc fa1e 	bl	8000590 <__aeabi_dmul>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4620      	mov	r0, r4
 800415a:	4629      	mov	r1, r5
 800415c:	f7fc f862 	bl	8000224 <__adddf3>
 8004160:	4604      	mov	r4, r0
 8004162:	460d      	mov	r5, r1
 8004164:	ec45 4b10 	vmov	d0, r4, r5
 8004168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416c:	2d00      	cmp	r5, #0
 800416e:	dc0e      	bgt.n	800418e <__ieee754_sqrt+0x56>
 8004170:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004174:	4322      	orrs	r2, r4
 8004176:	d0f5      	beq.n	8004164 <__ieee754_sqrt+0x2c>
 8004178:	b19d      	cbz	r5, 80041a2 <__ieee754_sqrt+0x6a>
 800417a:	4622      	mov	r2, r4
 800417c:	4620      	mov	r0, r4
 800417e:	4629      	mov	r1, r5
 8004180:	f7fc f84e 	bl	8000220 <__aeabi_dsub>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	f7fc fb2c 	bl	80007e4 <__aeabi_ddiv>
 800418c:	e7e8      	b.n	8004160 <__ieee754_sqrt+0x28>
 800418e:	152a      	asrs	r2, r5, #20
 8004190:	d115      	bne.n	80041be <__ieee754_sqrt+0x86>
 8004192:	2000      	movs	r0, #0
 8004194:	e009      	b.n	80041aa <__ieee754_sqrt+0x72>
 8004196:	0acb      	lsrs	r3, r1, #11
 8004198:	3a15      	subs	r2, #21
 800419a:	0549      	lsls	r1, r1, #21
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0fa      	beq.n	8004196 <__ieee754_sqrt+0x5e>
 80041a0:	e7f7      	b.n	8004192 <__ieee754_sqrt+0x5a>
 80041a2:	462a      	mov	r2, r5
 80041a4:	e7fa      	b.n	800419c <__ieee754_sqrt+0x64>
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	3001      	adds	r0, #1
 80041aa:	02dc      	lsls	r4, r3, #11
 80041ac:	d5fb      	bpl.n	80041a6 <__ieee754_sqrt+0x6e>
 80041ae:	1e44      	subs	r4, r0, #1
 80041b0:	1b12      	subs	r2, r2, r4
 80041b2:	f1c0 0420 	rsb	r4, r0, #32
 80041b6:	fa21 f404 	lsr.w	r4, r1, r4
 80041ba:	4323      	orrs	r3, r4
 80041bc:	4081      	lsls	r1, r0
 80041be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80041c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ca:	07d2      	lsls	r2, r2, #31
 80041cc:	bf5c      	itt	pl
 80041ce:	005b      	lslpl	r3, r3, #1
 80041d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80041d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80041d8:	bf58      	it	pl
 80041da:	0049      	lslpl	r1, r1, #1
 80041dc:	2600      	movs	r6, #0
 80041de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80041e2:	106d      	asrs	r5, r5, #1
 80041e4:	0049      	lsls	r1, r1, #1
 80041e6:	2016      	movs	r0, #22
 80041e8:	4632      	mov	r2, r6
 80041ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80041ee:	1917      	adds	r7, r2, r4
 80041f0:	429f      	cmp	r7, r3
 80041f2:	bfde      	ittt	le
 80041f4:	193a      	addle	r2, r7, r4
 80041f6:	1bdb      	suble	r3, r3, r7
 80041f8:	1936      	addle	r6, r6, r4
 80041fa:	0fcf      	lsrs	r7, r1, #31
 80041fc:	3801      	subs	r0, #1
 80041fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004202:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004206:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800420a:	d1f0      	bne.n	80041ee <__ieee754_sqrt+0xb6>
 800420c:	4604      	mov	r4, r0
 800420e:	2720      	movs	r7, #32
 8004210:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004214:	429a      	cmp	r2, r3
 8004216:	eb00 0e0c 	add.w	lr, r0, ip
 800421a:	db02      	blt.n	8004222 <__ieee754_sqrt+0xea>
 800421c:	d113      	bne.n	8004246 <__ieee754_sqrt+0x10e>
 800421e:	458e      	cmp	lr, r1
 8004220:	d811      	bhi.n	8004246 <__ieee754_sqrt+0x10e>
 8004222:	f1be 0f00 	cmp.w	lr, #0
 8004226:	eb0e 000c 	add.w	r0, lr, ip
 800422a:	da42      	bge.n	80042b2 <__ieee754_sqrt+0x17a>
 800422c:	2800      	cmp	r0, #0
 800422e:	db40      	blt.n	80042b2 <__ieee754_sqrt+0x17a>
 8004230:	f102 0801 	add.w	r8, r2, #1
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	458e      	cmp	lr, r1
 8004238:	bf88      	it	hi
 800423a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800423e:	eba1 010e 	sub.w	r1, r1, lr
 8004242:	4464      	add	r4, ip
 8004244:	4642      	mov	r2, r8
 8004246:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800424a:	3f01      	subs	r7, #1
 800424c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004250:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004254:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004258:	d1dc      	bne.n	8004214 <__ieee754_sqrt+0xdc>
 800425a:	4319      	orrs	r1, r3
 800425c:	d01b      	beq.n	8004296 <__ieee754_sqrt+0x15e>
 800425e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80042e4 <__ieee754_sqrt+0x1ac>
 8004262:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80042e8 <__ieee754_sqrt+0x1b0>
 8004266:	e9da 0100 	ldrd	r0, r1, [sl]
 800426a:	e9db 2300 	ldrd	r2, r3, [fp]
 800426e:	f7fb ffd7 	bl	8000220 <__aeabi_dsub>
 8004272:	e9da 8900 	ldrd	r8, r9, [sl]
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4640      	mov	r0, r8
 800427c:	4649      	mov	r1, r9
 800427e:	f7fc fc03 	bl	8000a88 <__aeabi_dcmple>
 8004282:	b140      	cbz	r0, 8004296 <__ieee754_sqrt+0x15e>
 8004284:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004288:	e9da 0100 	ldrd	r0, r1, [sl]
 800428c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004290:	d111      	bne.n	80042b6 <__ieee754_sqrt+0x17e>
 8004292:	3601      	adds	r6, #1
 8004294:	463c      	mov	r4, r7
 8004296:	1072      	asrs	r2, r6, #1
 8004298:	0863      	lsrs	r3, r4, #1
 800429a:	07f1      	lsls	r1, r6, #31
 800429c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80042a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80042a4:	bf48      	it	mi
 80042a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80042aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80042ae:	4618      	mov	r0, r3
 80042b0:	e756      	b.n	8004160 <__ieee754_sqrt+0x28>
 80042b2:	4690      	mov	r8, r2
 80042b4:	e7be      	b.n	8004234 <__ieee754_sqrt+0xfc>
 80042b6:	f7fb ffb5 	bl	8000224 <__adddf3>
 80042ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4640      	mov	r0, r8
 80042c4:	4649      	mov	r1, r9
 80042c6:	f7fc fbd5 	bl	8000a74 <__aeabi_dcmplt>
 80042ca:	b120      	cbz	r0, 80042d6 <__ieee754_sqrt+0x19e>
 80042cc:	1ca0      	adds	r0, r4, #2
 80042ce:	bf08      	it	eq
 80042d0:	3601      	addeq	r6, #1
 80042d2:	3402      	adds	r4, #2
 80042d4:	e7df      	b.n	8004296 <__ieee754_sqrt+0x15e>
 80042d6:	1c63      	adds	r3, r4, #1
 80042d8:	f023 0401 	bic.w	r4, r3, #1
 80042dc:	e7db      	b.n	8004296 <__ieee754_sqrt+0x15e>
 80042de:	bf00      	nop
 80042e0:	7ff00000 	.word	0x7ff00000
 80042e4:	20000070 	.word	0x20000070
 80042e8:	20000068 	.word	0x20000068

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
