
FUFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070ac  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007284  08007284  00008284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c4  080072c4  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  080072c4  080072c4  000082c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072cc  080072cc  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072cc  080072cc  000082cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d0  080072d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080072d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010d00  20000020  080072f0  00009020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010d20  080072f0  00009d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181c6  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf7  00000000  00000000  00021212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00023f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000109b  00000000  00000000  00025430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  000264cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bb2  00000000  00000000  0004f2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001141d4  00000000  00000000  00067e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d20  00000000  00000000  0017c06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00181d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800726c 	.word	0x0800726c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	0800726c 	.word	0x0800726c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b96a 	b.w	8000dd0 <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	460c      	mov	r4, r1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d14e      	bne.n	8000bbe <__udivmoddi4+0xaa>
 8000b20:	4694      	mov	ip, r2
 8000b22:	458c      	cmp	ip, r1
 8000b24:	4686      	mov	lr, r0
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	d962      	bls.n	8000bf2 <__udivmoddi4+0xde>
 8000b2c:	b14a      	cbz	r2, 8000b42 <__udivmoddi4+0x2e>
 8000b2e:	f1c2 0320 	rsb	r3, r2, #32
 8000b32:	4091      	lsls	r1, r2
 8000b34:	fa20 f303 	lsr.w	r3, r0, r3
 8000b38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3c:	4319      	orrs	r1, r3
 8000b3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b46:	fa1f f68c 	uxth.w	r6, ip
 8000b4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b52:	fb07 1114 	mls	r1, r7, r4, r1
 8000b56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5a:	fb04 f106 	mul.w	r1, r4, r6
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	d90a      	bls.n	8000b78 <__udivmoddi4+0x64>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b6a:	f080 8112 	bcs.w	8000d92 <__udivmoddi4+0x27e>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 810f 	bls.w	8000d92 <__udivmoddi4+0x27e>
 8000b74:	3c02      	subs	r4, #2
 8000b76:	4463      	add	r3, ip
 8000b78:	1a59      	subs	r1, r3, r1
 8000b7a:	fa1f f38e 	uxth.w	r3, lr
 8000b7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b82:	fb07 1110 	mls	r1, r7, r0, r1
 8000b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8a:	fb00 f606 	mul.w	r6, r0, r6
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x94>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b9a:	f080 80fc 	bcs.w	8000d96 <__udivmoddi4+0x282>
 8000b9e:	429e      	cmp	r6, r3
 8000ba0:	f240 80f9 	bls.w	8000d96 <__udivmoddi4+0x282>
 8000ba4:	4463      	add	r3, ip
 8000ba6:	3802      	subs	r0, #2
 8000ba8:	1b9b      	subs	r3, r3, r6
 8000baa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bae:	2100      	movs	r1, #0
 8000bb0:	b11d      	cbz	r5, 8000bba <__udivmoddi4+0xa6>
 8000bb2:	40d3      	lsrs	r3, r2
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d905      	bls.n	8000bce <__udivmoddi4+0xba>
 8000bc2:	b10d      	cbz	r5, 8000bc8 <__udivmoddi4+0xb4>
 8000bc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e7f5      	b.n	8000bba <__udivmoddi4+0xa6>
 8000bce:	fab3 f183 	clz	r1, r3
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	d146      	bne.n	8000c64 <__udivmoddi4+0x150>
 8000bd6:	42a3      	cmp	r3, r4
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xcc>
 8000bda:	4290      	cmp	r0, r2
 8000bdc:	f0c0 80f0 	bcc.w	8000dc0 <__udivmoddi4+0x2ac>
 8000be0:	1a86      	subs	r6, r0, r2
 8000be2:	eb64 0303 	sbc.w	r3, r4, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d0e6      	beq.n	8000bba <__udivmoddi4+0xa6>
 8000bec:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf0:	e7e3      	b.n	8000bba <__udivmoddi4+0xa6>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	f040 8090 	bne.w	8000d18 <__udivmoddi4+0x204>
 8000bf8:	eba1 040c 	sub.w	r4, r1, ip
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	fa1f f78c 	uxth.w	r7, ip
 8000c04:	2101      	movs	r1, #1
 8000c06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c16:	fb07 f006 	mul.w	r0, r7, r6
 8000c1a:	4298      	cmp	r0, r3
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x11c>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x11a>
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	f200 80cd 	bhi.w	8000dc8 <__udivmoddi4+0x2b4>
 8000c2e:	4626      	mov	r6, r4
 8000c30:	1a1c      	subs	r4, r3, r0
 8000c32:	fa1f f38e 	uxth.w	r3, lr
 8000c36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c42:	fb00 f707 	mul.w	r7, r0, r7
 8000c46:	429f      	cmp	r7, r3
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x148>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x146>
 8000c54:	429f      	cmp	r7, r3
 8000c56:	f200 80b0 	bhi.w	8000dba <__udivmoddi4+0x2a6>
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	1bdb      	subs	r3, r3, r7
 8000c5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c62:	e7a5      	b.n	8000bb0 <__udivmoddi4+0x9c>
 8000c64:	f1c1 0620 	rsb	r6, r1, #32
 8000c68:	408b      	lsls	r3, r1
 8000c6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6e:	431f      	orrs	r7, r3
 8000c70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c74:	fa04 f301 	lsl.w	r3, r4, r1
 8000c78:	ea43 030c 	orr.w	r3, r3, ip
 8000c7c:	40f4      	lsrs	r4, r6
 8000c7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c82:	0c38      	lsrs	r0, r7, #16
 8000c84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c88:	fbb4 fef0 	udiv	lr, r4, r0
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fb00 441e 	mls	r4, r0, lr, r4
 8000c94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c98:	fb0e f90c 	mul.w	r9, lr, ip
 8000c9c:	45a1      	cmp	r9, r4
 8000c9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x1a6>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000caa:	f080 8084 	bcs.w	8000db6 <__udivmoddi4+0x2a2>
 8000cae:	45a1      	cmp	r9, r4
 8000cb0:	f240 8081 	bls.w	8000db6 <__udivmoddi4+0x2a2>
 8000cb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb8:	443c      	add	r4, r7
 8000cba:	eba4 0409 	sub.w	r4, r4, r9
 8000cbe:	fa1f f983 	uxth.w	r9, r3
 8000cc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cd2:	45a4      	cmp	ip, r4
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x1d2>
 8000cd6:	193c      	adds	r4, r7, r4
 8000cd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cdc:	d267      	bcs.n	8000dae <__udivmoddi4+0x29a>
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0x29a>
 8000ce2:	3b02      	subs	r3, #2
 8000ce4:	443c      	add	r4, r7
 8000ce6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cea:	fba0 9302 	umull	r9, r3, r0, r2
 8000cee:	eba4 040c 	sub.w	r4, r4, ip
 8000cf2:	429c      	cmp	r4, r3
 8000cf4:	46ce      	mov	lr, r9
 8000cf6:	469c      	mov	ip, r3
 8000cf8:	d351      	bcc.n	8000d9e <__udivmoddi4+0x28a>
 8000cfa:	d04e      	beq.n	8000d9a <__udivmoddi4+0x286>
 8000cfc:	b155      	cbz	r5, 8000d14 <__udivmoddi4+0x200>
 8000cfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000d02:	eb64 040c 	sbc.w	r4, r4, ip
 8000d06:	fa04 f606 	lsl.w	r6, r4, r6
 8000d0a:	40cb      	lsrs	r3, r1
 8000d0c:	431e      	orrs	r6, r3
 8000d0e:	40cc      	lsrs	r4, r1
 8000d10:	e9c5 6400 	strd	r6, r4, [r5]
 8000d14:	2100      	movs	r1, #0
 8000d16:	e750      	b.n	8000bba <__udivmoddi4+0xa6>
 8000d18:	f1c2 0320 	rsb	r3, r2, #32
 8000d1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d24:	fa24 f303 	lsr.w	r3, r4, r3
 8000d28:	4094      	lsls	r4, r2
 8000d2a:	430c      	orrs	r4, r1
 8000d2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d40:	0c23      	lsrs	r3, r4, #16
 8000d42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d46:	fb00 f107 	mul.w	r1, r0, r7
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x24c>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d56:	d22c      	bcs.n	8000db2 <__udivmoddi4+0x29e>
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	d92a      	bls.n	8000db2 <__udivmoddi4+0x29e>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4463      	add	r3, ip
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d68:	fb08 3311 	mls	r3, r8, r1, r3
 8000d6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d70:	fb01 f307 	mul.w	r3, r1, r7
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x276>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d80:	d213      	bcs.n	8000daa <__udivmoddi4+0x296>
 8000d82:	42a3      	cmp	r3, r4
 8000d84:	d911      	bls.n	8000daa <__udivmoddi4+0x296>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4464      	add	r4, ip
 8000d8a:	1ae4      	subs	r4, r4, r3
 8000d8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d90:	e739      	b.n	8000c06 <__udivmoddi4+0xf2>
 8000d92:	4604      	mov	r4, r0
 8000d94:	e6f0      	b.n	8000b78 <__udivmoddi4+0x64>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e706      	b.n	8000ba8 <__udivmoddi4+0x94>
 8000d9a:	45c8      	cmp	r8, r9
 8000d9c:	d2ae      	bcs.n	8000cfc <__udivmoddi4+0x1e8>
 8000d9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000da2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000da6:	3801      	subs	r0, #1
 8000da8:	e7a8      	b.n	8000cfc <__udivmoddi4+0x1e8>
 8000daa:	4631      	mov	r1, r6
 8000dac:	e7ed      	b.n	8000d8a <__udivmoddi4+0x276>
 8000dae:	4603      	mov	r3, r0
 8000db0:	e799      	b.n	8000ce6 <__udivmoddi4+0x1d2>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e7d4      	b.n	8000d60 <__udivmoddi4+0x24c>
 8000db6:	46d6      	mov	lr, sl
 8000db8:	e77f      	b.n	8000cba <__udivmoddi4+0x1a6>
 8000dba:	4463      	add	r3, ip
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	e74d      	b.n	8000c5c <__udivmoddi4+0x148>
 8000dc0:	4606      	mov	r6, r0
 8000dc2:	4623      	mov	r3, r4
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e70f      	b.n	8000be8 <__udivmoddi4+0xd4>
 8000dc8:	3e02      	subs	r6, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	e730      	b.n	8000c30 <__udivmoddi4+0x11c>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dda:	f000 ffa4 	bl	8001d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dde:	f000 f903 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de2:	f000 fbab 	bl	800153c <MX_GPIO_Init>
  MX_DMA_Init();
 8000de6:	f000 fb7f 	bl	80014e8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000dea:	f000 f9c1 	bl	8001170 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000dee:	f000 f947 	bl	8001080 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000df2:	f000 fa55 	bl	80012a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000df6:	f000 faa7 	bl	8001348 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000dfa:	f000 fb27 	bl	800144c <MX_TIM5_Init>
  MX_UART4_Init();
 8000dfe:	f000 fa01 	bl	8001204 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  PID.Kp =0.1;
 8000e02:	4b67      	ldr	r3, [pc, #412]	@ (8000fa0 <main+0x1cc>)
 8000e04:	4a67      	ldr	r2, [pc, #412]	@ (8000fa4 <main+0x1d0>)
 8000e06:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000e08:	4b65      	ldr	r3, [pc, #404]	@ (8000fa0 <main+0x1cc>)
 8000e0a:	f04f 0200 	mov.w	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000e10:	4b63      	ldr	r3, [pc, #396]	@ (8000fa0 <main+0x1cc>)
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8000e18:	213c      	movs	r1, #60	@ 0x3c
 8000e1a:	4863      	ldr	r0, [pc, #396]	@ (8000fa8 <main+0x1d4>)
 8000e1c:	f004 fad9 	bl	80053d2 <HAL_TIM_Encoder_Start>
  arm_pid_init_f32(&PID, 0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	485f      	ldr	r0, [pc, #380]	@ (8000fa0 <main+0x1cc>)
 8000e24:	f006 f9c0 	bl	80071a8 <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim3);
 8000e28:	4860      	ldr	r0, [pc, #384]	@ (8000fac <main+0x1d8>)
 8000e2a:	f004 f8e3 	bl	8004ff4 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000e2e:	213c      	movs	r1, #60	@ 0x3c
 8000e30:	485e      	ldr	r0, [pc, #376]	@ (8000fac <main+0x1d8>)
 8000e32:	f004 face 	bl	80053d2 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000e36:	485e      	ldr	r0, [pc, #376]	@ (8000fb0 <main+0x1dc>)
 8000e38:	f004 f94c 	bl	80050d4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2); // Encoder QEI
 8000e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8000fa8 <main+0x1d4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e42:	4a5c      	ldr	r2, [pc, #368]	@ (8000fb4 <main+0x1e0>)
 8000e44:	6013      	str	r3, [r2, #0]
  	  static uint64_t timestamps =0;
  	  int64_t currentTime = micros();
 8000e46:	f000 fc05 	bl	8001654 <micros>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	e9c7 2300 	strd	r2, r3, [r7]

  	  if(currentTime > timestamps)
 8000e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e56:	4958      	ldr	r1, [pc, #352]	@ (8000fb8 <main+0x1e4>)
 8000e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	eb71 0303 	sbcs.w	r3, r1, r3
 8000e62:	d20c      	bcs.n	8000e7e <main+0xaa>
  	  {
  		  timestamps = currentTime + 100000;//us
 8000e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e68:	4954      	ldr	r1, [pc, #336]	@ (8000fbc <main+0x1e8>)
 8000e6a:	1854      	adds	r4, r2, r1
 8000e6c:	f143 0500 	adc.w	r5, r3, #0
 8000e70:	4622      	mov	r2, r4
 8000e72:	462b      	mov	r3, r5
 8000e74:	4950      	ldr	r1, [pc, #320]	@ (8000fb8 <main+0x1e4>)
 8000e76:	e9c1 2300 	strd	r2, r3, [r1]
  		  QEIEncoderPosVel_Update();
 8000e7a:	f000 fc05 	bl	8001688 <QEIEncoderPosVel_Update>
  	  }


	  if (start == 1){
 8000e7e:	4b50      	ldr	r3, [pc, #320]	@ (8000fc0 <main+0x1ec>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d1da      	bne.n	8000e3c <main+0x68>
		static uint32_t timestamp =0;
		if(timestamp < HAL_GetTick())
 8000e86:	f000 ffb3 	bl	8001df0 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc4 <main+0x1f0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d9d3      	bls.n	8000e3c <main+0x68>
		{
		  timestamp = HAL_GetTick()+0.5;
 8000e94:	f000 ffac 	bl	8001df0 <HAL_GetTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fafe 	bl	800049c <__aeabi_ui2d>
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b48      	ldr	r3, [pc, #288]	@ (8000fc8 <main+0x1f4>)
 8000ea6:	f7ff f9bd 	bl	8000224 <__adddf3>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f7ff fda7 	bl	8000a04 <__aeabi_d2uiz>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a42      	ldr	r2, [pc, #264]	@ (8000fc4 <main+0x1f0>)
 8000eba:	6013      	str	r3, [r2, #0]

		  velo[i] = QEIdata.QEIAngularVelocity;
 8000ebc:	4b43      	ldr	r3, [pc, #268]	@ (8000fcc <main+0x1f8>)
 8000ebe:	69da      	ldr	r2, [r3, #28]
 8000ec0:	4b43      	ldr	r3, [pc, #268]	@ (8000fd0 <main+0x1fc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	b291      	uxth	r1, r2
 8000ec6:	4a43      	ldr	r2, [pc, #268]	@ (8000fd4 <main+0x200>)
 8000ec8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  data_packet[1] = (uint8_t)(QEIdata.QEIAngularVelocity & 0x00FF); // Mask with 0x00FF to get LSB
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8000fcc <main+0x1f8>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b41      	ldr	r3, [pc, #260]	@ (8000fd8 <main+0x204>)
 8000ed4:	705a      	strb	r2, [r3, #1]
		  data_packet[2]  = (uint8_t)(QEIdata.QEIAngularVelocity >> 8)& 0x00FF; // Shift right 8 bits to get MSB
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fcc <main+0x1f8>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	121b      	asrs	r3, r3, #8
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd8 <main+0x204>)
 8000ee0:	709a      	strb	r2, [r3, #2]

		  // Transmit data over UART
		  for (int i = 0; i < sizeof(data_packet); i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e00a      	b.n	8000efe <main+0x12a>
		  {
			HAL_UART_Transmit(&hlpuart1, &data_packet[i], 1, 5);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd8 <main+0x204>)
 8000eec:	1899      	adds	r1, r3, r2
 8000eee:	2305      	movs	r3, #5
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	483a      	ldr	r0, [pc, #232]	@ (8000fdc <main+0x208>)
 8000ef4:	f005 faac 	bl	8006450 <HAL_UART_Transmit>
		  for (int i = 0; i < sizeof(data_packet); i++)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d9f1      	bls.n	8000ee8 <main+0x114>
		  }

		  /// j = 1
		  if (i == (j*2000)){
 8000f04:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <main+0x20c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f0c:	fb03 f202 	mul.w	r2, r3, r2
 8000f10:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <main+0x1fc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d104      	bne.n	8000f22 <main+0x14e>
			  j++;
 8000f18:	4b31      	ldr	r3, [pc, #196]	@ (8000fe0 <main+0x20c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a30      	ldr	r2, [pc, #192]	@ (8000fe0 <main+0x20c>)
 8000f20:	6013      	str	r3, [r2, #0]
		  }

		  if ((j%2) == 0){
 8000f22:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <main+0x20c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d11c      	bne.n	8000f68 <main+0x194>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (j/2)*3*pwm);
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <main+0x20c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	0fda      	lsrs	r2, r3, #31
 8000f34:	4413      	add	r3, r2
 8000f36:	105b      	asrs	r3, r3, #1
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f48:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <main+0x210>)
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <main+0x1d8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5a:	ee17 2a90 	vmov	r2, s15
 8000f5e:	635a      	str	r2, [r3, #52]	@ 0x34
//			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <main+0x1d8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	639a      	str	r2, [r3, #56]	@ 0x38
		  }

		  if ((j%2) == 1){
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <main+0x20c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	bfb8      	it	lt
 8000f74:	425b      	neglt	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d103      	bne.n	8000f82 <main+0x1ae>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <main+0x1d8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	635a      	str	r2, [r3, #52]	@ 0x34
		  }
		  if (j == 18){
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <main+0x20c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b12      	cmp	r3, #18
 8000f88:	d103      	bne.n	8000f92 <main+0x1be>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <main+0x1d8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	635a      	str	r2, [r3, #52]	@ 0x34
		  }
		  i++;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <main+0x1fc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <main+0x1fc>)
 8000f9a:	6013      	str	r3, [r2, #0]
  {
 8000f9c:	e74e      	b.n	8000e3c <main+0x68>
 8000f9e:	bf00      	nop
 8000fa0:	20010cc0 	.word	0x20010cc0
 8000fa4:	3dcccccd 	.word	0x3dcccccd
 8000fa8:	20000230 	.word	0x20000230
 8000fac:	2000027c 	.word	0x2000027c
 8000fb0:	200002c8 	.word	0x200002c8
 8000fb4:	20010cbc 	.word	0x20010cbc
 8000fb8:	20010d10 	.word	0x20010d10
 8000fbc:	000186a0 	.word	0x000186a0
 8000fc0:	20010cb4 	.word	0x20010cb4
 8000fc4:	20010d18 	.word	0x20010d18
 8000fc8:	3fe00000 	.word	0x3fe00000
 8000fcc:	20010ce8 	.word	0x20010ce8
 8000fd0:	20010cb8 	.word	0x20010cb8
 8000fd4:	20000314 	.word	0x20000314
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	20000108 	.word	0x20000108
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	2000000c 	.word	0x2000000c

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	@ 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2238      	movs	r2, #56	@ 0x38
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 f90c 	bl	8007214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800100a:	2000      	movs	r0, #0
 800100c:	f002 ff6a 	bl	8003ee4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101a:	2340      	movs	r3, #64	@ 0x40
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001022:	2302      	movs	r3, #2
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001026:	2304      	movs	r3, #4
 8001028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800102a:	2355      	movs	r3, #85	@ 0x55
 800102c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001032:	2302      	movs	r3, #2
 8001034:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001036:	2302      	movs	r3, #2
 8001038:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	4618      	mov	r0, r3
 8001040:	f003 f804 	bl	800404c <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800104a:	f000 fbdd 	bl	8001808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2303      	movs	r3, #3
 8001054:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2104      	movs	r1, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fb02 	bl	8004670 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001072:	f000 fbc9 	bl	8001808 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3750      	adds	r7, #80	@ 0x50
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2220      	movs	r2, #32
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f006 f8bb 	bl	8007214 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800109e:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010a6:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c0:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c6:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010c8:	2204      	movs	r2, #4
 80010ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010cc:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010d8:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010da:	2201      	movs	r2, #1
 80010dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e6:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_ADC1_Init+0xe8>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001108:	4817      	ldr	r0, [pc, #92]	@ (8001168 <MX_ADC1_Init+0xe8>)
 800110a:	f001 f895 	bl	8002238 <HAL_ADC_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001114:	f000 fb78 	bl	8001808 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800111c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	4811      	ldr	r0, [pc, #68]	@ (8001168 <MX_ADC1_Init+0xe8>)
 8001124:	f002 f95a 	bl	80033dc <HAL_ADCEx_MultiModeConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800112e:	f000 fb6b 	bl	8001808 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_ADC1_Init+0xec>)
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001136:	2306      	movs	r3, #6
 8001138:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800113a:	2307      	movs	r3, #7
 800113c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113e:	237f      	movs	r3, #127	@ 0x7f
 8001140:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001142:	2304      	movs	r3, #4
 8001144:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <MX_ADC1_Init+0xe8>)
 8001150:	f001 fcac 	bl	8002aac <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800115a:	f000 fb55 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3730      	adds	r7, #48	@ 0x30
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000003c 	.word	0x2000003c
 800116c:	19200040 	.word	0x19200040

08001170 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 8001176:	4a22      	ldr	r2, [pc, #136]	@ (8001200 <MX_LPUART1_UART_Init+0x90>)
 8001178:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800117a:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011b2:	4812      	ldr	r0, [pc, #72]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 80011b4:	f005 f8fc 	bl	80063b0 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011be:	f000 fb23 	bl	8001808 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	480d      	ldr	r0, [pc, #52]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 80011c6:	f005 ff25 	bl	8007014 <HAL_UARTEx_SetTxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80011d0:	f000 fb1a 	bl	8001808 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	4809      	ldr	r0, [pc, #36]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 80011d8:	f005 ff5a 	bl	8007090 <HAL_UARTEx_SetRxFifoThreshold>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011e2:	f000 fb11 	bl	8001808 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_LPUART1_UART_Init+0x8c>)
 80011e8:	f005 fedb 	bl	8006fa2 <HAL_UARTEx_DisableFifoMode>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80011f2:	f000 fb09 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000108 	.word	0x20000108
 8001200:	40008000 	.word	0x40008000

08001204 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001208:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <MX_UART4_Init+0x94>)
 800120a:	4a24      	ldr	r2, [pc, #144]	@ (800129c <MX_UART4_Init+0x98>)
 800120c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800120e:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <MX_UART4_Init+0x94>)
 8001210:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001214:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <MX_UART4_Init+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_UART4_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <MX_UART4_Init+0x94>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <MX_UART4_Init+0x94>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_UART4_Init+0x94>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <MX_UART4_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_UART4_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001240:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_UART4_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <MX_UART4_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800124c:	4812      	ldr	r0, [pc, #72]	@ (8001298 <MX_UART4_Init+0x94>)
 800124e:	f005 f8af 	bl	80063b0 <HAL_UART_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001258:	f000 fad6 	bl	8001808 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	480e      	ldr	r0, [pc, #56]	@ (8001298 <MX_UART4_Init+0x94>)
 8001260:	f005 fed8 	bl	8007014 <HAL_UARTEx_SetTxFifoThreshold>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800126a:	f000 facd 	bl	8001808 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800126e:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8001272:	4809      	ldr	r0, [pc, #36]	@ (8001298 <MX_UART4_Init+0x94>)
 8001274:	f005 ff0c 	bl	8007090 <HAL_UARTEx_SetRxFifoThreshold>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 800127e:	f000 fac3 	bl	8001808 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_UART4_Init+0x94>)
 8001284:	f005 fe8d 	bl	8006fa2 <HAL_UARTEx_DisableFifoMode>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 800128e:	f000 fabb 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000019c 	.word	0x2000019c
 800129c:	40004c00 	.word	0x40004c00

080012a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	@ 0x30
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2224      	movs	r2, #36	@ 0x24
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 ffb0 	bl	8007214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <MX_TIM2_Init+0xa4>)
 80012c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_TIM2_Init+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <MX_TIM2_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_TIM2_Init+0xa4>)
 80012d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_TIM2_Init+0xa4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_TIM2_Init+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e6:	2303      	movs	r3, #3
 80012e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012fe:	2301      	movs	r3, #1
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <MX_TIM2_Init+0xa4>)
 8001312:	f003 ffb8 	bl	8005286 <HAL_TIM_Encoder_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800131c:	f000 fa74 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_TIM2_Init+0xa4>)
 800132e:	f004 ffa9 	bl	8006284 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001338:	f000 fa66 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	@ 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000230 	.word	0x20000230

08001348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	@ 0x38
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137a:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <MX_TIM3_Init+0xfc>)
 800137c:	4a32      	ldr	r2, [pc, #200]	@ (8001448 <MX_TIM3_Init+0x100>)
 800137e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001380:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <MX_TIM3_Init+0xfc>)
 8001382:	22a9      	movs	r2, #169	@ 0xa9
 8001384:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <MX_TIM3_Init+0xfc>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800138c:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <MX_TIM3_Init+0xfc>)
 800138e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001392:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <MX_TIM3_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <MX_TIM3_Init+0xfc>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a0:	4828      	ldr	r0, [pc, #160]	@ (8001444 <MX_TIM3_Init+0xfc>)
 80013a2:	f003 fdcf 	bl	8004f44 <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013ac:	f000 fa2c 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4821      	ldr	r0, [pc, #132]	@ (8001444 <MX_TIM3_Init+0xfc>)
 80013be:	f004 f9ab 	bl	8005718 <HAL_TIM_ConfigClockSource>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013c8:	f000 fa1e 	bl	8001808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013cc:	481d      	ldr	r0, [pc, #116]	@ (8001444 <MX_TIM3_Init+0xfc>)
 80013ce:	f003 fef9 	bl	80051c4 <HAL_TIM_PWM_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013d8:	f000 fa16 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	4816      	ldr	r0, [pc, #88]	@ (8001444 <MX_TIM3_Init+0xfc>)
 80013ec:	f004 ff4a 	bl	8006284 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013f6:	f000 fa07 	bl	8001808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fa:	2360      	movs	r3, #96	@ 0x60
 80013fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <MX_TIM3_Init+0xfc>)
 8001412:	f004 f86d 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800141c:	f000 f9f4 	bl	8001808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	2204      	movs	r2, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	@ (8001444 <MX_TIM3_Init+0xfc>)
 8001428:	f004 f862 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001432:	f000 f9e9 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001436:	4803      	ldr	r0, [pc, #12]	@ (8001444 <MX_TIM3_Init+0xfc>)
 8001438:	f000 fba8 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	@ 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000027c 	.word	0x2000027c
 8001448:	40000400 	.word	0x40000400

0800144c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <MX_TIM5_Init+0x94>)
 800146c:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <MX_TIM5_Init+0x98>)
 800146e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001470:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <MX_TIM5_Init+0x94>)
 8001472:	22a9      	movs	r2, #169	@ 0xa9
 8001474:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_TIM5_Init+0x94>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <MX_TIM5_Init+0x94>)
 800147e:	f04f 32ff 	mov.w	r2, #4294967295
 8001482:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_TIM5_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <MX_TIM5_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001490:	4813      	ldr	r0, [pc, #76]	@ (80014e0 <MX_TIM5_Init+0x94>)
 8001492:	f003 fd57 	bl	8004f44 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800149c:	f000 f9b4 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <MX_TIM5_Init+0x94>)
 80014ae:	f004 f933 	bl	8005718 <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014b8:	f000 f9a6 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_TIM5_Init+0x94>)
 80014ca:	f004 fedb 	bl	8006284 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014d4:	f000 f998 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200002c8 	.word	0x200002c8
 80014e4:	40000c00 	.word	0x40000c00

080014e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <MX_DMA_Init+0x50>)
 80014f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f2:	4a11      	ldr	r2, [pc, #68]	@ (8001538 <MX_DMA_Init+0x50>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <MX_DMA_Init+0x50>)
 80014fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <MX_DMA_Init+0x50>)
 8001508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150a:	4a0b      	ldr	r2, [pc, #44]	@ (8001538 <MX_DMA_Init+0x50>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6493      	str	r3, [r2, #72]	@ 0x48
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <MX_DMA_Init+0x50>)
 8001514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	200b      	movs	r0, #11
 8001524:	f002 f93d 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001528:	200b      	movs	r0, #11
 800152a:	f002 f954 	bl	80037d6 <HAL_NVIC_EnableIRQ>

}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <MX_GPIO_Init+0x110>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	4a3d      	ldr	r2, [pc, #244]	@ (800164c <MX_GPIO_Init+0x110>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155e:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <MX_GPIO_Init+0x110>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800156a:	4b38      	ldr	r3, [pc, #224]	@ (800164c <MX_GPIO_Init+0x110>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	4a37      	ldr	r2, [pc, #220]	@ (800164c <MX_GPIO_Init+0x110>)
 8001570:	f043 0320 	orr.w	r3, r3, #32
 8001574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001576:	4b35      	ldr	r3, [pc, #212]	@ (800164c <MX_GPIO_Init+0x110>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4b32      	ldr	r3, [pc, #200]	@ (800164c <MX_GPIO_Init+0x110>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4a31      	ldr	r2, [pc, #196]	@ (800164c <MX_GPIO_Init+0x110>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158e:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <MX_GPIO_Init+0x110>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <MX_GPIO_Init+0x110>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a2b      	ldr	r2, [pc, #172]	@ (800164c <MX_GPIO_Init+0x110>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b29      	ldr	r3, [pc, #164]	@ (800164c <MX_GPIO_Init+0x110>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2120      	movs	r1, #32
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ba:	f002 fc63 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	481e      	ldr	r0, [pc, #120]	@ (8001650 <MX_GPIO_Init+0x114>)
 80015d6:	f002 fad3 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80015da:	2350      	movs	r3, #80	@ 0x50
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f2:	f002 fac5 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015f6:	2320      	movs	r3, #32
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001610:	f002 fab6 	bl	8003b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	200a      	movs	r0, #10
 800161a:	f002 f8c2 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800161e:	200a      	movs	r0, #10
 8001620:	f002 f8d9 	bl	80037d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	2017      	movs	r0, #23
 800162a:	f002 f8ba 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800162e:	2017      	movs	r0, #23
 8001630:	f002 f8d1 	bl	80037d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2028      	movs	r0, #40	@ 0x28
 800163a:	f002 f8b2 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800163e:	2028      	movs	r0, #40	@ 0x28
 8001640:	f002 f8c9 	bl	80037d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	@ 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	48000800 	.word	0x48000800

08001654 <micros>:
			{
			_micros += UINT32_MAX;
			}
	}
uint64_t micros()
	{
 8001654:	b4b0      	push	{r4, r5, r7}
 8001656:	af00      	add	r7, sp, #0
		return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <micros+0x2c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	2200      	movs	r2, #0
 8001660:	4618      	mov	r0, r3
 8001662:	4611      	mov	r1, r2
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <micros+0x30>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	1884      	adds	r4, r0, r2
 800166c:	eb41 0503 	adc.w	r5, r1, r3
 8001670:	4622      	mov	r2, r4
 8001672:	462b      	mov	r3, r5
	}
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	bcb0      	pop	{r4, r5, r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200002c8 	.word	0x200002c8
 8001684:	20010d08 	.word	0x20010d08

08001688 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
	{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
		//collect data
		QEIdata.TimeStamp[NEW] = micros();
 800168e:	f7ff ffe1 	bl	8001654 <micros>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	493e      	ldr	r1, [pc, #248]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 8001698:	e9c1 2302 	strd	r2, r3, [r1, #8]
		QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 800169c:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <QEIEncoderPosVel_Update+0x10c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 80016a4:	6013      	str	r3, [r2, #0]
		//Postion 1 turn calculation
		QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 80016a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b6:	4b36      	ldr	r3, [pc, #216]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 80016b8:	edc3 7a06 	vstr	s15, [r3, #24]
		//calculate dx
		int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 80016bc:	4b34      	ldr	r3, [pc, #208]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b33      	ldr	r3, [pc, #204]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	607b      	str	r3, [r7, #4]
		//Handle Warp around
		if(diffPosition > 32256)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f5b3 4ffc 	cmp.w	r3, #32256	@ 0x7e00
 80016ce:	dd03      	ble.n	80016d8 <QEIEncoderPosVel_Update+0x50>
			diffPosition -=64512;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
 80016d6:	607b      	str	r3, [r7, #4]
		if(diffPosition < -32256)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f513 4ffc 	cmn.w	r3, #32256	@ 0x7e00
 80016de:	da03      	bge.n	80016e8 <QEIEncoderPosVel_Update+0x60>
			diffPosition +=64512;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 80016e6:	607b      	str	r3, [r7, #4]
		//calculate dt
		float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 80016e8:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 80016ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016ee:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 80016f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016f4:	1a84      	subs	r4, r0, r2
 80016f6:	eb61 0503 	sbc.w	r5, r1, r3
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7fe ff11 	bl	8000524 <__aeabi_ul2d>
 8001702:	a321      	add	r3, pc, #132	@ (adr r3, 8001788 <QEIEncoderPosVel_Update+0x100>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe ff42 	bl	8000590 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f996 	bl	8000a44 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	603b      	str	r3, [r7, #0]
		//calculate anglar velocity
		QEIdata.QEIAngularVelocity = ((diffPosition/8192.0)*60) / diffTime;
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7fe fecd 	bl	80004bc <__aeabi_i2d>
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <QEIEncoderPosVel_Update+0x110>)
 8001728:	f7ff f85c 	bl	80007e4 <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <QEIEncoderPosVel_Update+0x114>)
 800173a:	f7fe ff29 	bl	8000590 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4614      	mov	r4, r2
 8001744:	461d      	mov	r5, r3
 8001746:	6838      	ldr	r0, [r7, #0]
 8001748:	f7fe feca 	bl	80004e0 <__aeabi_f2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7ff f846 	bl	80007e4 <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f928 	bl	80009b4 <__aeabi_d2iz>
 8001764:	4603      	mov	r3, r0
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 8001768:	61d3      	str	r3, [r2, #28]
		//store value for next loop
		QEIdata.Position[OLD] = QEIdata.Position[NEW];
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 8001770:	6053      	str	r3, [r2, #4]
		QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 8001774:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001778:	4905      	ldr	r1, [pc, #20]	@ (8001790 <QEIEncoderPosVel_Update+0x108>)
 800177a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bdb0      	pop	{r4, r5, r7, pc}
 8001786:	bf00      	nop
 8001788:	a0b5ed8d 	.word	0xa0b5ed8d
 800178c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001790:	20010ce8 	.word	0x20010ce8
 8001794:	20000230 	.word	0x20000230
 8001798:	40c00000 	.word	0x40c00000
 800179c:	404e0000 	.word	0x404e0000

080017a0 <HAL_GPIO_EXTI_Callback>:
			  QEIEncoderPosVel_Update();
			  }
}
// Photo electric Limit Switch Condition
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4)
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d10e      	bne.n	80017ce <HAL_GPIO_EXTI_Callback+0x2e>
    {
        // Handle the interrupt for PA4
        // Example: Toggle an LED, send a message, etc.
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2120      	movs	r1, #32
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b8:	f002 fb64 	bl	8003e84 <HAL_GPIO_WritePin>
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80017bc:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_GPIO_EXTI_Callback+0x60>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2200      	movs	r2, #0
 80017c2:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	//PWM out backward
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <HAL_GPIO_EXTI_Callback+0x60>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	639a      	str	r2, [r3, #56]	@ 0x38
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	//PWM out backward
		mode = 0;
    }
}
 80017cc:	e013      	b.n	80017f6 <HAL_GPIO_EXTI_Callback+0x56>
    else if (GPIO_Pin == GPIO_PIN_6)
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	2b40      	cmp	r3, #64	@ 0x40
 80017d2:	d110      	bne.n	80017f6 <HAL_GPIO_EXTI_Callback+0x56>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2120      	movs	r1, #32
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017dc:	f002 fb52 	bl	8003e84 <HAL_GPIO_WritePin>
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <HAL_GPIO_EXTI_Callback+0x60>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	//PWM out backward
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_GPIO_EXTI_Callback+0x60>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	639a      	str	r2, [r3, #56]	@ 0x38
		mode = 0;
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <HAL_GPIO_EXTI_Callback+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000027c 	.word	0x2000027c
 8001804:	20000000 	.word	0x20000000

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <Error_Handler+0x8>

08001814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <HAL_MspInit+0x44>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181e:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <HAL_MspInit+0x44>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6613      	str	r3, [r2, #96]	@ 0x60
 8001826:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <HAL_MspInit+0x44>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_MspInit+0x44>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_MspInit+0x44>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183c:	6593      	str	r3, [r2, #88]	@ 0x58
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_MspInit+0x44>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800184a:	f002 fbef 	bl	800402c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000

0800185c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b09e      	sub	sp, #120	@ 0x78
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	2254      	movs	r2, #84	@ 0x54
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f005 fcc9 	bl	8007214 <memset>
  if(hadc->Instance==ADC1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800188a:	d166      	bne.n	800195a <HAL_ADC_MspInit+0xfe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800188c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001890:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001892:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001896:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4618      	mov	r0, r3
 800189e:	f003 f903 	bl	8004aa8 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80018a8:	f7ff ffae 	bl	8001808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <HAL_ADC_MspInit+0x108>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001964 <HAL_ADC_MspInit+0x108>)
 80018b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <HAL_ADC_MspInit+0x108>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HAL_ADC_MspInit+0x108>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c8:	4a26      	ldr	r2, [pc, #152]	@ (8001964 <HAL_ADC_MspInit+0x108>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d0:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_ADC_MspInit+0x108>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018dc:	2301      	movs	r3, #1
 80018de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e0:	2303      	movs	r3, #3
 80018e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018ec:	4619      	mov	r1, r3
 80018ee:	481e      	ldr	r0, [pc, #120]	@ (8001968 <HAL_ADC_MspInit+0x10c>)
 80018f0:	f002 f946 	bl	8003b80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <HAL_ADC_MspInit+0x110>)
 80018f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001970 <HAL_ADC_MspInit+0x114>)
 80018f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_ADC_MspInit+0x110>)
 80018fc:	2205      	movs	r2, #5
 80018fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001900:	4b1a      	ldr	r3, [pc, #104]	@ (800196c <HAL_ADC_MspInit+0x110>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001906:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_ADC_MspInit+0x110>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <HAL_ADC_MspInit+0x110>)
 800190e:	2280      	movs	r2, #128	@ 0x80
 8001910:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001912:	4b16      	ldr	r3, [pc, #88]	@ (800196c <HAL_ADC_MspInit+0x110>)
 8001914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001918:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <HAL_ADC_MspInit+0x110>)
 800191c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001920:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_ADC_MspInit+0x110>)
 8001924:	2220      	movs	r2, #32
 8001926:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001928:	4b10      	ldr	r3, [pc, #64]	@ (800196c <HAL_ADC_MspInit+0x110>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800192e:	480f      	ldr	r0, [pc, #60]	@ (800196c <HAL_ADC_MspInit+0x110>)
 8001930:	f001 ff6c 	bl	800380c <HAL_DMA_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800193a:	f7ff ff65 	bl	8001808 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_ADC_MspInit+0x110>)
 8001942:	655a      	str	r2, [r3, #84]	@ 0x54
 8001944:	4a09      	ldr	r2, [pc, #36]	@ (800196c <HAL_ADC_MspInit+0x110>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	2012      	movs	r0, #18
 8001950:	f001 ff27 	bl	80037a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001954:	2012      	movs	r0, #18
 8001956:	f001 ff3e 	bl	80037d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3778      	adds	r7, #120	@ 0x78
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800
 800196c:	200000a8 	.word	0x200000a8
 8001970:	40020008 	.word	0x40020008

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b0a0      	sub	sp, #128	@ 0x80
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800198c:	f107 0318 	add.w	r3, r7, #24
 8001990:	2254      	movs	r2, #84	@ 0x54
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f005 fc3d 	bl	8007214 <memset>
  if(huart->Instance==LPUART1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a94 <HAL_UART_MspInit+0x120>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d137      	bne.n	8001a14 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019a4:	2320      	movs	r3, #32
 80019a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ac:	f107 0318 	add.w	r3, r7, #24
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 f879 	bl	8004aa8 <HAL_RCCEx_PeriphCLKConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019bc:	f7ff ff24 	bl	8001808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019c0:	4b35      	ldr	r3, [pc, #212]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 80019c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c4:	4a34      	ldr	r2, [pc, #208]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80019cc:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80019f0:	230c      	movs	r3, #12
 80019f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a00:	230c      	movs	r3, #12
 8001a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a0e:	f002 f8b7 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001a12:	e03b      	b.n	8001a8c <HAL_UART_MspInit+0x118>
  else if(huart->Instance==UART4)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a20      	ldr	r2, [pc, #128]	@ (8001a9c <HAL_UART_MspInit+0x128>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d136      	bne.n	8001a8c <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a1e:	2308      	movs	r3, #8
 8001a20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a26:	f107 0318 	add.w	r3, r7, #24
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 f83c 	bl	8004aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001a36:	f7ff fee7 	bl	8001808 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	4a16      	ldr	r2, [pc, #88]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 8001a40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	4a10      	ldr	r2, [pc, #64]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <HAL_UART_MspInit+0x124>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a80:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	@ (8001aa0 <HAL_UART_MspInit+0x12c>)
 8001a88:	f002 f87a 	bl	8003b80 <HAL_GPIO_Init>
}
 8001a8c:	bf00      	nop
 8001a8e:	3780      	adds	r7, #128	@ 0x80
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40008000 	.word	0x40008000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40004c00 	.word	0x40004c00
 8001aa0:	48000800 	.word	0x48000800

08001aa4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	@ 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac4:	d128      	bne.n	8001b18 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac6:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	4a15      	ldr	r2, [pc, #84]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad2:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001af6:	2303      	movs	r3, #3
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b06:	2301      	movs	r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b14:	f002 f834 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	@ 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <HAL_TIM_Base_MspInit+0x5c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10c      	bne.n	8001b50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <HAL_TIM_Base_MspInit+0x60>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <HAL_TIM_Base_MspInit+0x60>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_TIM_Base_MspInit+0x60>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b4e:	e010      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0c      	ldr	r2, [pc, #48]	@ (8001b88 <HAL_TIM_Base_MspInit+0x64>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10b      	bne.n	8001b72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_TIM_Base_MspInit+0x60>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_TIM_Base_MspInit+0x60>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <HAL_TIM_Base_MspInit+0x60>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40000c00 	.word	0x40000c00

08001b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a11      	ldr	r2, [pc, #68]	@ (8001bf0 <HAL_TIM_MspPostInit+0x64>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d11b      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_TIM_MspPostInit+0x68>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	4a10      	ldr	r2, [pc, #64]	@ (8001bf4 <HAL_TIM_MspPostInit+0x68>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_TIM_MspPostInit+0x68>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bc6:	2330      	movs	r3, #48	@ 0x30
 8001bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <HAL_TIM_MspPostInit+0x6c>)
 8001be2:	f001 ffcd 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48000400 	.word	0x48000400

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <NMI_Handler+0x4>

08001c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <MemManage_Handler+0x4>

08001c14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c52:	f000 f8bb 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c5e:	2010      	movs	r0, #16
 8001c60:	f002 f928 	bl	8003eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <DMA1_Channel1_IRQHandler+0x10>)
 8001c6e:	f001 fe75 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200000a8 	.word	0x200000a8

08001c7c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <ADC1_2_IRQHandler+0x10>)
 8001c82:	f000 fc95 	bl	80025b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000003c 	.word	0x2000003c

08001c90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c94:	2040      	movs	r0, #64	@ 0x40
 8001c96:	f002 f90d 	bl	8003eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ca2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ca6:	f002 f905 	bl	8003eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8001cd4:	480d      	ldr	r0, [pc, #52]	@ (8001d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd8:	f7ff ffea 	bl	8001cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	@ (8001d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <LoopForever+0xe>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d20 <LoopForever+0x16>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d02:	f005 fa8f 	bl	8007224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d06:	f7ff f865 	bl	8000dd4 <main>

08001d0a <LoopForever>:

LoopForever:
    b LoopForever
 8001d0a:	e7fe      	b.n	8001d0a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8001d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001d18:	080072d4 	.word	0x080072d4
  ldr r2, =_sbss
 8001d1c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001d20:	20010d20 	.word	0x20010d20

08001d24 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC3_IRQHandler>

08001d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f001 fd2b 	bl	800378c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f80e 	bl	8001d58 <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	e001      	b.n	8001d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d48:	f7ff fd64 	bl	8001814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d64:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <HAL_InitTick+0x68>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d022      	beq.n	8001db2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_InitTick+0x6c>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <HAL_InitTick+0x68>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f001 fd36 	bl	80037f2 <HAL_SYSTICK_Config>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10f      	bne.n	8001dac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d809      	bhi.n	8001da6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d92:	2200      	movs	r2, #0
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9a:	f001 fd02 	bl	80037a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <HAL_InitTick+0x70>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e007      	b.n	8001db6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	e004      	b.n	8001db6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000018 	.word	0x20000018
 8001dc4:	20000010 	.word	0x20000010
 8001dc8:	20000014 	.word	0x20000014

08001dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_IncTick+0x1c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_IncTick+0x20>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a03      	ldr	r2, [pc, #12]	@ (8001de8 <HAL_IncTick+0x1c>)
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	20010d1c 	.word	0x20010d1c
 8001dec:	20000018 	.word	0x20000018

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <HAL_GetTick+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20010d1c 	.word	0x20010d1c

08001e08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	609a      	str	r2, [r3, #8]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3360      	adds	r3, #96	@ 0x60
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <LL_ADC_SetOffset+0x44>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ea8:	bf00      	nop
 8001eaa:	371c      	adds	r7, #28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	03fff000 	.word	0x03fff000

08001eb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3360      	adds	r3, #96	@ 0x60
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3360      	adds	r3, #96	@ 0x60
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f0e:	bf00      	nop
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b087      	sub	sp, #28
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3360      	adds	r3, #96	@ 0x60
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3360      	adds	r3, #96	@ 0x60
 8001f60:	461a      	mov	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	615a      	str	r2, [r3, #20]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b087      	sub	sp, #28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3330      	adds	r3, #48	@ 0x30
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	4413      	add	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	211f      	movs	r1, #31
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	401a      	ands	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0e9b      	lsrs	r3, r3, #26
 800200a:	f003 011f 	and.w	r1, r3, #31
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3314      	adds	r3, #20
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	0e5b      	lsrs	r3, r3, #25
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	0d1b      	lsrs	r3, r3, #20
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2107      	movs	r1, #7
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	401a      	ands	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	0d1b      	lsrs	r3, r3, #20
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	431a      	orrs	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0318 	and.w	r3, r3, #24
 80020ca:	4908      	ldr	r1, [pc, #32]	@ (80020ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80020cc:	40d9      	lsrs	r1, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	400b      	ands	r3, r1
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d6:	431a      	orrs	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	0007ffff 	.word	0x0007ffff

080020f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 031f 	and.w	r3, r3, #31
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6093      	str	r3, [r2, #8]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800215c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002160:	d101      	bne.n	8002166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002184:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002188:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <LL_ADC_IsEnabled+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_ADC_IsEnabled+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d101      	bne.n	8002202 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b08      	cmp	r3, #8
 8002222:	d101      	bne.n	8002228 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1a9      	b.n	80025a6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fafb 	bl	800185c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff67 	bl	800214c <LL_ADC_IsDeepPowerDownEnabled>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff4d 	bl	8002128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff82 	bl	800219c <LL_ADC_IsInternalRegulatorEnabled>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d115      	bne.n	80022ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff66 	bl	8002174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a8:	4b9c      	ldr	r3, [pc, #624]	@ (800251c <HAL_ADC_Init+0x2e4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	4a9c      	ldr	r2, [pc, #624]	@ (8002520 <HAL_ADC_Init+0x2e8>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	3301      	adds	r3, #1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff64 	bl	800219c <LL_ADC_IsInternalRegulatorEnabled>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10d      	bne.n	80022f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff75 	bl	80021ea <LL_ADC_REG_IsConversionOngoing>
 8002300:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8142 	bne.w	8002594 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 813e 	bne.w	8002594 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002320:	f043 0202 	orr.w	r2, r3, #2
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff49 	bl	80021c4 <LL_ADC_IsEnabled>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d141      	bne.n	80023bc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002340:	d004      	beq.n	800234c <HAL_ADC_Init+0x114>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a77      	ldr	r2, [pc, #476]	@ (8002524 <HAL_ADC_Init+0x2ec>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d10f      	bne.n	800236c <HAL_ADC_Init+0x134>
 800234c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002350:	f7ff ff38 	bl	80021c4 <LL_ADC_IsEnabled>
 8002354:	4604      	mov	r4, r0
 8002356:	4873      	ldr	r0, [pc, #460]	@ (8002524 <HAL_ADC_Init+0x2ec>)
 8002358:	f7ff ff34 	bl	80021c4 <LL_ADC_IsEnabled>
 800235c:	4603      	mov	r3, r0
 800235e:	4323      	orrs	r3, r4
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e012      	b.n	8002392 <HAL_ADC_Init+0x15a>
 800236c:	486e      	ldr	r0, [pc, #440]	@ (8002528 <HAL_ADC_Init+0x2f0>)
 800236e:	f7ff ff29 	bl	80021c4 <LL_ADC_IsEnabled>
 8002372:	4604      	mov	r4, r0
 8002374:	486d      	ldr	r0, [pc, #436]	@ (800252c <HAL_ADC_Init+0x2f4>)
 8002376:	f7ff ff25 	bl	80021c4 <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	431c      	orrs	r4, r3
 800237e:	486c      	ldr	r0, [pc, #432]	@ (8002530 <HAL_ADC_Init+0x2f8>)
 8002380:	f7ff ff20 	bl	80021c4 <LL_ADC_IsEnabled>
 8002384:	4603      	mov	r3, r0
 8002386:	4323      	orrs	r3, r4
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800239e:	d004      	beq.n	80023aa <HAL_ADC_Init+0x172>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002524 <HAL_ADC_Init+0x2ec>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_Init+0x176>
 80023aa:	4a62      	ldr	r2, [pc, #392]	@ (8002534 <HAL_ADC_Init+0x2fc>)
 80023ac:	e000      	b.n	80023b0 <HAL_ADC_Init+0x178>
 80023ae:	4a62      	ldr	r2, [pc, #392]	@ (8002538 <HAL_ADC_Init+0x300>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f7ff fd26 	bl	8001e08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	7f5b      	ldrb	r3, [r3, #29]
 80023c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d106      	bne.n	80023f8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	3b01      	subs	r3, #1
 80023f0:	045b      	lsls	r3, r3, #17
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d009      	beq.n	8002414 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	4b48      	ldr	r3, [pc, #288]	@ (800253c <HAL_ADC_Init+0x304>)
 800241c:	4013      	ands	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	430b      	orrs	r3, r1
 8002426:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fee4 	bl	8002210 <LL_ADC_INJ_IsConversionOngoing>
 8002448:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d17f      	bne.n	8002550 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d17c      	bne.n	8002550 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800245a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002462:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002472:	f023 0302 	bic.w	r3, r3, #2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	430b      	orrs	r3, r1
 800247e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d017      	beq.n	80024b8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002496:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6911      	ldr	r1, [r2, #16]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80024b6:	e013      	b.n	80024e0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d12a      	bne.n	8002540 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002500:	4311      	orrs	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002506:	4311      	orrs	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800250c:	430a      	orrs	r2, r1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	e019      	b.n	8002550 <HAL_ADC_Init+0x318>
 800251c:	20000010 	.word	0x20000010
 8002520:	053e2d63 	.word	0x053e2d63
 8002524:	50000100 	.word	0x50000100
 8002528:	50000400 	.word	0x50000400
 800252c:	50000500 	.word	0x50000500
 8002530:	50000600 	.word	0x50000600
 8002534:	50000300 	.word	0x50000300
 8002538:	50000700 	.word	0x50000700
 800253c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10c      	bne.n	8002572 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f023 010f 	bic.w	r1, r3, #15
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	1e5a      	subs	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002570:	e007      	b.n	8002582 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 020f 	bic.w	r2, r2, #15
 8002580:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002592:	e007      	b.n	80025a4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002598:	f043 0210 	orr.w	r2, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	@ 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	bf00      	nop

080025b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	@ 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d4:	d004      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x30>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a8e      	ldr	r2, [pc, #568]	@ (8002814 <HAL_ADC_IRQHandler+0x264>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_IRQHandler+0x34>
 80025e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002818 <HAL_ADC_IRQHandler+0x268>)
 80025e2:	e000      	b.n	80025e6 <HAL_ADC_IRQHandler+0x36>
 80025e4:	4b8d      	ldr	r3, [pc, #564]	@ (800281c <HAL_ADC_IRQHandler+0x26c>)
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fd82 	bl	80020f0 <LL_ADC_GetMultimode>
 80025ec:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d017      	beq.n	8002628 <HAL_ADC_IRQHandler+0x78>
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d012      	beq.n	8002628 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002612:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fed4 	bl	80033c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2202      	movs	r2, #2
 8002626:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_ADC_IRQHandler+0x8c>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10b      	bne.n	8002654 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8094 	beq.w	8002770 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 808e 	beq.w	8002770 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fc9b 	bl	8001fac <LL_ADC_REG_IsTriggerSourceSWStart>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d072      	beq.n	8002762 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a64      	ldr	r2, [pc, #400]	@ (8002814 <HAL_ADC_IRQHandler+0x264>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_ADC_IRQHandler+0xea>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a65      	ldr	r2, [pc, #404]	@ (8002820 <HAL_ADC_IRQHandler+0x270>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d002      	beq.n	8002696 <HAL_ADC_IRQHandler+0xe6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	e003      	b.n	800269e <HAL_ADC_IRQHandler+0xee>
 8002696:	4b63      	ldr	r3, [pc, #396]	@ (8002824 <HAL_ADC_IRQHandler+0x274>)
 8002698:	e001      	b.n	800269e <HAL_ADC_IRQHandler+0xee>
 800269a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d008      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	d002      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b09      	cmp	r3, #9
 80026b6:	d104      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	e014      	b.n	80026ec <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a53      	ldr	r2, [pc, #332]	@ (8002814 <HAL_ADC_IRQHandler+0x264>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d009      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x130>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a53      	ldr	r2, [pc, #332]	@ (8002820 <HAL_ADC_IRQHandler+0x270>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d002      	beq.n	80026dc <HAL_ADC_IRQHandler+0x12c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e003      	b.n	80026e4 <HAL_ADC_IRQHandler+0x134>
 80026dc:	4b51      	ldr	r3, [pc, #324]	@ (8002824 <HAL_ADC_IRQHandler+0x274>)
 80026de:	e001      	b.n	80026e4 <HAL_ADC_IRQHandler+0x134>
 80026e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026e4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d135      	bne.n	8002762 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b08      	cmp	r3, #8
 8002702:	d12e      	bne.n	8002762 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fd6e 	bl	80021ea <LL_ADC_REG_IsConversionOngoing>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d11a      	bne.n	800274a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 020c 	bic.w	r2, r2, #12
 8002722:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d112      	bne.n	8002762 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002748:	e00b      	b.n	8002762 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	f043 0210 	orr.w	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f984 	bl	8002a70 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	220c      	movs	r2, #12
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_ADC_IRQHandler+0x1d4>
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10b      	bne.n	800279c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80b3 	beq.w	80028f6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80ad 	beq.w	80028f6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fc36 	bl	800202a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80027be:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fbf1 	bl	8001fac <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a10      	ldr	r2, [pc, #64]	@ (8002814 <HAL_ADC_IRQHandler+0x264>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_ADC_IRQHandler+0x23a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a11      	ldr	r2, [pc, #68]	@ (8002820 <HAL_ADC_IRQHandler+0x270>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d002      	beq.n	80027e6 <HAL_ADC_IRQHandler+0x236>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	e003      	b.n	80027ee <HAL_ADC_IRQHandler+0x23e>
 80027e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <HAL_ADC_IRQHandler+0x274>)
 80027e8:	e001      	b.n	80027ee <HAL_ADC_IRQHandler+0x23e>
 80027ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d008      	beq.n	8002808 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d002      	beq.n	8002808 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b07      	cmp	r3, #7
 8002806:	d10f      	bne.n	8002828 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	623b      	str	r3, [r7, #32]
 8002810:	e01f      	b.n	8002852 <HAL_ADC_IRQHandler+0x2a2>
 8002812:	bf00      	nop
 8002814:	50000100 	.word	0x50000100
 8002818:	50000300 	.word	0x50000300
 800281c:	50000700 	.word	0x50000700
 8002820:	50000500 	.word	0x50000500
 8002824:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a8b      	ldr	r2, [pc, #556]	@ (8002a5c <HAL_ADC_IRQHandler+0x4ac>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_ADC_IRQHandler+0x296>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a8a      	ldr	r2, [pc, #552]	@ (8002a60 <HAL_ADC_IRQHandler+0x4b0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d002      	beq.n	8002842 <HAL_ADC_IRQHandler+0x292>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	e003      	b.n	800284a <HAL_ADC_IRQHandler+0x29a>
 8002842:	4b88      	ldr	r3, [pc, #544]	@ (8002a64 <HAL_ADC_IRQHandler+0x4b4>)
 8002844:	e001      	b.n	800284a <HAL_ADC_IRQHandler+0x29a>
 8002846:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800284a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d047      	beq.n	80028e8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_ADC_IRQHandler+0x2c2>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d03f      	beq.n	80028e8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800286e:	2b00      	cmp	r3, #0
 8002870:	d13a      	bne.n	80028e8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287c:	2b40      	cmp	r3, #64	@ 0x40
 800287e:	d133      	bne.n	80028e8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d12e      	bne.n	80028e8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fcbe 	bl	8002210 <LL_ADC_INJ_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11a      	bne.n	80028d0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028a8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d112      	bne.n	80028e8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028ce:	e00b      	b.n	80028e8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	f043 0210 	orr.w	r2, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fd45 	bl	8003378 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2260      	movs	r2, #96	@ 0x60
 80028f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d011      	beq.n	8002924 <HAL_ADC_IRQHandler+0x374>
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8b4 	bl	8002a84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2280      	movs	r2, #128	@ 0x80
 8002922:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <HAL_ADC_IRQHandler+0x3a4>
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00d      	beq.n	8002954 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fd2b 	bl	80033a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <HAL_ADC_IRQHandler+0x3d4>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fd1d 	bl	80033b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d043      	beq.n	8002a16 <HAL_ADC_IRQHandler+0x466>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	d03e      	beq.n	8002a16 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80029a0:	2301      	movs	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a4:	e021      	b.n	80029ea <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029b4:	d004      	beq.n	80029c0 <HAL_ADC_IRQHandler+0x410>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a28      	ldr	r2, [pc, #160]	@ (8002a5c <HAL_ADC_IRQHandler+0x4ac>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x414>
 80029c0:	4b29      	ldr	r3, [pc, #164]	@ (8002a68 <HAL_ADC_IRQHandler+0x4b8>)
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_IRQHandler+0x416>
 80029c4:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <HAL_ADC_IRQHandler+0x4bc>)
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fba0 	bl	800210c <LL_ADC_GetMultiDMATransfer>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80029d2:	2301      	movs	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d6:	e008      	b.n	80029ea <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80029e6:	2301      	movs	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d10e      	bne.n	8002a0e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a00:	f043 0202 	orr.w	r2, r3, #2
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f845 	bl	8002a98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2210      	movs	r2, #16
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d018      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x4a2>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d013      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3a:	f043 0208 	orr.w	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fc9d 	bl	800338c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002a52:	bf00      	nop
 8002a54:	3728      	adds	r7, #40	@ 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	50000100 	.word	0x50000100
 8002a60:	50000500 	.word	0x50000500
 8002a64:	50000400 	.word	0x50000400
 8002a68:	50000300 	.word	0x50000300
 8002a6c:	50000700 	.word	0x50000700

08002a70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b0b6      	sub	sp, #216	@ 0xd8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x24>
 8002aca:	2302      	movs	r3, #2
 8002acc:	f000 bc13 	b.w	80032f6 <HAL_ADC_ConfigChannel+0x84a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fb84 	bl	80021ea <LL_ADC_REG_IsConversionOngoing>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 83f3 	bne.w	80032d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f7ff fa6b 	bl	8001fd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fb72 	bl	80021ea <LL_ADC_REG_IsConversionOngoing>
 8002b06:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fb7e 	bl	8002210 <LL_ADC_INJ_IsConversionOngoing>
 8002b14:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f040 81d9 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 81d4 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b34:	d10f      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7ff fa85 	bl	8002050 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fa19 	bl	8001f86 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b54:	e00e      	b.n	8002b74 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f7ff fa74 	bl	8002050 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa09 	bl	8001f86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d022      	beq.n	8002bdc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6919      	ldr	r1, [r3, #16]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ba6:	f7ff f963 	bl	8001e70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6919      	ldr	r1, [r3, #16]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f7ff f9af 	bl	8001f1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x126>
 8002bcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bd0:	e000      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x128>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff f9bb 	bl	8001f50 <LL_ADC_SetOffsetSaturation>
 8002bda:	e17b      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f968 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x15c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f95d 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 021f 	and.w	r2, r3, #31
 8002c06:	e01e      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x19a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff f952 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e004      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x1b2>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	e018      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x1e4>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c82:	2320      	movs	r3, #32
 8002c84:	e004      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d106      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff f921 	bl	8001ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff f905 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x222>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff f8fa 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	e01e      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x260>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f8ef 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002cec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e004      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x278>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	e018      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x2aa>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e004      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d50:	fab3 f383 	clz	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d106      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2101      	movs	r1, #1
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f8be 	bl	8001ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f8a2 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x2e8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2102      	movs	r1, #2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f897 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	f003 021f 	and.w	r2, r3, #31
 8002d92:	e01e      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x326>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2102      	movs	r1, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f88c 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002db2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	e004      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x33e>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	e016      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x36c>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002dfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e004      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d106      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2102      	movs	r1, #2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f85d 	bl	8001ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2103      	movs	r1, #3
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f841 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x3aa>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2103      	movs	r1, #3
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f836 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	0e9b      	lsrs	r3, r3, #26
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	e017      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x3da>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2103      	movs	r1, #3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f82b 	bl	8001eb8 <LL_ADC_GetOffsetChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e70:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x3f2>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	e011      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x416>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	e003      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d106      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2103      	movs	r1, #3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f808 	bl	8001ee4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f973 	bl	80021c4 <LL_ADC_IsEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 813d 	bne.w	8003160 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f7ff f8d8 	bl	80020a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4aa2      	ldr	r2, [pc, #648]	@ (8003188 <HAL_ADC_ConfigChannel+0x6dc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	f040 812e 	bne.w	8003160 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x480>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2b09      	cmp	r3, #9
 8002f22:	bf94      	ite	ls
 8002f24:	2301      	movls	r3, #1
 8002f26:	2300      	movhi	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e019      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x4b4>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f3c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f44:	2320      	movs	r3, #32
 8002f46:	e003      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2b09      	cmp	r3, #9
 8002f58:	bf94      	ite	ls
 8002f5a:	2301      	movls	r3, #1
 8002f5c:	2300      	movhi	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d079      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x4d4>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	0e9b      	lsrs	r3, r3, #26
 8002f76:	3301      	adds	r3, #1
 8002f78:	069b      	lsls	r3, r3, #26
 8002f7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f7e:	e015      	b.n	8002fac <HAL_ADC_ConfigChannel+0x500>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f90:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e003      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	069b      	lsls	r3, r3, #26
 8002fa8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x520>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	0e9b      	lsrs	r3, r3, #26
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	e017      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x550>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e003      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	ea42 0103 	orr.w	r1, r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x576>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	3301      	adds	r3, #1
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	051b      	lsls	r3, r3, #20
 8003020:	e018      	b.n	8003054 <HAL_ADC_ConfigChannel+0x5a8>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800303a:	2320      	movs	r3, #32
 800303c:	e003      	b.n	8003046 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800303e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f003 021f 	and.w	r2, r3, #31
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003054:	430b      	orrs	r3, r1
 8003056:	e07e      	b.n	8003156 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x5c8>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e9b      	lsrs	r3, r3, #26
 800306a:	3301      	adds	r3, #1
 800306c:	069b      	lsls	r3, r3, #26
 800306e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003072:	e015      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x5f4>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003084:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e003      	b.n	8003098 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	3301      	adds	r3, #1
 800309a:	069b      	lsls	r3, r3, #26
 800309c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x614>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	3301      	adds	r3, #1
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	e017      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x644>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	61fb      	str	r3, [r7, #28]
  return result;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	ea42 0103 	orr.w	r1, r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <HAL_ADC_ConfigChannel+0x670>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	3301      	adds	r3, #1
 8003108:	f003 021f 	and.w	r2, r3, #31
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	3b1e      	subs	r3, #30
 8003114:	051b      	lsls	r3, r3, #20
 8003116:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800311a:	e01b      	b.n	8003154 <HAL_ADC_ConfigChannel+0x6a8>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	613b      	str	r3, [r7, #16]
  return result;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003134:	2320      	movs	r3, #32
 8003136:	e003      	b.n	8003140 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f003 021f 	and.w	r2, r3, #31
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	3b1e      	subs	r3, #30
 800314e:	051b      	lsls	r3, r3, #20
 8003150:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003154:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800315a:	4619      	mov	r1, r3
 800315c:	f7fe ff78 	bl	8002050 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_ADC_ConfigChannel+0x6e0>)
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80be 	beq.w	80032ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003176:	d004      	beq.n	8003182 <HAL_ADC_ConfigChannel+0x6d6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a04      	ldr	r2, [pc, #16]	@ (8003190 <HAL_ADC_ConfigChannel+0x6e4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d10a      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x6ec>
 8003182:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <HAL_ADC_ConfigChannel+0x6e8>)
 8003184:	e009      	b.n	800319a <HAL_ADC_ConfigChannel+0x6ee>
 8003186:	bf00      	nop
 8003188:	407f0000 	.word	0x407f0000
 800318c:	80080000 	.word	0x80080000
 8003190:	50000100 	.word	0x50000100
 8003194:	50000300 	.word	0x50000300
 8003198:	4b59      	ldr	r3, [pc, #356]	@ (8003300 <HAL_ADC_ConfigChannel+0x854>)
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fe5a 	bl	8001e54 <LL_ADC_GetCommonPathInternalCh>
 80031a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a56      	ldr	r2, [pc, #344]	@ (8003304 <HAL_ADC_ConfigChannel+0x858>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0x70c>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a55      	ldr	r2, [pc, #340]	@ (8003308 <HAL_ADC_ConfigChannel+0x85c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d13a      	bne.n	800322e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d134      	bne.n	800322e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031cc:	d005      	beq.n	80031da <HAL_ADC_ConfigChannel+0x72e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a4e      	ldr	r2, [pc, #312]	@ (800330c <HAL_ADC_ConfigChannel+0x860>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	f040 8085 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e2:	d004      	beq.n	80031ee <HAL_ADC_ConfigChannel+0x742>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a49      	ldr	r2, [pc, #292]	@ (8003310 <HAL_ADC_ConfigChannel+0x864>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x746>
 80031ee:	4a49      	ldr	r2, [pc, #292]	@ (8003314 <HAL_ADC_ConfigChannel+0x868>)
 80031f0:	e000      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x748>
 80031f2:	4a43      	ldr	r2, [pc, #268]	@ (8003300 <HAL_ADC_ConfigChannel+0x854>)
 80031f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7fe fe15 	bl	8001e2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003204:	4b44      	ldr	r3, [pc, #272]	@ (8003318 <HAL_ADC_ConfigChannel+0x86c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	4a44      	ldr	r2, [pc, #272]	@ (800331c <HAL_ADC_ConfigChannel+0x870>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800321e:	e002      	b.n	8003226 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3b01      	subs	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f9      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800322c:	e05a      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a3b      	ldr	r2, [pc, #236]	@ (8003320 <HAL_ADC_ConfigChannel+0x874>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d125      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800323c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d11f      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a31      	ldr	r2, [pc, #196]	@ (8003310 <HAL_ADC_ConfigChannel+0x864>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d104      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x7ac>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a34      	ldr	r2, [pc, #208]	@ (8003324 <HAL_ADC_ConfigChannel+0x878>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d047      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003260:	d004      	beq.n	800326c <HAL_ADC_ConfigChannel+0x7c0>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <HAL_ADC_ConfigChannel+0x864>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x7c4>
 800326c:	4a29      	ldr	r2, [pc, #164]	@ (8003314 <HAL_ADC_ConfigChannel+0x868>)
 800326e:	e000      	b.n	8003272 <HAL_ADC_ConfigChannel+0x7c6>
 8003270:	4a23      	ldr	r2, [pc, #140]	@ (8003300 <HAL_ADC_ConfigChannel+0x854>)
 8003272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800327a:	4619      	mov	r1, r3
 800327c:	4610      	mov	r0, r2
 800327e:	f7fe fdd6 	bl	8001e2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003282:	e031      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a27      	ldr	r2, [pc, #156]	@ (8003328 <HAL_ADC_ConfigChannel+0x87c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d12d      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800328e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d127      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <HAL_ADC_ConfigChannel+0x864>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d022      	beq.n	80032ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032ac:	d004      	beq.n	80032b8 <HAL_ADC_ConfigChannel+0x80c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a17      	ldr	r2, [pc, #92]	@ (8003310 <HAL_ADC_ConfigChannel+0x864>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x810>
 80032b8:	4a16      	ldr	r2, [pc, #88]	@ (8003314 <HAL_ADC_ConfigChannel+0x868>)
 80032ba:	e000      	b.n	80032be <HAL_ADC_ConfigChannel+0x812>
 80032bc:	4a10      	ldr	r2, [pc, #64]	@ (8003300 <HAL_ADC_ConfigChannel+0x854>)
 80032be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f7fe fdb0 	bl	8001e2e <LL_ADC_SetCommonPathInternalCh>
 80032ce:	e00c      	b.n	80032ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80032e2:	e002      	b.n	80032ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e4:	bf00      	nop
 80032e6:	e000      	b.n	80032ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	37d8      	adds	r7, #216	@ 0xd8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	50000700 	.word	0x50000700
 8003304:	c3210000 	.word	0xc3210000
 8003308:	90c00010 	.word	0x90c00010
 800330c:	50000600 	.word	0x50000600
 8003310:	50000100 	.word	0x50000100
 8003314:	50000300 	.word	0x50000300
 8003318:	20000010 	.word	0x20000010
 800331c:	053e2d63 	.word	0x053e2d63
 8003320:	c7520000 	.word	0xc7520000
 8003324:	50000500 	.word	0x50000500
 8003328:	cb840000 	.word	0xcb840000

0800332c <LL_ADC_IsEnabled>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <LL_ADC_IsEnabled+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_IsEnabled+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_ADC_REG_IsConversionOngoing>:
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d101      	bne.n	800336a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b0a1      	sub	sp, #132	@ 0x84
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0e7      	b.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003402:	2300      	movs	r3, #0
 8003404:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003406:	2300      	movs	r3, #0
 8003408:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003412:	d102      	bne.n	800341a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003414:	4b6f      	ldr	r3, [pc, #444]	@ (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	e009      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6e      	ldr	r2, [pc, #440]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d102      	bne.n	800342a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003424:	4b6d      	ldr	r3, [pc, #436]	@ (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	e001      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003438:	f043 0220 	orr.w	r2, r3, #32
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0be      	b.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff7f 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 8003454:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff79 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 80a0 	bne.w	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 809c 	bne.w	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003478:	d004      	beq.n	8003484 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a55      	ldr	r2, [pc, #340]	@ (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003484:	4b56      	ldr	r3, [pc, #344]	@ (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003486:	e000      	b.n	800348a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003488:	4b56      	ldr	r3, [pc, #344]	@ (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800348a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d04b      	beq.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003494:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034a6:	035b      	lsls	r3, r3, #13
 80034a8:	430b      	orrs	r3, r1
 80034aa:	431a      	orrs	r2, r3
 80034ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b8:	d004      	beq.n	80034c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a45      	ldr	r2, [pc, #276]	@ (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d10f      	bne.n	80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80034c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034c8:	f7ff ff30 	bl	800332c <LL_ADC_IsEnabled>
 80034cc:	4604      	mov	r4, r0
 80034ce:	4841      	ldr	r0, [pc, #260]	@ (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034d0:	f7ff ff2c 	bl	800332c <LL_ADC_IsEnabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	4323      	orrs	r3, r4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e012      	b.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80034e4:	483c      	ldr	r0, [pc, #240]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034e6:	f7ff ff21 	bl	800332c <LL_ADC_IsEnabled>
 80034ea:	4604      	mov	r4, r0
 80034ec:	483b      	ldr	r0, [pc, #236]	@ (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034ee:	f7ff ff1d 	bl	800332c <LL_ADC_IsEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	431c      	orrs	r4, r3
 80034f6:	483c      	ldr	r0, [pc, #240]	@ (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034f8:	f7ff ff18 	bl	800332c <LL_ADC_IsEnabled>
 80034fc:	4603      	mov	r3, r0
 80034fe:	4323      	orrs	r3, r4
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d056      	beq.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800350e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003516:	f023 030f 	bic.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	6811      	ldr	r1, [r2, #0]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	430a      	orrs	r2, r1
 8003524:	431a      	orrs	r2, r3
 8003526:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003528:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800352a:	e047      	b.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800352c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003536:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003540:	d004      	beq.n	800354c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a23      	ldr	r2, [pc, #140]	@ (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d10f      	bne.n	800356c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800354c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003550:	f7ff feec 	bl	800332c <LL_ADC_IsEnabled>
 8003554:	4604      	mov	r4, r0
 8003556:	481f      	ldr	r0, [pc, #124]	@ (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003558:	f7ff fee8 	bl	800332c <LL_ADC_IsEnabled>
 800355c:	4603      	mov	r3, r0
 800355e:	4323      	orrs	r3, r4
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e012      	b.n	8003592 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800356c:	481a      	ldr	r0, [pc, #104]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800356e:	f7ff fedd 	bl	800332c <LL_ADC_IsEnabled>
 8003572:	4604      	mov	r4, r0
 8003574:	4819      	ldr	r0, [pc, #100]	@ (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003576:	f7ff fed9 	bl	800332c <LL_ADC_IsEnabled>
 800357a:	4603      	mov	r3, r0
 800357c:	431c      	orrs	r4, r3
 800357e:	481a      	ldr	r0, [pc, #104]	@ (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003580:	f7ff fed4 	bl	800332c <LL_ADC_IsEnabled>
 8003584:	4603      	mov	r3, r0
 8003586:	4323      	orrs	r3, r4
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d012      	beq.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800359e:	f023 030f 	bic.w	r3, r3, #15
 80035a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035a6:	e009      	b.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80035ba:	e000      	b.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3784      	adds	r7, #132	@ 0x84
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd90      	pop	{r4, r7, pc}
 80035d2:	bf00      	nop
 80035d4:	50000100 	.word	0x50000100
 80035d8:	50000400 	.word	0x50000400
 80035dc:	50000500 	.word	0x50000500
 80035e0:	50000300 	.word	0x50000300
 80035e4:	50000700 	.word	0x50000700
 80035e8:	50000600 	.word	0x50000600

080035ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <__NVIC_SetPriorityGrouping+0x44>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003608:	4013      	ands	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003614:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800361c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361e:	4a04      	ldr	r2, [pc, #16]	@ (8003630 <__NVIC_SetPriorityGrouping+0x44>)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	60d3      	str	r3, [r2, #12]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <__NVIC_GetPriorityGrouping+0x18>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	f003 0307 	and.w	r3, r3, #7
}
 8003642:	4618      	mov	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	2b00      	cmp	r3, #0
 8003660:	db0b      	blt.n	800367a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	f003 021f 	and.w	r2, r3, #31
 8003668:	4907      	ldr	r1, [pc, #28]	@ (8003688 <__NVIC_EnableIRQ+0x38>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	2001      	movs	r0, #1
 8003672:	fa00 f202 	lsl.w	r2, r0, r2
 8003676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	e000e100 	.word	0xe000e100

0800368c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	6039      	str	r1, [r7, #0]
 8003696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369c:	2b00      	cmp	r3, #0
 800369e:	db0a      	blt.n	80036b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	490c      	ldr	r1, [pc, #48]	@ (80036d8 <__NVIC_SetPriority+0x4c>)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	0112      	lsls	r2, r2, #4
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	440b      	add	r3, r1
 80036b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b4:	e00a      	b.n	80036cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4908      	ldr	r1, [pc, #32]	@ (80036dc <__NVIC_SetPriority+0x50>)
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	3b04      	subs	r3, #4
 80036c4:	0112      	lsls	r2, r2, #4
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	440b      	add	r3, r1
 80036ca:	761a      	strb	r2, [r3, #24]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000e100 	.word	0xe000e100
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	@ 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f1c3 0307 	rsb	r3, r3, #7
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	bf28      	it	cs
 80036fe:	2304      	movcs	r3, #4
 8003700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3304      	adds	r3, #4
 8003706:	2b06      	cmp	r3, #6
 8003708:	d902      	bls.n	8003710 <NVIC_EncodePriority+0x30>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3b03      	subs	r3, #3
 800370e:	e000      	b.n	8003712 <NVIC_EncodePriority+0x32>
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	f04f 32ff 	mov.w	r2, #4294967295
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43da      	mvns	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	401a      	ands	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003728:	f04f 31ff 	mov.w	r1, #4294967295
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	43d9      	mvns	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003738:	4313      	orrs	r3, r2
         );
}
 800373a:	4618      	mov	r0, r3
 800373c:	3724      	adds	r7, #36	@ 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003758:	d301      	bcc.n	800375e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800375a:	2301      	movs	r3, #1
 800375c:	e00f      	b.n	800377e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375e:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <SysTick_Config+0x40>)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003766:	210f      	movs	r1, #15
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	f7ff ff8e 	bl	800368c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <SysTick_Config+0x40>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003776:	4b04      	ldr	r3, [pc, #16]	@ (8003788 <SysTick_Config+0x40>)
 8003778:	2207      	movs	r2, #7
 800377a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	e000e010 	.word	0xe000e010

0800378c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff29 	bl	80035ec <__NVIC_SetPriorityGrouping>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037b0:	f7ff ff40 	bl	8003634 <__NVIC_GetPriorityGrouping>
 80037b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	6978      	ldr	r0, [r7, #20]
 80037bc:	f7ff ff90 	bl	80036e0 <NVIC_EncodePriority>
 80037c0:	4602      	mov	r2, r0
 80037c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff5f 	bl	800368c <__NVIC_SetPriority>
}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff33 	bl	8003650 <__NVIC_EnableIRQ>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ffa4 	bl	8003748 <SysTick_Config>
 8003800:	4603      	mov	r3, r0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e08d      	b.n	800393a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	4b47      	ldr	r3, [pc, #284]	@ (8003944 <HAL_DMA_Init+0x138>)
 8003826:	429a      	cmp	r2, r3
 8003828:	d80f      	bhi.n	800384a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	4b45      	ldr	r3, [pc, #276]	@ (8003948 <HAL_DMA_Init+0x13c>)
 8003832:	4413      	add	r3, r2
 8003834:	4a45      	ldr	r2, [pc, #276]	@ (800394c <HAL_DMA_Init+0x140>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	009a      	lsls	r2, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a42      	ldr	r2, [pc, #264]	@ (8003950 <HAL_DMA_Init+0x144>)
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40
 8003848:	e00e      	b.n	8003868 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	4b40      	ldr	r3, [pc, #256]	@ (8003954 <HAL_DMA_Init+0x148>)
 8003852:	4413      	add	r3, r2
 8003854:	4a3d      	ldr	r2, [pc, #244]	@ (800394c <HAL_DMA_Init+0x140>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	009a      	lsls	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a3c      	ldr	r2, [pc, #240]	@ (8003958 <HAL_DMA_Init+0x14c>)
 8003866:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800387e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003882:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800388c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8fe 	bl	8003abc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038c8:	d102      	bne.n	80038d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_DMA_Init+0x104>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d80c      	bhi.n	8003910 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f91e 	bl	8003b38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	e008      	b.n	8003922 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40020407 	.word	0x40020407
 8003948:	bffdfff8 	.word	0xbffdfff8
 800394c:	cccccccd 	.word	0xcccccccd
 8003950:	40020000 	.word	0x40020000
 8003954:	bffdfbf8 	.word	0xbffdfbf8
 8003958:	40020400 	.word	0x40020400

0800395c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2204      	movs	r2, #4
 800397e:	409a      	lsls	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d026      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x7a>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d021      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0204 	bic.w	r2, r2, #4
 80039ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	2104      	movs	r1, #4
 80039be:	fa01 f202 	lsl.w	r2, r1, r2
 80039c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d071      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039d4:	e06c      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2202      	movs	r2, #2
 80039e0:	409a      	lsls	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d02e      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d029      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 020a 	bic.w	r2, r2, #10
 8003a10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	f003 021f 	and.w	r2, r3, #31
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	2102      	movs	r1, #2
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d038      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a46:	e033      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2208      	movs	r2, #8
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02a      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d025      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 020e 	bic.w	r2, r2, #14
 8003a74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	f003 021f 	and.w	r2, r3, #31
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f202 	lsl.w	r2, r1, r2
 8003a88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
}
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b16      	ldr	r3, [pc, #88]	@ (8003b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d802      	bhi.n	8003ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ad0:	4b15      	ldr	r3, [pc, #84]	@ (8003b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	e001      	b.n	8003ada <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003ad6:	4b15      	ldr	r3, [pc, #84]	@ (8003b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ad8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3b08      	subs	r3, #8
 8003ae6:	4a12      	ldr	r2, [pc, #72]	@ (8003b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	009a      	lsls	r2, r3, #2
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a0b      	ldr	r2, [pc, #44]	@ (8003b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	2201      	movs	r2, #1
 8003b10:	409a      	lsls	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40020407 	.word	0x40020407
 8003b28:	40020800 	.word	0x40020800
 8003b2c:	40020820 	.word	0x40020820
 8003b30:	cccccccd 	.word	0xcccccccd
 8003b34:	40020880 	.word	0x40020880

08003b38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	461a      	mov	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a08      	ldr	r2, [pc, #32]	@ (8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b5a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2201      	movs	r2, #1
 8003b66:	409a      	lsls	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	1000823f 	.word	0x1000823f
 8003b7c:	40020940 	.word	0x40020940

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b8e:	e15a      	b.n	8003e46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 814c 	beq.w	8003e40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d005      	beq.n	8003bc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d130      	bne.n	8003c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0201 	and.w	r2, r3, #1
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d017      	beq.n	8003c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d123      	bne.n	8003cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	6939      	ldr	r1, [r7, #16]
 8003cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0203 	and.w	r2, r3, #3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80a6 	beq.w	8003e40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e64 <HAL_GPIO_Init+0x2e4>)
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e64 <HAL_GPIO_Init+0x2e4>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d00:	4b58      	ldr	r3, [pc, #352]	@ (8003e64 <HAL_GPIO_Init+0x2e4>)
 8003d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d0c:	4a56      	ldr	r2, [pc, #344]	@ (8003e68 <HAL_GPIO_Init+0x2e8>)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	3302      	adds	r3, #2
 8003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	220f      	movs	r2, #15
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d36:	d01f      	beq.n	8003d78 <HAL_GPIO_Init+0x1f8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e6c <HAL_GPIO_Init+0x2ec>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d019      	beq.n	8003d74 <HAL_GPIO_Init+0x1f4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a4b      	ldr	r2, [pc, #300]	@ (8003e70 <HAL_GPIO_Init+0x2f0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <HAL_GPIO_Init+0x1f0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e74 <HAL_GPIO_Init+0x2f4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00d      	beq.n	8003d6c <HAL_GPIO_Init+0x1ec>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a49      	ldr	r2, [pc, #292]	@ (8003e78 <HAL_GPIO_Init+0x2f8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <HAL_GPIO_Init+0x1e8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a48      	ldr	r2, [pc, #288]	@ (8003e7c <HAL_GPIO_Init+0x2fc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_GPIO_Init+0x1e4>
 8003d60:	2305      	movs	r3, #5
 8003d62:	e00a      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d64:	2306      	movs	r3, #6
 8003d66:	e008      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	e006      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e004      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e002      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	f002 0203 	and.w	r2, r2, #3
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	4093      	lsls	r3, r2
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d8a:	4937      	ldr	r1, [pc, #220]	@ (8003e68 <HAL_GPIO_Init+0x2e8>)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	3302      	adds	r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d98:	4b39      	ldr	r3, [pc, #228]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dbc:	4a30      	ldr	r2, [pc, #192]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003de6:	4a26      	ldr	r2, [pc, #152]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003dec:	4b24      	ldr	r3, [pc, #144]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e10:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e16:	4b1a      	ldr	r3, [pc, #104]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e3a:	4a11      	ldr	r2, [pc, #68]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3301      	adds	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f47f ae9d 	bne.w	8003b90 <HAL_GPIO_Init+0x10>
  }
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	48000400 	.word	0x48000400
 8003e70:	48000800 	.word	0x48000800
 8003e74:	48000c00 	.word	0x48000c00
 8003e78:	48001000 	.word	0x48001000
 8003e7c:	48001400 	.word	0x48001400
 8003e80:	40010400 	.word	0x40010400

08003e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ea0:	e002      	b.n	8003ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eca:	4a05      	ldr	r2, [pc, #20]	@ (8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fc64 	bl	80017a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d141      	bne.n	8003f76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efe:	d131      	bne.n	8003f64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f00:	4b47      	ldr	r3, [pc, #284]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f06:	4a46      	ldr	r2, [pc, #280]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f10:	4b43      	ldr	r3, [pc, #268]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f18:	4a41      	ldr	r2, [pc, #260]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f20:	4b40      	ldr	r3, [pc, #256]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2232      	movs	r2, #50	@ 0x32
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8004028 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	0c9b      	lsrs	r3, r3, #18
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f36:	e002      	b.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f3e:	4b38      	ldr	r3, [pc, #224]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4a:	d102      	bne.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f2      	bne.n	8003f38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f52:	4b33      	ldr	r3, [pc, #204]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f5e:	d158      	bne.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e057      	b.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f64:	4b2e      	ldr	r3, [pc, #184]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f74:	e04d      	b.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f7c:	d141      	bne.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f7e:	4b28      	ldr	r3, [pc, #160]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8a:	d131      	bne.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f8c:	4b24      	ldr	r3, [pc, #144]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f92:	4a23      	ldr	r2, [pc, #140]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f9c:	4b20      	ldr	r3, [pc, #128]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003faa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fac:	4b1d      	ldr	r3, [pc, #116]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2232      	movs	r2, #50	@ 0x32
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004028 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	0c9b      	lsrs	r3, r3, #18
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fc2:	e002      	b.n	8003fca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fca:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd6:	d102      	bne.n	8003fde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f2      	bne.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fde:	4b10      	ldr	r3, [pc, #64]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fea:	d112      	bne.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e011      	b.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004000:	e007      	b.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004002:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800400a:	4a05      	ldr	r2, [pc, #20]	@ (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004010:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40007000 	.word	0x40007000
 8004024:	20000010 	.word	0x20000010
 8004028:	431bde83 	.word	0x431bde83

0800402c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	4a04      	ldr	r2, [pc, #16]	@ (8004048 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004036:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800403a:	6093      	str	r3, [r2, #8]
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40007000 	.word	0x40007000

0800404c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e2fe      	b.n	800465c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d075      	beq.n	8004156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406a:	4b97      	ldr	r3, [pc, #604]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004074:	4b94      	ldr	r3, [pc, #592]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d102      	bne.n	800408a <HAL_RCC_OscConfig+0x3e>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d002      	beq.n	8004090 <HAL_RCC_OscConfig+0x44>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d10b      	bne.n	80040a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	4b8d      	ldr	r3, [pc, #564]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d05b      	beq.n	8004154 <HAL_RCC_OscConfig+0x108>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d157      	bne.n	8004154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e2d9      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x74>
 80040b2:	4b85      	ldr	r3, [pc, #532]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a84      	ldr	r2, [pc, #528]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e01d      	b.n	80040fc <HAL_RCC_OscConfig+0xb0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x98>
 80040ca:	4b7f      	ldr	r3, [pc, #508]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7e      	ldr	r2, [pc, #504]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b7c      	ldr	r3, [pc, #496]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7b      	ldr	r2, [pc, #492]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0xb0>
 80040e4:	4b78      	ldr	r3, [pc, #480]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a77      	ldr	r2, [pc, #476]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b75      	ldr	r3, [pc, #468]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a74      	ldr	r2, [pc, #464]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fe74 	bl	8001df0 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd fe70 	bl	8001df0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	@ 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e29e      	b.n	800465c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800411e:	4b6a      	ldr	r3, [pc, #424]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0xc0>
 800412a:	e014      	b.n	8004156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fd fe60 	bl	8001df0 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fd fe5c 	bl	8001df0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	@ 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e28a      	b.n	800465c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004146:	4b60      	ldr	r3, [pc, #384]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0xe8>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d075      	beq.n	800424e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004162:	4b59      	ldr	r3, [pc, #356]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416c:	4b56      	ldr	r3, [pc, #344]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d102      	bne.n	8004182 <HAL_RCC_OscConfig+0x136>
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d002      	beq.n	8004188 <HAL_RCC_OscConfig+0x13c>
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11f      	bne.n	80041c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004188:	4b4f      	ldr	r3, [pc, #316]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_OscConfig+0x154>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e25d      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b49      	ldr	r3, [pc, #292]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	4946      	ldr	r1, [pc, #280]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041b4:	4b45      	ldr	r3, [pc, #276]	@ (80042cc <HAL_RCC_OscConfig+0x280>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd fdcd 	bl	8001d58 <HAL_InitTick>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d043      	beq.n	800424c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e249      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d023      	beq.n	8004218 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d0:	4b3d      	ldr	r3, [pc, #244]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3c      	ldr	r2, [pc, #240]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fe08 	bl	8001df0 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e4:	f7fd fe04 	bl	8001df0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e232      	b.n	800465c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f6:	4b34      	ldr	r3, [pc, #208]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004202:	4b31      	ldr	r3, [pc, #196]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	492d      	ldr	r1, [pc, #180]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	604b      	str	r3, [r1, #4]
 8004216:	e01a      	b.n	800424e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004218:	4b2b      	ldr	r3, [pc, #172]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2a      	ldr	r2, [pc, #168]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800421e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fde4 	bl	8001df0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800422c:	f7fd fde0 	bl	8001df0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e20e      	b.n	800465c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800423e:	4b22      	ldr	r3, [pc, #136]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x1e0>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d041      	beq.n	80042de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01c      	beq.n	800429c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004262:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004268:	4a17      	ldr	r2, [pc, #92]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004272:	f7fd fdbd 	bl	8001df0 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427a:	f7fd fdb9 	bl	8001df0 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e1e7      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800428c:	4b0e      	ldr	r3, [pc, #56]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800428e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0ef      	beq.n	800427a <HAL_RCC_OscConfig+0x22e>
 800429a:	e020      	b.n	80042de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429c:	4b0a      	ldr	r3, [pc, #40]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800429e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a2:	4a09      	ldr	r2, [pc, #36]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fd fda0 	bl	8001df0 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b2:	e00d      	b.n	80042d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fd fd9c 	bl	8001df0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d906      	bls.n	80042d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e1ca      	b.n	800465c <HAL_RCC_OscConfig+0x610>
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1ea      	bne.n	80042b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80a6 	beq.w	8004438 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ec:	2300      	movs	r3, #0
 80042ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042f0:	4b84      	ldr	r3, [pc, #528]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x2b4>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <HAL_RCC_OscConfig+0x2b6>
 8004300:	2300      	movs	r3, #0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	4b7f      	ldr	r3, [pc, #508]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430a:	4a7e      	ldr	r2, [pc, #504]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004310:	6593      	str	r3, [r2, #88]	@ 0x58
 8004312:	4b7c      	ldr	r3, [pc, #496]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004322:	4b79      	ldr	r3, [pc, #484]	@ (8004508 <HAL_RCC_OscConfig+0x4bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800432e:	4b76      	ldr	r3, [pc, #472]	@ (8004508 <HAL_RCC_OscConfig+0x4bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a75      	ldr	r2, [pc, #468]	@ (8004508 <HAL_RCC_OscConfig+0x4bc>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fd fd59 	bl	8001df0 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7fd fd55 	bl	8001df0 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e183      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004354:	4b6c      	ldr	r3, [pc, #432]	@ (8004508 <HAL_RCC_OscConfig+0x4bc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d108      	bne.n	800437a <HAL_RCC_OscConfig+0x32e>
 8004368:	4b66      	ldr	r3, [pc, #408]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436e:	4a65      	ldr	r2, [pc, #404]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004378:	e024      	b.n	80043c4 <HAL_RCC_OscConfig+0x378>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b05      	cmp	r3, #5
 8004380:	d110      	bne.n	80043a4 <HAL_RCC_OscConfig+0x358>
 8004382:	4b60      	ldr	r3, [pc, #384]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004388:	4a5e      	ldr	r2, [pc, #376]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800438a:	f043 0304 	orr.w	r3, r3, #4
 800438e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004392:	4b5c      	ldr	r3, [pc, #368]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004398:	4a5a      	ldr	r2, [pc, #360]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043a2:	e00f      	b.n	80043c4 <HAL_RCC_OscConfig+0x378>
 80043a4:	4b57      	ldr	r3, [pc, #348]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043aa:	4a56      	ldr	r2, [pc, #344]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043b4:	4b53      	ldr	r3, [pc, #332]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ba:	4a52      	ldr	r2, [pc, #328]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d016      	beq.n	80043fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fd fd10 	bl	8001df0 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fd fd0c 	bl	8001df0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e138      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b46      	ldr	r3, [pc, #280]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ed      	beq.n	80043d4 <HAL_RCC_OscConfig+0x388>
 80043f8:	e015      	b.n	8004426 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fa:	f7fd fcf9 	bl	8001df0 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fd fcf5 	bl	8001df0 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e121      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004418:	4b3a      	ldr	r3, [pc, #232]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ed      	bne.n	8004402 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004426:	7ffb      	ldrb	r3, [r7, #31]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b35      	ldr	r3, [pc, #212]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004430:	4a34      	ldr	r2, [pc, #208]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004436:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03c      	beq.n	80044be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01c      	beq.n	8004486 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800444c:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004452:	4a2c      	ldr	r2, [pc, #176]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fd fcc8 	bl	8001df0 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004464:	f7fd fcc4 	bl	8001df0 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0f2      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004476:	4b23      	ldr	r3, [pc, #140]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ef      	beq.n	8004464 <HAL_RCC_OscConfig+0x418>
 8004484:	e01b      	b.n	80044be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004486:	4b1f      	ldr	r3, [pc, #124]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800448c:	4a1d      	ldr	r2, [pc, #116]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004496:	f7fd fcab 	bl	8001df0 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800449e:	f7fd fca7 	bl	8001df0 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0d5      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b0:	4b14      	ldr	r3, [pc, #80]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ef      	bne.n	800449e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80c9 	beq.w	800465a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	f000 8083 	beq.w	80045dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d15e      	bne.n	800459c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044de:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a08      	ldr	r2, [pc, #32]	@ (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fd fc81 	bl	8001df0 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f0:	e00c      	b.n	800450c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f2:	f7fd fc7d 	bl	8001df0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d905      	bls.n	800450c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0ab      	b.n	800465c <HAL_RCC_OscConfig+0x610>
 8004504:	40021000 	.word	0x40021000
 8004508:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450c:	4b55      	ldr	r3, [pc, #340]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ec      	bne.n	80044f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004518:	4b52      	ldr	r3, [pc, #328]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	4b52      	ldr	r3, [pc, #328]	@ (8004668 <HAL_RCC_OscConfig+0x61c>)
 800451e:	4013      	ands	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6a11      	ldr	r1, [r2, #32]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004528:	3a01      	subs	r2, #1
 800452a:	0112      	lsls	r2, r2, #4
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004532:	0212      	lsls	r2, r2, #8
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800453a:	0852      	lsrs	r2, r2, #1
 800453c:	3a01      	subs	r2, #1
 800453e:	0552      	lsls	r2, r2, #21
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004546:	0852      	lsrs	r2, r2, #1
 8004548:	3a01      	subs	r2, #1
 800454a:	0652      	lsls	r2, r2, #25
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004552:	06d2      	lsls	r2, r2, #27
 8004554:	430a      	orrs	r2, r1
 8004556:	4943      	ldr	r1, [pc, #268]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 8004558:	4313      	orrs	r3, r2
 800455a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800455c:	4b41      	ldr	r3, [pc, #260]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a40      	ldr	r2, [pc, #256]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 8004562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004566:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004568:	4b3e      	ldr	r3, [pc, #248]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a3d      	ldr	r2, [pc, #244]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004572:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd fc3c 	bl	8001df0 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7fd fc38 	bl	8001df0 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e066      	b.n	800465c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	4b35      	ldr	r3, [pc, #212]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x530>
 800459a:	e05e      	b.n	800465a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459c:	4b31      	ldr	r3, [pc, #196]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a30      	ldr	r2, [pc, #192]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 80045a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd fc22 	bl	8001df0 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd fc1e 	bl	8001df0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e04c      	b.n	800465c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c2:	4b28      	ldr	r3, [pc, #160]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045ce:	4b25      	ldr	r3, [pc, #148]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	4924      	ldr	r1, [pc, #144]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 80045d4:	4b25      	ldr	r3, [pc, #148]	@ (800466c <HAL_RCC_OscConfig+0x620>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	60cb      	str	r3, [r1, #12]
 80045da:	e03e      	b.n	800465a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e039      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004664 <HAL_RCC_OscConfig+0x618>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f003 0203 	and.w	r2, r3, #3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d12c      	bne.n	8004656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	3b01      	subs	r3, #1
 8004608:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d123      	bne.n	8004656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d11b      	bne.n	8004656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d113      	bne.n	8004656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	3b01      	subs	r3, #1
 800463c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d109      	bne.n	8004656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	3b01      	subs	r3, #1
 8004650:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d001      	beq.n	800465a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40021000 	.word	0x40021000
 8004668:	019f800c 	.word	0x019f800c
 800466c:	feeefffc 	.word	0xfeeefffc

08004670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e11e      	b.n	80048c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b91      	ldr	r3, [pc, #580]	@ (80048d0 <HAL_RCC_ClockConfig+0x260>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d910      	bls.n	80046b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b8e      	ldr	r3, [pc, #568]	@ (80048d0 <HAL_RCC_ClockConfig+0x260>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 020f 	bic.w	r2, r3, #15
 800469e:	498c      	ldr	r1, [pc, #560]	@ (80048d0 <HAL_RCC_ClockConfig+0x260>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b8a      	ldr	r3, [pc, #552]	@ (80048d0 <HAL_RCC_ClockConfig+0x260>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e106      	b.n	80048c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d073      	beq.n	80047ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d129      	bne.n	8004720 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046cc:	4b81      	ldr	r3, [pc, #516]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0f4      	b.n	80048c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046dc:	f000 f99e 	bl	8004a1c <RCC_GetSysClockFreqFromPLLSource>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4a7c      	ldr	r2, [pc, #496]	@ (80048d8 <HAL_RCC_ClockConfig+0x268>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d93f      	bls.n	800476a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046ea:	4b7a      	ldr	r3, [pc, #488]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d033      	beq.n	800476a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004706:	2b00      	cmp	r3, #0
 8004708:	d12f      	bne.n	800476a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800470a:	4b72      	ldr	r3, [pc, #456]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004712:	4a70      	ldr	r2, [pc, #448]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 8004714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004718:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800471a:	2380      	movs	r3, #128	@ 0x80
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e024      	b.n	800476a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d107      	bne.n	8004738 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004728:	4b6a      	ldr	r3, [pc, #424]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0c6      	b.n	80048c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004738:	4b66      	ldr	r3, [pc, #408]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0be      	b.n	80048c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004748:	f000 f8ce 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 800474c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4a61      	ldr	r2, [pc, #388]	@ (80048d8 <HAL_RCC_ClockConfig+0x268>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d909      	bls.n	800476a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004756:	4b5f      	ldr	r3, [pc, #380]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800475e:	4a5d      	ldr	r2, [pc, #372]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 8004760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004764:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004766:	2380      	movs	r3, #128	@ 0x80
 8004768:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800476a:	4b5a      	ldr	r3, [pc, #360]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4957      	ldr	r1, [pc, #348]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 8004778:	4313      	orrs	r3, r2
 800477a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477c:	f7fd fb38 	bl	8001df0 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fd fb34 	bl	8001df0 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e095      	b.n	80048c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	4b4e      	ldr	r3, [pc, #312]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 020c 	and.w	r2, r3, #12
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1eb      	bne.n	8004784 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d023      	beq.n	8004800 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c4:	4b43      	ldr	r3, [pc, #268]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a42      	ldr	r2, [pc, #264]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 80047ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d007      	beq.n	80047ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047dc:	4b3d      	ldr	r3, [pc, #244]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047e4:	4a3b      	ldr	r2, [pc, #236]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 80047e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b39      	ldr	r3, [pc, #228]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4936      	ldr	r1, [pc, #216]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
 80047fe:	e008      	b.n	8004812 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b80      	cmp	r3, #128	@ 0x80
 8004804:	d105      	bne.n	8004812 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004806:	4b33      	ldr	r3, [pc, #204]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	4a32      	ldr	r2, [pc, #200]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 800480c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004810:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004812:	4b2f      	ldr	r3, [pc, #188]	@ (80048d0 <HAL_RCC_ClockConfig+0x260>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d21d      	bcs.n	800485c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004820:	4b2b      	ldr	r3, [pc, #172]	@ (80048d0 <HAL_RCC_ClockConfig+0x260>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f023 020f 	bic.w	r2, r3, #15
 8004828:	4929      	ldr	r1, [pc, #164]	@ (80048d0 <HAL_RCC_ClockConfig+0x260>)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004830:	f7fd fade 	bl	8001df0 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	e00a      	b.n	800484e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fd fada 	bl	8001df0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e03b      	b.n	80048c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b20      	ldr	r3, [pc, #128]	@ (80048d0 <HAL_RCC_ClockConfig+0x260>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d1ed      	bne.n	8004838 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004868:	4b1a      	ldr	r3, [pc, #104]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4917      	ldr	r1, [pc, #92]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004886:	4b13      	ldr	r3, [pc, #76]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	490f      	ldr	r1, [pc, #60]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489a:	f000 f825 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 800489e:	4602      	mov	r2, r0
 80048a0:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <HAL_RCC_ClockConfig+0x264>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	490c      	ldr	r1, [pc, #48]	@ (80048dc <HAL_RCC_ClockConfig+0x26c>)
 80048ac:	5ccb      	ldrb	r3, [r1, r3]
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	fa22 f303 	lsr.w	r3, r2, r3
 80048b6:	4a0a      	ldr	r2, [pc, #40]	@ (80048e0 <HAL_RCC_ClockConfig+0x270>)
 80048b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048ba:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <HAL_RCC_ClockConfig+0x274>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fd fa4a 	bl	8001d58 <HAL_InitTick>
 80048c4:	4603      	mov	r3, r0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40022000 	.word	0x40022000
 80048d4:	40021000 	.word	0x40021000
 80048d8:	04c4b400 	.word	0x04c4b400
 80048dc:	08007284 	.word	0x08007284
 80048e0:	20000010 	.word	0x20000010
 80048e4:	20000014 	.word	0x20000014

080048e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048ee:	4b2c      	ldr	r3, [pc, #176]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d102      	bne.n	8004900 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048fa:	4b2a      	ldr	r3, [pc, #168]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	e047      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004900:	4b27      	ldr	r3, [pc, #156]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 030c 	and.w	r3, r3, #12
 8004908:	2b08      	cmp	r3, #8
 800490a:	d102      	bne.n	8004912 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800490c:	4b26      	ldr	r3, [pc, #152]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e03e      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004912:	4b23      	ldr	r3, [pc, #140]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d136      	bne.n	800498c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800491e:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004928:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	3301      	adds	r3, #1
 8004934:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d10c      	bne.n	8004956 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800493c:	4a1a      	ldr	r2, [pc, #104]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	4a16      	ldr	r2, [pc, #88]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004946:	68d2      	ldr	r2, [r2, #12]
 8004948:	0a12      	lsrs	r2, r2, #8
 800494a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	617b      	str	r3, [r7, #20]
      break;
 8004954:	e00c      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004956:	4a13      	ldr	r2, [pc, #76]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	4a10      	ldr	r2, [pc, #64]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	0a12      	lsrs	r2, r2, #8
 8004964:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
      break;
 800496e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	0e5b      	lsrs	r3, r3, #25
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	3301      	adds	r3, #1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	e001      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004990:	693b      	ldr	r3, [r7, #16]
}
 8004992:	4618      	mov	r0, r3
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	016e3600 	.word	0x016e3600

080049ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b03      	ldr	r3, [pc, #12]	@ (80049c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000010 	.word	0x20000010

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049c8:	f7ff fff0 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4904      	ldr	r1, [pc, #16]	@ (80049ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40021000 	.word	0x40021000
 80049ec:	08007294 	.word	0x08007294

080049f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049f4:	f7ff ffda 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	0adb      	lsrs	r3, r3, #11
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4904      	ldr	r1, [pc, #16]	@ (8004a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08007294 	.word	0x08007294

08004a1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a22:	4b1e      	ldr	r3, [pc, #120]	@ (8004a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	3301      	adds	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d10c      	bne.n	8004a5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a40:	4a17      	ldr	r2, [pc, #92]	@ (8004aa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	4a14      	ldr	r2, [pc, #80]	@ (8004a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a4a:	68d2      	ldr	r2, [r2, #12]
 8004a4c:	0a12      	lsrs	r2, r2, #8
 8004a4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	617b      	str	r3, [r7, #20]
    break;
 8004a58:	e00c      	b.n	8004a74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a5a:	4a12      	ldr	r2, [pc, #72]	@ (8004aa4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a62:	4a0e      	ldr	r2, [pc, #56]	@ (8004a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a64:	68d2      	ldr	r2, [r2, #12]
 8004a66:	0a12      	lsrs	r2, r2, #8
 8004a68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a6c:	fb02 f303 	mul.w	r3, r2, r3
 8004a70:	617b      	str	r3, [r7, #20]
    break;
 8004a72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a74:	4b09      	ldr	r3, [pc, #36]	@ (8004a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	0e5b      	lsrs	r3, r3, #25
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a8e:	687b      	ldr	r3, [r7, #4]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	016e3600 	.word	0x016e3600
 8004aa4:	00f42400 	.word	0x00f42400

08004aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8098 	beq.w	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aca:	4b43      	ldr	r3, [pc, #268]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10d      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4b40      	ldr	r3, [pc, #256]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	4a3f      	ldr	r2, [pc, #252]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004af2:	4b3a      	ldr	r3, [pc, #232]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a39      	ldr	r2, [pc, #228]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004afe:	f7fd f977 	bl	8001df0 <HAL_GetTick>
 8004b02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b04:	e009      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b06:	f7fd f973 	bl	8001df0 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d902      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	74fb      	strb	r3, [r7, #19]
        break;
 8004b18:	e005      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b1a:	4b30      	ldr	r3, [pc, #192]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0ef      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d159      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01e      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d019      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b48:	4b23      	ldr	r3, [pc, #140]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b54:	4b20      	ldr	r3, [pc, #128]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b64:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b74:	4a18      	ldr	r2, [pc, #96]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fd f933 	bl	8001df0 <HAL_GetTick>
 8004b8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b8c:	e00b      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8e:	f7fd f92f 	bl	8001df0 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d902      	bls.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ba4:	e006      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ec      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004bb4:	7cfb      	ldrb	r3, [r7, #19]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10b      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bba:	4b07      	ldr	r3, [pc, #28]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc8:	4903      	ldr	r1, [pc, #12]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bd0:	e008      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
 8004bd4:	74bb      	strb	r3, [r7, #18]
 8004bd6:	e005      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be4:	7c7b      	ldrb	r3, [r7, #17]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d105      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bea:	4ba7      	ldr	r3, [pc, #668]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bee:	4aa6      	ldr	r2, [pc, #664]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bf4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c02:	4ba1      	ldr	r3, [pc, #644]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c08:	f023 0203 	bic.w	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	499d      	ldr	r1, [pc, #628]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c24:	4b98      	ldr	r3, [pc, #608]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f023 020c 	bic.w	r2, r3, #12
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4995      	ldr	r1, [pc, #596]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c46:	4b90      	ldr	r3, [pc, #576]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	498c      	ldr	r1, [pc, #560]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c68:	4b87      	ldr	r3, [pc, #540]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	4984      	ldr	r1, [pc, #528]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	497b      	ldr	r1, [pc, #492]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cac:	4b76      	ldr	r3, [pc, #472]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	4973      	ldr	r1, [pc, #460]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cce:	4b6e      	ldr	r3, [pc, #440]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	496a      	ldr	r1, [pc, #424]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cf0:	4b65      	ldr	r3, [pc, #404]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	4962      	ldr	r1, [pc, #392]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d12:	4b5d      	ldr	r3, [pc, #372]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	4959      	ldr	r1, [pc, #356]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d34:	4b54      	ldr	r3, [pc, #336]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d3a:	f023 0203 	bic.w	r2, r3, #3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	4951      	ldr	r1, [pc, #324]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d56:	4b4c      	ldr	r3, [pc, #304]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	4948      	ldr	r1, [pc, #288]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d015      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d78:	4b43      	ldr	r3, [pc, #268]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d86:	4940      	ldr	r1, [pc, #256]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d96:	d105      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d98:	4b3b      	ldr	r3, [pc, #236]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004da2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d015      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004db0:	4b35      	ldr	r3, [pc, #212]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dbe:	4932      	ldr	r1, [pc, #200]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dce:	d105      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dda:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d015      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004de8:	4b27      	ldr	r3, [pc, #156]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	4924      	ldr	r1, [pc, #144]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e06:	d105      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e08:	4b1f      	ldr	r3, [pc, #124]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d015      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e20:	4b19      	ldr	r3, [pc, #100]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	4916      	ldr	r1, [pc, #88]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e3e:	d105      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e40:	4b11      	ldr	r3, [pc, #68]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a10      	ldr	r2, [pc, #64]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d019      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e58:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	4908      	ldr	r1, [pc, #32]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e76:	d109      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e78:	4b03      	ldr	r3, [pc, #12]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a02      	ldr	r2, [pc, #8]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e82:	60d3      	str	r3, [r2, #12]
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d015      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e98:	4b29      	ldr	r3, [pc, #164]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	4926      	ldr	r1, [pc, #152]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004eb8:	4b21      	ldr	r3, [pc, #132]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4a20      	ldr	r2, [pc, #128]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d015      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ede:	4918      	ldr	r1, [pc, #96]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eee:	d105      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ef0:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a12      	ldr	r2, [pc, #72]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004efa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d015      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f08:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	490a      	ldr	r1, [pc, #40]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f26:	d105      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f28:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a04      	ldr	r2, [pc, #16]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f34:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000

08004f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e049      	b.n	8004fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fc fdda 	bl	8001b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f000 fcde 	bl	8005944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d001      	beq.n	800500c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e04c      	b.n	80050a6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a26      	ldr	r2, [pc, #152]	@ (80050b4 <HAL_TIM_Base_Start+0xc0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d022      	beq.n	8005064 <HAL_TIM_Base_Start+0x70>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005026:	d01d      	beq.n	8005064 <HAL_TIM_Base_Start+0x70>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a22      	ldr	r2, [pc, #136]	@ (80050b8 <HAL_TIM_Base_Start+0xc4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d018      	beq.n	8005064 <HAL_TIM_Base_Start+0x70>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a21      	ldr	r2, [pc, #132]	@ (80050bc <HAL_TIM_Base_Start+0xc8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <HAL_TIM_Base_Start+0x70>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1f      	ldr	r2, [pc, #124]	@ (80050c0 <HAL_TIM_Base_Start+0xcc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00e      	beq.n	8005064 <HAL_TIM_Base_Start+0x70>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1e      	ldr	r2, [pc, #120]	@ (80050c4 <HAL_TIM_Base_Start+0xd0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_TIM_Base_Start+0x70>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1c      	ldr	r2, [pc, #112]	@ (80050c8 <HAL_TIM_Base_Start+0xd4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_TIM_Base_Start+0x70>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1b      	ldr	r2, [pc, #108]	@ (80050cc <HAL_TIM_Base_Start+0xd8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d115      	bne.n	8005090 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	4b19      	ldr	r3, [pc, #100]	@ (80050d0 <HAL_TIM_Base_Start+0xdc>)
 800506c:	4013      	ands	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b06      	cmp	r3, #6
 8005074:	d015      	beq.n	80050a2 <HAL_TIM_Base_Start+0xae>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507c:	d011      	beq.n	80050a2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0201 	orr.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508e:	e008      	b.n	80050a2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	e000      	b.n	80050a4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40013400 	.word	0x40013400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40015000 	.word	0x40015000
 80050d0:	00010007 	.word	0x00010007

080050d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d001      	beq.n	80050ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e054      	b.n	8005196 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a26      	ldr	r2, [pc, #152]	@ (80051a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005116:	d01d      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a22      	ldr	r2, [pc, #136]	@ (80051a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a21      	ldr	r2, [pc, #132]	@ (80051ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1f      	ldr	r2, [pc, #124]	@ (80051b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1e      	ldr	r2, [pc, #120]	@ (80051b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1c      	ldr	r2, [pc, #112]	@ (80051b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1b      	ldr	r2, [pc, #108]	@ (80051bc <HAL_TIM_Base_Start_IT+0xe8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d115      	bne.n	8005180 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	4b19      	ldr	r3, [pc, #100]	@ (80051c0 <HAL_TIM_Base_Start_IT+0xec>)
 800515c:	4013      	ands	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b06      	cmp	r3, #6
 8005164:	d015      	beq.n	8005192 <HAL_TIM_Base_Start_IT+0xbe>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800516c:	d011      	beq.n	8005192 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517e:	e008      	b.n	8005192 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e000      	b.n	8005194 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40000c00 	.word	0x40000c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40015000 	.word	0x40015000
 80051c0:	00010007 	.word	0x00010007

080051c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e049      	b.n	800526a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f841 	bl	8005272 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 fb9e 	bl	8005944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e097      	b.n	80053ca <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc fbf8 	bl	8001aa4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80052ca:	f023 0307 	bic.w	r3, r3, #7
 80052ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f000 fb32 	bl	8005944 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005308:	f023 0303 	bic.w	r3, r3, #3
 800530c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	4313      	orrs	r3, r2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005326:	f023 030c 	bic.w	r3, r3, #12
 800532a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	4313      	orrs	r3, r2
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	011a      	lsls	r2, r3, #4
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	4313      	orrs	r3, r2
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005364:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800536c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	4313      	orrs	r3, r2
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053e2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053ea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053f2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053fa:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d110      	bne.n	8005424 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d102      	bne.n	800540e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005408:	7b7b      	ldrb	r3, [r7, #13]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d001      	beq.n	8005412 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e069      	b.n	80054e6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005422:	e031      	b.n	8005488 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b04      	cmp	r3, #4
 8005428:	d110      	bne.n	800544c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800542a:	7bbb      	ldrb	r3, [r7, #14]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d102      	bne.n	8005436 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005430:	7b3b      	ldrb	r3, [r7, #12]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d001      	beq.n	800543a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e055      	b.n	80054e6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800544a:	e01d      	b.n	8005488 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d108      	bne.n	8005464 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d105      	bne.n	8005464 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005458:	7b7b      	ldrb	r3, [r7, #13]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d102      	bne.n	8005464 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800545e:	7b3b      	ldrb	r3, [r7, #12]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d001      	beq.n	8005468 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e03e      	b.n	80054e6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_Encoder_Start+0xc4>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d008      	beq.n	80054a6 <HAL_TIM_Encoder_Start+0xd4>
 8005494:	e00f      	b.n	80054b6 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2201      	movs	r2, #1
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 feca 	bl	8006238 <TIM_CCxChannelCmd>
      break;
 80054a4:	e016      	b.n	80054d4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2201      	movs	r2, #1
 80054ac:	2104      	movs	r1, #4
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fec2 	bl	8006238 <TIM_CCxChannelCmd>
      break;
 80054b4:	e00e      	b.n	80054d4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 feba 	bl	8006238 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2201      	movs	r2, #1
 80054ca:	2104      	movs	r1, #4
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 feb3 	bl	8006238 <TIM_CCxChannelCmd>
      break;
 80054d2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800550a:	2302      	movs	r3, #2
 800550c:	e0ff      	b.n	800570e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b14      	cmp	r3, #20
 800551a:	f200 80f0 	bhi.w	80056fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800551e:	a201      	add	r2, pc, #4	@ (adr r2, 8005524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005579 	.word	0x08005579
 8005528:	080056ff 	.word	0x080056ff
 800552c:	080056ff 	.word	0x080056ff
 8005530:	080056ff 	.word	0x080056ff
 8005534:	080055b9 	.word	0x080055b9
 8005538:	080056ff 	.word	0x080056ff
 800553c:	080056ff 	.word	0x080056ff
 8005540:	080056ff 	.word	0x080056ff
 8005544:	080055fb 	.word	0x080055fb
 8005548:	080056ff 	.word	0x080056ff
 800554c:	080056ff 	.word	0x080056ff
 8005550:	080056ff 	.word	0x080056ff
 8005554:	0800563b 	.word	0x0800563b
 8005558:	080056ff 	.word	0x080056ff
 800555c:	080056ff 	.word	0x080056ff
 8005560:	080056ff 	.word	0x080056ff
 8005564:	0800567d 	.word	0x0800567d
 8005568:	080056ff 	.word	0x080056ff
 800556c:	080056ff 	.word	0x080056ff
 8005570:	080056ff 	.word	0x080056ff
 8005574:	080056bd 	.word	0x080056bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fa94 	bl	8005aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0208 	orr.w	r2, r2, #8
 8005592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0204 	bic.w	r2, r2, #4
 80055a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6999      	ldr	r1, [r3, #24]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	619a      	str	r2, [r3, #24]
      break;
 80055b6:	e0a5      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fb0e 	bl	8005be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6999      	ldr	r1, [r3, #24]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	021a      	lsls	r2, r3, #8
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	619a      	str	r2, [r3, #24]
      break;
 80055f8:	e084      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fb81 	bl	8005d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0208 	orr.w	r2, r2, #8
 8005614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0204 	bic.w	r2, r2, #4
 8005624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69d9      	ldr	r1, [r3, #28]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	61da      	str	r2, [r3, #28]
      break;
 8005638:	e064      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fbf3 	bl	8005e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69d9      	ldr	r1, [r3, #28]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	021a      	lsls	r2, r3, #8
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	61da      	str	r2, [r3, #28]
      break;
 800567a:	e043      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fc66 	bl	8005f54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0204 	bic.w	r2, r2, #4
 80056a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80056ba:	e023      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fcb0 	bl	8006028 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80056fc:	e002      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	75fb      	strb	r3, [r7, #23]
      break;
 8005702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800570c:	7dfb      	ldrb	r3, [r7, #23]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop

08005718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIM_ConfigClockSource+0x1c>
 8005730:	2302      	movs	r3, #2
 8005732:	e0f6      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x20a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005752:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800575e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a6f      	ldr	r2, [pc, #444]	@ (800592c <HAL_TIM_ConfigClockSource+0x214>)
 800576e:	4293      	cmp	r3, r2
 8005770:	f000 80c1 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 8005774:	4a6d      	ldr	r2, [pc, #436]	@ (800592c <HAL_TIM_ConfigClockSource+0x214>)
 8005776:	4293      	cmp	r3, r2
 8005778:	f200 80c6 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 800577c:	4a6c      	ldr	r2, [pc, #432]	@ (8005930 <HAL_TIM_ConfigClockSource+0x218>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f000 80b9 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 8005784:	4a6a      	ldr	r2, [pc, #424]	@ (8005930 <HAL_TIM_ConfigClockSource+0x218>)
 8005786:	4293      	cmp	r3, r2
 8005788:	f200 80be 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 800578c:	4a69      	ldr	r2, [pc, #420]	@ (8005934 <HAL_TIM_ConfigClockSource+0x21c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	f000 80b1 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 8005794:	4a67      	ldr	r2, [pc, #412]	@ (8005934 <HAL_TIM_ConfigClockSource+0x21c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	f200 80b6 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 800579c:	4a66      	ldr	r2, [pc, #408]	@ (8005938 <HAL_TIM_ConfigClockSource+0x220>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	f000 80a9 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 80057a4:	4a64      	ldr	r2, [pc, #400]	@ (8005938 <HAL_TIM_ConfigClockSource+0x220>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f200 80ae 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 80057ac:	4a63      	ldr	r2, [pc, #396]	@ (800593c <HAL_TIM_ConfigClockSource+0x224>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	f000 80a1 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 80057b4:	4a61      	ldr	r2, [pc, #388]	@ (800593c <HAL_TIM_ConfigClockSource+0x224>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f200 80a6 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 80057bc:	4a60      	ldr	r2, [pc, #384]	@ (8005940 <HAL_TIM_ConfigClockSource+0x228>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	f000 8099 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 80057c4:	4a5e      	ldr	r2, [pc, #376]	@ (8005940 <HAL_TIM_ConfigClockSource+0x228>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	f200 809e 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 80057cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80057d0:	f000 8091 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 80057d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80057d8:	f200 8096 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 80057dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e0:	f000 8089 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 80057e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e8:	f200 808e 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 80057ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057f0:	d03e      	beq.n	8005870 <HAL_TIM_ConfigClockSource+0x158>
 80057f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057f6:	f200 8087 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fe:	f000 8086 	beq.w	800590e <HAL_TIM_ConfigClockSource+0x1f6>
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005806:	d87f      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 8005808:	2b70      	cmp	r3, #112	@ 0x70
 800580a:	d01a      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x12a>
 800580c:	2b70      	cmp	r3, #112	@ 0x70
 800580e:	d87b      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 8005810:	2b60      	cmp	r3, #96	@ 0x60
 8005812:	d050      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x19e>
 8005814:	2b60      	cmp	r3, #96	@ 0x60
 8005816:	d877      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 8005818:	2b50      	cmp	r3, #80	@ 0x50
 800581a:	d03c      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x17e>
 800581c:	2b50      	cmp	r3, #80	@ 0x50
 800581e:	d873      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 8005820:	2b40      	cmp	r3, #64	@ 0x40
 8005822:	d058      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 8005824:	2b40      	cmp	r3, #64	@ 0x40
 8005826:	d86f      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 8005828:	2b30      	cmp	r3, #48	@ 0x30
 800582a:	d064      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 800582c:	2b30      	cmp	r3, #48	@ 0x30
 800582e:	d86b      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 8005830:	2b20      	cmp	r3, #32
 8005832:	d060      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 8005834:	2b20      	cmp	r3, #32
 8005836:	d867      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d05c      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 800583c:	2b10      	cmp	r3, #16
 800583e:	d05a      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x1de>
 8005840:	e062      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005852:	f000 fcd1 	bl	80061f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	609a      	str	r2, [r3, #8]
      break;
 800586e:	e04f      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005880:	f000 fcba 	bl	80061f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005892:	609a      	str	r2, [r3, #8]
      break;
 8005894:	e03c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 fc2c 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2150      	movs	r1, #80	@ 0x50
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fc85 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 80058b4:	e02c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 fc4b 	bl	800615e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2160      	movs	r1, #96	@ 0x60
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fc75 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 80058d4:	e01c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	461a      	mov	r2, r3
 80058e4:	f000 fc0c 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2140      	movs	r1, #64	@ 0x40
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fc65 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 80058f4:	e00c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f000 fc5c 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 8005906:	e003      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
      break;
 800590c:	e000      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800590e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	00100070 	.word	0x00100070
 8005930:	00100060 	.word	0x00100060
 8005934:	00100050 	.word	0x00100050
 8005938:	00100040 	.word	0x00100040
 800593c:	00100030 	.word	0x00100030
 8005940:	00100020 	.word	0x00100020

08005944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a4c      	ldr	r2, [pc, #304]	@ (8005a88 <TIM_Base_SetConfig+0x144>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d017      	beq.n	800598c <TIM_Base_SetConfig+0x48>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005962:	d013      	beq.n	800598c <TIM_Base_SetConfig+0x48>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a49      	ldr	r2, [pc, #292]	@ (8005a8c <TIM_Base_SetConfig+0x148>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00f      	beq.n	800598c <TIM_Base_SetConfig+0x48>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a48      	ldr	r2, [pc, #288]	@ (8005a90 <TIM_Base_SetConfig+0x14c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_Base_SetConfig+0x48>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a47      	ldr	r2, [pc, #284]	@ (8005a94 <TIM_Base_SetConfig+0x150>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_Base_SetConfig+0x48>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a46      	ldr	r2, [pc, #280]	@ (8005a98 <TIM_Base_SetConfig+0x154>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_Base_SetConfig+0x48>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a45      	ldr	r2, [pc, #276]	@ (8005a9c <TIM_Base_SetConfig+0x158>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d108      	bne.n	800599e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a39      	ldr	r2, [pc, #228]	@ (8005a88 <TIM_Base_SetConfig+0x144>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d023      	beq.n	80059ee <TIM_Base_SetConfig+0xaa>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ac:	d01f      	beq.n	80059ee <TIM_Base_SetConfig+0xaa>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a36      	ldr	r2, [pc, #216]	@ (8005a8c <TIM_Base_SetConfig+0x148>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01b      	beq.n	80059ee <TIM_Base_SetConfig+0xaa>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a35      	ldr	r2, [pc, #212]	@ (8005a90 <TIM_Base_SetConfig+0x14c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d017      	beq.n	80059ee <TIM_Base_SetConfig+0xaa>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a34      	ldr	r2, [pc, #208]	@ (8005a94 <TIM_Base_SetConfig+0x150>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <TIM_Base_SetConfig+0xaa>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a33      	ldr	r2, [pc, #204]	@ (8005a98 <TIM_Base_SetConfig+0x154>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00f      	beq.n	80059ee <TIM_Base_SetConfig+0xaa>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a33      	ldr	r2, [pc, #204]	@ (8005aa0 <TIM_Base_SetConfig+0x15c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_Base_SetConfig+0xaa>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a32      	ldr	r2, [pc, #200]	@ (8005aa4 <TIM_Base_SetConfig+0x160>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <TIM_Base_SetConfig+0xaa>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a31      	ldr	r2, [pc, #196]	@ (8005aa8 <TIM_Base_SetConfig+0x164>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_Base_SetConfig+0xaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2c      	ldr	r2, [pc, #176]	@ (8005a9c <TIM_Base_SetConfig+0x158>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d108      	bne.n	8005a00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a18      	ldr	r2, [pc, #96]	@ (8005a88 <TIM_Base_SetConfig+0x144>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <TIM_Base_SetConfig+0x110>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a98 <TIM_Base_SetConfig+0x154>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00f      	beq.n	8005a54 <TIM_Base_SetConfig+0x110>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa0 <TIM_Base_SetConfig+0x15c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00b      	beq.n	8005a54 <TIM_Base_SetConfig+0x110>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <TIM_Base_SetConfig+0x160>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d007      	beq.n	8005a54 <TIM_Base_SetConfig+0x110>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a18      	ldr	r2, [pc, #96]	@ (8005aa8 <TIM_Base_SetConfig+0x164>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_Base_SetConfig+0x110>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a13      	ldr	r2, [pc, #76]	@ (8005a9c <TIM_Base_SetConfig+0x158>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d103      	bne.n	8005a5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d105      	bne.n	8005a7a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f023 0201 	bic.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	611a      	str	r2, [r3, #16]
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	40000c00 	.word	0x40000c00
 8005a98:	40013400 	.word	0x40013400
 8005a9c:	40015000 	.word	0x40015000
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800

08005aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f023 0201 	bic.w	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 0302 	bic.w	r3, r3, #2
 8005af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a30      	ldr	r2, [pc, #192]	@ (8005bc8 <TIM_OC1_SetConfig+0x11c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <TIM_OC1_SetConfig+0x88>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8005bcc <TIM_OC1_SetConfig+0x120>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00f      	beq.n	8005b34 <TIM_OC1_SetConfig+0x88>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a2e      	ldr	r2, [pc, #184]	@ (8005bd0 <TIM_OC1_SetConfig+0x124>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <TIM_OC1_SetConfig+0x88>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd4 <TIM_OC1_SetConfig+0x128>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_OC1_SetConfig+0x88>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd8 <TIM_OC1_SetConfig+0x12c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC1_SetConfig+0x88>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005bdc <TIM_OC1_SetConfig+0x130>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d10c      	bne.n	8005b4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f023 0308 	bic.w	r3, r3, #8
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f023 0304 	bic.w	r3, r3, #4
 8005b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc8 <TIM_OC1_SetConfig+0x11c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <TIM_OC1_SetConfig+0xd2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1c      	ldr	r2, [pc, #112]	@ (8005bcc <TIM_OC1_SetConfig+0x120>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00f      	beq.n	8005b7e <TIM_OC1_SetConfig+0xd2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd0 <TIM_OC1_SetConfig+0x124>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00b      	beq.n	8005b7e <TIM_OC1_SetConfig+0xd2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd4 <TIM_OC1_SetConfig+0x128>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d007      	beq.n	8005b7e <TIM_OC1_SetConfig+0xd2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a19      	ldr	r2, [pc, #100]	@ (8005bd8 <TIM_OC1_SetConfig+0x12c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_OC1_SetConfig+0xd2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a18      	ldr	r2, [pc, #96]	@ (8005bdc <TIM_OC1_SetConfig+0x130>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d111      	bne.n	8005ba2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800
 8005bdc:	40015000 	.word	0x40015000

08005be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f023 0210 	bic.w	r2, r3, #16
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f023 0320 	bic.w	r3, r3, #32
 8005c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf0 <TIM_OC2_SetConfig+0x110>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_OC2_SetConfig+0x74>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf4 <TIM_OC2_SetConfig+0x114>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_OC2_SetConfig+0x74>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf8 <TIM_OC2_SetConfig+0x118>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d10d      	bne.n	8005c70 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf0 <TIM_OC2_SetConfig+0x110>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <TIM_OC2_SetConfig+0xc0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf4 <TIM_OC2_SetConfig+0x114>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_OC2_SetConfig+0xc0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <TIM_OC2_SetConfig+0x11c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_OC2_SetConfig+0xc0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <TIM_OC2_SetConfig+0x120>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_OC2_SetConfig+0xc0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a1c      	ldr	r2, [pc, #112]	@ (8005d04 <TIM_OC2_SetConfig+0x124>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_OC2_SetConfig+0xc0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a17      	ldr	r2, [pc, #92]	@ (8005cf8 <TIM_OC2_SetConfig+0x118>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d113      	bne.n	8005cc8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40013400 	.word	0x40013400
 8005cf8:	40015000 	.word	0x40015000
 8005cfc:	40014000 	.word	0x40014000
 8005d00:	40014400 	.word	0x40014400
 8005d04:	40014800 	.word	0x40014800

08005d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0303 	bic.w	r3, r3, #3
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2b      	ldr	r2, [pc, #172]	@ (8005e14 <TIM_OC3_SetConfig+0x10c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_OC3_SetConfig+0x72>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e18 <TIM_OC3_SetConfig+0x110>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_OC3_SetConfig+0x72>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a29      	ldr	r2, [pc, #164]	@ (8005e1c <TIM_OC3_SetConfig+0x114>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d10d      	bne.n	8005d96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1e      	ldr	r2, [pc, #120]	@ (8005e14 <TIM_OC3_SetConfig+0x10c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <TIM_OC3_SetConfig+0xbe>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e18 <TIM_OC3_SetConfig+0x110>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00f      	beq.n	8005dc6 <TIM_OC3_SetConfig+0xbe>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e20 <TIM_OC3_SetConfig+0x118>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00b      	beq.n	8005dc6 <TIM_OC3_SetConfig+0xbe>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e24 <TIM_OC3_SetConfig+0x11c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d007      	beq.n	8005dc6 <TIM_OC3_SetConfig+0xbe>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <TIM_OC3_SetConfig+0x120>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d003      	beq.n	8005dc6 <TIM_OC3_SetConfig+0xbe>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a16      	ldr	r2, [pc, #88]	@ (8005e1c <TIM_OC3_SetConfig+0x114>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d113      	bne.n	8005dee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	621a      	str	r2, [r3, #32]
}
 8005e08:	bf00      	nop
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	40012c00 	.word	0x40012c00
 8005e18:	40013400 	.word	0x40013400
 8005e1c:	40015000 	.word	0x40015000
 8005e20:	40014000 	.word	0x40014000
 8005e24:	40014400 	.word	0x40014400
 8005e28:	40014800 	.word	0x40014800

08005e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	031b      	lsls	r3, r3, #12
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005f3c <TIM_OC4_SetConfig+0x110>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d007      	beq.n	8005ea0 <TIM_OC4_SetConfig+0x74>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a2b      	ldr	r2, [pc, #172]	@ (8005f40 <TIM_OC4_SetConfig+0x114>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_OC4_SetConfig+0x74>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005f44 <TIM_OC4_SetConfig+0x118>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10d      	bne.n	8005ebc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	031b      	lsls	r3, r3, #12
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8005f3c <TIM_OC4_SetConfig+0x110>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d013      	beq.n	8005eec <TIM_OC4_SetConfig+0xc0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8005f40 <TIM_OC4_SetConfig+0x114>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00f      	beq.n	8005eec <TIM_OC4_SetConfig+0xc0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1e      	ldr	r2, [pc, #120]	@ (8005f48 <TIM_OC4_SetConfig+0x11c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <TIM_OC4_SetConfig+0xc0>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f4c <TIM_OC4_SetConfig+0x120>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_OC4_SetConfig+0xc0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a1c      	ldr	r2, [pc, #112]	@ (8005f50 <TIM_OC4_SetConfig+0x124>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_OC4_SetConfig+0xc0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a17      	ldr	r2, [pc, #92]	@ (8005f44 <TIM_OC4_SetConfig+0x118>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d113      	bne.n	8005f14 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005efa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	019b      	lsls	r3, r3, #6
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	019b      	lsls	r3, r3, #6
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40013400 	.word	0x40013400
 8005f44:	40015000 	.word	0x40015000
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800

08005f54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	@ (8006010 <TIM_OC5_SetConfig+0xbc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x82>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a18      	ldr	r2, [pc, #96]	@ (8006014 <TIM_OC5_SetConfig+0xc0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00f      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x82>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a17      	ldr	r2, [pc, #92]	@ (8006018 <TIM_OC5_SetConfig+0xc4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00b      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x82>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a16      	ldr	r2, [pc, #88]	@ (800601c <TIM_OC5_SetConfig+0xc8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d007      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x82>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	@ (8006020 <TIM_OC5_SetConfig+0xcc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x82>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a14      	ldr	r2, [pc, #80]	@ (8006024 <TIM_OC5_SetConfig+0xd0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d109      	bne.n	8005fea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40013400 	.word	0x40013400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800
 8006024:	40015000 	.word	0x40015000

08006028 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800605a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800606e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	051b      	lsls	r3, r3, #20
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a1a      	ldr	r2, [pc, #104]	@ (80060e8 <TIM_OC6_SetConfig+0xc0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <TIM_OC6_SetConfig+0x84>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a19      	ldr	r2, [pc, #100]	@ (80060ec <TIM_OC6_SetConfig+0xc4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00f      	beq.n	80060ac <TIM_OC6_SetConfig+0x84>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <TIM_OC6_SetConfig+0xc8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <TIM_OC6_SetConfig+0x84>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a17      	ldr	r2, [pc, #92]	@ (80060f4 <TIM_OC6_SetConfig+0xcc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <TIM_OC6_SetConfig+0x84>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a16      	ldr	r2, [pc, #88]	@ (80060f8 <TIM_OC6_SetConfig+0xd0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC6_SetConfig+0x84>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a15      	ldr	r2, [pc, #84]	@ (80060fc <TIM_OC6_SetConfig+0xd4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d109      	bne.n	80060c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	029b      	lsls	r3, r3, #10
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800
 80060fc:	40015000 	.word	0x40015000

08006100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800612a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 030a 	bic.w	r3, r3, #10
 800613c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615e:	b480      	push	{r7}
 8006160:	b087      	sub	sp, #28
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f023 0210 	bic.w	r2, r3, #16
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	031b      	lsls	r3, r3, #12
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800619a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80061d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	f043 0307 	orr.w	r3, r3, #7
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	021a      	lsls	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	431a      	orrs	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4313      	orrs	r3, r2
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	609a      	str	r2, [r3, #8]
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	2201      	movs	r2, #1
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a1a      	ldr	r2, [r3, #32]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	43db      	mvns	r3, r3
 800625a:	401a      	ands	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a1a      	ldr	r2, [r3, #32]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	fa01 f303 	lsl.w	r3, r1, r3
 8006270:	431a      	orrs	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006298:	2302      	movs	r3, #2
 800629a:	e074      	b.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a34      	ldr	r2, [pc, #208]	@ (8006394 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a33      	ldr	r2, [pc, #204]	@ (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a31      	ldr	r2, [pc, #196]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d108      	bne.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a21      	ldr	r2, [pc, #132]	@ (8006394 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d022      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800631c:	d01d      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1f      	ldr	r2, [pc, #124]	@ (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d018      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1d      	ldr	r2, [pc, #116]	@ (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1c      	ldr	r2, [pc, #112]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a15      	ldr	r2, [pc, #84]	@ (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a18      	ldr	r2, [pc, #96]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a11      	ldr	r2, [pc, #68]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10c      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4313      	orrs	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40015000 	.word	0x40015000
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40014000 	.word	0x40014000

080063b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e042      	b.n	8006448 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fb facd 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2224      	movs	r2, #36	@ 0x24
 80063de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0201 	bic.w	r2, r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fbb2 	bl	8006b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f8b3 	bl	800656c <UART_SetConfig>
 8006406:	4603      	mov	r3, r0
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e01b      	b.n	8006448 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800641e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800642e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fc31 	bl	8006ca8 <UART_CheckIdleState>
 8006446:	4603      	mov	r3, r0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	@ 0x28
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006466:	2b20      	cmp	r3, #32
 8006468:	d17b      	bne.n	8006562 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_UART_Transmit+0x26>
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e074      	b.n	8006564 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2221      	movs	r2, #33	@ 0x21
 8006486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800648a:	f7fb fcb1 	bl	8001df0 <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a8:	d108      	bne.n	80064bc <HAL_UART_Transmit+0x6c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e003      	b.n	80064c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064c4:	e030      	b.n	8006528 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2200      	movs	r2, #0
 80064ce:	2180      	movs	r1, #128	@ 0x80
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fc93 	bl	8006dfc <UART_WaitOnFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e03d      	b.n	8006564 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10b      	bne.n	8006506 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	3302      	adds	r3, #2
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e007      	b.n	8006516 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1c8      	bne.n	80064c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	2140      	movs	r1, #64	@ 0x40
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fc5c 	bl	8006dfc <UART_WaitOnFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e006      	b.n	8006564 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3720      	adds	r7, #32
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800656c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006570:	b08c      	sub	sp, #48	@ 0x30
 8006572:	af00      	add	r7, sp, #0
 8006574:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	431a      	orrs	r2, r3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	431a      	orrs	r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	4313      	orrs	r3, r2
 8006592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4baa      	ldr	r3, [pc, #680]	@ (8006844 <UART_SetConfig+0x2d8>)
 800659c:	4013      	ands	r3, r2
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a9f      	ldr	r2, [pc, #636]	@ (8006848 <UART_SetConfig+0x2dc>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d4:	4313      	orrs	r3, r2
 80065d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80065e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	f023 010f 	bic.w	r1, r3, #15
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a90      	ldr	r2, [pc, #576]	@ (800684c <UART_SetConfig+0x2e0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d125      	bne.n	800665c <UART_SetConfig+0xf0>
 8006610:	4b8f      	ldr	r3, [pc, #572]	@ (8006850 <UART_SetConfig+0x2e4>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	2b03      	cmp	r3, #3
 800661c:	d81a      	bhi.n	8006654 <UART_SetConfig+0xe8>
 800661e:	a201      	add	r2, pc, #4	@ (adr r2, 8006624 <UART_SetConfig+0xb8>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006635 	.word	0x08006635
 8006628:	08006645 	.word	0x08006645
 800662c:	0800663d 	.word	0x0800663d
 8006630:	0800664d 	.word	0x0800664d
 8006634:	2301      	movs	r3, #1
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800663a:	e116      	b.n	800686a <UART_SetConfig+0x2fe>
 800663c:	2302      	movs	r3, #2
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006642:	e112      	b.n	800686a <UART_SetConfig+0x2fe>
 8006644:	2304      	movs	r3, #4
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800664a:	e10e      	b.n	800686a <UART_SetConfig+0x2fe>
 800664c:	2308      	movs	r3, #8
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006652:	e10a      	b.n	800686a <UART_SetConfig+0x2fe>
 8006654:	2310      	movs	r3, #16
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665a:	e106      	b.n	800686a <UART_SetConfig+0x2fe>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a7c      	ldr	r2, [pc, #496]	@ (8006854 <UART_SetConfig+0x2e8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d138      	bne.n	80066d8 <UART_SetConfig+0x16c>
 8006666:	4b7a      	ldr	r3, [pc, #488]	@ (8006850 <UART_SetConfig+0x2e4>)
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666c:	f003 030c 	and.w	r3, r3, #12
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d82d      	bhi.n	80066d0 <UART_SetConfig+0x164>
 8006674:	a201      	add	r2, pc, #4	@ (adr r2, 800667c <UART_SetConfig+0x110>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	080066b1 	.word	0x080066b1
 8006680:	080066d1 	.word	0x080066d1
 8006684:	080066d1 	.word	0x080066d1
 8006688:	080066d1 	.word	0x080066d1
 800668c:	080066c1 	.word	0x080066c1
 8006690:	080066d1 	.word	0x080066d1
 8006694:	080066d1 	.word	0x080066d1
 8006698:	080066d1 	.word	0x080066d1
 800669c:	080066b9 	.word	0x080066b9
 80066a0:	080066d1 	.word	0x080066d1
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066c9 	.word	0x080066c9
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b6:	e0d8      	b.n	800686a <UART_SetConfig+0x2fe>
 80066b8:	2302      	movs	r3, #2
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066be:	e0d4      	b.n	800686a <UART_SetConfig+0x2fe>
 80066c0:	2304      	movs	r3, #4
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c6:	e0d0      	b.n	800686a <UART_SetConfig+0x2fe>
 80066c8:	2308      	movs	r3, #8
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ce:	e0cc      	b.n	800686a <UART_SetConfig+0x2fe>
 80066d0:	2310      	movs	r3, #16
 80066d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d6:	e0c8      	b.n	800686a <UART_SetConfig+0x2fe>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a5e      	ldr	r2, [pc, #376]	@ (8006858 <UART_SetConfig+0x2ec>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d125      	bne.n	800672e <UART_SetConfig+0x1c2>
 80066e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006850 <UART_SetConfig+0x2e4>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066ec:	2b30      	cmp	r3, #48	@ 0x30
 80066ee:	d016      	beq.n	800671e <UART_SetConfig+0x1b2>
 80066f0:	2b30      	cmp	r3, #48	@ 0x30
 80066f2:	d818      	bhi.n	8006726 <UART_SetConfig+0x1ba>
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d00a      	beq.n	800670e <UART_SetConfig+0x1a2>
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d814      	bhi.n	8006726 <UART_SetConfig+0x1ba>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <UART_SetConfig+0x19a>
 8006700:	2b10      	cmp	r3, #16
 8006702:	d008      	beq.n	8006716 <UART_SetConfig+0x1aa>
 8006704:	e00f      	b.n	8006726 <UART_SetConfig+0x1ba>
 8006706:	2300      	movs	r3, #0
 8006708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670c:	e0ad      	b.n	800686a <UART_SetConfig+0x2fe>
 800670e:	2302      	movs	r3, #2
 8006710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006714:	e0a9      	b.n	800686a <UART_SetConfig+0x2fe>
 8006716:	2304      	movs	r3, #4
 8006718:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671c:	e0a5      	b.n	800686a <UART_SetConfig+0x2fe>
 800671e:	2308      	movs	r3, #8
 8006720:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006724:	e0a1      	b.n	800686a <UART_SetConfig+0x2fe>
 8006726:	2310      	movs	r3, #16
 8006728:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672c:	e09d      	b.n	800686a <UART_SetConfig+0x2fe>
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a4a      	ldr	r2, [pc, #296]	@ (800685c <UART_SetConfig+0x2f0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d125      	bne.n	8006784 <UART_SetConfig+0x218>
 8006738:	4b45      	ldr	r3, [pc, #276]	@ (8006850 <UART_SetConfig+0x2e4>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006742:	2bc0      	cmp	r3, #192	@ 0xc0
 8006744:	d016      	beq.n	8006774 <UART_SetConfig+0x208>
 8006746:	2bc0      	cmp	r3, #192	@ 0xc0
 8006748:	d818      	bhi.n	800677c <UART_SetConfig+0x210>
 800674a:	2b80      	cmp	r3, #128	@ 0x80
 800674c:	d00a      	beq.n	8006764 <UART_SetConfig+0x1f8>
 800674e:	2b80      	cmp	r3, #128	@ 0x80
 8006750:	d814      	bhi.n	800677c <UART_SetConfig+0x210>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <UART_SetConfig+0x1f0>
 8006756:	2b40      	cmp	r3, #64	@ 0x40
 8006758:	d008      	beq.n	800676c <UART_SetConfig+0x200>
 800675a:	e00f      	b.n	800677c <UART_SetConfig+0x210>
 800675c:	2300      	movs	r3, #0
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006762:	e082      	b.n	800686a <UART_SetConfig+0x2fe>
 8006764:	2302      	movs	r3, #2
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676a:	e07e      	b.n	800686a <UART_SetConfig+0x2fe>
 800676c:	2304      	movs	r3, #4
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006772:	e07a      	b.n	800686a <UART_SetConfig+0x2fe>
 8006774:	2308      	movs	r3, #8
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677a:	e076      	b.n	800686a <UART_SetConfig+0x2fe>
 800677c:	2310      	movs	r3, #16
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006782:	e072      	b.n	800686a <UART_SetConfig+0x2fe>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a35      	ldr	r2, [pc, #212]	@ (8006860 <UART_SetConfig+0x2f4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d12a      	bne.n	80067e4 <UART_SetConfig+0x278>
 800678e:	4b30      	ldr	r3, [pc, #192]	@ (8006850 <UART_SetConfig+0x2e4>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006794:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800679c:	d01a      	beq.n	80067d4 <UART_SetConfig+0x268>
 800679e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067a2:	d81b      	bhi.n	80067dc <UART_SetConfig+0x270>
 80067a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a8:	d00c      	beq.n	80067c4 <UART_SetConfig+0x258>
 80067aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ae:	d815      	bhi.n	80067dc <UART_SetConfig+0x270>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <UART_SetConfig+0x250>
 80067b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067b8:	d008      	beq.n	80067cc <UART_SetConfig+0x260>
 80067ba:	e00f      	b.n	80067dc <UART_SetConfig+0x270>
 80067bc:	2300      	movs	r3, #0
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c2:	e052      	b.n	800686a <UART_SetConfig+0x2fe>
 80067c4:	2302      	movs	r3, #2
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ca:	e04e      	b.n	800686a <UART_SetConfig+0x2fe>
 80067cc:	2304      	movs	r3, #4
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d2:	e04a      	b.n	800686a <UART_SetConfig+0x2fe>
 80067d4:	2308      	movs	r3, #8
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067da:	e046      	b.n	800686a <UART_SetConfig+0x2fe>
 80067dc:	2310      	movs	r3, #16
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e2:	e042      	b.n	800686a <UART_SetConfig+0x2fe>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a17      	ldr	r2, [pc, #92]	@ (8006848 <UART_SetConfig+0x2dc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d13a      	bne.n	8006864 <UART_SetConfig+0x2f8>
 80067ee:	4b18      	ldr	r3, [pc, #96]	@ (8006850 <UART_SetConfig+0x2e4>)
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067fc:	d01a      	beq.n	8006834 <UART_SetConfig+0x2c8>
 80067fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006802:	d81b      	bhi.n	800683c <UART_SetConfig+0x2d0>
 8006804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006808:	d00c      	beq.n	8006824 <UART_SetConfig+0x2b8>
 800680a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800680e:	d815      	bhi.n	800683c <UART_SetConfig+0x2d0>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <UART_SetConfig+0x2b0>
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006818:	d008      	beq.n	800682c <UART_SetConfig+0x2c0>
 800681a:	e00f      	b.n	800683c <UART_SetConfig+0x2d0>
 800681c:	2300      	movs	r3, #0
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006822:	e022      	b.n	800686a <UART_SetConfig+0x2fe>
 8006824:	2302      	movs	r3, #2
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682a:	e01e      	b.n	800686a <UART_SetConfig+0x2fe>
 800682c:	2304      	movs	r3, #4
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006832:	e01a      	b.n	800686a <UART_SetConfig+0x2fe>
 8006834:	2308      	movs	r3, #8
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683a:	e016      	b.n	800686a <UART_SetConfig+0x2fe>
 800683c:	2310      	movs	r3, #16
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006842:	e012      	b.n	800686a <UART_SetConfig+0x2fe>
 8006844:	cfff69f3 	.word	0xcfff69f3
 8006848:	40008000 	.word	0x40008000
 800684c:	40013800 	.word	0x40013800
 8006850:	40021000 	.word	0x40021000
 8006854:	40004400 	.word	0x40004400
 8006858:	40004800 	.word	0x40004800
 800685c:	40004c00 	.word	0x40004c00
 8006860:	40005000 	.word	0x40005000
 8006864:	2310      	movs	r3, #16
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4aae      	ldr	r2, [pc, #696]	@ (8006b28 <UART_SetConfig+0x5bc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	f040 8097 	bne.w	80069a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006876:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800687a:	2b08      	cmp	r3, #8
 800687c:	d823      	bhi.n	80068c6 <UART_SetConfig+0x35a>
 800687e:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <UART_SetConfig+0x318>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068c7 	.word	0x080068c7
 800688c:	080068b1 	.word	0x080068b1
 8006890:	080068c7 	.word	0x080068c7
 8006894:	080068b7 	.word	0x080068b7
 8006898:	080068c7 	.word	0x080068c7
 800689c:	080068c7 	.word	0x080068c7
 80068a0:	080068c7 	.word	0x080068c7
 80068a4:	080068bf 	.word	0x080068bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a8:	f7fe f88c 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 80068ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068ae:	e010      	b.n	80068d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b0:	4b9e      	ldr	r3, [pc, #632]	@ (8006b2c <UART_SetConfig+0x5c0>)
 80068b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068b4:	e00d      	b.n	80068d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068b6:	f7fe f817 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 80068ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068bc:	e009      	b.n	80068d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068c4:	e005      	b.n	80068d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8130 	beq.w	8006b3a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068de:	4a94      	ldr	r2, [pc, #592]	@ (8006b30 <UART_SetConfig+0x5c4>)
 80068e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4413      	add	r3, r2
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d305      	bcc.n	800690a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	429a      	cmp	r2, r3
 8006908:	d903      	bls.n	8006912 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006910:	e113      	b.n	8006b3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	2200      	movs	r2, #0
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	60fa      	str	r2, [r7, #12]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691e:	4a84      	ldr	r2, [pc, #528]	@ (8006b30 <UART_SetConfig+0x5c4>)
 8006920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006924:	b29b      	uxth	r3, r3
 8006926:	2200      	movs	r2, #0
 8006928:	603b      	str	r3, [r7, #0]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006930:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006934:	f7fa f8d6 	bl	8000ae4 <__aeabi_uldivmod>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4610      	mov	r0, r2
 800693e:	4619      	mov	r1, r3
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	020b      	lsls	r3, r1, #8
 800694a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800694e:	0202      	lsls	r2, r0, #8
 8006950:	6979      	ldr	r1, [r7, #20]
 8006952:	6849      	ldr	r1, [r1, #4]
 8006954:	0849      	lsrs	r1, r1, #1
 8006956:	2000      	movs	r0, #0
 8006958:	460c      	mov	r4, r1
 800695a:	4605      	mov	r5, r0
 800695c:	eb12 0804 	adds.w	r8, r2, r4
 8006960:	eb43 0905 	adc.w	r9, r3, r5
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	469a      	mov	sl, r3
 800696c:	4693      	mov	fp, r2
 800696e:	4652      	mov	r2, sl
 8006970:	465b      	mov	r3, fp
 8006972:	4640      	mov	r0, r8
 8006974:	4649      	mov	r1, r9
 8006976:	f7fa f8b5 	bl	8000ae4 <__aeabi_uldivmod>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4613      	mov	r3, r2
 8006980:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006988:	d308      	bcc.n	800699c <UART_SetConfig+0x430>
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006990:	d204      	bcs.n	800699c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6a3a      	ldr	r2, [r7, #32]
 8006998:	60da      	str	r2, [r3, #12]
 800699a:	e0ce      	b.n	8006b3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069a2:	e0ca      	b.n	8006b3a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ac:	d166      	bne.n	8006a7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80069ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d827      	bhi.n	8006a06 <UART_SetConfig+0x49a>
 80069b6:	a201      	add	r2, pc, #4	@ (adr r2, 80069bc <UART_SetConfig+0x450>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	080069e9 	.word	0x080069e9
 80069c4:	080069f1 	.word	0x080069f1
 80069c8:	08006a07 	.word	0x08006a07
 80069cc:	080069f7 	.word	0x080069f7
 80069d0:	08006a07 	.word	0x08006a07
 80069d4:	08006a07 	.word	0x08006a07
 80069d8:	08006a07 	.word	0x08006a07
 80069dc:	080069ff 	.word	0x080069ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e0:	f7fd fff0 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 80069e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069e6:	e014      	b.n	8006a12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069e8:	f7fe f802 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 80069ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069ee:	e010      	b.n	8006a12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069f0:	4b4e      	ldr	r3, [pc, #312]	@ (8006b2c <UART_SetConfig+0x5c0>)
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069f4:	e00d      	b.n	8006a12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f6:	f7fd ff77 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 80069fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069fc:	e009      	b.n	8006a12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a04:	e005      	b.n	8006a12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8090 	beq.w	8006b3a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	4a44      	ldr	r2, [pc, #272]	@ (8006b30 <UART_SetConfig+0x5c4>)
 8006a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a2c:	005a      	lsls	r2, r3, #1
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	441a      	add	r2, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	2b0f      	cmp	r3, #15
 8006a44:	d916      	bls.n	8006a74 <UART_SetConfig+0x508>
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a4c:	d212      	bcs.n	8006a74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f023 030f 	bic.w	r3, r3, #15
 8006a56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	8bfb      	ldrh	r3, [r7, #30]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	8bfa      	ldrh	r2, [r7, #30]
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	e062      	b.n	8006b3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a7a:	e05e      	b.n	8006b3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d828      	bhi.n	8006ad6 <UART_SetConfig+0x56a>
 8006a84:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <UART_SetConfig+0x520>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	08006ad7 	.word	0x08006ad7
 8006a9c:	08006ac7 	.word	0x08006ac7
 8006aa0:	08006ad7 	.word	0x08006ad7
 8006aa4:	08006ad7 	.word	0x08006ad7
 8006aa8:	08006ad7 	.word	0x08006ad7
 8006aac:	08006acf 	.word	0x08006acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab0:	f7fd ff88 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8006ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ab6:	e014      	b.n	8006ae2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f7fd ff9a 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 8006abc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006abe:	e010      	b.n	8006ae2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <UART_SetConfig+0x5c0>)
 8006ac2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ac4:	e00d      	b.n	8006ae2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac6:	f7fd ff0f 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 8006aca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006acc:	e009      	b.n	8006ae2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ad4:	e005      	b.n	8006ae2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ae0:	bf00      	nop
    }

    if (pclk != 0U)
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d028      	beq.n	8006b3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	4a10      	ldr	r2, [pc, #64]	@ (8006b30 <UART_SetConfig+0x5c4>)
 8006aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	441a      	add	r2, r3
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	2b0f      	cmp	r3, #15
 8006b10:	d910      	bls.n	8006b34 <UART_SetConfig+0x5c8>
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b18:	d20c      	bcs.n	8006b34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60da      	str	r2, [r3, #12]
 8006b24:	e009      	b.n	8006b3a <UART_SetConfig+0x5ce>
 8006b26:	bf00      	nop
 8006b28:	40008000 	.word	0x40008000
 8006b2c:	00f42400 	.word	0x00f42400
 8006b30:	0800729c 	.word	0x0800729c
      }
      else
      {
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2200      	movs	r2, #0
 8006b54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b56:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3730      	adds	r7, #48	@ 0x30
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00a      	beq.n	8006b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf8:	f003 0310 	and.w	r3, r3, #16
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d01a      	beq.n	8006c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c62:	d10a      	bne.n	8006c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	605a      	str	r2, [r3, #4]
  }
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b098      	sub	sp, #96	@ 0x60
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cb8:	f7fb f89a 	bl	8001df0 <HAL_GetTick>
 8006cbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0308 	and.w	r3, r3, #8
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d12f      	bne.n	8006d2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f88e 	bl	8006dfc <UART_WaitOnFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d022      	beq.n	8006d2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e6      	bne.n	8006ce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e063      	b.n	8006df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d149      	bne.n	8006dce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d42:	2200      	movs	r2, #0
 8006d44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f857 	bl	8006dfc <UART_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d03c      	beq.n	8006dce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	623b      	str	r3, [r7, #32]
   return(result);
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e6      	bne.n	8006d54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006da6:	61fa      	str	r2, [r7, #28]
 8006da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	69b9      	ldr	r1, [r7, #24]
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	617b      	str	r3, [r7, #20]
   return(result);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e5      	bne.n	8006d86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e012      	b.n	8006df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3758      	adds	r7, #88	@ 0x58
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e0c:	e04f      	b.n	8006eae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d04b      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e16:	f7fa ffeb 	bl	8001df0 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d302      	bcc.n	8006e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e04e      	b.n	8006ece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d037      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b80      	cmp	r3, #128	@ 0x80
 8006e42:	d034      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b40      	cmp	r3, #64	@ 0x40
 8006e48:	d031      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d110      	bne.n	8006e7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f838 	bl	8006ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2208      	movs	r2, #8
 8006e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e029      	b.n	8006ece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e88:	d111      	bne.n	8006eae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f81e 	bl	8006ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e00f      	b.n	8006ece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	bf0c      	ite	eq
 8006ebe:	2301      	moveq	r3, #1
 8006ec0:	2300      	movne	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d0a0      	beq.n	8006e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b095      	sub	sp, #84	@ 0x54
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006efe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e6      	bne.n	8006ede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f26:	f023 0301 	bic.w	r3, r3, #1
 8006f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3308      	adds	r3, #8
 8006f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e3      	bne.n	8006f10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d118      	bne.n	8006f82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f023 0310 	bic.w	r3, r3, #16
 8006f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6979      	ldr	r1, [r7, #20]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e6      	bne.n	8006f50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f96:	bf00      	nop
 8006f98:	3754      	adds	r7, #84	@ 0x54
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e027      	b.n	8007008 <HAL_UARTEx_DisableFifoMode+0x66>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2224      	movs	r2, #36	@ 0x24
 8006fc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006fe6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007028:	2302      	movs	r3, #2
 800702a:	e02d      	b.n	8007088 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2224      	movs	r2, #36	@ 0x24
 8007038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0201 	bic.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f84f 	bl	800710c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e02d      	b.n	8007104 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2224      	movs	r2, #36	@ 0x24
 80070b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f811 	bl	800710c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007118:	2b00      	cmp	r3, #0
 800711a:	d108      	bne.n	800712e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800712c:	e031      	b.n	8007192 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800712e:	2308      	movs	r3, #8
 8007130:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007132:	2308      	movs	r3, #8
 8007134:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	0e5b      	lsrs	r3, r3, #25
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	0f5b      	lsrs	r3, r3, #29
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	7b3a      	ldrb	r2, [r7, #12]
 800715a:	4911      	ldr	r1, [pc, #68]	@ (80071a0 <UARTEx_SetNbDataToProcess+0x94>)
 800715c:	5c8a      	ldrb	r2, [r1, r2]
 800715e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007162:	7b3a      	ldrb	r2, [r7, #12]
 8007164:	490f      	ldr	r1, [pc, #60]	@ (80071a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007166:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007168:	fb93 f3f2 	sdiv	r3, r3, r2
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	7b7a      	ldrb	r2, [r7, #13]
 8007178:	4909      	ldr	r1, [pc, #36]	@ (80071a0 <UARTEx_SetNbDataToProcess+0x94>)
 800717a:	5c8a      	ldrb	r2, [r1, r2]
 800717c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007180:	7b7a      	ldrb	r2, [r7, #13]
 8007182:	4908      	ldr	r1, [pc, #32]	@ (80071a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007184:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007186:	fb93 f3f2 	sdiv	r3, r3, r2
 800718a:	b29a      	uxth	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	080072b4 	.word	0x080072b4
 80071a4:	080072bc 	.word	0x080072bc

080071a8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80071be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80071c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80071d8:	eeb1 7a67 	vneg.f32	s14, s15
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	edd3 7a08 	vldr	s15, [r3, #32]
 80071e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80071e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d006      	beq.n	800720c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	330c      	adds	r3, #12
 8007202:	220c      	movs	r2, #12
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f000 f804 	bl	8007214 <memset>
  }

}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <memset>:
 8007214:	4402      	add	r2, r0
 8007216:	4603      	mov	r3, r0
 8007218:	4293      	cmp	r3, r2
 800721a:	d100      	bne.n	800721e <memset+0xa>
 800721c:	4770      	bx	lr
 800721e:	f803 1b01 	strb.w	r1, [r3], #1
 8007222:	e7f9      	b.n	8007218 <memset+0x4>

08007224 <__libc_init_array>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	4d0d      	ldr	r5, [pc, #52]	@ (800725c <__libc_init_array+0x38>)
 8007228:	4c0d      	ldr	r4, [pc, #52]	@ (8007260 <__libc_init_array+0x3c>)
 800722a:	1b64      	subs	r4, r4, r5
 800722c:	10a4      	asrs	r4, r4, #2
 800722e:	2600      	movs	r6, #0
 8007230:	42a6      	cmp	r6, r4
 8007232:	d109      	bne.n	8007248 <__libc_init_array+0x24>
 8007234:	4d0b      	ldr	r5, [pc, #44]	@ (8007264 <__libc_init_array+0x40>)
 8007236:	4c0c      	ldr	r4, [pc, #48]	@ (8007268 <__libc_init_array+0x44>)
 8007238:	f000 f818 	bl	800726c <_init>
 800723c:	1b64      	subs	r4, r4, r5
 800723e:	10a4      	asrs	r4, r4, #2
 8007240:	2600      	movs	r6, #0
 8007242:	42a6      	cmp	r6, r4
 8007244:	d105      	bne.n	8007252 <__libc_init_array+0x2e>
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	f855 3b04 	ldr.w	r3, [r5], #4
 800724c:	4798      	blx	r3
 800724e:	3601      	adds	r6, #1
 8007250:	e7ee      	b.n	8007230 <__libc_init_array+0xc>
 8007252:	f855 3b04 	ldr.w	r3, [r5], #4
 8007256:	4798      	blx	r3
 8007258:	3601      	adds	r6, #1
 800725a:	e7f2      	b.n	8007242 <__libc_init_array+0x1e>
 800725c:	080072cc 	.word	0x080072cc
 8007260:	080072cc 	.word	0x080072cc
 8007264:	080072cc 	.word	0x080072cc
 8007268:	080072d0 	.word	0x080072d0

0800726c <_init>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr

08007278 <_fini>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr
