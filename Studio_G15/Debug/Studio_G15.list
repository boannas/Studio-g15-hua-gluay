
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000921c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080093f4  080093f4  0000a3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800944c  0800944c  0000b23c  2**0
                  CONTENTS
  4 .ARM          00000008  0800944c  0800944c  0000a44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009454  08009454  0000b23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009454  08009454  0000a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009458  08009458  0000a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  0800945c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f34  20000240  08009698  0000b240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001174  08009698  0000c174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b23c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a6d  00000000  00000000  0000b26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003395  00000000  00000000  00024cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00028070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e89  00000000  00000000  00029320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e1d  00000000  00000000  0002a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c34  00000000  00000000  00051fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe75a  00000000  00000000  0006abfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005060  00000000  00000000  00169398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0016e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000240 	.word	0x20000240
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080093dc 	.word	0x080093dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000244 	.word	0x20000244
 8000214:	080093dc 	.word	0x080093dc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_uldivmod>:
 8000e10:	b953      	cbnz	r3, 8000e28 <__aeabi_uldivmod+0x18>
 8000e12:	b94a      	cbnz	r2, 8000e28 <__aeabi_uldivmod+0x18>
 8000e14:	2900      	cmp	r1, #0
 8000e16:	bf08      	it	eq
 8000e18:	2800      	cmpeq	r0, #0
 8000e1a:	bf1c      	itt	ne
 8000e1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e20:	f04f 30ff 	movne.w	r0, #4294967295
 8000e24:	f000 b96a 	b.w	80010fc <__aeabi_idiv0>
 8000e28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e30:	f000 f806 	bl	8000e40 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4770      	bx	lr

08000e40 <__udivmoddi4>:
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	9d08      	ldr	r5, [sp, #32]
 8000e46:	460c      	mov	r4, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d14e      	bne.n	8000eea <__udivmoddi4+0xaa>
 8000e4c:	4694      	mov	ip, r2
 8000e4e:	458c      	cmp	ip, r1
 8000e50:	4686      	mov	lr, r0
 8000e52:	fab2 f282 	clz	r2, r2
 8000e56:	d962      	bls.n	8000f1e <__udivmoddi4+0xde>
 8000e58:	b14a      	cbz	r2, 8000e6e <__udivmoddi4+0x2e>
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	fa20 f303 	lsr.w	r3, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f f68c 	uxth.w	r6, ip
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb04 f106 	mul.w	r1, r4, r6
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x64>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e96:	f080 8112 	bcs.w	80010be <__udivmoddi4+0x27e>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 810f 	bls.w	80010be <__udivmoddi4+0x27e>
 8000ea0:	3c02      	subs	r4, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a59      	subs	r1, r3, r1
 8000ea6:	fa1f f38e 	uxth.w	r3, lr
 8000eaa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eae:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f606 	mul.w	r6, r0, r6
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d90a      	bls.n	8000ed4 <__udivmoddi4+0x94>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec6:	f080 80fc 	bcs.w	80010c2 <__udivmoddi4+0x282>
 8000eca:	429e      	cmp	r6, r3
 8000ecc:	f240 80f9 	bls.w	80010c2 <__udivmoddi4+0x282>
 8000ed0:	4463      	add	r3, ip
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	1b9b      	subs	r3, r3, r6
 8000ed6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eda:	2100      	movs	r1, #0
 8000edc:	b11d      	cbz	r5, 8000ee6 <__udivmoddi4+0xa6>
 8000ede:	40d3      	lsrs	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d905      	bls.n	8000efa <__udivmoddi4+0xba>
 8000eee:	b10d      	cbz	r5, 8000ef4 <__udivmoddi4+0xb4>
 8000ef0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e7f5      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000efa:	fab3 f183 	clz	r1, r3
 8000efe:	2900      	cmp	r1, #0
 8000f00:	d146      	bne.n	8000f90 <__udivmoddi4+0x150>
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	d302      	bcc.n	8000f0c <__udivmoddi4+0xcc>
 8000f06:	4290      	cmp	r0, r2
 8000f08:	f0c0 80f0 	bcc.w	80010ec <__udivmoddi4+0x2ac>
 8000f0c:	1a86      	subs	r6, r0, r2
 8000f0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d0e6      	beq.n	8000ee6 <__udivmoddi4+0xa6>
 8000f18:	e9c5 6300 	strd	r6, r3, [r5]
 8000f1c:	e7e3      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	f040 8090 	bne.w	8001044 <__udivmoddi4+0x204>
 8000f24:	eba1 040c 	sub.w	r4, r1, ip
 8000f28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f2c:	fa1f f78c 	uxth.w	r7, ip
 8000f30:	2101      	movs	r1, #1
 8000f32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f42:	fb07 f006 	mul.w	r0, r7, r6
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d908      	bls.n	8000f5c <__udivmoddi4+0x11c>
 8000f4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f52:	d202      	bcs.n	8000f5a <__udivmoddi4+0x11a>
 8000f54:	4298      	cmp	r0, r3
 8000f56:	f200 80cd 	bhi.w	80010f4 <__udivmoddi4+0x2b4>
 8000f5a:	4626      	mov	r6, r4
 8000f5c:	1a1c      	subs	r4, r3, r0
 8000f5e:	fa1f f38e 	uxth.w	r3, lr
 8000f62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f66:	fb08 4410 	mls	r4, r8, r0, r4
 8000f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6e:	fb00 f707 	mul.w	r7, r0, r7
 8000f72:	429f      	cmp	r7, r3
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x148>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7e:	d202      	bcs.n	8000f86 <__udivmoddi4+0x146>
 8000f80:	429f      	cmp	r7, r3
 8000f82:	f200 80b0 	bhi.w	80010e6 <__udivmoddi4+0x2a6>
 8000f86:	4620      	mov	r0, r4
 8000f88:	1bdb      	subs	r3, r3, r7
 8000f8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8e:	e7a5      	b.n	8000edc <__udivmoddi4+0x9c>
 8000f90:	f1c1 0620 	rsb	r6, r1, #32
 8000f94:	408b      	lsls	r3, r1
 8000f96:	fa22 f706 	lsr.w	r7, r2, r6
 8000f9a:	431f      	orrs	r7, r3
 8000f9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa0:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa4:	ea43 030c 	orr.w	r3, r3, ip
 8000fa8:	40f4      	lsrs	r4, r6
 8000faa:	fa00 f801 	lsl.w	r8, r0, r1
 8000fae:	0c38      	lsrs	r0, r7, #16
 8000fb0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb4:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb8:	fa1f fc87 	uxth.w	ip, r7
 8000fbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc8:	45a1      	cmp	r9, r4
 8000fca:	fa02 f201 	lsl.w	r2, r2, r1
 8000fce:	d90a      	bls.n	8000fe6 <__udivmoddi4+0x1a6>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd6:	f080 8084 	bcs.w	80010e2 <__udivmoddi4+0x2a2>
 8000fda:	45a1      	cmp	r9, r4
 8000fdc:	f240 8081 	bls.w	80010e2 <__udivmoddi4+0x2a2>
 8000fe0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe4:	443c      	add	r4, r7
 8000fe6:	eba4 0409 	sub.w	r4, r4, r9
 8000fea:	fa1f f983 	uxth.w	r9, r3
 8000fee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ff2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffe:	45a4      	cmp	ip, r4
 8001000:	d907      	bls.n	8001012 <__udivmoddi4+0x1d2>
 8001002:	193c      	adds	r4, r7, r4
 8001004:	f103 30ff 	add.w	r0, r3, #4294967295
 8001008:	d267      	bcs.n	80010da <__udivmoddi4+0x29a>
 800100a:	45a4      	cmp	ip, r4
 800100c:	d965      	bls.n	80010da <__udivmoddi4+0x29a>
 800100e:	3b02      	subs	r3, #2
 8001010:	443c      	add	r4, r7
 8001012:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001016:	fba0 9302 	umull	r9, r3, r0, r2
 800101a:	eba4 040c 	sub.w	r4, r4, ip
 800101e:	429c      	cmp	r4, r3
 8001020:	46ce      	mov	lr, r9
 8001022:	469c      	mov	ip, r3
 8001024:	d351      	bcc.n	80010ca <__udivmoddi4+0x28a>
 8001026:	d04e      	beq.n	80010c6 <__udivmoddi4+0x286>
 8001028:	b155      	cbz	r5, 8001040 <__udivmoddi4+0x200>
 800102a:	ebb8 030e 	subs.w	r3, r8, lr
 800102e:	eb64 040c 	sbc.w	r4, r4, ip
 8001032:	fa04 f606 	lsl.w	r6, r4, r6
 8001036:	40cb      	lsrs	r3, r1
 8001038:	431e      	orrs	r6, r3
 800103a:	40cc      	lsrs	r4, r1
 800103c:	e9c5 6400 	strd	r6, r4, [r5]
 8001040:	2100      	movs	r1, #0
 8001042:	e750      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8001044:	f1c2 0320 	rsb	r3, r2, #32
 8001048:	fa20 f103 	lsr.w	r1, r0, r3
 800104c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001050:	fa24 f303 	lsr.w	r3, r4, r3
 8001054:	4094      	lsls	r4, r2
 8001056:	430c      	orrs	r4, r1
 8001058:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800105c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	fbb3 f0f8 	udiv	r0, r3, r8
 8001068:	fb08 3110 	mls	r1, r8, r0, r3
 800106c:	0c23      	lsrs	r3, r4, #16
 800106e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001072:	fb00 f107 	mul.w	r1, r0, r7
 8001076:	4299      	cmp	r1, r3
 8001078:	d908      	bls.n	800108c <__udivmoddi4+0x24c>
 800107a:	eb1c 0303 	adds.w	r3, ip, r3
 800107e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001082:	d22c      	bcs.n	80010de <__udivmoddi4+0x29e>
 8001084:	4299      	cmp	r1, r3
 8001086:	d92a      	bls.n	80010de <__udivmoddi4+0x29e>
 8001088:	3802      	subs	r0, #2
 800108a:	4463      	add	r3, ip
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb3 f1f8 	udiv	r1, r3, r8
 8001094:	fb08 3311 	mls	r3, r8, r1, r3
 8001098:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800109c:	fb01 f307 	mul.w	r3, r1, r7
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0x276>
 80010a4:	eb1c 0404 	adds.w	r4, ip, r4
 80010a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80010ac:	d213      	bcs.n	80010d6 <__udivmoddi4+0x296>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d911      	bls.n	80010d6 <__udivmoddi4+0x296>
 80010b2:	3902      	subs	r1, #2
 80010b4:	4464      	add	r4, ip
 80010b6:	1ae4      	subs	r4, r4, r3
 80010b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010bc:	e739      	b.n	8000f32 <__udivmoddi4+0xf2>
 80010be:	4604      	mov	r4, r0
 80010c0:	e6f0      	b.n	8000ea4 <__udivmoddi4+0x64>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e706      	b.n	8000ed4 <__udivmoddi4+0x94>
 80010c6:	45c8      	cmp	r8, r9
 80010c8:	d2ae      	bcs.n	8001028 <__udivmoddi4+0x1e8>
 80010ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80010d2:	3801      	subs	r0, #1
 80010d4:	e7a8      	b.n	8001028 <__udivmoddi4+0x1e8>
 80010d6:	4631      	mov	r1, r6
 80010d8:	e7ed      	b.n	80010b6 <__udivmoddi4+0x276>
 80010da:	4603      	mov	r3, r0
 80010dc:	e799      	b.n	8001012 <__udivmoddi4+0x1d2>
 80010de:	4630      	mov	r0, r6
 80010e0:	e7d4      	b.n	800108c <__udivmoddi4+0x24c>
 80010e2:	46d6      	mov	lr, sl
 80010e4:	e77f      	b.n	8000fe6 <__udivmoddi4+0x1a6>
 80010e6:	4463      	add	r3, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e74d      	b.n	8000f88 <__udivmoddi4+0x148>
 80010ec:	4606      	mov	r6, r0
 80010ee:	4623      	mov	r3, r4
 80010f0:	4608      	mov	r0, r1
 80010f2:	e70f      	b.n	8000f14 <__udivmoddi4+0xd4>
 80010f4:	3e02      	subs	r6, #2
 80010f6:	4463      	add	r3, ip
 80010f8:	e730      	b.n	8000f5c <__udivmoddi4+0x11c>
 80010fa:	bf00      	nop

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <easyCase>:
void Reset(){
	registerFrame[0x01].U16 = 0;
	registerFrame[0x10].U16 = 0;
}

void easyCase(){
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	base.bS = registerFrame[0x01].U16;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <easyCase+0x28>)
 8001106:	885a      	ldrh	r2, [r3, #2]
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <easyCase+0x2c>)
 800110a:	86da      	strh	r2, [r3, #54]	@ 0x36
	base.vS = registerFrame[0x02].U16;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <easyCase+0x28>)
 800110e:	889a      	ldrh	r2, [r3, #4]
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <easyCase+0x2c>)
 8001112:	871a      	strh	r2, [r3, #56]	@ 0x38
	base.gmS = registerFrame[0x03].U16;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <easyCase+0x28>)
 8001116:	88da      	ldrh	r2, [r3, #6]
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <easyCase+0x2c>)
 800111a:	875a      	strh	r2, [r3, #58]	@ 0x3a
//	base.gmaS = registerFrame[0x04].U16;
//	base.zmS = registerFrame[0x10].U16;
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000e64 	.word	0x20000e64
 800112c:	20001104 	.word	0x20001104

08001130 <Heartbeat>:

void Heartbeat(){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <Heartbeat+0x18>)
 8001136:	f645 1261 	movw	r2, #22881	@ 0x5961
 800113a:	801a      	strh	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000e64 	.word	0x20000e64

0800114c <Routine>:

void Routine(){
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <Routine+0x3c>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001158:	4293      	cmp	r3, r2
 800115a:	d110      	bne.n	800117e <Routine+0x32>
	{
		//Gripper 0x04 not sure!?!?
//		  registerFrame[0x04].U16 = 0b0000;
//		  registerFrame[0x04].U16 = 0b0001;   //Gripper status 0b0010 = 0000 0000 0000 0010
		registerFrame[0x10].U16 = base.bStatus;	//Z-axis status 0010 = 1
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <Routine+0x40>)
 800115e:	881a      	ldrh	r2, [r3, #0]
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <Routine+0x3c>)
 8001162:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = 1		*10;	//Z-axis position
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <Routine+0x3c>)
 8001166:	220a      	movs	r2, #10
 8001168:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = 2		*10;	//Z-axis speed
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <Routine+0x3c>)
 800116c:	2214      	movs	r2, #20
 800116e:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = 3		*10;	//Z-axis acceleration
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <Routine+0x3c>)
 8001172:	221e      	movs	r2, #30
 8001174:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = 4		*10;	//X-axis position
 8001176:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <Routine+0x3c>)
 8001178:	2228      	movs	r2, #40	@ 0x28
 800117a:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	20000e64 	.word	0x20000e64
 800118c:	20001104 	.word	0x20001104

08001190 <SetShelves>:
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
	}
}

void SetShelves(){
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 1; 		//Z-axis update z-xis moving status to "Set Shelves"
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <SetShelves+0x68>)
 8001196:	2201      	movs	r2, #1
 8001198:	841a      	strh	r2, [r3, #32]
	// save Position = floor[0] for moving to that position
	// set shelves 1 = 100 mm shelves 2 = 250 mm
	registerFrame[0x23].U16 = 10 *10; 	//0 = Position Shelve 1
 800119a:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <SetShelves+0x68>)
 800119c:	2264      	movs	r2, #100	@ 0x64
 800119e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	registerFrame[0x24].U16 = 20 *10;
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <SetShelves+0x68>)
 80011a4:	22c8      	movs	r2, #200	@ 0xc8
 80011a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	registerFrame[0x25].U16 = 30 *10;
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <SetShelves+0x68>)
 80011ac:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	registerFrame[0x26].U16 = 40 *10;
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <SetShelves+0x68>)
 80011b6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80011ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	registerFrame[0x27].U16 = 50 *10;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <SetShelves+0x68>)
 80011c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011c4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	//finish
	if (base.sw == 1){
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <SetShelves+0x6c>)
 80011ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10d      	bne.n	80011ee <SetShelves+0x5e>
		base.bStatus = 0;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <SetShelves+0x6c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <SetShelves+0x6c>)
 80011da:	881a      	ldrh	r2, [r3, #0]
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <SetShelves+0x68>)
 80011de:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <SetShelves+0x68>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	841a      	strh	r2, [r3, #32]
		base.sw = 0;
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <SetShelves+0x6c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	}
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	20000e64 	.word	0x20000e64
 80011fc:	20001104 	.word	0x20001104

08001200 <RunPoint>:

void RunPoint(){
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <RunPoint+0x50>)
 8001206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800120a:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <RunPoint+0x54>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <RunPoint+0x58>)
 8001216:	861a      	strh	r2, [r3, #48]	@ 0x30
	registerFrame[0x10].U16 = 16;
 8001218:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <RunPoint+0x50>)
 800121a:	2210      	movs	r2, #16
 800121c:	841a      	strh	r2, [r3, #32]
	//finish
	if(base.swp == 1){
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <RunPoint+0x58>)
 8001220:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001224:	2b01      	cmp	r3, #1
 8001226:	d10d      	bne.n	8001244 <RunPoint+0x44>
		base.bStatus = 0;
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <RunPoint+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <RunPoint+0x58>)
 8001230:	881a      	ldrh	r2, [r3, #0]
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <RunPoint+0x50>)
 8001234:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <RunPoint+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	841a      	strh	r2, [r3, #32]
		base.swp = 0;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <RunPoint+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	}
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000e64 	.word	0x20000e64
 8001254:	cccccccd 	.word	0xcccccccd
 8001258:	20001104 	.word	0x20001104

0800125c <SetHome>:

void SetHome(){
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 2;
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <SetHome+0x3c>)
 8001262:	2202      	movs	r2, #2
 8001264:	841a      	strh	r2, [r3, #32]
	if(base.sh == 1){
 8001266:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <SetHome+0x40>)
 8001268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10d      	bne.n	800128c <SetHome+0x30>
		base.bStatus = 0;
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <SetHome+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <SetHome+0x40>)
 8001278:	881a      	ldrh	r2, [r3, #0]
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <SetHome+0x3c>)
 800127c:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <SetHome+0x3c>)
 8001280:	2200      	movs	r2, #0
 8001282:	841a      	strh	r2, [r3, #32]
		base.sh = 0;
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <SetHome+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}
//	base.bS = 0;
//	registerFrame[0x01].U16 = 0;
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000e64 	.word	0x20000e64
 800129c:	20001104 	.word	0x20001104

080012a0 <RunJog>:

void RunJog(){
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	base.Pick = registerFrame[0x21].U16 ; 	//Get Pick from BaseSystem
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <RunJog+0x54>)
 80012a6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <RunJog+0x58>)
 80012ac:	865a      	strh	r2, [r3, #50]	@ 0x32
	base.Place = registerFrame[0x22].U16 ;	//Get Place from BaseSystem
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <RunJog+0x54>)
 80012b0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <RunJog+0x58>)
 80012b6:	869a      	strh	r2, [r3, #52]	@ 0x34
	registerFrame[0x10].U16 = 4;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <RunJog+0x54>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	841a      	strh	r2, [r3, #32]
	registerFrame[0x10].U16 = 8;
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <RunJog+0x54>)
 80012c0:	2208      	movs	r2, #8
 80012c2:	841a      	strh	r2, [r3, #32]
	//pick place 5 time
	if(base.sp == 1){
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <RunJog+0x58>)
 80012c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10d      	bne.n	80012ea <RunJog+0x4a>
		base.bStatus = 0;
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <RunJog+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.bStatus;
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <RunJog+0x58>)
 80012d6:	881a      	ldrh	r2, [r3, #0]
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <RunJog+0x54>)
 80012da:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <RunJog+0x54>)
 80012de:	2200      	movs	r2, #0
 80012e0:	841a      	strh	r2, [r3, #32]
		base.sp = 0;
 80012e2:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <RunJog+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	}
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000e64 	.word	0x20000e64
 80012f8:	20001104 	.word	0x20001104

080012fc <AMT_encoder_init>:
int32_t diffPosition;
float diffTime;
float ALPHA = 0.3f;

void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001310:	213c      	movs	r1, #60	@ 0x3c
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fc84 	bl	8005c20 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 0.0;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 0.0;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	0000      	movs	r0, r0
	...

08001330 <AMT_encoder_update>:

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 8001330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	e9c7 2300 	strd	r2, r3, [r7]
	//collect data
	AMT_data->TimeStamp[QEI_NOW] = current_time;
 8001340:	68f9      	ldr	r1, [r7, #12]
 8001342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001346:	e9c1 2302 	strd	r2, r3, [r1, #8]
	AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]

	//Postion 1 turn calculation
	AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a69      	ldr	r2, [pc, #420]	@ (8001500 <AMT_encoder_update+0x1d0>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001360:	fb01 f202 	mul.w	r2, r1, r2
 8001364:	1a9b      	subs	r3, r3, r2
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	621a      	str	r2, [r3, #32]

	//calculate dx
	diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	461a      	mov	r2, r3
 8001378:	4b62      	ldr	r3, [pc, #392]	@ (8001504 <AMT_encoder_update+0x1d4>)
 800137a:	601a      	str	r2, [r3, #0]

	//Handle Warp around
	if(diffPosition > 32767)
 800137c:	4b61      	ldr	r3, [pc, #388]	@ (8001504 <AMT_encoder_update+0x1d4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001384:	db06      	blt.n	8001394 <AMT_encoder_update+0x64>
		diffPosition -= 65535;
 8001386:	4b5f      	ldr	r3, [pc, #380]	@ (8001504 <AMT_encoder_update+0x1d4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 800138e:	3bff      	subs	r3, #255	@ 0xff
 8001390:	4a5c      	ldr	r2, [pc, #368]	@ (8001504 <AMT_encoder_update+0x1d4>)
 8001392:	6013      	str	r3, [r2, #0]
	if(diffPosition < -32767)
 8001394:	4b5b      	ldr	r3, [pc, #364]	@ (8001504 <AMT_encoder_update+0x1d4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800139c:	dc06      	bgt.n	80013ac <AMT_encoder_update+0x7c>
		diffPosition += 65535;
 800139e:	4b59      	ldr	r3, [pc, #356]	@ (8001504 <AMT_encoder_update+0x1d4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80013a6:	33ff      	adds	r3, #255	@ 0xff
 80013a8:	4a56      	ldr	r2, [pc, #344]	@ (8001504 <AMT_encoder_update+0x1d4>)
 80013aa:	6013      	str	r3, [r2, #0]

	//calculate dt
	diffTime = (AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV] );
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013b8:	1a84      	subs	r4, r0, r2
 80013ba:	eb61 0503 	sbc.w	r5, r1, r3
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7ff fcdf 	bl	8000d84 <__aeabi_ul2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001508 <AMT_encoder_update+0x1d8>)
 80013ca:	6013      	str	r3, [r2, #0]

	//calculate anglar velocity
	float Vin = (PID_velo.out/1000)*24;
 80013cc:	4b4f      	ldr	r3, [pc, #316]	@ (800150c <AMT_encoder_update+0x1dc>)
 80013ce:	ed93 7a06 	vldr	s14, [r3, #24]
 80013d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001510 <AMT_encoder_update+0x1e0>
 80013d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013da:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80013de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e2:	edc7 7a05 	vstr	s15, [r7, #20]
//	AMT_data->Angular_Velocity = lowPassFilter(SteadyStateKalmanFilter(&Vel_filtered,Vin, (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6))));	//RPM
	AMT_data->Angular_Velocity = (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6));	//RPM
 80013e6:	4b47      	ldr	r3, [pc, #284]	@ (8001504 <AMT_encoder_update+0x1d4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f866 	bl	80004bc <__aeabi_i2d>
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b47      	ldr	r3, [pc, #284]	@ (8001514 <AMT_encoder_update+0x1e4>)
 80013f6:	f7ff f8cb 	bl	8000590 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4690      	mov	r8, r2
 8001400:	4699      	mov	r9, r3
 8001402:	4b3f      	ldr	r3, [pc, #252]	@ (8001500 <AMT_encoder_update+0x1d0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f848 	bl	800049c <__aeabi_ui2d>
 800140c:	4604      	mov	r4, r0
 800140e:	460d      	mov	r5, r1
 8001410:	4b3d      	ldr	r3, [pc, #244]	@ (8001508 <AMT_encoder_update+0x1d8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f863 	bl	80004e0 <__aeabi_f2d>
 800141a:	a337      	add	r3, pc, #220	@ (adr r3, 80014f8 <AMT_encoder_update+0x1c8>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f9e0 	bl	80007e4 <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7ff f8b0 	bl	8000590 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4640      	mov	r0, r8
 8001436:	4649      	mov	r1, r9
 8001438:	f7ff f9d4 	bl	80007e4 <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fb86 	bl	8000b54 <__aeabi_d2f>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24

	AMT_data->Linear_Position += (diffPosition*pulley_cir)/cnt_per_rev;			//mm
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001454:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <AMT_encoder_update+0x1d4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001460:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <AMT_encoder_update+0x1e8>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800146a:	4b25      	ldr	r3, [pc, #148]	@ (8001500 <AMT_encoder_update+0x1d0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001476:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	AMT_data->Linear_Velocity = (AMT_data->Angular_Velocity / 60.0) * pulley_cir;		//mm/s
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f829 	bl	80004e0 <__aeabi_f2d>
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <AMT_encoder_update+0x1e4>)
 8001494:	f7ff f9a6 	bl	80007e4 <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
 80014a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <AMT_encoder_update+0x1e8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f81b 	bl	80004e0 <__aeabi_f2d>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4620      	mov	r0, r4
 80014b0:	4629      	mov	r1, r5
 80014b2:	f7ff f86d 	bl	8000590 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fb49 	bl	8000b54 <__aeabi_d2f>
 80014c2:	4602      	mov	r2, r0
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity;					//Uodate Velo
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	619a      	str	r2, [r3, #24]
//	AMT_data->Linear_Acceleration = ((AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) *  1000000.0) / (diffTime);		//mm/s^2

	//store value for next loop
	AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	605a      	str	r2, [r3, #4]
	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	699a      	ldr	r2, [r3, #24]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	61da      	str	r2, [r3, #28]
}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014f6:	bf00      	nop
 80014f8:	00000000 	.word	0x00000000
 80014fc:	412e8480 	.word	0x412e8480
 8001500:	20000000 	.word	0x20000000
 8001504:	2000025c 	.word	0x2000025c
 8001508:	20000260 	.word	0x20000260
 800150c:	20001054 	.word	0x20001054
 8001510:	447a0000 	.word	0x447a0000
 8001514:	404e0000 	.word	0x404e0000
 8001518:	20000004 	.word	0x20000004

0800151c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001520:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <modbus_1t5_Timeout+0x3c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <modbus_1t5_Timeout+0x3c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <modbus_1t5_Timeout+0x3c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <modbus_1t5_Timeout+0x3c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000264 	.word	0x20000264

0800155c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <modbus_3t5_Timeout+0x1c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	755a      	strb	r2, [r3, #21]

}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	20000264 	.word	0x20000264

0800157c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f006 fdc7 	bl	8008118 <HAL_UART_GetError>
 800158a:	4603      	mov	r3, r0
 800158c:	2b20      	cmp	r3, #32
 800158e:	d101      	bne.n	8001594 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001590:	f7ff ffc4 	bl	800151c <modbus_1t5_Timeout>

	}
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80015a6:	4a25      	ldr	r2, [pc, #148]	@ (800163c <Modbus_init+0xa0>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <Modbus_init+0xa0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <Modbus_init+0xa4>)
 80015ba:	210e      	movs	r1, #14
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 ffbb 	bl	8006538 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2110      	movs	r1, #16
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 fd4f 	bl	800806c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f006 fd66 	bl	80080a4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4a19      	ldr	r2, [pc, #100]	@ (8001644 <Modbus_init+0xa8>)
 80015de:	2104      	movs	r1, #4
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 ff65 	bl	80074b0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <Modbus_init+0xa0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <Modbus_init+0xa0>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <Modbus_init+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80015f8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80015fc:	4413      	add	r3, r2
 80015fe:	3302      	adds	r3, #2
 8001600:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001604:	4619      	mov	r1, r3
 8001606:	f006 f955 	bl	80078b4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <Modbus_init+0xa0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10c      	bne.n	8001634 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <Modbus_init+0xa0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4618      	mov	r0, r3
 8001622:	f003 ff0d 	bl	8005440 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <Modbus_init+0xa0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f004 f9b4 	bl	800599c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000264 	.word	0x20000264
 8001640:	0800155d 	.word	0x0800155d
 8001644:	0800157d 	.word	0x0800157d

08001648 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001654:	23ff      	movs	r3, #255	@ 0xff
 8001656:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001658:	23ff      	movs	r3, #255	@ 0xff
 800165a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800165c:	e013      	b.n	8001686 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	4053      	eors	r3, r2
 800166a:	b2db      	uxtb	r3, r3
 800166c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800166e:	4a0f      	ldr	r2, [pc, #60]	@ (80016ac <CRC16+0x64>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4413      	add	r3, r2
 8001674:	781a      	ldrb	r2, [r3, #0]
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	4053      	eors	r3, r2
 800167a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800167c:	4a0c      	ldr	r2, [pc, #48]	@ (80016b0 <CRC16+0x68>)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4413      	add	r3, r2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001686:	883b      	ldrh	r3, [r7, #0]
 8001688:	1e5a      	subs	r2, r3, #1
 800168a:	803a      	strh	r2, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1e6      	bne.n	800165e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b21a      	sxth	r2, r3
 8001696:	7bbb      	ldrb	r3, [r7, #14]
 8001698:	b21b      	sxth	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b21b      	sxth	r3, r3
 800169e:	b29b      	uxth	r3, r3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	20000108 	.word	0x20000108
 80016b0:	20000008 	.word	0x20000008

080016b4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80016ba:	4b7e      	ldr	r3, [pc, #504]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	7ddb      	ldrb	r3, [r3, #23]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d80a      	bhi.n	80016dc <Modbus_Protocal_Worker+0x28>
 80016c6:	a201      	add	r2, pc, #4	@ (adr r2, 80016cc <Modbus_Protocal_Worker+0x18>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	080016e7 	.word	0x080016e7
 80016d0:	0800187b 	.word	0x0800187b
 80016d4:	08001773 	.word	0x08001773
 80016d8:	080017b7 	.word	0x080017b7
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80016dc:	4b75      	ldr	r3, [pc, #468]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	75da      	strb	r2, [r3, #23]
		break;
 80016e4:	e0e1      	b.n	80018aa <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80016e6:	4b73      	ldr	r3, [pc, #460]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80016f2:	4b70      	ldr	r3, [pc, #448]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2202      	movs	r2, #2
 80016f8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80016fa:	f000 f9cd 	bl	8001a98 <Modbus_Emission>
 80016fe:	e018      	b.n	8001732 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001700:	4b6c      	ldr	r3, [pc, #432]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800170a:	4b6a      	ldr	r3, [pc, #424]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001714:	b29b      	uxth	r3, r3
 8001716:	429a      	cmp	r2, r3
 8001718:	d00b      	beq.n	8001732 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800171a:	4b66      	ldr	r3, [pc, #408]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001722:	4b64      	ldr	r3, [pc, #400]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800172a:	4b62      	ldr	r3, [pc, #392]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2203      	movs	r2, #3
 8001730:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001732:	4b60      	ldr	r3, [pc, #384]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800173c:	2b20      	cmp	r3, #32
 800173e:	f040 80ad 	bne.w	800189c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001742:	4b5c      	ldr	r3, [pc, #368]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800174c:	4b59      	ldr	r3, [pc, #356]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001752:	4b58      	ldr	r3, [pc, #352]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b57      	ldr	r3, [pc, #348]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800175e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001762:	4413      	add	r3, r2
 8001764:	3302      	adds	r3, #2
 8001766:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800176a:	4619      	mov	r1, r3
 800176c:	f006 f8a2 	bl	80078b4 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001770:	e094      	b.n	800189c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001772:	4b50      	ldr	r3, [pc, #320]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	7d1b      	ldrb	r3, [r3, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8091 	beq.w	80018a0 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800177e:	4b4d      	ldr	r3, [pc, #308]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	22fe      	movs	r2, #254	@ 0xfe
 8001784:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001786:	4b4b      	ldr	r3, [pc, #300]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001790:	4b48      	ldr	r3, [pc, #288]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80017a0:	4b44      	ldr	r3, [pc, #272]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80017a2:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80017a4:	1a8a      	subs	r2, r1, r2
 80017a6:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80017a8:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80017ac:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2204      	movs	r2, #4
 80017b2:	75da      	strb	r2, [r3, #23]
		}
		break;
 80017b4:	e074      	b.n	80018a0 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80017b6:	4b3f      	ldr	r3, [pc, #252]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80017be:	f113 0f02 	cmn.w	r3, #2
 80017c2:	d150      	bne.n	8001866 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80017c4:	4b3b      	ldr	r3, [pc, #236]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80017cc:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80017d4:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80017dc:	3b02      	subs	r3, #2
 80017de:	4619      	mov	r1, r3
 80017e0:	4610      	mov	r0, r2
 80017e2:	f7ff ff31 	bl	8001648 <CRC16>
 80017e6:	4603      	mov	r3, r0
 80017e8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80017ea:	793a      	ldrb	r2, [r7, #4]
 80017ec:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80017f8:	3b02      	subs	r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001800:	429a      	cmp	r2, r3
 8001802:	d10c      	bne.n	800181e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001804:	797a      	ldrb	r2, [r7, #5]
 8001806:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001808:	6819      	ldr	r1, [r3, #0]
 800180a:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001812:	3b01      	subs	r3, #1
 8001814:	440b      	add	r3, r1
 8001816:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800181a:	429a      	cmp	r2, r3
 800181c:	d004      	beq.n	8001828 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800181e:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	22ff      	movs	r2, #255	@ 0xff
 8001824:	759a      	strb	r2, [r3, #22]
				break;
 8001826:	e040      	b.n	80018aa <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001830:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d113      	bne.n	8001862 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800183a:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800184a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001854:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001856:	461a      	mov	r2, r3
 8001858:	f007 fdb2 	bl	80093c0 <memcpy>

			//execute command
			Modbus_frame_response();
 800185c:	f000 f904 	bl	8001a68 <Modbus_frame_response>
 8001860:	e001      	b.n	8001866 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001862:	bf00      	nop
					}
		break;


	}
}
 8001864:	e021      	b.n	80018aa <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001866:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	7d5b      	ldrb	r3, [r3, #21]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d019      	beq.n	80018a4 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001870:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	75da      	strb	r2, [r3, #23]
		break;
 8001878:	e014      	b.n	80018a4 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001884:	2b20      	cmp	r3, #32
 8001886:	d10f      	bne.n	80018a8 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <Modbus_Protocal_Worker+0x200>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	75da      	strb	r2, [r3, #23]
		break;
 800189a:	e005      	b.n	80018a8 <Modbus_Protocal_Worker+0x1f4>
		break;
 800189c:	bf00      	nop
 800189e:	e004      	b.n	80018aa <Modbus_Protocal_Worker+0x1f6>
		break;
 80018a0:	bf00      	nop
 80018a2:	e002      	b.n	80018aa <Modbus_Protocal_Worker+0x1f6>
		break;
 80018a4:	bf00      	nop
 80018a6:	e000      	b.n	80018aa <Modbus_Protocal_Worker+0x1f6>
		break;
 80018a8:	bf00      	nop
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000264 	.word	0x20000264

080018b8 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <modbusWrite1Register+0x7c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	7e5b      	ldrb	r3, [r3, #25]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001934 <modbusWrite1Register+0x7c>)
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	7e92      	ldrb	r2, [r2, #26]
 80018ce:	4413      	add	r3, r2
 80018d0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80018d2:	88fa      	ldrh	r2, [r7, #6]
 80018d4:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <modbusWrite1Register+0x7c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d903      	bls.n	80018e6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80018de:	2002      	movs	r0, #2
 80018e0:	f000 f8a0 	bl	8001a24 <ModbusErrorReply>
			 return;
 80018e4:	e023      	b.n	800192e <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80018e6:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <modbusWrite1Register+0x7c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <modbusWrite1Register+0x7c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	440b      	add	r3, r1
 80018f6:	7ed2      	ldrb	r2, [r2, #27]
 80018f8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <modbusWrite1Register+0x7c>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <modbusWrite1Register+0x7c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	440b      	add	r3, r1
 800190a:	7f12      	ldrb	r2, [r2, #28]
 800190c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <modbusWrite1Register+0x7c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <modbusWrite1Register+0x7c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 800191c:	2208      	movs	r2, #8
 800191e:	4619      	mov	r1, r3
 8001920:	f007 fd4e 	bl	80093c0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <modbusWrite1Register+0x7c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2205      	movs	r2, #5
 800192a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000264 	.word	0x20000264

08001938 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800193e:	4b38      	ldr	r3, [pc, #224]	@ (8001a20 <modbusRead1Register+0xe8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	7edb      	ldrb	r3, [r3, #27]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	4a35      	ldr	r2, [pc, #212]	@ (8001a20 <modbusRead1Register+0xe8>)
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	7f12      	ldrb	r2, [r2, #28]
 800194e:	4413      	add	r3, r2
 8001950:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001952:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <modbusRead1Register+0xe8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	7e5b      	ldrb	r3, [r3, #25]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b29b      	uxth	r3, r3
 800195c:	4a30      	ldr	r2, [pc, #192]	@ (8001a20 <modbusRead1Register+0xe8>)
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	7e92      	ldrb	r2, [r2, #26]
 8001962:	4413      	add	r3, r2
 8001964:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <modbusRead1Register+0x3a>
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001970:	d903      	bls.n	800197a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001972:	2003      	movs	r0, #3
 8001974:	f000 f856 	bl	8001a24 <ModbusErrorReply>
		 return;
 8001978:	e04e      	b.n	8001a18 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800197a:	88ba      	ldrh	r2, [r7, #4]
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <modbusRead1Register+0xe8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	429a      	cmp	r2, r3
 8001984:	d808      	bhi.n	8001998 <modbusRead1Register+0x60>
 8001986:	88ba      	ldrh	r2, [r7, #4]
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	4413      	add	r3, r2
 800198c:	461a      	mov	r2, r3
 800198e:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <modbusRead1Register+0xe8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	429a      	cmp	r2, r3
 8001996:	d903      	bls.n	80019a0 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001998:	2002      	movs	r0, #2
 800199a:	f000 f843 	bl	8001a24 <ModbusErrorReply>
		 return;
 800199e:	e03b      	b.n	8001a18 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <modbusRead1Register+0xe8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2203      	movs	r2, #3
 80019a6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <modbusRead1Register+0xe8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0052      	lsls	r2, r2, #1
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80019ba:	2400      	movs	r4, #0
 80019bc:	e020      	b.n	8001a00 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <modbusRead1Register+0xe8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	88bb      	ldrh	r3, [r7, #4]
 80019c6:	4423      	add	r3, r4
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	18d1      	adds	r1, r2, r3
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <modbusRead1Register+0xe8>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	1c63      	adds	r3, r4, #1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	7849      	ldrb	r1, [r1, #1]
 80019d6:	4413      	add	r3, r2
 80019d8:	460a      	mov	r2, r1
 80019da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <modbusRead1Register+0xe8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	4423      	add	r3, r4
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	18d1      	adds	r1, r2, r3
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <modbusRead1Register+0xe8>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	0063      	lsls	r3, r4, #1
 80019f2:	3303      	adds	r3, #3
 80019f4:	7809      	ldrb	r1, [r1, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	460a      	mov	r2, r1
 80019fa:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80019fe:	3401      	adds	r4, #1
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	429c      	cmp	r4, r3
 8001a04:	dbdb      	blt.n	80019be <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <modbusRead1Register+0xe8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0052      	lsls	r2, r2, #1
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000264 	.word	0x20000264

08001a24 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <ModbusErrorReply+0x40>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	7e1a      	ldrb	r2, [r3, #24]
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <ModbusErrorReply+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <ModbusErrorReply+0x40>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <ModbusErrorReply+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2202      	movs	r2, #2
 8001a52:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000264 	.word	0x20000264

08001a68 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <Modbus_frame_response+0x2c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	7e1b      	ldrb	r3, [r3, #24]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d004      	beq.n	8001a80 <Modbus_frame_response+0x18>
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d105      	bne.n	8001a86 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001a7a:	f7ff ff1d 	bl	80018b8 <modbusWrite1Register>
		break;
 8001a7e:	e006      	b.n	8001a8e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001a80:	f7ff ff5a 	bl	8001938 <modbusRead1Register>
		break;
 8001a84:	e003      	b.n	8001a8e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7ff ffcc 	bl	8001a24 <ModbusErrorReply>
		break;
 8001a8c:	bf00      	nop

	}
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000264 	.word	0x20000264

08001a98 <Modbus_Emission>:

void Modbus_Emission()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001a9e:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d15d      	bne.n	8001b68 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001aac:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001aba:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001ac2:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001acc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f007 fc73 	bl	80093c0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001ada:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3203      	adds	r2, #3
 8001aea:	b292      	uxth	r2, r2
 8001aec:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001af0:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001af8:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001b00:	3b02      	subs	r3, #2
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7ff fd9f 	bl	8001648 <CRC16>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001b1a:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001b1c:	7939      	ldrb	r1, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	460a      	mov	r2, r1
 8001b22:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001b32:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001b34:	7979      	ldrb	r1, [r7, #5]
 8001b36:	4413      	add	r3, r2
 8001b38:	460a      	mov	r2, r1
 8001b3a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d10d      	bne.n	8001b68 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001b5e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001b62:	461a      	mov	r2, r3
 8001b64:	f005 fe26 	bl	80077b4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001b70:	4b03      	ldr	r3, [pc, #12]	@ (8001b80 <Modbus_Emission+0xe8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	755a      	strb	r2, [r3, #21]

}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000264 	.word	0x20000264

08001b84 <MOTOR_init>:
 *      Author: napat
 */
#include "Motor.h"

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	461a      	mov	r2, r3
 8001b92:	460b      	mov	r3, r1
 8001b94:	80fb      	strh	r3, [r7, #6]
 8001b96:	4613      	mov	r3, r2
 8001b98:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	88ba      	ldrh	r2, [r7, #4]
 8001baa:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 8001bac:	88bb      	ldrh	r3, [r7, #4]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	68b8      	ldr	r0, [r7, #8]
 8001bb2:	f003 fd2b 	bl	800560c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	68b8      	ldr	r0, [r7, #8]
 8001bbc:	f003 fd26 	bl	800560c <HAL_TIM_PWM_Start_IT>

}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 8001bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bcc:	b089      	sub	sp, #36	@ 0x24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	61f8      	str	r0, [r7, #28]
 8001bd2:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8263 	beq.w	80020a4 <MOTOR_set_duty+0x4dc>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 825e 	beq.w	80020a4 <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 8001be8:	69b8      	ldr	r0, [r7, #24]
 8001bea:	f7fe fc79 	bl	80004e0 <__aeabi_f2d>
 8001bee:	a394      	add	r3, pc, #592	@ (adr r3, 8001e40 <MOTOR_set_duty+0x278>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fccc 	bl	8000590 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	a395      	add	r3, pc, #596	@ (adr r3, 8001e58 <MOTOR_set_duty+0x290>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe ff49 	bl	8000a9c <__aeabi_dcmpge>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MOTOR_set_duty+0x4c>
 8001c10:	4b8f      	ldr	r3, [pc, #572]	@ (8001e50 <MOTOR_set_duty+0x288>)
 8001c12:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 8001c14:	69b8      	ldr	r0, [r7, #24]
 8001c16:	f7fe fc63 	bl	80004e0 <__aeabi_f2d>
 8001c1a:	a389      	add	r3, pc, #548	@ (adr r3, 8001e40 <MOTOR_set_duty+0x278>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fcb6 	bl	8000590 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	a386      	add	r3, pc, #536	@ (adr r3, 8001e48 <MOTOR_set_duty+0x280>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe ff29 	bl	8000a88 <__aeabi_dcmple>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MOTOR_set_duty+0x78>
 8001c3c:	4b85      	ldr	r3, [pc, #532]	@ (8001e54 <MOTOR_set_duty+0x28c>)
 8001c3e:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d16e      	bne.n	8001d2c <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	889b      	ldrh	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <MOTOR_set_duty+0x9a>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c60:	e02c      	b.n	8001cbc <MOTOR_set_duty+0xf4>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	889b      	ldrh	r3, [r3, #4]
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d105      	bne.n	8001c76 <MOTOR_set_duty+0xae>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2300      	movs	r3, #0
 8001c72:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c74:	e022      	b.n	8001cbc <MOTOR_set_duty+0xf4>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	889b      	ldrh	r3, [r3, #4]
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d105      	bne.n	8001c8a <MOTOR_set_duty+0xc2>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c88:	e018      	b.n	8001cbc <MOTOR_set_duty+0xf4>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	889b      	ldrh	r3, [r3, #4]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d105      	bne.n	8001c9e <MOTOR_set_duty+0xd6>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9c:	e00e      	b.n	8001cbc <MOTOR_set_duty+0xf4>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	889b      	ldrh	r3, [r3, #4]
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d105      	bne.n	8001cb2 <MOTOR_set_duty+0xea>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2300      	movs	r3, #0
 8001cae:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cb0:	e004      	b.n	8001cbc <MOTOR_set_duty+0xf4>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	88db      	ldrh	r3, [r3, #6]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <MOTOR_set_duty+0x108>
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cce:	e1ea      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	88db      	ldrh	r3, [r3, #6]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d105      	bne.n	8001ce4 <MOTOR_set_duty+0x11c>
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ce2:	e1e0      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	88db      	ldrh	r3, [r3, #6]
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d105      	bne.n	8001cf8 <MOTOR_set_duty+0x130>
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001cf6:	e1d6      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	88db      	ldrh	r3, [r3, #6]
 8001cfc:	2b0c      	cmp	r3, #12
 8001cfe:	d105      	bne.n	8001d0c <MOTOR_set_duty+0x144>
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0a:	e1cc      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	88db      	ldrh	r3, [r3, #6]
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d105      	bne.n	8001d20 <MOTOR_set_duty+0x158>
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d1e:	e1c2      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	2300      	movs	r3, #0
 8001d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2a:	e1bc      	b.n	80020a6 <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 8001d2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	f340 80d6 	ble.w	8001ee8 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	889b      	ldrh	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <MOTOR_set_duty+0x188>
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d4e:	e02c      	b.n	8001daa <MOTOR_set_duty+0x1e2>
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	889b      	ldrh	r3, [r3, #4]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d105      	bne.n	8001d64 <MOTOR_set_duty+0x19c>
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d62:	e022      	b.n	8001daa <MOTOR_set_duty+0x1e2>
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	889b      	ldrh	r3, [r3, #4]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d105      	bne.n	8001d78 <MOTOR_set_duty+0x1b0>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2300      	movs	r3, #0
 8001d74:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d76:	e018      	b.n	8001daa <MOTOR_set_duty+0x1e2>
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	889b      	ldrh	r3, [r3, #4]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	d105      	bne.n	8001d8c <MOTOR_set_duty+0x1c4>
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2300      	movs	r3, #0
 8001d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8a:	e00e      	b.n	8001daa <MOTOR_set_duty+0x1e2>
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	889b      	ldrh	r3, [r3, #4]
 8001d90:	2b10      	cmp	r3, #16
 8001d92:	d105      	bne.n	8001da0 <MOTOR_set_duty+0x1d8>
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d9e:	e004      	b.n	8001daa <MOTOR_set_duty+0x1e2>
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2300      	movs	r3, #0
 8001da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	88db      	ldrh	r3, [r3, #6]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d113      	bne.n	8001dda <MOTOR_set_duty+0x212>
 8001db2:	69b8      	ldr	r0, [r7, #24]
 8001db4:	f7fe fb94 	bl	80004e0 <__aeabi_f2d>
 8001db8:	a321      	add	r3, pc, #132	@ (adr r3, 8001e40 <MOTOR_set_duty+0x278>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fbe7 	bl	8000590 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681c      	ldr	r4, [r3, #0]
 8001dd0:	f7fe fea0 	bl	8000b14 <__aeabi_d2uiz>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8001dd8:	e165      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	88db      	ldrh	r3, [r3, #6]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d113      	bne.n	8001e0a <MOTOR_set_duty+0x242>
 8001de2:	69b8      	ldr	r0, [r7, #24]
 8001de4:	f7fe fb7c 	bl	80004e0 <__aeabi_f2d>
 8001de8:	a315      	add	r3, pc, #84	@ (adr r3, 8001e40 <MOTOR_set_duty+0x278>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fbcf 	bl	8000590 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681c      	ldr	r4, [r3, #0]
 8001e00:	f7fe fe88 	bl	8000b14 <__aeabi_d2uiz>
 8001e04:	4603      	mov	r3, r0
 8001e06:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001e08:	e14d      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	88db      	ldrh	r3, [r3, #6]
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d126      	bne.n	8001e60 <MOTOR_set_duty+0x298>
 8001e12:	69b8      	ldr	r0, [r7, #24]
 8001e14:	f7fe fb64 	bl	80004e0 <__aeabi_f2d>
 8001e18:	a309      	add	r3, pc, #36	@ (adr r3, 8001e40 <MOTOR_set_duty+0x278>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fbb7 	bl	8000590 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681c      	ldr	r4, [r3, #0]
 8001e30:	f7fe fe70 	bl	8000b14 <__aeabi_d2uiz>
 8001e34:	4603      	mov	r3, r0
 8001e36:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001e38:	e135      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	3b645a1d 	.word	0x3b645a1d
 8001e44:	40453fdf 	.word	0x40453fdf
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	c0e4c060 	.word	0xc0e4c060
 8001e50:	47260300 	.word	0x47260300
 8001e54:	c7260300 	.word	0xc7260300
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	40e4c060 	.word	0x40e4c060
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	88db      	ldrh	r3, [r3, #6]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	d113      	bne.n	8001e90 <MOTOR_set_duty+0x2c8>
 8001e68:	69b8      	ldr	r0, [r7, #24]
 8001e6a:	f7fe fb39 	bl	80004e0 <__aeabi_f2d>
 8001e6e:	a390      	add	r3, pc, #576	@ (adr r3, 80020b0 <MOTOR_set_duty+0x4e8>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fb8c 	bl	8000590 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681c      	ldr	r4, [r3, #0]
 8001e86:	f7fe fe45 	bl	8000b14 <__aeabi_d2uiz>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6423      	str	r3, [r4, #64]	@ 0x40
 8001e8e:	e10a      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	88db      	ldrh	r3, [r3, #6]
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d113      	bne.n	8001ec0 <MOTOR_set_duty+0x2f8>
 8001e98:	69b8      	ldr	r0, [r7, #24]
 8001e9a:	f7fe fb21 	bl	80004e0 <__aeabi_f2d>
 8001e9e:	a384      	add	r3, pc, #528	@ (adr r3, 80020b0 <MOTOR_set_duty+0x4e8>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fb74 	bl	8000590 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681c      	ldr	r4, [r3, #0]
 8001eb6:	f7fe fe2d 	bl	8000b14 <__aeabi_d2uiz>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001ebe:	e0f2      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001ec0:	69b8      	ldr	r0, [r7, #24]
 8001ec2:	f7fe fb0d 	bl	80004e0 <__aeabi_f2d>
 8001ec6:	a37a      	add	r3, pc, #488	@ (adr r3, 80020b0 <MOTOR_set_duty+0x4e8>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe fb60 	bl	8000590 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681c      	ldr	r4, [r3, #0]
 8001ede:	f7fe fe19 	bl	8000b14 <__aeabi_d2uiz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001ee6:	e0de      	b.n	80020a6 <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	889b      	ldrh	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <MOTOR_set_duty+0x336>
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8001efa:	635a      	str	r2, [r3, #52]	@ 0x34
 8001efc:	e031      	b.n	8001f62 <MOTOR_set_duty+0x39a>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	889b      	ldrh	r3, [r3, #4]
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d106      	bne.n	8001f14 <MOTOR_set_duty+0x34c>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001f10:	6393      	str	r3, [r2, #56]	@ 0x38
 8001f12:	e026      	b.n	8001f62 <MOTOR_set_duty+0x39a>
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	889b      	ldrh	r3, [r3, #4]
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d106      	bne.n	8001f2a <MOTOR_set_duty+0x362>
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001f26:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001f28:	e01b      	b.n	8001f62 <MOTOR_set_duty+0x39a>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	889b      	ldrh	r3, [r3, #4]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d106      	bne.n	8001f40 <MOTOR_set_duty+0x378>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	e010      	b.n	8001f62 <MOTOR_set_duty+0x39a>
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	889b      	ldrh	r3, [r3, #4]
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d106      	bne.n	8001f56 <MOTOR_set_duty+0x38e>
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001f52:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f54:	e005      	b.n	8001f62 <MOTOR_set_duty+0x39a>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	88db      	ldrh	r3, [r3, #6]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d117      	bne.n	8001f9a <MOTOR_set_duty+0x3d2>
 8001f6a:	69b8      	ldr	r0, [r7, #24]
 8001f6c:	f7fe fab8 	bl	80004e0 <__aeabi_f2d>
 8001f70:	a34f      	add	r3, pc, #316	@ (adr r3, 80020b0 <MOTOR_set_duty+0x4e8>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb0b 	bl	8000590 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	613a      	str	r2, [r7, #16]
 8001f80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681c      	ldr	r4, [r3, #0]
 8001f8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f90:	f7fe fdc0 	bl	8000b14 <__aeabi_d2uiz>
 8001f94:	4603      	mov	r3, r0
 8001f96:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f98:	e085      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	88db      	ldrh	r3, [r3, #6]
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d117      	bne.n	8001fd2 <MOTOR_set_duty+0x40a>
 8001fa2:	69b8      	ldr	r0, [r7, #24]
 8001fa4:	f7fe fa9c 	bl	80004e0 <__aeabi_f2d>
 8001fa8:	a341      	add	r3, pc, #260	@ (adr r3, 80020b0 <MOTOR_set_duty+0x4e8>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe faef 	bl	8000590 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	60ba      	str	r2, [r7, #8]
 8001fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681c      	ldr	r4, [r3, #0]
 8001fc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fc8:	f7fe fda4 	bl	8000b14 <__aeabi_d2uiz>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001fd0:	e069      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	88db      	ldrh	r3, [r3, #6]
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d117      	bne.n	800200a <MOTOR_set_duty+0x442>
 8001fda:	69b8      	ldr	r0, [r7, #24]
 8001fdc:	f7fe fa80 	bl	80004e0 <__aeabi_f2d>
 8001fe0:	a333      	add	r3, pc, #204	@ (adr r3, 80020b0 <MOTOR_set_duty+0x4e8>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe fad3 	bl	8000590 <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	603a      	str	r2, [r7, #0]
 8001ff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681c      	ldr	r4, [r3, #0]
 8001ffc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002000:	f7fe fd88 	bl	8000b14 <__aeabi_d2uiz>
 8002004:	4603      	mov	r3, r0
 8002006:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002008:	e04d      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	88db      	ldrh	r3, [r3, #6]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d116      	bne.n	8002040 <MOTOR_set_duty+0x478>
 8002012:	69b8      	ldr	r0, [r7, #24]
 8002014:	f7fe fa64 	bl	80004e0 <__aeabi_f2d>
 8002018:	a325      	add	r3, pc, #148	@ (adr r3, 80020b0 <MOTOR_set_duty+0x4e8>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fab7 	bl	8000590 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4615      	mov	r5, r2
 8002028:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681c      	ldr	r4, [r3, #0]
 8002032:	4628      	mov	r0, r5
 8002034:	4631      	mov	r1, r6
 8002036:	f7fe fd6d 	bl	8000b14 <__aeabi_d2uiz>
 800203a:	4603      	mov	r3, r0
 800203c:	6423      	str	r3, [r4, #64]	@ 0x40
 800203e:	e032      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	88db      	ldrh	r3, [r3, #6]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d116      	bne.n	8002076 <MOTOR_set_duty+0x4ae>
 8002048:	69b8      	ldr	r0, [r7, #24]
 800204a:	f7fe fa49 	bl	80004e0 <__aeabi_f2d>
 800204e:	a318      	add	r3, pc, #96	@ (adr r3, 80020b0 <MOTOR_set_duty+0x4e8>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa9c 	bl	8000590 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4692      	mov	sl, r2
 800205e:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681c      	ldr	r4, [r3, #0]
 8002068:	4650      	mov	r0, sl
 800206a:	4659      	mov	r1, fp
 800206c:	f7fe fd52 	bl	8000b14 <__aeabi_d2uiz>
 8002070:	4603      	mov	r3, r0
 8002072:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002074:	e017      	b.n	80020a6 <MOTOR_set_duty+0x4de>
 8002076:	69b8      	ldr	r0, [r7, #24]
 8002078:	f7fe fa32 	bl	80004e0 <__aeabi_f2d>
 800207c:	a30c      	add	r3, pc, #48	@ (adr r3, 80020b0 <MOTOR_set_duty+0x4e8>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fa85 	bl	8000590 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4690      	mov	r8, r2
 800208c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681c      	ldr	r4, [r3, #0]
 8002096:	4640      	mov	r0, r8
 8002098:	4649      	mov	r1, r9
 800209a:	f7fe fd3b 	bl	8000b14 <__aeabi_d2uiz>
 800209e:	4603      	mov	r3, r0
 80020a0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80020a2:	e000      	b.n	80020a6 <MOTOR_set_duty+0x4de>
        return;
 80020a4:	bf00      	nop
    }
}
 80020a6:	3724      	adds	r7, #36	@ 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ae:	bf00      	nop
 80020b0:	3b645a1d 	.word	0x3b645a1d
 80020b4:	40453fdf 	.word	0x40453fdf

080020b8 <PID_controller_init>:

extern Trap_Traj Traj;

float boundary = 0.05;
void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80020c8:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	0000      	movs	r0, r0
 800210c:	0000      	movs	r0, r0
	...

08002110 <PS2X_Reader>:
    PS2->on = 0;
}
extern PS2_typedef ps2;

void PS2X_Reader()
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
//	ps2.ps2Y = 0;
//	ps2.ps2X = 0;
	if (ps2.ps2RX[0] == 69) 		//Press L4 to switch to use Joy stick
 8002116:	4b84      	ldr	r3, [pc, #528]	@ (8002328 <PS2X_Reader+0x218>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b45      	cmp	r3, #69	@ 0x45
 800211c:	d105      	bne.n	800212a <PS2X_Reader+0x1a>
	{
		ps2.mode = 1;
 800211e:	4b82      	ldr	r3, [pc, #520]	@ (8002328 <PS2X_Reader+0x218>)
 8002120:	2201      	movs	r2, #1
 8002122:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on = 0;
 8002124:	4b80      	ldr	r3, [pc, #512]	@ (8002328 <PS2X_Reader+0x218>)
 8002126:	2200      	movs	r2, #0
 8002128:	67da      	str	r2, [r3, #124]	@ 0x7c
//		ps2.ps2YPos = 132;
	}
	if (ps2.ps2RX[0] == 70)		//Press L5 to switch to use Button
 800212a:	4b7f      	ldr	r3, [pc, #508]	@ (8002328 <PS2X_Reader+0x218>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b46      	cmp	r3, #70	@ 0x46
 8002130:	d109      	bne.n	8002146 <PS2X_Reader+0x36>
	{
		ps2.mode = 2;
 8002132:	4b7d      	ldr	r3, [pc, #500]	@ (8002328 <PS2X_Reader+0x218>)
 8002134:	2202      	movs	r2, #2
 8002136:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on =1;
 8002138:	4b7b      	ldr	r3, [pc, #492]	@ (8002328 <PS2X_Reader+0x218>)
 800213a:	2201      	movs	r2, #1
 800213c:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.PIDPos = AMT.Linear_Position;
 800213e:	4b7b      	ldr	r3, [pc, #492]	@ (800232c <PS2X_Reader+0x21c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a79      	ldr	r2, [pc, #484]	@ (8002328 <PS2X_Reader+0x218>)
 8002144:	6793      	str	r3, [r2, #120]	@ 0x78


	}
	//Mode Joy stick
	if (ps2.mode == 1)
 8002146:	4b78      	ldr	r3, [pc, #480]	@ (8002328 <PS2X_Reader+0x218>)
 8002148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214a:	2b01      	cmp	r3, #1
 800214c:	f040 80c5 	bne.w	80022da <PS2X_Reader+0x1ca>
	{
		//Read Ps2 Joy stick in VERTICAL
		if(ps2.ps2RX[0] == 81){
 8002150:	4b75      	ldr	r3, [pc, #468]	@ (8002328 <PS2X_Reader+0x218>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b51      	cmp	r3, #81	@ 0x51
 8002156:	d169      	bne.n	800222c <PS2X_Reader+0x11c>
			if (ps2.ps2RX[2] == 83){
 8002158:	4b73      	ldr	r3, [pc, #460]	@ (8002328 <PS2X_Reader+0x218>)
 800215a:	789b      	ldrb	r3, [r3, #2]
 800215c:	2b53      	cmp	r3, #83	@ 0x53
 800215e:	d103      	bne.n	8002168 <PS2X_Reader+0x58>
				ps2.digit = 1;
 8002160:	4b71      	ldr	r3, [pc, #452]	@ (8002328 <PS2X_Reader+0x218>)
 8002162:	2201      	movs	r2, #1
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	e00e      	b.n	8002186 <PS2X_Reader+0x76>
			}
			else if (ps2.ps2RX[3] == 83){
 8002168:	4b6f      	ldr	r3, [pc, #444]	@ (8002328 <PS2X_Reader+0x218>)
 800216a:	78db      	ldrb	r3, [r3, #3]
 800216c:	2b53      	cmp	r3, #83	@ 0x53
 800216e:	d103      	bne.n	8002178 <PS2X_Reader+0x68>
				ps2.digit = 2;
 8002170:	4b6d      	ldr	r3, [pc, #436]	@ (8002328 <PS2X_Reader+0x218>)
 8002172:	2202      	movs	r2, #2
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	e006      	b.n	8002186 <PS2X_Reader+0x76>
			}
			else if (ps2.ps2RX[4] == 83){
 8002178:	4b6b      	ldr	r3, [pc, #428]	@ (8002328 <PS2X_Reader+0x218>)
 800217a:	791b      	ldrb	r3, [r3, #4]
 800217c:	2b53      	cmp	r3, #83	@ 0x53
 800217e:	d102      	bne.n	8002186 <PS2X_Reader+0x76>
				ps2.digit = 3;
 8002180:	4b69      	ldr	r3, [pc, #420]	@ (8002328 <PS2X_Reader+0x218>)
 8002182:	2203      	movs	r2, #3
 8002184:	60da      	str	r2, [r3, #12]
			}
			for(int k=1 ; k<5 ; k++){
 8002186:	2301      	movs	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e01d      	b.n	80021c8 <PS2X_Reader+0xb8>
				for (int l=0; l<10 ; l++){
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	e014      	b.n	80021bc <PS2X_Reader+0xac>
					if (ps2.ps2RX[k] == num[l]){
 8002192:	4a65      	ldr	r2, [pc, #404]	@ (8002328 <PS2X_Reader+0x218>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4619      	mov	r1, r3
 800219c:	4a64      	ldr	r2, [pc, #400]	@ (8002330 <PS2X_Reader+0x220>)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	4299      	cmp	r1, r3
 80021a6:	d106      	bne.n	80021b6 <PS2X_Reader+0xa6>
						ps2.gain[k-1] = l;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	495e      	ldr	r1, [pc, #376]	@ (8002328 <PS2X_Reader+0x218>)
 80021ae:	3304      	adds	r3, #4
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int l=0; l<10 ; l++){
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3301      	adds	r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b09      	cmp	r3, #9
 80021c0:	dde7      	ble.n	8002192 <PS2X_Reader+0x82>
			for(int k=1 ; k<5 ; k++){
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3301      	adds	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	ddde      	ble.n	800218c <PS2X_Reader+0x7c>
					}
				}
			}
			if (ps2.digit == 1){
 80021ce:	4b56      	ldr	r3, [pc, #344]	@ (8002328 <PS2X_Reader+0x218>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d104      	bne.n	80021e0 <PS2X_Reader+0xd0>
				ps2.ps2YPos = ps2.gain[0];
 80021d6:	4b54      	ldr	r3, [pc, #336]	@ (8002328 <PS2X_Reader+0x218>)
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	4a53      	ldr	r2, [pc, #332]	@ (8002328 <PS2X_Reader+0x218>)
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	e025      	b.n	800222c <PS2X_Reader+0x11c>
			}
			else if (ps2.digit == 2){
 80021e0:	4b51      	ldr	r3, [pc, #324]	@ (8002328 <PS2X_Reader+0x218>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d10c      	bne.n	8002202 <PS2X_Reader+0xf2>
				ps2.ps2YPos = (ps2.gain[0]*10)+ps2.gain[1];
 80021e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002328 <PS2X_Reader+0x218>)
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002328 <PS2X_Reader+0x218>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4413      	add	r3, r2
 80021fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002328 <PS2X_Reader+0x218>)
 80021fe:	6213      	str	r3, [r2, #32]
 8002200:	e014      	b.n	800222c <PS2X_Reader+0x11c>
			}
			else if (ps2.digit == 3){
 8002202:	4b49      	ldr	r3, [pc, #292]	@ (8002328 <PS2X_Reader+0x218>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d110      	bne.n	800222c <PS2X_Reader+0x11c>
				ps2.ps2YPos = (ps2.gain[0]*100)+(ps2.gain[1]*10)+ps2.gain[2];
 800220a:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <PS2X_Reader+0x218>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2264      	movs	r2, #100	@ 0x64
 8002210:	fb02 f103 	mul.w	r1, r2, r3
 8002214:	4b44      	ldr	r3, [pc, #272]	@ (8002328 <PS2X_Reader+0x218>)
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	18ca      	adds	r2, r1, r3
 8002222:	4b41      	ldr	r3, [pc, #260]	@ (8002328 <PS2X_Reader+0x218>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	4413      	add	r3, r2
 8002228:	4a3f      	ldr	r2, [pc, #252]	@ (8002328 <PS2X_Reader+0x218>)
 800222a:	6213      	str	r3, [r2, #32]
		//Convert from 0 - 255 to -128 - 128
//		ps2.ps2Y = (ps2.ps2YPos - 132);
//		ps2.ps2X = ps2.ps2XPos - 132;

		//Generate PWM
		ps2.pwmOut = ((ps2.ps2Y/ 132.0)*300) + 150;
 800222c:	4b3e      	ldr	r3, [pc, #248]	@ (8002328 <PS2X_Reader+0x218>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f943 	bl	80004bc <__aeabi_i2d>
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b3e      	ldr	r3, [pc, #248]	@ (8002334 <PS2X_Reader+0x224>)
 800223c:	f7fe fad2 	bl	80007e4 <__aeabi_ddiv>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	a333      	add	r3, pc, #204	@ (adr r3, 8002318 <PS2X_Reader+0x208>)
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	f7fe f99f 	bl	8000590 <__aeabi_dmul>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	a331      	add	r3, pc, #196	@ (adr r3, 8002320 <PS2X_Reader+0x210>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	f7fd ffe0 	bl	8000224 <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fc2a 	bl	8000ac4 <__aeabi_d2iz>
 8002270:	4603      	mov	r3, r0
 8002272:	4a2d      	ldr	r2, [pc, #180]	@ (8002328 <PS2X_Reader+0x218>)
 8002274:	6693      	str	r3, [r2, #104]	@ 0x68
		ps2.pwmOut = 320 - ps2.ps2YPos;
 8002276:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <PS2X_Reader+0x218>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800227e:	4a2a      	ldr	r2, [pc, #168]	@ (8002328 <PS2X_Reader+0x218>)
 8002280:	6693      	str	r3, [r2, #104]	@ 0x68
		if (ps2.pwmOut > 300)
 8002282:	4b29      	ldr	r3, [pc, #164]	@ (8002328 <PS2X_Reader+0x218>)
 8002284:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002286:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800228a:	dd03      	ble.n	8002294 <PS2X_Reader+0x184>
		{
			ps2.pwmOut = 300;
 800228c:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <PS2X_Reader+0x218>)
 800228e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002292:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < -300)
 8002294:	4b24      	ldr	r3, [pc, #144]	@ (8002328 <PS2X_Reader+0x218>)
 8002296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002298:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 800229c:	da02      	bge.n	80022a4 <PS2X_Reader+0x194>
		{
			ps2.pwmOut = 0;
 800229e:	4b22      	ldr	r3, [pc, #136]	@ (8002328 <PS2X_Reader+0x218>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < 0)
 80022a4:	4b20      	ldr	r3, [pc, #128]	@ (8002328 <PS2X_Reader+0x218>)
 80022a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da05      	bge.n	80022b8 <PS2X_Reader+0x1a8>
		{
			MOTOR_set_duty(&MT, 0);
 80022ac:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8002338 <PS2X_Reader+0x228>
 80022b0:	4822      	ldr	r0, [pc, #136]	@ (800233c <PS2X_Reader+0x22c>)
 80022b2:	f7ff fc89 	bl	8001bc8 <MOTOR_set_duty>
 80022b6:	e0cd      	b.n	8002454 <PS2X_Reader+0x344>
		}
		else if (ps2.pwmOut > 0)
 80022b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <PS2X_Reader+0x218>)
 80022ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f340 80c9 	ble.w	8002454 <PS2X_Reader+0x344>
		{
			MOTOR_set_duty(&MT, ps2.pwmOut);
 80022c2:	4b19      	ldr	r3, [pc, #100]	@ (8002328 <PS2X_Reader+0x218>)
 80022c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ce:	eeb0 0a67 	vmov.f32	s0, s15
 80022d2:	481a      	ldr	r0, [pc, #104]	@ (800233c <PS2X_Reader+0x22c>)
 80022d4:	f7ff fc78 	bl	8001bc8 <MOTOR_set_duty>
 80022d8:	e0bc      	b.n	8002454 <PS2X_Reader+0x344>
		}
	}

	//--- Mode Button ---//
	else if (ps2.mode == 2)
 80022da:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <PS2X_Reader+0x218>)
 80022dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f040 80b8 	bne.w	8002454 <PS2X_Reader+0x344>
	{
//		ps2.PIDPos = AMT.Linear_Position;
		ps2.on = 1;
 80022e4:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <PS2X_Reader+0x218>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.ps2Y = 0;
 80022ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002328 <PS2X_Reader+0x218>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	61da      	str	r2, [r3, #28]
//		ps2.ps2X = 0;
		//Keys Map
		static uint32_t timestamp =0;
		if(timestamp < HAL_GetTick())
 80022f0:	f001 f996 	bl	8003620 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <PS2X_Reader+0x230>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d908      	bls.n	8002310 <PS2X_Reader+0x200>
		{
			timestamp = HAL_GetTick()+100;
 80022fe:	f001 f98f 	bl	8003620 <HAL_GetTick>
 8002302:	4603      	mov	r3, r0
 8002304:	3364      	adds	r3, #100	@ 0x64
 8002306:	4a0e      	ldr	r2, [pc, #56]	@ (8002340 <PS2X_Reader+0x230>)
 8002308:	6013      	str	r3, [r2, #0]
			ps2.ps2RX[0] = 0;
 800230a:	4b07      	ldr	r3, [pc, #28]	@ (8002328 <PS2X_Reader+0x218>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
		}
		for (int i =0;i<6;i++)
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	e05a      	b.n	80023cc <PS2X_Reader+0x2bc>
 8002316:	bf00      	nop
 8002318:	00000000 	.word	0x00000000
 800231c:	4072c000 	.word	0x4072c000
 8002320:	00000000 	.word	0x00000000
 8002324:	4062c000 	.word	0x4062c000
 8002328:	20001084 	.word	0x20001084
 800232c:	20000ff8 	.word	0x20000ff8
 8002330:	20000208 	.word	0x20000208
 8002334:	40608000 	.word	0x40608000
 8002338:	00000000 	.word	0x00000000
 800233c:	20001030 	.word	0x20001030
 8002340:	20000268 	.word	0x20000268
		{
			if (ps2.ps2RX[0] == 0)
 8002344:	4b66      	ldr	r3, [pc, #408]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d123      	bne.n	8002394 <PS2X_Reader+0x284>
			{
				//Left
				ps2.l[0] = 0; //w
 800234c:	4b64      	ldr	r3, [pc, #400]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800234e:	2200      	movs	r2, #0
 8002350:	651a      	str	r2, [r3, #80]	@ 0x50
				ps2.l[1] = 0;	//a
 8002352:	4b63      	ldr	r3, [pc, #396]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002354:	2200      	movs	r2, #0
 8002356:	655a      	str	r2, [r3, #84]	@ 0x54
				ps2.l[2] = 0;	//s
 8002358:	4b61      	ldr	r3, [pc, #388]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800235a:	2200      	movs	r2, #0
 800235c:	659a      	str	r2, [r3, #88]	@ 0x58
				ps2.l[3] = 0;	//d
 800235e:	4b60      	ldr	r3, [pc, #384]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002360:	2200      	movs	r2, #0
 8002362:	65da      	str	r2, [r3, #92]	@ 0x5c
				ps2.l[4] = 0;	//l1
 8002364:	4b5e      	ldr	r3, [pc, #376]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002366:	2200      	movs	r2, #0
 8002368:	661a      	str	r2, [r3, #96]	@ 0x60
				ps2.l[5] = 0;	//l2
 800236a:	4b5d      	ldr	r3, [pc, #372]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800236c:	2200      	movs	r2, #0
 800236e:	665a      	str	r2, [r3, #100]	@ 0x64
				//Right
				ps2.r[0] = 0;	//w
 8002370:	4b5b      	ldr	r3, [pc, #364]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002372:	2200      	movs	r2, #0
 8002374:	639a      	str	r2, [r3, #56]	@ 0x38
				ps2.r[1] = 0;	//a
 8002376:	4b5a      	ldr	r3, [pc, #360]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002378:	2200      	movs	r2, #0
 800237a:	63da      	str	r2, [r3, #60]	@ 0x3c
				ps2.r[2] = 0;	//s
 800237c:	4b58      	ldr	r3, [pc, #352]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
				ps2.r[3] = 0;	//d
 8002382:	4b57      	ldr	r3, [pc, #348]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002384:	2200      	movs	r2, #0
 8002386:	645a      	str	r2, [r3, #68]	@ 0x44
				ps2.r[4] = 0;	//r1
 8002388:	4b55      	ldr	r3, [pc, #340]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800238a:	2200      	movs	r2, #0
 800238c:	649a      	str	r2, [r3, #72]	@ 0x48
				ps2.r[5] = 0;	//r2
 800238e:	4b54      	ldr	r3, [pc, #336]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002390:	2200      	movs	r2, #0
 8002392:	64da      	str	r2, [r3, #76]	@ 0x4c
			}

			if (ps2.ps2RX[0] - 65 == i)
 8002394:	4b52      	ldr	r3, [pc, #328]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	3b41      	subs	r3, #65	@ 0x41
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	d106      	bne.n	80023ae <PS2X_Reader+0x29e>
			{
				ps2.l[i] = 1;
 80023a0:	4a4f      	ldr	r2, [pc, #316]	@ (80024e0 <PS2X_Reader+0x3d0>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3314      	adds	r3, #20
 80023a6:	2101      	movs	r1, #1
 80023a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80023ac:	e00b      	b.n	80023c6 <PS2X_Reader+0x2b6>
			}

			else if (ps2.ps2RX[0] - 73 == i)
 80023ae:	4b4c      	ldr	r3, [pc, #304]	@ (80024e0 <PS2X_Reader+0x3d0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	3b49      	subs	r3, #73	@ 0x49
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d105      	bne.n	80023c6 <PS2X_Reader+0x2b6>
			{
				ps2.r[i] = 1;
 80023ba:	4a49      	ldr	r2, [pc, #292]	@ (80024e0 <PS2X_Reader+0x3d0>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	330e      	adds	r3, #14
 80023c0:	2101      	movs	r1, #1
 80023c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i =0;i<6;i++)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3301      	adds	r3, #1
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	ddb8      	ble.n	8002344 <PS2X_Reader+0x234>
			}
		}

		//Generate PWM
		if (ps2.l[2] == 1)
 80023d2:	4b43      	ldr	r3, [pc, #268]	@ (80024e0 <PS2X_Reader+0x3d0>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d113      	bne.n	8002402 <PS2X_Reader+0x2f2>
		{
			//Adjust How to decrease(-) Linear position
			ps2.PIDPos -= 0.1;
 80023da:	4b41      	ldr	r3, [pc, #260]	@ (80024e0 <PS2X_Reader+0x3d0>)
 80023dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f87e 	bl	80004e0 <__aeabi_f2d>
 80023e4:	a33c      	add	r3, pc, #240	@ (adr r3, 80024d8 <PS2X_Reader+0x3c8>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fd ff19 	bl	8000220 <__aeabi_dsub>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7fe fbad 	bl	8000b54 <__aeabi_d2f>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4a38      	ldr	r2, [pc, #224]	@ (80024e0 <PS2X_Reader+0x3d0>)
 80023fe:	6793      	str	r3, [r2, #120]	@ 0x78
 8002400:	e028      	b.n	8002454 <PS2X_Reader+0x344>
//			if (ps2.pwmOut < 0)
//			{
//				ps2.pwmOut = 0;		// to make pwm1 >= 0
//			}
		}
		else if (ps2.l[3] == 1)
 8002402:	4b37      	ldr	r3, [pc, #220]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d113      	bne.n	8002432 <PS2X_Reader+0x322>
		{
			//Adjust How to increase(+) Linear position
			ps2.PIDPos += 0.1;
 800240a:	4b35      	ldr	r3, [pc, #212]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800240c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f866 	bl	80004e0 <__aeabi_f2d>
 8002414:	a330      	add	r3, pc, #192	@ (adr r3, 80024d8 <PS2X_Reader+0x3c8>)
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	f7fd ff03 	bl	8000224 <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fb95 	bl	8000b54 <__aeabi_d2f>
 800242a:	4603      	mov	r3, r0
 800242c:	4a2c      	ldr	r2, [pc, #176]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800242e:	6793      	str	r3, [r2, #120]	@ 0x78
 8002430:	e010      	b.n	8002454 <PS2X_Reader+0x344>
//			ps2.pwmOut = ps2.pwmOut + count;	// + PWM with count
		}
		else if (ps2.l[0] == 1)		//Press down button(l1) to PWM out forward
 8002432:	4b2b      	ldr	r3, [pc, #172]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002436:	2b01      	cmp	r3, #1
 8002438:	d00c      	beq.n	8002454 <PS2X_Reader+0x344>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else if (ps2.l[1] == 1)		//Press down button(l1) to PWM out backward
 800243a:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800243c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243e:	2b01      	cmp	r3, #1
 8002440:	d008      	beq.n	8002454 <PS2X_Reader+0x344>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
		}
		else if (ps2.r[1] == 1)		//Press X(r1) to stop
 8002442:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d004      	beq.n	8002454 <PS2X_Reader+0x344>
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
			MOTOR_set_duty(&MT, 150);
 800244a:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80024e4 <PS2X_Reader+0x3d4>
 800244e:	4826      	ldr	r0, [pc, #152]	@ (80024e8 <PS2X_Reader+0x3d8>)
 8002450:	f7ff fbba 	bl	8001bc8 <MOTOR_set_duty>
		}
	}
	// Floor Selection
	if(base.ShelveMode == 1){
 8002454:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <PS2X_Reader+0x3dc>)
 8002456:	8b1b      	ldrh	r3, [r3, #24]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d136      	bne.n	80024ca <PS2X_Reader+0x3ba>
		if (ps2.ps2RX[0] == 71){
 800245c:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b47      	cmp	r3, #71	@ 0x47
 8002462:	d112      	bne.n	800248a <PS2X_Reader+0x37a>
			base.Shelve[ps2.counts-1] = ps2.PIDPos;
 8002464:	4b1e      	ldr	r3, [pc, #120]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002466:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800246a:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800246c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246e:	3b01      	subs	r3, #1
 8002470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002474:	ee17 1a90 	vmov	r1, s15
 8002478:	4a1c      	ldr	r2, [pc, #112]	@ (80024ec <PS2X_Reader+0x3dc>)
 800247a:	3306      	adds	r3, #6
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	6059      	str	r1, [r3, #4]
			ps2.counts=  +1;
 8002482:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002484:	2201      	movs	r2, #1
 8002486:	675a      	str	r2, [r3, #116]	@ 0x74
 8002488:	e011      	b.n	80024ae <PS2X_Reader+0x39e>
		}
		else if (ps2.ps2RX[0] == 73){
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <PS2X_Reader+0x3d0>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b49      	cmp	r3, #73	@ 0x49
 8002490:	d10d      	bne.n	80024ae <PS2X_Reader+0x39e>
			base.Shelve[ps2.counts-1] = 0;
 8002492:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <PS2X_Reader+0x3d0>)
 8002494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002496:	3b01      	subs	r3, #1
 8002498:	4a14      	ldr	r2, [pc, #80]	@ (80024ec <PS2X_Reader+0x3dc>)
 800249a:	3306      	adds	r3, #6
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	2200      	movs	r2, #0
 80024a2:	605a      	str	r2, [r3, #4]
			ps2.counts = ps2.counts -1;
 80024a4:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <PS2X_Reader+0x3d0>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a8:	3b01      	subs	r3, #1
 80024aa:	4a0d      	ldr	r2, [pc, #52]	@ (80024e0 <PS2X_Reader+0x3d0>)
 80024ac:	6753      	str	r3, [r2, #116]	@ 0x74
		}

		if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1){
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <PS2X_Reader+0x3d0>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b48      	cmp	r3, #72	@ 0x48
 80024b4:	d109      	bne.n	80024ca <PS2X_Reader+0x3ba>
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <PS2X_Reader+0x3dc>)
 80024b8:	8b1b      	ldrh	r3, [r3, #24]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <PS2X_Reader+0x3ba>
			base.ShelveMode = 0;
 80024be:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <PS2X_Reader+0x3dc>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	831a      	strh	r2, [r3, #24]
			registerFrame[0x10].U16 = 0b0000;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <PS2X_Reader+0x3e0>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	841a      	strh	r2, [r3, #32]
		}
	}
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	f3af 8000 	nop.w
 80024d8:	9999999a 	.word	0x9999999a
 80024dc:	3fb99999 	.word	0x3fb99999
 80024e0:	20001084 	.word	0x20001084
 80024e4:	43160000 	.word	0x43160000
 80024e8:	20001030 	.word	0x20001030
 80024ec:	20001104 	.word	0x20001104
 80024f0:	20000e64 	.word	0x20000e64

080024f4 <Traject_init>:
float Time_acc;
float Time_dec;


void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002500:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002534:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002538:	b088      	sub	sp, #32
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800253c:	f001 f80b 	bl	8003556 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002540:	f000 f968 	bl	8002814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002544:	f000 fc5a 	bl	8002dfc <MX_GPIO_Init>
  MX_DMA_Init();
 8002548:	f000 fc26 	bl	8002d98 <MX_DMA_Init>
  MX_TIM2_Init();
 800254c:	f000 f9ae 	bl	80028ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8002550:	f000 fa00 	bl	8002954 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002554:	f000 fad0 	bl	8002af8 <MX_TIM5_Init>
  MX_UART4_Init();
 8002558:	f000 fb82 	bl	8002c60 <MX_UART4_Init>
  MX_TIM4_Init();
 800255c:	f000 fa7c 	bl	8002a58 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002560:	f000 fbcc 	bl	8002cfc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8002564:	f000 fb4c 	bl	8002c00 <MX_TIM16_Init>
  MX_TIM6_Init();
 8002568:	f000 fb14 	bl	8002b94 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 800256c:	488f      	ldr	r0, [pc, #572]	@ (80027ac <main+0x278>)
 800256e:	f002 fef7 	bl	8005360 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);					// Output compare
 8002572:	488f      	ldr	r0, [pc, #572]	@ (80027b0 <main+0x27c>)
 8002574:	f002 fef4 	bl	8005360 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);					// Trajectory trigger
 8002578:	488e      	ldr	r0, [pc, #568]	@ (80027b4 <main+0x280>)
 800257a:	f002 fef1 	bl	8005360 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);        // PWM
 800257e:	2100      	movs	r1, #0
 8002580:	488b      	ldr	r0, [pc, #556]	@ (80027b0 <main+0x27c>)
 8002582:	f003 f843 	bl	800560c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);        // Direction
 8002586:	2104      	movs	r1, #4
 8002588:	4889      	ldr	r0, [pc, #548]	@ (80027b0 <main+0x27c>)
 800258a:	f003 f83f 	bl	800560c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800258e:	488a      	ldr	r0, [pc, #552]	@ (80027b8 <main+0x284>)
 8002590:	f002 ff56 	bl	8005440 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8002594:	4889      	ldr	r0, [pc, #548]	@ (80027bc <main+0x288>)
 8002596:	f002 ff53 	bl	8005440 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 800259a:	4b89      	ldr	r3, [pc, #548]	@ (80027c0 <main+0x28c>)
 800259c:	4a89      	ldr	r2, [pc, #548]	@ (80027c4 <main+0x290>)
 800259e:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80025a0:	4b87      	ldr	r3, [pc, #540]	@ (80027c0 <main+0x28c>)
 80025a2:	4a89      	ldr	r2, [pc, #548]	@ (80027c8 <main+0x294>)
 80025a4:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80025a6:	4b86      	ldr	r3, [pc, #536]	@ (80027c0 <main+0x28c>)
 80025a8:	2215      	movs	r2, #21
 80025aa:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80025ac:	4b84      	ldr	r3, [pc, #528]	@ (80027c0 <main+0x28c>)
 80025ae:	22c8      	movs	r2, #200	@ 0xc8
 80025b0:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80025b2:	4986      	ldr	r1, [pc, #536]	@ (80027cc <main+0x298>)
 80025b4:	4882      	ldr	r0, [pc, #520]	@ (80027c0 <main+0x28c>)
 80025b6:	f7fe fff1 	bl	800159c <Modbus_init>

  //float PID_pos_K[3] = {0.01 ,0.0, 0};
  float PID_pos_K[3] = {4.5 ,0.00000000495, 0};
 80025ba:	4a85      	ldr	r2, [pc, #532]	@ (80027d0 <main+0x29c>)
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80025c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  //float PID_velo_K[3] = {3.35 ,0.050, 0.001};
  float PID_velo_K[3] = {3.35 ,0.050, 0.001};
 80025c6:	4a83      	ldr	r2, [pc, #524]	@ (80027d4 <main+0x2a0>)
 80025c8:	463b      	mov	r3, r7
 80025ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80025cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // Initialize ASRS
  Traject_init(&Traj,450, 500);				// V_max, A_max
 80025d0:	eddf 0a81 	vldr	s1, [pc, #516]	@ 80027d8 <main+0x2a4>
 80025d4:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 80027dc <main+0x2a8>
 80025d8:	4881      	ldr	r0, [pc, #516]	@ (80027e0 <main+0x2ac>)
 80025da:	f7ff ff8b 	bl	80024f4 <Traject_init>
//  Kalman_Start(&Vel_filtered);
  AMT_encoder_init(&AMT, &htim2);
 80025de:	4973      	ldr	r1, [pc, #460]	@ (80027ac <main+0x278>)
 80025e0:	4880      	ldr	r0, [pc, #512]	@ (80027e4 <main+0x2b0>)
 80025e2:	f7fe fe8b 	bl	80012fc <AMT_encoder_init>
  MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 80025e6:	2300      	movs	r3, #0
 80025e8:	2204      	movs	r2, #4
 80025ea:	4971      	ldr	r1, [pc, #452]	@ (80027b0 <main+0x27c>)
 80025ec:	487e      	ldr	r0, [pc, #504]	@ (80027e8 <main+0x2b4>)
 80025ee:	f7ff fac9 	bl	8001b84 <MOTOR_init>
  PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 80025f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80025fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80025fe:	eeb0 1a66 	vmov.f32	s2, s13
 8002602:	eef0 0a47 	vmov.f32	s1, s14
 8002606:	eeb0 0a67 	vmov.f32	s0, s15
 800260a:	4878      	ldr	r0, [pc, #480]	@ (80027ec <main+0x2b8>)
 800260c:	f7ff fd54 	bl	80020b8 <PID_controller_init>
  PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 8002610:	edd7 7a00 	vldr	s15, [r7]
 8002614:	ed97 7a01 	vldr	s14, [r7, #4]
 8002618:	edd7 6a03 	vldr	s13, [r7, #12]
 800261c:	eeb0 1a66 	vmov.f32	s2, s13
 8002620:	eef0 0a47 	vmov.f32	s1, s14
 8002624:	eeb0 0a67 	vmov.f32	s0, s15
 8002628:	4871      	ldr	r0, [pc, #452]	@ (80027f0 <main+0x2bc>)
 800262a:	f7ff fd45 	bl	80020b8 <PID_controller_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, ppp);
 800262e:	4b71      	ldr	r3, [pc, #452]	@ (80027f4 <main+0x2c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	2120      	movs	r1, #32
 8002638:	486f      	ldr	r0, [pc, #444]	@ (80027f8 <main+0x2c4>)
 800263a:	f001 fdc1 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, fff);
 800263e:	4b6f      	ldr	r3, [pc, #444]	@ (80027fc <main+0x2c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	2110      	movs	r1, #16
 8002648:	486b      	ldr	r0, [pc, #428]	@ (80027f8 <main+0x2c4>)
 800264a:	f001 fdb9 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, jjj);
 800264e:	4b6c      	ldr	r3, [pc, #432]	@ (8002800 <main+0x2cc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800265a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265e:	f001 fdaf 	bl	80041c0 <HAL_GPIO_WritePin>
	  static uint64_t timestamp =0;
	  int64_t currentTime = HAL_GetTick();
 8002662:	f000 ffdd 	bl	8003620 <HAL_GetTick>
 8002666:	4603      	mov	r3, r0
 8002668:	2200      	movs	r2, #0
 800266a:	4698      	mov	r8, r3
 800266c:	4691      	mov	r9, r2
 800266e:	e9c7 8906 	strd	r8, r9, [r7, #24]
	  if(currentTime > timestamp)
 8002672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002676:	4963      	ldr	r1, [pc, #396]	@ (8002804 <main+0x2d0>)
 8002678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800267c:	4290      	cmp	r0, r2
 800267e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002682:	d211      	bcs.n	80026a8 <main+0x174>
	  {
	  timestamp =currentTime + 1;//ms
 8002684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002688:	1c54      	adds	r4, r2, #1
 800268a:	f143 0500 	adc.w	r5, r3, #0
 800268e:	4622      	mov	r2, r4
 8002690:	462b      	mov	r3, r5
 8002692:	495c      	ldr	r1, [pc, #368]	@ (8002804 <main+0x2d0>)
 8002694:	e9c1 2300 	strd	r2, r3, [r1]
	  AMT_encoder_update(&AMT, &htim2, micros());
 8002698:	f000 fc70 	bl	8002f7c <micros>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4942      	ldr	r1, [pc, #264]	@ (80027ac <main+0x278>)
 80026a2:	4850      	ldr	r0, [pc, #320]	@ (80027e4 <main+0x2b0>)
 80026a4:	f7fe fe44 	bl	8001330 <AMT_encoder_update>
	  }

	  //Modbus
	  easyCase();
 80026a8:	f7fe fd2a 	bl	8001100 <easyCase>
	  switch(base.bS){
 80026ac:	4b56      	ldr	r3, [pc, #344]	@ (8002808 <main+0x2d4>)
 80026ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b0:	3b01      	subs	r3, #1
 80026b2:	2b07      	cmp	r3, #7
 80026b4:	d82a      	bhi.n	800270c <main+0x1d8>
 80026b6:	a201      	add	r2, pc, #4	@ (adr r2, 80026bc <main+0x188>)
 80026b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026bc:	080026dd 	.word	0x080026dd
 80026c0:	080026e9 	.word	0x080026e9
 80026c4:	0800270d 	.word	0x0800270d
 80026c8:	080026f5 	.word	0x080026f5
 80026cc:	0800270d 	.word	0x0800270d
 80026d0:	0800270d 	.word	0x0800270d
 80026d4:	0800270d 	.word	0x0800270d
 80026d8:	08002701 	.word	0x08002701
//	  case 0:
//		  registerFrame[0x01].U16 = 0;
//		  base.bStatus = 0;
//		  break;
	  case 1:
		  base.bStatus = 1;
 80026dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002808 <main+0x2d4>)
 80026de:	2201      	movs	r2, #1
 80026e0:	801a      	strh	r2, [r3, #0]
		  SetShelves();
 80026e2:	f7fe fd55 	bl	8001190 <SetShelves>
//		  base.bS = 0;
		  break;
 80026e6:	e011      	b.n	800270c <main+0x1d8>
	  case 2:
		  base.bStatus = 2;
 80026e8:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <main+0x2d4>)
 80026ea:	2202      	movs	r2, #2
 80026ec:	801a      	strh	r2, [r3, #0]
		  SetHome();
 80026ee:	f7fe fdb5 	bl	800125c <SetHome>
//		  base.bS = 0;
		  break;
 80026f2:	e00b      	b.n	800270c <main+0x1d8>
	  case 4:
		  base.bStatus = 4;
 80026f4:	4b44      	ldr	r3, [pc, #272]	@ (8002808 <main+0x2d4>)
 80026f6:	2204      	movs	r2, #4
 80026f8:	801a      	strh	r2, [r3, #0]
		  RunJog();
 80026fa:	f7fe fdd1 	bl	80012a0 <RunJog>
//		  base.bS = 0;
		  break;
 80026fe:	e005      	b.n	800270c <main+0x1d8>
	  case 8:
		  base.bStatus = 8;
 8002700:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <main+0x2d4>)
 8002702:	2208      	movs	r2, #8
 8002704:	801a      	strh	r2, [r3, #0]
		  RunPoint();
 8002706:	f7fe fd7b 	bl	8001200 <RunPoint>
//		  base.bS = 0;
		  break;
 800270a:	bf00      	nop
	  }

	  switch(base.vS){
 800270c:	4b3e      	ldr	r3, [pc, #248]	@ (8002808 <main+0x2d4>)
 800270e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <main+0x1e6>
 8002714:	2b01      	cmp	r3, #1
 8002716:	d004      	beq.n	8002722 <main+0x1ee>
 8002718:	e007      	b.n	800272a <main+0x1f6>
	  case 0:
		  base.Vacuum = 0;
 800271a:	4b3b      	ldr	r3, [pc, #236]	@ (8002808 <main+0x2d4>)
 800271c:	2200      	movs	r2, #0
 800271e:	829a      	strh	r2, [r3, #20]
		  break;
 8002720:	e003      	b.n	800272a <main+0x1f6>
	  case 1:
		  base.Vacuum = 1;
 8002722:	4b39      	ldr	r3, [pc, #228]	@ (8002808 <main+0x2d4>)
 8002724:	2201      	movs	r2, #1
 8002726:	829a      	strh	r2, [r3, #20]
		  break;
 8002728:	bf00      	nop
	  }

	  switch(base.gmS){
 800272a:	4b37      	ldr	r3, [pc, #220]	@ (8002808 <main+0x2d4>)
 800272c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <main+0x204>
 8002732:	2b01      	cmp	r3, #1
 8002734:	d004      	beq.n	8002740 <main+0x20c>
 8002736:	e007      	b.n	8002748 <main+0x214>
	  case 0:
		  base.Gripper = 0;
 8002738:	4b33      	ldr	r3, [pc, #204]	@ (8002808 <main+0x2d4>)
 800273a:	2200      	movs	r2, #0
 800273c:	82da      	strh	r2, [r3, #22]
		  break;
 800273e:	e003      	b.n	8002748 <main+0x214>
	  case 1:
		  base.Gripper = 1;
 8002740:	4b31      	ldr	r3, [pc, #196]	@ (8002808 <main+0x2d4>)
 8002742:	2201      	movs	r2, #1
 8002744:	82da      	strh	r2, [r3, #22]
		  break;
 8002746:	bf00      	nop
	  }


	  Modbus_Protocal_Worker();
 8002748:	f7fe ffb4 	bl	80016b4 <Modbus_Protocal_Worker>
	  Routine();
 800274c:	f7fe fcfe 	bl	800114c <Routine>
//	  //--
//	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 8002750:	230a      	movs	r3, #10
 8002752:	220a      	movs	r2, #10
 8002754:	492d      	ldr	r1, [pc, #180]	@ (800280c <main+0x2d8>)
 8002756:	482e      	ldr	r0, [pc, #184]	@ (8002810 <main+0x2dc>)
 8002758:	f004 ff64 	bl	8007624 <HAL_UART_Receive>
	  if(ps2.ps2RX[0] == 74){
 800275c:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <main+0x2d8>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b4a      	cmp	r3, #74	@ 0x4a
 8002762:	d102      	bne.n	800276a <main+0x236>
		  ps2.stop = 1;
 8002764:	4b29      	ldr	r3, [pc, #164]	@ (800280c <main+0x2d8>)
 8002766:	2201      	movs	r2, #1
 8002768:	671a      	str	r2, [r3, #112]	@ 0x70
	  }
	  if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 800276a:	4b28      	ldr	r3, [pc, #160]	@ (800280c <main+0x2d8>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	2b01      	cmp	r3, #1
 8002770:	d113      	bne.n	800279a <main+0x266>
 8002772:	4b26      	ldr	r3, [pc, #152]	@ (800280c <main+0x2d8>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b4b      	cmp	r3, #75	@ 0x4b
 8002778:	d10f      	bne.n	800279a <main+0x266>
		  ps2.stop = 0;
 800277a:	4b24      	ldr	r3, [pc, #144]	@ (800280c <main+0x2d8>)
 800277c:	2200      	movs	r2, #0
 800277e:	671a      	str	r2, [r3, #112]	@ 0x70
		  ps2.pwmOut = 150;
 8002780:	4b22      	ldr	r3, [pc, #136]	@ (800280c <main+0x2d8>)
 8002782:	2296      	movs	r2, #150	@ 0x96
 8002784:	669a      	str	r2, [r3, #104]	@ 0x68
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);		//Stop and Holf Position
 8002786:	4b21      	ldr	r3, [pc, #132]	@ (800280c <main+0x2d8>)
 8002788:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <main+0x27c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002790:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <main+0x27c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2200      	movs	r2, #0
 8002796:	639a      	str	r2, [r3, #56]	@ 0x38
 8002798:	e006      	b.n	80027a8 <main+0x274>

	  }
	  else if(ps2.stop == 0){
 800279a:	4b1c      	ldr	r3, [pc, #112]	@ (800280c <main+0x2d8>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f47f af45 	bne.w	800262e <main+0xfa>
		  PS2X_Reader();
 80027a4:	f7ff fcb4 	bl	8002110 <PS2X_Reader>
  {
 80027a8:	e741      	b.n	800262e <main+0xfa>
 80027aa:	bf00      	nop
 80027ac:	2000026c 	.word	0x2000026c
 80027b0:	20000338 	.word	0x20000338
 80027b4:	2000059c 	.word	0x2000059c
 80027b8:	20000404 	.word	0x20000404
 80027bc:	200004d0 	.word	0x200004d0
 80027c0:	2000098c 	.word	0x2000098c
 80027c4:	20000800 	.word	0x20000800
 80027c8:	20000668 	.word	0x20000668
 80027cc:	20000e64 	.word	0x20000e64
 80027d0:	080093f4 	.word	0x080093f4
 80027d4:	08009400 	.word	0x08009400
 80027d8:	43fa0000 	.word	0x43fa0000
 80027dc:	43e10000 	.word	0x43e10000
 80027e0:	20001070 	.word	0x20001070
 80027e4:	20000ff8 	.word	0x20000ff8
 80027e8:	20001030 	.word	0x20001030
 80027ec:	20001038 	.word	0x20001038
 80027f0:	20001054 	.word	0x20001054
 80027f4:	20001158 	.word	0x20001158
 80027f8:	48000800 	.word	0x48000800
 80027fc:	2000115c 	.word	0x2000115c
 8002800:	20001160 	.word	0x20001160
 8002804:	20001168 	.word	0x20001168
 8002808:	20001104 	.word	0x20001104
 800280c:	20001084 	.word	0x20001084
 8002810:	20000734 	.word	0x20000734

08002814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b094      	sub	sp, #80	@ 0x50
 8002818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281a:	f107 0318 	add.w	r3, r7, #24
 800281e:	2238      	movs	r2, #56	@ 0x38
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f006 fda0 	bl	8009368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002836:	2000      	movs	r0, #0
 8002838:	f001 fcfe 	bl	8004238 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800283c:	2302      	movs	r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002846:	2340      	movs	r3, #64	@ 0x40
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284a:	2302      	movs	r3, #2
 800284c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800284e:	2302      	movs	r3, #2
 8002850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002852:	2304      	movs	r3, #4
 8002854:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002856:	2355      	movs	r3, #85	@ 0x55
 8002858:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800285a:	2302      	movs	r3, #2
 800285c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800285e:	2302      	movs	r3, #2
 8002860:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002862:	2302      	movs	r3, #2
 8002864:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002866:	f107 0318 	add.w	r3, r7, #24
 800286a:	4618      	mov	r0, r3
 800286c:	f001 fd98 	bl	80043a0 <HAL_RCC_OscConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002876:	f000 fb9b 	bl	8002fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800287a:	230f      	movs	r3, #15
 800287c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800287e:	2303      	movs	r3, #3
 8002880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	2104      	movs	r1, #4
 8002892:	4618      	mov	r0, r3
 8002894:	f002 f896 	bl	80049c4 <HAL_RCC_ClockConfig>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800289e:	f000 fb87 	bl	8002fb0 <Error_Handler>
  }
}
 80028a2:	bf00      	nop
 80028a4:	3750      	adds	r7, #80	@ 0x50
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	@ 0x30
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	2224      	movs	r2, #36	@ 0x24
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f006 fd54 	bl	8009368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c0:	463b      	mov	r3, r7
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028ca:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <MX_TIM2_Init+0xa4>)
 80028cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <MX_TIM2_Init+0xa4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <MX_TIM2_Init+0xa4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <MX_TIM2_Init+0xa4>)
 80028e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <MX_TIM2_Init+0xa4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ec:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <MX_TIM2_Init+0xa4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028f2:	2303      	movs	r3, #3
 80028f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028fa:	2301      	movs	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800290a:	2301      	movs	r3, #1
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	4619      	mov	r1, r3
 800291c:	480c      	ldr	r0, [pc, #48]	@ (8002950 <MX_TIM2_Init+0xa4>)
 800291e:	f003 f8cb 	bl	8005ab8 <HAL_TIM_Encoder_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002928:	f000 fb42 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002934:	463b      	mov	r3, r7
 8002936:	4619      	mov	r1, r3
 8002938:	4805      	ldr	r0, [pc, #20]	@ (8002950 <MX_TIM2_Init+0xa4>)
 800293a:	f004 fc73 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002944:	f000 fb34 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002948:	bf00      	nop
 800294a:	3730      	adds	r7, #48	@ 0x30
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	2000026c 	.word	0x2000026c

08002954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08e      	sub	sp, #56	@ 0x38
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800295a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002974:	463b      	mov	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	611a      	str	r2, [r3, #16]
 8002982:	615a      	str	r2, [r3, #20]
 8002984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002986:	4b32      	ldr	r3, [pc, #200]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002988:	4a32      	ldr	r2, [pc, #200]	@ (8002a54 <MX_TIM3_Init+0x100>)
 800298a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 800298c:	4b30      	ldr	r3, [pc, #192]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 800298e:	22a9      	movs	r2, #169	@ 0xa9
 8002990:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002992:	4b2f      	ldr	r3, [pc, #188]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002998:	4b2d      	ldr	r3, [pc, #180]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 800299a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800299e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029ac:	4828      	ldr	r0, [pc, #160]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029ae:	f002 fc73 	bl	8005298 <HAL_TIM_Base_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80029b8:	f000 fafa 	bl	8002fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029c6:	4619      	mov	r1, r3
 80029c8:	4821      	ldr	r0, [pc, #132]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029ca:	f003 fc45 	bl	8006258 <HAL_TIM_ConfigClockSource>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80029d4:	f000 faec 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029d8:	481d      	ldr	r0, [pc, #116]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029da:	f002 fda9 	bl	8005530 <HAL_TIM_PWM_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80029e4:	f000 fae4 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	4619      	mov	r1, r3
 80029f6:	4816      	ldr	r0, [pc, #88]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 80029f8:	f004 fc14 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002a02:	f000 fad5 	bl	8002fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a06:	2360      	movs	r3, #96	@ 0x60
 8002a08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a16:	463b      	mov	r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480c      	ldr	r0, [pc, #48]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002a1e:	f003 fb07 	bl	8006030 <HAL_TIM_PWM_ConfigChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002a28:	f000 fac2 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	2204      	movs	r2, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4807      	ldr	r0, [pc, #28]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002a34:	f003 fafc 	bl	8006030 <HAL_TIM_PWM_ConfigChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002a3e:	f000 fab7 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a42:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <MX_TIM3_Init+0xfc>)
 8002a44:	f000 fba4 	bl	8003190 <HAL_TIM_MspPostInit>

}
 8002a48:	bf00      	nop
 8002a4a:	3738      	adds	r7, #56	@ 0x38
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000338 	.word	0x20000338
 8002a54:	40000400 	.word	0x40000400

08002a58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a5e:	f107 0310 	add.w	r3, r7, #16
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a76:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <MX_TIM4_Init+0x98>)
 8002a78:	4a1e      	ldr	r2, [pc, #120]	@ (8002af4 <MX_TIM4_Init+0x9c>)
 8002a7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <MX_TIM4_Init+0x98>)
 8002a7e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002a82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a84:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <MX_TIM4_Init+0x98>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002a8a:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <MX_TIM4_Init+0x98>)
 8002a8c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002a90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a92:	4b17      	ldr	r3, [pc, #92]	@ (8002af0 <MX_TIM4_Init+0x98>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a98:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <MX_TIM4_Init+0x98>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a9e:	4814      	ldr	r0, [pc, #80]	@ (8002af0 <MX_TIM4_Init+0x98>)
 8002aa0:	f002 fbfa 	bl	8005298 <HAL_TIM_Base_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002aaa:	f000 fa81 	bl	8002fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ab2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	4619      	mov	r1, r3
 8002aba:	480d      	ldr	r0, [pc, #52]	@ (8002af0 <MX_TIM4_Init+0x98>)
 8002abc:	f003 fbcc 	bl	8006258 <HAL_TIM_ConfigClockSource>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002ac6:	f000 fa73 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4806      	ldr	r0, [pc, #24]	@ (8002af0 <MX_TIM4_Init+0x98>)
 8002ad8:	f004 fba4 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002ae2:	f000 fa65 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000404 	.word	0x20000404
 8002af4:	40000800 	.word	0x40000800

08002af8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	@ (8002b8c <MX_TIM5_Init+0x94>)
 8002b18:	4a1d      	ldr	r2, [pc, #116]	@ (8002b90 <MX_TIM5_Init+0x98>)
 8002b1a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <MX_TIM5_Init+0x94>)
 8002b1e:	22a9      	movs	r2, #169	@ 0xa9
 8002b20:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	@ (8002b8c <MX_TIM5_Init+0x94>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002b28:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <MX_TIM5_Init+0x94>)
 8002b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b30:	4b16      	ldr	r3, [pc, #88]	@ (8002b8c <MX_TIM5_Init+0x94>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <MX_TIM5_Init+0x94>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b3c:	4813      	ldr	r0, [pc, #76]	@ (8002b8c <MX_TIM5_Init+0x94>)
 8002b3e:	f002 fbab 	bl	8005298 <HAL_TIM_Base_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002b48:	f000 fa32 	bl	8002fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	4619      	mov	r1, r3
 8002b58:	480c      	ldr	r0, [pc, #48]	@ (8002b8c <MX_TIM5_Init+0x94>)
 8002b5a:	f003 fb7d 	bl	8006258 <HAL_TIM_ConfigClockSource>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002b64:	f000 fa24 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4805      	ldr	r0, [pc, #20]	@ (8002b8c <MX_TIM5_Init+0x94>)
 8002b76:	f004 fb55 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002b80:	f000 fa16 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b84:	bf00      	nop
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200004d0 	.word	0x200004d0
 8002b90:	40000c00 	.word	0x40000c00

08002b94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	@ (8002bf8 <MX_TIM6_Init+0x64>)
 8002ba6:	4a15      	ldr	r2, [pc, #84]	@ (8002bfc <MX_TIM6_Init+0x68>)
 8002ba8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8002baa:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <MX_TIM6_Init+0x64>)
 8002bac:	22a9      	movs	r2, #169	@ 0xa9
 8002bae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <MX_TIM6_Init+0x64>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002bb6:	4b10      	ldr	r3, [pc, #64]	@ (8002bf8 <MX_TIM6_Init+0x64>)
 8002bb8:	220a      	movs	r2, #10
 8002bba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <MX_TIM6_Init+0x64>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bc2:	480d      	ldr	r0, [pc, #52]	@ (8002bf8 <MX_TIM6_Init+0x64>)
 8002bc4:	f002 fb68 	bl	8005298 <HAL_TIM_Base_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002bce:	f000 f9ef 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4806      	ldr	r0, [pc, #24]	@ (8002bf8 <MX_TIM6_Init+0x64>)
 8002be0:	f004 fb20 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002bea:	f000 f9e1 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000059c 	.word	0x2000059c
 8002bfc:	40001000 	.word	0x40001000

08002c00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <MX_TIM16_Init+0x58>)
 8002c06:	4a15      	ldr	r2, [pc, #84]	@ (8002c5c <MX_TIM16_Init+0x5c>)
 8002c08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002c0a:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <MX_TIM16_Init+0x58>)
 8002c0c:	22a9      	movs	r2, #169	@ 0xa9
 8002c0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <MX_TIM16_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <MX_TIM16_Init+0x58>)
 8002c18:	f240 4279 	movw	r2, #1145	@ 0x479
 8002c1c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <MX_TIM16_Init+0x58>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <MX_TIM16_Init+0x58>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <MX_TIM16_Init+0x58>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002c30:	4809      	ldr	r0, [pc, #36]	@ (8002c58 <MX_TIM16_Init+0x58>)
 8002c32:	f002 fb31 	bl	8005298 <HAL_TIM_Base_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002c3c:	f000 f9b8 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002c40:	2108      	movs	r1, #8
 8002c42:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <MX_TIM16_Init+0x58>)
 8002c44:	f002 fe42 	bl	80058cc <HAL_TIM_OnePulse_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002c4e:	f000 f9af 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000668 	.word	0x20000668
 8002c5c:	40014400 	.word	0x40014400

08002c60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c64:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c66:	4a24      	ldr	r2, [pc, #144]	@ (8002cf8 <MX_UART4_Init+0x98>)
 8002c68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9700;
 8002c6a:	4b22      	ldr	r3, [pc, #136]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c6c:	f242 52e4 	movw	r2, #9700	@ 0x25e4
 8002c70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c78:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c86:	220c      	movs	r2, #12
 8002c88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c90:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c96:	4b17      	ldr	r3, [pc, #92]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c9c:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ca8:	4812      	ldr	r0, [pc, #72]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002caa:	f004 fba1 	bl	80073f0 <HAL_UART_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002cb4:	f000 f97c 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cb8:	2100      	movs	r1, #0
 8002cba:	480e      	ldr	r0, [pc, #56]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002cbc:	f006 fa89 	bl	80091d2 <HAL_UARTEx_SetTxFifoThreshold>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002cc6:	f000 f973 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002cca:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8002cce:	4809      	ldr	r0, [pc, #36]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002cd0:	f006 fabd 	bl	800924e <HAL_UARTEx_SetRxFifoThreshold>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8002cda:	f000 f969 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002cde:	4805      	ldr	r0, [pc, #20]	@ (8002cf4 <MX_UART4_Init+0x94>)
 8002ce0:	f006 fa3e 	bl	8009160 <HAL_UARTEx_DisableFifoMode>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8002cea:	f000 f961 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000734 	.word	0x20000734
 8002cf8:	40004c00 	.word	0x40004c00

08002cfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d00:	4b23      	ldr	r3, [pc, #140]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d02:	4a24      	ldr	r2, [pc, #144]	@ (8002d94 <MX_USART2_UART_Init+0x98>)
 8002d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002d06:	4b22      	ldr	r3, [pc, #136]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d08:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002d0e:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d14:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d16:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d24:	4b1a      	ldr	r3, [pc, #104]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d26:	220c      	movs	r2, #12
 8002d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2a:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d30:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d42:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d48:	4811      	ldr	r0, [pc, #68]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d4a:	f004 fb51 	bl	80073f0 <HAL_UART_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002d54:	f000 f92c 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d58:	2100      	movs	r1, #0
 8002d5a:	480d      	ldr	r0, [pc, #52]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d5c:	f006 fa39 	bl	80091d2 <HAL_UARTEx_SetTxFifoThreshold>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002d66:	f000 f923 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4808      	ldr	r0, [pc, #32]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d6e:	f006 fa6e 	bl	800924e <HAL_UARTEx_SetRxFifoThreshold>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002d78:	f000 f91a 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d7c:	4804      	ldr	r0, [pc, #16]	@ (8002d90 <MX_USART2_UART_Init+0x94>)
 8002d7e:	f006 f9ef 	bl	8009160 <HAL_UARTEx_DisableFifoMode>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002d88:	f000 f912 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000800 	.word	0x20000800
 8002d94:	40004400 	.word	0x40004400

08002d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002d9e:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <MX_DMA_Init+0x60>)
 8002da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da2:	4a15      	ldr	r2, [pc, #84]	@ (8002df8 <MX_DMA_Init+0x60>)
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	6493      	str	r3, [r2, #72]	@ 0x48
 8002daa:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <MX_DMA_Init+0x60>)
 8002dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <MX_DMA_Init+0x60>)
 8002db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dba:	4a0f      	ldr	r2, [pc, #60]	@ (8002df8 <MX_DMA_Init+0x60>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <MX_DMA_Init+0x60>)
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	200b      	movs	r0, #11
 8002dd4:	f000 fd0b 	bl	80037ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002dd8:	200b      	movs	r0, #11
 8002dda:	f000 fd22 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	200c      	movs	r0, #12
 8002de4:	f000 fd03 	bl	80037ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002de8:	200c      	movs	r0, #12
 8002dea:	f000 fd1a 	bl	8003822 <HAL_NVIC_EnableIRQ>

}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000

08002dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	@ 0x28
 8002e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
 8002e10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e12:	4b46      	ldr	r3, [pc, #280]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	4a45      	ldr	r2, [pc, #276]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e1e:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e2a:	4b40      	ldr	r3, [pc, #256]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e30:	f043 0320 	orr.w	r3, r3, #32
 8002e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e36:	4b3d      	ldr	r3, [pc, #244]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e42:	4b3a      	ldr	r3, [pc, #232]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e46:	4a39      	ldr	r2, [pc, #228]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e4e:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	4a33      	ldr	r2, [pc, #204]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e66:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <MX_GPIO_Init+0x130>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Push_Pin, GPIO_PIN_RESET);
 8002e72:	2200      	movs	r2, #0
 8002e74:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e7c:	f001 f9a0 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pull_Pin|Suck_Pin, GPIO_PIN_RESET);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2130      	movs	r1, #48	@ 0x30
 8002e84:	482a      	ldr	r0, [pc, #168]	@ (8002f30 <MX_GPIO_Init+0x134>)
 8002e86:	f001 f99b 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4823      	ldr	r0, [pc, #140]	@ (8002f30 <MX_GPIO_Init+0x134>)
 8002ea2:	f001 f80b 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : Top_Limit_Pin Base_Limit_Pin Reed_Pin */
  GPIO_InitStruct.Pin = Top_Limit_Pin|Base_Limit_Pin|Reed_Pin;
 8002ea6:	23d0      	movs	r3, #208	@ 0xd0
 8002ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ebc:	f000 fffe 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Push_Pin;
 8002ec0:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002edc:	f000 ffee 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : Pull_Pin Suck_Pin */
  GPIO_InitStruct.Pin = Pull_Pin|Suck_Pin;
 8002ee0:	2330      	movs	r3, #48	@ 0x30
 8002ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	480e      	ldr	r0, [pc, #56]	@ (8002f30 <MX_GPIO_Init+0x134>)
 8002ef8:	f000 ffe0 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : Reed_2_Pin */
  GPIO_InitStruct.Pin = Reed_2_Pin;
 8002efc:	2340      	movs	r3, #64	@ 0x40
 8002efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f04:	2302      	movs	r3, #2
 8002f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reed_2_GPIO_Port, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4809      	ldr	r0, [pc, #36]	@ (8002f34 <MX_GPIO_Init+0x138>)
 8002f10:	f000 ffd4 	bl	8003ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	2028      	movs	r0, #40	@ 0x28
 8002f1a:	f000 fc68 	bl	80037ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f1e:	2028      	movs	r0, #40	@ 0x28
 8002f20:	f000 fc7f 	bl	8003822 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	@ 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	48000800 	.word	0x48000800
 8002f34:	48000400 	.word	0x48000400

08002f38 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
		if(htim == &htim5)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a0b      	ldr	r2, [pc, #44]	@ (8002f70 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d108      	bne.n	8002f5a <HAL_TIM_PeriodElapsedCallback+0x22>
			{
			_micros += UINT32_MAX;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	1e54      	subs	r4, r2, #1
 8002f50:	f143 0500 	adc.w	r5, r3, #0
 8002f54:	4b07      	ldr	r3, [pc, #28]	@ (8002f74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f56:	e9c3 4500 	strd	r4, r5, [r3]
			}
		if(htim == &htim4)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a06      	ldr	r2, [pc, #24]	@ (8002f78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			 Heartbeat();
 8002f62:	f7fe f8e5 	bl	8001130 <Heartbeat>
		}
	}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200004d0 	.word	0x200004d0
 8002f74:	20001150 	.word	0x20001150
 8002f78:	20000404 	.word	0x20000404

08002f7c <micros>:

uint64_t micros()
	{
 8002f7c:	b4b0      	push	{r4, r5, r7}
 8002f7e:	af00      	add	r7, sp, #0
		return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8002f80:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <micros+0x2c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	2200      	movs	r2, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <micros+0x30>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	1884      	adds	r4, r0, r2
 8002f94:	eb41 0503 	adc.w	r5, r1, r3
 8002f98:	4622      	mov	r2, r4
 8002f9a:	462b      	mov	r3, r5
	}
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bcb0      	pop	{r4, r5, r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	200004d0 	.word	0x200004d0
 8002fac:	20001150 	.word	0x20001150

08002fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
}
 8002fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <Error_Handler+0x8>

08002fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <HAL_MspInit+0x44>)
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8003000 <HAL_MspInit+0x44>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fce:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <HAL_MspInit+0x44>)
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <HAL_MspInit+0x44>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fde:	4a08      	ldr	r2, [pc, #32]	@ (8003000 <HAL_MspInit+0x44>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_MspInit+0x44>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ff2:	f001 f9c5 	bl	8004380 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000

08003004 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	@ 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003024:	d128      	bne.n	8003078 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003026:	4b16      	ldr	r3, [pc, #88]	@ (8003080 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	4a15      	ldr	r2, [pc, #84]	@ (8003080 <HAL_TIM_Encoder_MspInit+0x7c>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6593      	str	r3, [r2, #88]	@ 0x58
 8003032:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003042:	4a0f      	ldr	r2, [pc, #60]	@ (8003080 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800304a:	4b0d      	ldr	r3, [pc, #52]	@ (8003080 <HAL_TIM_Encoder_MspInit+0x7c>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003056:	2303      	movs	r3, #3
 8003058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003066:	2301      	movs	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	4619      	mov	r1, r3
 8003070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003074:	f000 ff22 	bl	8003ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003078:	bf00      	nop
 800307a:	3728      	adds	r7, #40	@ 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000

08003084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a39      	ldr	r2, [pc, #228]	@ (8003178 <HAL_TIM_Base_MspInit+0xf4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10c      	bne.n	80030b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003096:	4b39      	ldr	r3, [pc, #228]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	4a38      	ldr	r2, [pc, #224]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030a2:	4b36      	ldr	r3, [pc, #216]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80030ae:	e05e      	b.n	800316e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a32      	ldr	r2, [pc, #200]	@ (8003180 <HAL_TIM_Base_MspInit+0xfc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d114      	bne.n	80030e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ba:	4b30      	ldr	r3, [pc, #192]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	4a2f      	ldr	r2, [pc, #188]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c6:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2100      	movs	r1, #0
 80030d6:	201e      	movs	r0, #30
 80030d8:	f000 fb89 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030dc:	201e      	movs	r0, #30
 80030de:	f000 fba0 	bl	8003822 <HAL_NVIC_EnableIRQ>
}
 80030e2:	e044      	b.n	800316e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a26      	ldr	r2, [pc, #152]	@ (8003184 <HAL_TIM_Base_MspInit+0x100>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d114      	bne.n	8003118 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030ee:	4b23      	ldr	r3, [pc, #140]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	4a22      	ldr	r2, [pc, #136]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 80030f4:	f043 0308 	orr.w	r3, r3, #8
 80030f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030fa:	4b20      	ldr	r3, [pc, #128]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2100      	movs	r1, #0
 800310a:	2032      	movs	r0, #50	@ 0x32
 800310c:	f000 fb6f 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003110:	2032      	movs	r0, #50	@ 0x32
 8003112:	f000 fb86 	bl	8003822 <HAL_NVIC_EnableIRQ>
}
 8003116:	e02a      	b.n	800316e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1a      	ldr	r2, [pc, #104]	@ (8003188 <HAL_TIM_Base_MspInit+0x104>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10c      	bne.n	800313c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003122:	4b16      	ldr	r3, [pc, #88]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	4a15      	ldr	r2, [pc, #84]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 8003128:	f043 0310 	orr.w	r3, r3, #16
 800312c:	6593      	str	r3, [r2, #88]	@ 0x58
 800312e:	4b13      	ldr	r3, [pc, #76]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
}
 800313a:	e018      	b.n	800316e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a12      	ldr	r2, [pc, #72]	@ (800318c <HAL_TIM_Base_MspInit+0x108>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d113      	bne.n	800316e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003146:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 8003148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314a:	4a0c      	ldr	r2, [pc, #48]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 800314c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003150:	6613      	str	r3, [r2, #96]	@ 0x60
 8003152:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <HAL_TIM_Base_MspInit+0xf8>)
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2100      	movs	r1, #0
 8003162:	2019      	movs	r0, #25
 8003164:	f000 fb43 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003168:	2019      	movs	r0, #25
 800316a:	f000 fb5a 	bl	8003822 <HAL_NVIC_EnableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40000400 	.word	0x40000400
 800317c:	40021000 	.word	0x40021000
 8003180:	40000800 	.word	0x40000800
 8003184:	40000c00 	.word	0x40000c00
 8003188:	40001000 	.word	0x40001000
 800318c:	40014400 	.word	0x40014400

08003190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a11      	ldr	r2, [pc, #68]	@ (80031f4 <HAL_TIM_MspPostInit+0x64>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d11b      	bne.n	80031ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_TIM_MspPostInit+0x68>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	4a10      	ldr	r2, [pc, #64]	@ (80031f8 <HAL_TIM_MspPostInit+0x68>)
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031be:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <HAL_TIM_MspPostInit+0x68>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031ca:	2330      	movs	r3, #48	@ 0x30
 80031cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031da:	2302      	movs	r3, #2
 80031dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	4619      	mov	r1, r3
 80031e4:	4805      	ldr	r0, [pc, #20]	@ (80031fc <HAL_TIM_MspPostInit+0x6c>)
 80031e6:	f000 fe69 	bl	8003ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031ea:	bf00      	nop
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40021000 	.word	0x40021000
 80031fc:	48000400 	.word	0x48000400

08003200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b0a0      	sub	sp, #128	@ 0x80
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003218:	f107 0318 	add.w	r3, r7, #24
 800321c:	2254      	movs	r2, #84	@ 0x54
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f006 f8a1 	bl	8009368 <memset>
  if(huart->Instance==UART4)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6b      	ldr	r2, [pc, #428]	@ (80033d8 <HAL_UART_MspInit+0x1d8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d137      	bne.n	80032a0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003230:	2308      	movs	r3, #8
 8003232:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003234:	2300      	movs	r3, #0
 8003236:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003238:	f107 0318 	add.w	r3, r7, #24
 800323c:	4618      	mov	r0, r3
 800323e:	f001 fddd 	bl	8004dfc <HAL_RCCEx_PeriphCLKConfig>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003248:	f7ff feb2 	bl	8002fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800324c:	4b63      	ldr	r3, [pc, #396]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	4a62      	ldr	r2, [pc, #392]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 8003252:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003256:	6593      	str	r3, [r2, #88]	@ 0x58
 8003258:	4b60      	ldr	r3, [pc, #384]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003264:	4b5d      	ldr	r3, [pc, #372]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 8003266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003268:	4a5c      	ldr	r2, [pc, #368]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003270:	4b5a      	ldr	r3, [pc, #360]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800327c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003280:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800328e:	2305      	movs	r3, #5
 8003290:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003292:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003296:	4619      	mov	r1, r3
 8003298:	4851      	ldr	r0, [pc, #324]	@ (80033e0 <HAL_UART_MspInit+0x1e0>)
 800329a:	f000 fe0f 	bl	8003ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800329e:	e097      	b.n	80033d0 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a4f      	ldr	r2, [pc, #316]	@ (80033e4 <HAL_UART_MspInit+0x1e4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	f040 8092 	bne.w	80033d0 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032ac:	2302      	movs	r3, #2
 80032ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032b0:	2300      	movs	r3, #0
 80032b2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032b4:	f107 0318 	add.w	r3, r7, #24
 80032b8:	4618      	mov	r0, r3
 80032ba:	f001 fd9f 	bl	8004dfc <HAL_RCCEx_PeriphCLKConfig>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80032c4:	f7ff fe74 	bl	8002fb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c8:	4b44      	ldr	r3, [pc, #272]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	4a43      	ldr	r2, [pc, #268]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 80032ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d4:	4b41      	ldr	r3, [pc, #260]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e0:	4b3e      	ldr	r3, [pc, #248]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 80032e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e4:	4a3d      	ldr	r2, [pc, #244]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ec:	4b3b      	ldr	r3, [pc, #236]	@ (80033dc <HAL_UART_MspInit+0x1dc>)
 80032ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032f8:	230c      	movs	r3, #12
 80032fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003308:	2307      	movs	r3, #7
 800330a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003310:	4619      	mov	r1, r3
 8003312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003316:	f000 fdd1 	bl	8003ebc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800331a:	4b33      	ldr	r3, [pc, #204]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 800331c:	4a33      	ldr	r2, [pc, #204]	@ (80033ec <HAL_UART_MspInit+0x1ec>)
 800331e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003320:	4b31      	ldr	r3, [pc, #196]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 8003322:	221b      	movs	r2, #27
 8003324:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003326:	4b30      	ldr	r3, [pc, #192]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 8003328:	2210      	movs	r2, #16
 800332a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800332c:	4b2e      	ldr	r3, [pc, #184]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003332:	4b2d      	ldr	r3, [pc, #180]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 8003334:	2280      	movs	r2, #128	@ 0x80
 8003336:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003338:	4b2b      	ldr	r3, [pc, #172]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 800333a:	2200      	movs	r2, #0
 800333c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800333e:	4b2a      	ldr	r3, [pc, #168]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003344:	4b28      	ldr	r3, [pc, #160]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 8003346:	2200      	movs	r2, #0
 8003348:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800334a:	4b27      	ldr	r3, [pc, #156]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 800334c:	2200      	movs	r2, #0
 800334e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003350:	4825      	ldr	r0, [pc, #148]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 8003352:	f000 fa81 	bl	8003858 <HAL_DMA_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_UART_MspInit+0x160>
      Error_Handler();
 800335c:	f7ff fe28 	bl	8002fb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a21      	ldr	r2, [pc, #132]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 8003364:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003366:	4a20      	ldr	r2, [pc, #128]	@ (80033e8 <HAL_UART_MspInit+0x1e8>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800336c:	4b20      	ldr	r3, [pc, #128]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 800336e:	4a21      	ldr	r2, [pc, #132]	@ (80033f4 <HAL_UART_MspInit+0x1f4>)
 8003370:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003372:	4b1f      	ldr	r3, [pc, #124]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 8003374:	221a      	movs	r2, #26
 8003376:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003378:	4b1d      	ldr	r3, [pc, #116]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800337e:	4b1c      	ldr	r3, [pc, #112]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 8003380:	2200      	movs	r2, #0
 8003382:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003384:	4b1a      	ldr	r3, [pc, #104]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 8003386:	2280      	movs	r2, #128	@ 0x80
 8003388:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800338a:	4b19      	ldr	r3, [pc, #100]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 800338c:	2200      	movs	r2, #0
 800338e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003390:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 8003392:	2200      	movs	r2, #0
 8003394:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003396:	4b16      	ldr	r3, [pc, #88]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 8003398:	2200      	movs	r2, #0
 800339a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800339c:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 800339e:	2200      	movs	r2, #0
 80033a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80033a2:	4813      	ldr	r0, [pc, #76]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 80033a4:	f000 fa58 	bl	8003858 <HAL_DMA_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 80033ae:	f7ff fdff 	bl	8002fb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a0e      	ldr	r2, [pc, #56]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 80033b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80033ba:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_UART_MspInit+0x1f0>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033c0:	2200      	movs	r2, #0
 80033c2:	2100      	movs	r1, #0
 80033c4:	2026      	movs	r0, #38	@ 0x26
 80033c6:	f000 fa12 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033ca:	2026      	movs	r0, #38	@ 0x26
 80033cc:	f000 fa29 	bl	8003822 <HAL_NVIC_EnableIRQ>
}
 80033d0:	bf00      	nop
 80033d2:	3780      	adds	r7, #128	@ 0x80
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40004c00 	.word	0x40004c00
 80033dc:	40021000 	.word	0x40021000
 80033e0:	48000800 	.word	0x48000800
 80033e4:	40004400 	.word	0x40004400
 80033e8:	200008cc 	.word	0x200008cc
 80033ec:	40020008 	.word	0x40020008
 80033f0:	2000092c 	.word	0x2000092c
 80033f4:	4002001c 	.word	0x4002001c

080033f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <NMI_Handler+0x4>

08003400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <HardFault_Handler+0x4>

08003408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <MemManage_Handler+0x4>

08003410 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <BusFault_Handler+0x4>

08003418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <UsageFault_Handler+0x4>

08003420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800344e:	f000 f8d5 	bl	80035fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800345c:	4802      	ldr	r0, [pc, #8]	@ (8003468 <DMA1_Channel1_IRQHandler+0x10>)
 800345e:	f000 fbde 	bl	8003c1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200008cc 	.word	0x200008cc

0800346c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003470:	4802      	ldr	r0, [pc, #8]	@ (800347c <DMA1_Channel2_IRQHandler+0x10>)
 8003472:	f000 fbd4 	bl	8003c1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	2000092c 	.word	0x2000092c

08003480 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003484:	4802      	ldr	r0, [pc, #8]	@ (8003490 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003486:	f002 fc59 	bl	8005d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000668 	.word	0x20000668

08003494 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003498:	4802      	ldr	r0, [pc, #8]	@ (80034a4 <TIM4_IRQHandler+0x10>)
 800349a:	f002 fc4f 	bl	8005d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000404 	.word	0x20000404

080034a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034ac:	4802      	ldr	r0, [pc, #8]	@ (80034b8 <USART2_IRQHandler+0x10>)
 80034ae:	f004 fa4d 	bl	800794c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000800 	.word	0x20000800

080034bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80034c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80034c4:	f000 fe94 	bl	80041f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}

080034cc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80034d0:	4802      	ldr	r0, [pc, #8]	@ (80034dc <TIM5_IRQHandler+0x10>)
 80034d2:	f002 fc33 	bl	8005d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200004d0 	.word	0x200004d0

080034e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034e4:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <SystemInit+0x20>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ea:	4a05      	ldr	r2, [pc, #20]	@ (8003500 <SystemInit+0x20>)
 80034ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003504:	480d      	ldr	r0, [pc, #52]	@ (800353c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003506:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003508:	f7ff ffea 	bl	80034e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800350c:	480c      	ldr	r0, [pc, #48]	@ (8003540 <LoopForever+0x6>)
  ldr r1, =_edata
 800350e:	490d      	ldr	r1, [pc, #52]	@ (8003544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003510:	4a0d      	ldr	r2, [pc, #52]	@ (8003548 <LoopForever+0xe>)
  movs r3, #0
 8003512:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003514:	e002      	b.n	800351c <LoopCopyDataInit>

08003516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800351a:	3304      	adds	r3, #4

0800351c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800351c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800351e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003520:	d3f9      	bcc.n	8003516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003522:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003524:	4c0a      	ldr	r4, [pc, #40]	@ (8003550 <LoopForever+0x16>)
  movs r3, #0
 8003526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003528:	e001      	b.n	800352e <LoopFillZerobss>

0800352a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800352a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800352c:	3204      	adds	r2, #4

0800352e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800352e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003530:	d3fb      	bcc.n	800352a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003532:	f005 ff21 	bl	8009378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003536:	f7fe fffd 	bl	8002534 <main>

0800353a <LoopForever>:

LoopForever:
    b LoopForever
 800353a:	e7fe      	b.n	800353a <LoopForever>
  ldr   r0, =_estack
 800353c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003544:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8003548:	0800945c 	.word	0x0800945c
  ldr r2, =_sbss
 800354c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003550:	20001174 	.word	0x20001174

08003554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003554:	e7fe      	b.n	8003554 <ADC1_2_IRQHandler>

08003556 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003560:	2003      	movs	r0, #3
 8003562:	f000 f939 	bl	80037d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003566:	2000      	movs	r0, #0
 8003568:	f000 f80e 	bl	8003588 <HAL_InitTick>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	71fb      	strb	r3, [r7, #7]
 8003576:	e001      	b.n	800357c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003578:	f7ff fd20 	bl	8002fbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800357c:	79fb      	ldrb	r3, [r7, #7]

}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003594:	4b16      	ldr	r3, [pc, #88]	@ (80035f0 <HAL_InitTick+0x68>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d022      	beq.n	80035e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800359c:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <HAL_InitTick+0x6c>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <HAL_InitTick+0x68>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80035a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f944 	bl	800383e <HAL_SYSTICK_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10f      	bne.n	80035dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	d809      	bhi.n	80035d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c2:	2200      	movs	r2, #0
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ca:	f000 f910 	bl	80037ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035ce:	4a0a      	ldr	r2, [pc, #40]	@ (80035f8 <HAL_InitTick+0x70>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	e007      	b.n	80035e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	e004      	b.n	80035e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e001      	b.n	80035e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000238 	.word	0x20000238
 80035f4:	20000230 	.word	0x20000230
 80035f8:	20000234 	.word	0x20000234

080035fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_IncTick+0x1c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <HAL_IncTick+0x20>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4413      	add	r3, r2
 800360a:	4a03      	ldr	r2, [pc, #12]	@ (8003618 <HAL_IncTick+0x1c>)
 800360c:	6013      	str	r3, [r2, #0]
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	20001170 	.word	0x20001170
 800361c:	20000238 	.word	0x20000238

08003620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return uwTick;
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <HAL_GetTick+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20001170 	.word	0x20001170

08003638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003648:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003654:	4013      	ands	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003660:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366a:	4a04      	ldr	r2, [pc, #16]	@ (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	60d3      	str	r3, [r2, #12]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003684:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <__NVIC_GetPriorityGrouping+0x18>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	f003 0307 	and.w	r3, r3, #7
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	db0b      	blt.n	80036c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	f003 021f 	and.w	r2, r3, #31
 80036b4:	4907      	ldr	r1, [pc, #28]	@ (80036d4 <__NVIC_EnableIRQ+0x38>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2001      	movs	r0, #1
 80036be:	fa00 f202 	lsl.w	r2, r0, r2
 80036c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db0a      	blt.n	8003702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	490c      	ldr	r1, [pc, #48]	@ (8003724 <__NVIC_SetPriority+0x4c>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	440b      	add	r3, r1
 80036fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003700:	e00a      	b.n	8003718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4908      	ldr	r1, [pc, #32]	@ (8003728 <__NVIC_SetPriority+0x50>)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3b04      	subs	r3, #4
 8003710:	0112      	lsls	r2, r2, #4
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	440b      	add	r3, r1
 8003716:	761a      	strb	r2, [r3, #24]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000e100 	.word	0xe000e100
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	@ 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f1c3 0307 	rsb	r3, r3, #7
 8003746:	2b04      	cmp	r3, #4
 8003748:	bf28      	it	cs
 800374a:	2304      	movcs	r3, #4
 800374c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3304      	adds	r3, #4
 8003752:	2b06      	cmp	r3, #6
 8003754:	d902      	bls.n	800375c <NVIC_EncodePriority+0x30>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3b03      	subs	r3, #3
 800375a:	e000      	b.n	800375e <NVIC_EncodePriority+0x32>
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43da      	mvns	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	401a      	ands	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003774:	f04f 31ff 	mov.w	r1, #4294967295
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	43d9      	mvns	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	4313      	orrs	r3, r2
         );
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	@ 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a4:	d301      	bcc.n	80037aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00f      	b.n	80037ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037aa:	4a0a      	ldr	r2, [pc, #40]	@ (80037d4 <SysTick_Config+0x40>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b2:	210f      	movs	r1, #15
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295
 80037b8:	f7ff ff8e 	bl	80036d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <SysTick_Config+0x40>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c2:	4b04      	ldr	r3, [pc, #16]	@ (80037d4 <SysTick_Config+0x40>)
 80037c4:	2207      	movs	r2, #7
 80037c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	e000e010 	.word	0xe000e010

080037d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff29 	bl	8003638 <__NVIC_SetPriorityGrouping>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4603      	mov	r3, r0
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037fc:	f7ff ff40 	bl	8003680 <__NVIC_GetPriorityGrouping>
 8003800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7ff ff90 	bl	800372c <NVIC_EncodePriority>
 800380c:	4602      	mov	r2, r0
 800380e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff5f 	bl	80036d8 <__NVIC_SetPriority>
}
 800381a:	bf00      	nop
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff33 	bl	800369c <__NVIC_EnableIRQ>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ffa4 	bl	8003794 <SysTick_Config>
 800384c:	4603      	mov	r3, r0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e08d      	b.n	8003986 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <HAL_DMA_Init+0x138>)
 8003872:	429a      	cmp	r2, r3
 8003874:	d80f      	bhi.n	8003896 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	4b45      	ldr	r3, [pc, #276]	@ (8003994 <HAL_DMA_Init+0x13c>)
 800387e:	4413      	add	r3, r2
 8003880:	4a45      	ldr	r2, [pc, #276]	@ (8003998 <HAL_DMA_Init+0x140>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	009a      	lsls	r2, r3, #2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a42      	ldr	r2, [pc, #264]	@ (800399c <HAL_DMA_Init+0x144>)
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40
 8003894:	e00e      	b.n	80038b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	4b40      	ldr	r3, [pc, #256]	@ (80039a0 <HAL_DMA_Init+0x148>)
 800389e:	4413      	add	r3, r2
 80038a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003998 <HAL_DMA_Init+0x140>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	009a      	lsls	r2, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a3c      	ldr	r2, [pc, #240]	@ (80039a4 <HAL_DMA_Init+0x14c>)
 80038b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80038ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa76 	bl	8003df8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003914:	d102      	bne.n	800391c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003930:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d010      	beq.n	800395c <HAL_DMA_Init+0x104>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b04      	cmp	r3, #4
 8003940:	d80c      	bhi.n	800395c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fa96 	bl	8003e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	e008      	b.n	800396e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40020407 	.word	0x40020407
 8003994:	bffdfff8 	.word	0xbffdfff8
 8003998:	cccccccd 	.word	0xcccccccd
 800399c:	40020000 	.word	0x40020000
 80039a0:	bffdfbf8 	.word	0xbffdfbf8
 80039a4:	40020400 	.word	0x40020400

080039a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_DMA_Start_IT+0x20>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e066      	b.n	8003a96 <HAL_DMA_Start_IT+0xee>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d155      	bne.n	8003a88 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f9bb 	bl	8003d7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 020e 	orr.w	r2, r2, #14
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e00f      	b.n	8003a40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0204 	bic.w	r2, r2, #4
 8003a2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 020a 	orr.w	r2, r2, #10
 8003a3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a5c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a74:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e005      	b.n	8003a94 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
 8003a92:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d005      	beq.n	8003ac2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2204      	movs	r2, #4
 8003aba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e037      	b.n	8003b32 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 020e 	bic.w	r2, r2, #14
 8003ad0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ae0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f003 021f 	and.w	r2, r3, #31
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b0e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00c      	beq.n	8003b32 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b26:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b30:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d00d      	beq.n	8003b84 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
 8003b82:	e047      	b.n	8003c14 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 020e 	bic.w	r2, r2, #14
 8003b92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb8:	f003 021f 	and.w	r2, r3, #31
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bd0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003be8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003bf2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
    }
  }
  return status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	2204      	movs	r2, #4
 8003c40:	409a      	lsls	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d026      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x7a>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d021      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0204 	bic.w	r2, r2, #4
 8003c70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	f003 021f 	and.w	r2, r3, #31
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	2104      	movs	r1, #4
 8003c80:	fa01 f202 	lsl.w	r2, r1, r2
 8003c84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d071      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c96:	e06c      	b.n	8003d72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d02e      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d029      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 020a 	bic.w	r2, r2, #10
 8003cd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	2102      	movs	r1, #2
 8003cea:	fa01 f202 	lsl.w	r2, r1, r2
 8003cee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d038      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d08:	e033      	b.n	8003d72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	2208      	movs	r2, #8
 8003d14:	409a      	lsls	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02a      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d025      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 020e 	bic.w	r2, r2, #14
 8003d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
}
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003da4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003daa:	f003 021f 	and.w	r2, r3, #31
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	2101      	movs	r1, #1
 8003db4:	fa01 f202 	lsl.w	r2, r1, r2
 8003db8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d108      	bne.n	8003ddc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dda:	e007      	b.n	8003dec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b16      	ldr	r3, [pc, #88]	@ (8003e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d802      	bhi.n	8003e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e0c:	4b15      	ldr	r3, [pc, #84]	@ (8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e001      	b.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003e12:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e14:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3b08      	subs	r3, #8
 8003e22:	4a12      	ldr	r2, [pc, #72]	@ (8003e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	009a      	lsls	r2, r3, #2
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a0b      	ldr	r2, [pc, #44]	@ (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40020407 	.word	0x40020407
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020820 	.word	0x40020820
 8003e6c:	cccccccd 	.word	0xcccccccd
 8003e70:	40020880 	.word	0x40020880

08003e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a08      	ldr	r2, [pc, #32]	@ (8003eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e96:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	1000823f 	.word	0x1000823f
 8003eb8:	40020940 	.word	0x40020940

08003ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eca:	e15a      	b.n	8004182 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 814c 	beq.w	800417c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d005      	beq.n	8003efc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d130      	bne.n	8003f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	2203      	movs	r2, #3
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f32:	2201      	movs	r2, #1
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	f003 0201 	and.w	r2, r3, #1
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d017      	beq.n	8003f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	2203      	movs	r2, #3
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d123      	bne.n	8003fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	08da      	lsrs	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3208      	adds	r2, #8
 8003fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	220f      	movs	r2, #15
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	08da      	lsrs	r2, r3, #3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3208      	adds	r2, #8
 8003fe8:	6939      	ldr	r1, [r7, #16]
 8003fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 0203 	and.w	r2, r3, #3
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80a6 	beq.w	800417c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004030:	4b5b      	ldr	r3, [pc, #364]	@ (80041a0 <HAL_GPIO_Init+0x2e4>)
 8004032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004034:	4a5a      	ldr	r2, [pc, #360]	@ (80041a0 <HAL_GPIO_Init+0x2e4>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6613      	str	r3, [r2, #96]	@ 0x60
 800403c:	4b58      	ldr	r3, [pc, #352]	@ (80041a0 <HAL_GPIO_Init+0x2e4>)
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004048:	4a56      	ldr	r2, [pc, #344]	@ (80041a4 <HAL_GPIO_Init+0x2e8>)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	220f      	movs	r2, #15
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4013      	ands	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004072:	d01f      	beq.n	80040b4 <HAL_GPIO_Init+0x1f8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a4c      	ldr	r2, [pc, #304]	@ (80041a8 <HAL_GPIO_Init+0x2ec>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d019      	beq.n	80040b0 <HAL_GPIO_Init+0x1f4>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a4b      	ldr	r2, [pc, #300]	@ (80041ac <HAL_GPIO_Init+0x2f0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d013      	beq.n	80040ac <HAL_GPIO_Init+0x1f0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a4a      	ldr	r2, [pc, #296]	@ (80041b0 <HAL_GPIO_Init+0x2f4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00d      	beq.n	80040a8 <HAL_GPIO_Init+0x1ec>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a49      	ldr	r2, [pc, #292]	@ (80041b4 <HAL_GPIO_Init+0x2f8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <HAL_GPIO_Init+0x1e8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a48      	ldr	r2, [pc, #288]	@ (80041b8 <HAL_GPIO_Init+0x2fc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_GPIO_Init+0x1e4>
 800409c:	2305      	movs	r3, #5
 800409e:	e00a      	b.n	80040b6 <HAL_GPIO_Init+0x1fa>
 80040a0:	2306      	movs	r3, #6
 80040a2:	e008      	b.n	80040b6 <HAL_GPIO_Init+0x1fa>
 80040a4:	2304      	movs	r3, #4
 80040a6:	e006      	b.n	80040b6 <HAL_GPIO_Init+0x1fa>
 80040a8:	2303      	movs	r3, #3
 80040aa:	e004      	b.n	80040b6 <HAL_GPIO_Init+0x1fa>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e002      	b.n	80040b6 <HAL_GPIO_Init+0x1fa>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_GPIO_Init+0x1fa>
 80040b4:	2300      	movs	r3, #0
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	f002 0203 	and.w	r2, r2, #3
 80040bc:	0092      	lsls	r2, r2, #2
 80040be:	4093      	lsls	r3, r2
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c6:	4937      	ldr	r1, [pc, #220]	@ (80041a4 <HAL_GPIO_Init+0x2e8>)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	089b      	lsrs	r3, r3, #2
 80040cc:	3302      	adds	r3, #2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040d4:	4b39      	ldr	r3, [pc, #228]	@ (80041bc <HAL_GPIO_Init+0x300>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	43db      	mvns	r3, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040f8:	4a30      	ldr	r2, [pc, #192]	@ (80041bc <HAL_GPIO_Init+0x300>)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040fe:	4b2f      	ldr	r3, [pc, #188]	@ (80041bc <HAL_GPIO_Init+0x300>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	43db      	mvns	r3, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004122:	4a26      	ldr	r2, [pc, #152]	@ (80041bc <HAL_GPIO_Init+0x300>)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004128:	4b24      	ldr	r3, [pc, #144]	@ (80041bc <HAL_GPIO_Init+0x300>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	43db      	mvns	r3, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800414c:	4a1b      	ldr	r2, [pc, #108]	@ (80041bc <HAL_GPIO_Init+0x300>)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004152:	4b1a      	ldr	r3, [pc, #104]	@ (80041bc <HAL_GPIO_Init+0x300>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	43db      	mvns	r3, r3
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4013      	ands	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004176:	4a11      	ldr	r2, [pc, #68]	@ (80041bc <HAL_GPIO_Init+0x300>)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3301      	adds	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	f47f ae9d 	bne.w	8003ecc <HAL_GPIO_Init+0x10>
  }
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40010000 	.word	0x40010000
 80041a8:	48000400 	.word	0x48000400
 80041ac:	48000800 	.word	0x48000800
 80041b0:	48000c00 	.word	0x48000c00
 80041b4:	48001000 	.word	0x48001000
 80041b8:	48001400 	.word	0x48001400
 80041bc:	40010400 	.word	0x40010400

080041c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
 80041cc:	4613      	mov	r3, r2
 80041ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041d0:	787b      	ldrb	r3, [r7, #1]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041dc:	e002      	b.n	80041e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041fa:	4b08      	ldr	r3, [pc, #32]	@ (800421c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d006      	beq.n	8004214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004206:	4a05      	ldr	r2, [pc, #20]	@ (800421c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f806 	bl	8004220 <HAL_GPIO_EXTI_Callback>
  }
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40010400 	.word	0x40010400

08004220 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d141      	bne.n	80042ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004246:	4b4b      	ldr	r3, [pc, #300]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004252:	d131      	bne.n	80042b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004254:	4b47      	ldr	r3, [pc, #284]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800425a:	4a46      	ldr	r2, [pc, #280]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004264:	4b43      	ldr	r3, [pc, #268]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800426c:	4a41      	ldr	r2, [pc, #260]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004274:	4b40      	ldr	r3, [pc, #256]	@ (8004378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2232      	movs	r2, #50	@ 0x32
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	4a3f      	ldr	r2, [pc, #252]	@ (800437c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	0c9b      	lsrs	r3, r3, #18
 8004286:	3301      	adds	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800428a:	e002      	b.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3b01      	subs	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004292:	4b38      	ldr	r3, [pc, #224]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429e:	d102      	bne.n	80042a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f2      	bne.n	800428c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042a6:	4b33      	ldr	r3, [pc, #204]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b2:	d158      	bne.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e057      	b.n	8004368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042be:	4a2d      	ldr	r2, [pc, #180]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042c8:	e04d      	b.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d0:	d141      	bne.n	8004356 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042d2:	4b28      	ldr	r3, [pc, #160]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042de:	d131      	bne.n	8004344 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042e0:	4b24      	ldr	r3, [pc, #144]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e6:	4a23      	ldr	r2, [pc, #140]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042f0:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004300:	4b1d      	ldr	r3, [pc, #116]	@ (8004378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2232      	movs	r2, #50	@ 0x32
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	0c9b      	lsrs	r3, r3, #18
 8004312:	3301      	adds	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004316:	e002      	b.n	800431e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800431e:	4b15      	ldr	r3, [pc, #84]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432a:	d102      	bne.n	8004332 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f2      	bne.n	8004318 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433e:	d112      	bne.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e011      	b.n	8004368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800434a:	4a0a      	ldr	r2, [pc, #40]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004354:	e007      	b.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004356:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800435e:	4a05      	ldr	r2, [pc, #20]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004364:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40007000 	.word	0x40007000
 8004378:	20000230 	.word	0x20000230
 800437c:	431bde83 	.word	0x431bde83

08004380 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004384:	4b05      	ldr	r3, [pc, #20]	@ (800439c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4a04      	ldr	r2, [pc, #16]	@ (800439c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800438a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800438e:	6093      	str	r3, [r2, #8]
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40007000 	.word	0x40007000

080043a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e2fe      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d075      	beq.n	80044aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043be:	4b97      	ldr	r3, [pc, #604]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043c8:	4b94      	ldr	r3, [pc, #592]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d102      	bne.n	80043de <HAL_RCC_OscConfig+0x3e>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d002      	beq.n	80043e4 <HAL_RCC_OscConfig+0x44>
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d10b      	bne.n	80043fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	4b8d      	ldr	r3, [pc, #564]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d05b      	beq.n	80044a8 <HAL_RCC_OscConfig+0x108>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d157      	bne.n	80044a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e2d9      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004404:	d106      	bne.n	8004414 <HAL_RCC_OscConfig+0x74>
 8004406:	4b85      	ldr	r3, [pc, #532]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a84      	ldr	r2, [pc, #528]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e01d      	b.n	8004450 <HAL_RCC_OscConfig+0xb0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x98>
 800441e:	4b7f      	ldr	r3, [pc, #508]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a7e      	ldr	r2, [pc, #504]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b7c      	ldr	r3, [pc, #496]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a7b      	ldr	r2, [pc, #492]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0xb0>
 8004438:	4b78      	ldr	r3, [pc, #480]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a77      	ldr	r2, [pc, #476]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 800443e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b75      	ldr	r3, [pc, #468]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a74      	ldr	r2, [pc, #464]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 800444a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800444e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7ff f8e2 	bl	8003620 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7ff f8de 	bl	8003620 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	@ 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e29e      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004472:	4b6a      	ldr	r3, [pc, #424]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0xc0>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7ff f8ce 	bl	8003620 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7ff f8ca 	bl	8003620 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	@ 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e28a      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800449a:	4b60      	ldr	r3, [pc, #384]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0xe8>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d075      	beq.n	80045a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b6:	4b59      	ldr	r3, [pc, #356]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044c0:	4b56      	ldr	r3, [pc, #344]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	d102      	bne.n	80044d6 <HAL_RCC_OscConfig+0x136>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d002      	beq.n	80044dc <HAL_RCC_OscConfig+0x13c>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d11f      	bne.n	800451c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044dc:	4b4f      	ldr	r3, [pc, #316]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_OscConfig+0x154>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e25d      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b49      	ldr	r3, [pc, #292]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	4946      	ldr	r1, [pc, #280]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004508:	4b45      	ldr	r3, [pc, #276]	@ (8004620 <HAL_RCC_OscConfig+0x280>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff f83b 	bl	8003588 <HAL_InitTick>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d043      	beq.n	80045a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e249      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d023      	beq.n	800456c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004524:	4b3d      	ldr	r3, [pc, #244]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a3c      	ldr	r2, [pc, #240]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 800452a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7ff f876 	bl	8003620 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004538:	f7ff f872 	bl	8003620 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e232      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800454a:	4b34      	ldr	r3, [pc, #208]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004556:	4b31      	ldr	r3, [pc, #196]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	061b      	lsls	r3, r3, #24
 8004564:	492d      	ldr	r1, [pc, #180]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
 800456a:	e01a      	b.n	80045a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456c:	4b2b      	ldr	r3, [pc, #172]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2a      	ldr	r2, [pc, #168]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004572:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7ff f852 	bl	8003620 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004580:	f7ff f84e 	bl	8003620 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e20e      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004592:	4b22      	ldr	r3, [pc, #136]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x1e0>
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d041      	beq.n	8004632 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01c      	beq.n	80045f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b6:	4b19      	ldr	r3, [pc, #100]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80045b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045bc:	4a17      	ldr	r2, [pc, #92]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c6:	f7ff f82b 	bl	8003620 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ce:	f7ff f827 	bl	8003620 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e1e7      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045e0:	4b0e      	ldr	r3, [pc, #56]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80045e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0ef      	beq.n	80045ce <HAL_RCC_OscConfig+0x22e>
 80045ee:	e020      	b.n	8004632 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f0:	4b0a      	ldr	r3, [pc, #40]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f6:	4a09      	ldr	r2, [pc, #36]	@ (800461c <HAL_RCC_OscConfig+0x27c>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004600:	f7ff f80e 	bl	8003620 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004606:	e00d      	b.n	8004624 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004608:	f7ff f80a 	bl	8003620 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d906      	bls.n	8004624 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e1ca      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000
 8004620:	20000234 	.word	0x20000234
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004624:	4b8c      	ldr	r3, [pc, #560]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ea      	bne.n	8004608 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 80a6 	beq.w	800478c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004640:	2300      	movs	r3, #0
 8004642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004644:	4b84      	ldr	r3, [pc, #528]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_OscConfig+0x2b4>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x2b6>
 8004654:	2300      	movs	r3, #0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00d      	beq.n	8004676 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	4b7f      	ldr	r3, [pc, #508]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 800465c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465e:	4a7e      	ldr	r2, [pc, #504]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004664:	6593      	str	r3, [r2, #88]	@ 0x58
 8004666:	4b7c      	ldr	r3, [pc, #496]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004672:	2301      	movs	r3, #1
 8004674:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004676:	4b79      	ldr	r3, [pc, #484]	@ (800485c <HAL_RCC_OscConfig+0x4bc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d118      	bne.n	80046b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004682:	4b76      	ldr	r3, [pc, #472]	@ (800485c <HAL_RCC_OscConfig+0x4bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a75      	ldr	r2, [pc, #468]	@ (800485c <HAL_RCC_OscConfig+0x4bc>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468e:	f7fe ffc7 	bl	8003620 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004696:	f7fe ffc3 	bl	8003620 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e183      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a8:	4b6c      	ldr	r3, [pc, #432]	@ (800485c <HAL_RCC_OscConfig+0x4bc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d108      	bne.n	80046ce <HAL_RCC_OscConfig+0x32e>
 80046bc:	4b66      	ldr	r3, [pc, #408]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	4a65      	ldr	r2, [pc, #404]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046cc:	e024      	b.n	8004718 <HAL_RCC_OscConfig+0x378>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d110      	bne.n	80046f8 <HAL_RCC_OscConfig+0x358>
 80046d6:	4b60      	ldr	r3, [pc, #384]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046f6:	e00f      	b.n	8004718 <HAL_RCC_OscConfig+0x378>
 80046f8:	4b57      	ldr	r3, [pc, #348]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fe:	4a56      	ldr	r2, [pc, #344]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004708:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470e:	4a52      	ldr	r2, [pc, #328]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d016      	beq.n	800474e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fe ff7e 	bl	8003620 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004726:	e00a      	b.n	800473e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004728:	f7fe ff7a 	bl	8003620 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e138      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800473e:	4b46      	ldr	r3, [pc, #280]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ed      	beq.n	8004728 <HAL_RCC_OscConfig+0x388>
 800474c:	e015      	b.n	800477a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fe ff67 	bl	8003620 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fe ff63 	bl	8003620 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e121      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800476c:	4b3a      	ldr	r3, [pc, #232]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ed      	bne.n	8004756 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800477a:	7ffb      	ldrb	r3, [r7, #31]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d105      	bne.n	800478c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004780:	4b35      	ldr	r3, [pc, #212]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004784:	4a34      	ldr	r2, [pc, #208]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800478a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d03c      	beq.n	8004812 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d01c      	beq.n	80047da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80047a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fe ff36 	bl	8003620 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047b8:	f7fe ff32 	bl	8003620 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e0f2      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047ca:	4b23      	ldr	r3, [pc, #140]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80047cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ef      	beq.n	80047b8 <HAL_RCC_OscConfig+0x418>
 80047d8:	e01b      	b.n	8004812 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047da:	4b1f      	ldr	r3, [pc, #124]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 80047e2:	f023 0301 	bic.w	r3, r3, #1
 80047e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ea:	f7fe ff19 	bl	8003620 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047f2:	f7fe ff15 	bl	8003620 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e0d5      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004804:	4b14      	ldr	r3, [pc, #80]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1ef      	bne.n	80047f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80c9 	beq.w	80049ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800481c:	4b0e      	ldr	r3, [pc, #56]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	2b0c      	cmp	r3, #12
 8004826:	f000 8083 	beq.w	8004930 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d15e      	bne.n	80048f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004832:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a08      	ldr	r2, [pc, #32]	@ (8004858 <HAL_RCC_OscConfig+0x4b8>)
 8004838:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800483c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483e:	f7fe feef 	bl	8003620 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004844:	e00c      	b.n	8004860 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004846:	f7fe feeb 	bl	8003620 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d905      	bls.n	8004860 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e0ab      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004860:	4b55      	ldr	r3, [pc, #340]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ec      	bne.n	8004846 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800486c:	4b52      	ldr	r3, [pc, #328]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	4b52      	ldr	r3, [pc, #328]	@ (80049bc <HAL_RCC_OscConfig+0x61c>)
 8004872:	4013      	ands	r3, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6a11      	ldr	r1, [r2, #32]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800487c:	3a01      	subs	r2, #1
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	4311      	orrs	r1, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004886:	0212      	lsls	r2, r2, #8
 8004888:	4311      	orrs	r1, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800488e:	0852      	lsrs	r2, r2, #1
 8004890:	3a01      	subs	r2, #1
 8004892:	0552      	lsls	r2, r2, #21
 8004894:	4311      	orrs	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800489a:	0852      	lsrs	r2, r2, #1
 800489c:	3a01      	subs	r2, #1
 800489e:	0652      	lsls	r2, r2, #25
 80048a0:	4311      	orrs	r1, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80048a6:	06d2      	lsls	r2, r2, #27
 80048a8:	430a      	orrs	r2, r1
 80048aa:	4943      	ldr	r1, [pc, #268]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b0:	4b41      	ldr	r3, [pc, #260]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a40      	ldr	r2, [pc, #256]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048bc:	4b3e      	ldr	r3, [pc, #248]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4a3d      	ldr	r2, [pc, #244]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 80048c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fe feaa 	bl	8003620 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fe fea6 	bl	8003620 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e066      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e2:	4b35      	ldr	r3, [pc, #212]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x530>
 80048ee:	e05e      	b.n	80049ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f0:	4b31      	ldr	r3, [pc, #196]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a30      	ldr	r2, [pc, #192]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 80048f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fc:	f7fe fe90 	bl	8003620 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fe fe8c 	bl	8003620 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e04c      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004916:	4b28      	ldr	r3, [pc, #160]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004922:	4b25      	ldr	r3, [pc, #148]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	4924      	ldr	r1, [pc, #144]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 8004928:	4b25      	ldr	r3, [pc, #148]	@ (80049c0 <HAL_RCC_OscConfig+0x620>)
 800492a:	4013      	ands	r3, r2
 800492c:	60cb      	str	r3, [r1, #12]
 800492e:	e03e      	b.n	80049ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e039      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800493c:	4b1e      	ldr	r3, [pc, #120]	@ (80049b8 <HAL_RCC_OscConfig+0x618>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 0203 	and.w	r2, r3, #3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	429a      	cmp	r2, r3
 800494e:	d12c      	bne.n	80049aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	3b01      	subs	r3, #1
 800495c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d123      	bne.n	80049aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d11b      	bne.n	80049aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d113      	bne.n	80049aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	3b01      	subs	r3, #1
 8004990:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d109      	bne.n	80049aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a0:	085b      	lsrs	r3, r3, #1
 80049a2:	3b01      	subs	r3, #1
 80049a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40021000 	.word	0x40021000
 80049bc:	019f800c 	.word	0x019f800c
 80049c0:	feeefffc 	.word	0xfeeefffc

080049c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e11e      	b.n	8004c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b91      	ldr	r3, [pc, #580]	@ (8004c24 <HAL_RCC_ClockConfig+0x260>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d910      	bls.n	8004a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b8e      	ldr	r3, [pc, #568]	@ (8004c24 <HAL_RCC_ClockConfig+0x260>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 020f 	bic.w	r2, r3, #15
 80049f2:	498c      	ldr	r1, [pc, #560]	@ (8004c24 <HAL_RCC_ClockConfig+0x260>)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b8a      	ldr	r3, [pc, #552]	@ (8004c24 <HAL_RCC_ClockConfig+0x260>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e106      	b.n	8004c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d073      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d129      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a20:	4b81      	ldr	r3, [pc, #516]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0f4      	b.n	8004c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a30:	f000 f99e 	bl	8004d70 <RCC_GetSysClockFreqFromPLLSource>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4a7c      	ldr	r2, [pc, #496]	@ (8004c2c <HAL_RCC_ClockConfig+0x268>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d93f      	bls.n	8004abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d033      	beq.n	8004abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d12f      	bne.n	8004abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a5e:	4b72      	ldr	r3, [pc, #456]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a66:	4a70      	ldr	r2, [pc, #448]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a6e:	2380      	movs	r3, #128	@ 0x80
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e024      	b.n	8004abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0c6      	b.n	8004c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a8c:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0be      	b.n	8004c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a9c:	f000 f8ce 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4a61      	ldr	r2, [pc, #388]	@ (8004c2c <HAL_RCC_ClockConfig+0x268>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d909      	bls.n	8004abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004aba:	2380      	movs	r3, #128	@ 0x80
 8004abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004abe:	4b5a      	ldr	r3, [pc, #360]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4957      	ldr	r1, [pc, #348]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad0:	f7fe fda6 	bl	8003620 <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7fe fda2 	bl	8003620 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e095      	b.n	8004c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aee:	4b4e      	ldr	r3, [pc, #312]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 020c 	and.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1eb      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d023      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b18:	4b43      	ldr	r3, [pc, #268]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4a42      	ldr	r2, [pc, #264]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004b1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b30:	4b3d      	ldr	r3, [pc, #244]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b38:	4a3b      	ldr	r2, [pc, #236]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004b3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4936      	ldr	r1, [pc, #216]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b80      	cmp	r3, #128	@ 0x80
 8004b58:	d105      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b5a:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	4a32      	ldr	r2, [pc, #200]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004b60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b66:	4b2f      	ldr	r3, [pc, #188]	@ (8004c24 <HAL_RCC_ClockConfig+0x260>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d21d      	bcs.n	8004bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b74:	4b2b      	ldr	r3, [pc, #172]	@ (8004c24 <HAL_RCC_ClockConfig+0x260>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 020f 	bic.w	r2, r3, #15
 8004b7c:	4929      	ldr	r1, [pc, #164]	@ (8004c24 <HAL_RCC_ClockConfig+0x260>)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b84:	f7fe fd4c 	bl	8003620 <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8c:	f7fe fd48 	bl	8003620 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e03b      	b.n	8004c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b20      	ldr	r3, [pc, #128]	@ (8004c24 <HAL_RCC_ClockConfig+0x260>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d1ed      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4917      	ldr	r1, [pc, #92]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bda:	4b13      	ldr	r3, [pc, #76]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	490f      	ldr	r1, [pc, #60]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bee:	f000 f825 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <HAL_RCC_ClockConfig+0x264>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	490c      	ldr	r1, [pc, #48]	@ (8004c30 <HAL_RCC_ClockConfig+0x26c>)
 8004c00:	5ccb      	ldrb	r3, [r1, r3]
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c34 <HAL_RCC_ClockConfig+0x270>)
 8004c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <HAL_RCC_ClockConfig+0x274>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe fcb8 	bl	8003588 <HAL_InitTick>
 8004c18:	4603      	mov	r3, r0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40022000 	.word	0x40022000
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	04c4b400 	.word	0x04c4b400
 8004c30:	0800940c 	.word	0x0800940c
 8004c34:	20000230 	.word	0x20000230
 8004c38:	20000234 	.word	0x20000234

08004c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c42:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d102      	bne.n	8004c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	e047      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c54:	4b27      	ldr	r3, [pc, #156]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d102      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c60:	4b26      	ldr	r3, [pc, #152]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	e03e      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c66:	4b23      	ldr	r3, [pc, #140]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d136      	bne.n	8004ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c72:	4b20      	ldr	r3, [pc, #128]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	3301      	adds	r3, #1
 8004c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d10c      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c90:	4a1a      	ldr	r2, [pc, #104]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	4a16      	ldr	r2, [pc, #88]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c9a:	68d2      	ldr	r2, [r2, #12]
 8004c9c:	0a12      	lsrs	r2, r2, #8
 8004c9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	617b      	str	r3, [r7, #20]
      break;
 8004ca8:	e00c      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004caa:	4a13      	ldr	r2, [pc, #76]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	4a10      	ldr	r2, [pc, #64]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cb4:	68d2      	ldr	r2, [r2, #12]
 8004cb6:	0a12      	lsrs	r2, r2, #8
 8004cb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	617b      	str	r3, [r7, #20]
      break;
 8004cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	0e5b      	lsrs	r3, r3, #25
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	e001      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ce4:	693b      	ldr	r3, [r7, #16]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	00f42400 	.word	0x00f42400
 8004cfc:	016e3600 	.word	0x016e3600

08004d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d04:	4b03      	ldr	r3, [pc, #12]	@ (8004d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d06:	681b      	ldr	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000230 	.word	0x20000230

08004d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d1c:	f7ff fff0 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4904      	ldr	r1, [pc, #16]	@ (8004d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	0800941c 	.word	0x0800941c

08004d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d48:	f7ff ffda 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	0adb      	lsrs	r3, r3, #11
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	4904      	ldr	r1, [pc, #16]	@ (8004d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d5a:	5ccb      	ldrb	r3, [r1, r3]
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	0800941c 	.word	0x0800941c

08004d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d76:	4b1e      	ldr	r3, [pc, #120]	@ (8004df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d80:	4b1b      	ldr	r3, [pc, #108]	@ (8004df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d10c      	bne.n	8004dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d94:	4a17      	ldr	r2, [pc, #92]	@ (8004df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	4a14      	ldr	r2, [pc, #80]	@ (8004df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d9e:	68d2      	ldr	r2, [r2, #12]
 8004da0:	0a12      	lsrs	r2, r2, #8
 8004da2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	617b      	str	r3, [r7, #20]
    break;
 8004dac:	e00c      	b.n	8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dae:	4a12      	ldr	r2, [pc, #72]	@ (8004df8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	4a0e      	ldr	r2, [pc, #56]	@ (8004df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004db8:	68d2      	ldr	r2, [r2, #12]
 8004dba:	0a12      	lsrs	r2, r2, #8
 8004dbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]
    break;
 8004dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dc8:	4b09      	ldr	r3, [pc, #36]	@ (8004df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	0e5b      	lsrs	r3, r3, #25
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004de2:	687b      	ldr	r3, [r7, #4]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40021000 	.word	0x40021000
 8004df4:	016e3600 	.word	0x016e3600
 8004df8:	00f42400 	.word	0x00f42400

08004dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e04:	2300      	movs	r3, #0
 8004e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e08:	2300      	movs	r3, #0
 8004e0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8098 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1e:	4b43      	ldr	r3, [pc, #268]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2a:	4b40      	ldr	r3, [pc, #256]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e36:	4b3d      	ldr	r3, [pc, #244]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e42:	2301      	movs	r3, #1
 8004e44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e46:	4b3a      	ldr	r3, [pc, #232]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a39      	ldr	r2, [pc, #228]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e52:	f7fe fbe5 	bl	8003620 <HAL_GetTick>
 8004e56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e58:	e009      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5a:	f7fe fbe1 	bl	8003620 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d902      	bls.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8004e6c:	e005      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6e:	4b30      	ldr	r3, [pc, #192]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0ef      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d159      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e80:	4b2a      	ldr	r3, [pc, #168]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01e      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d019      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e9c:	4b23      	ldr	r3, [pc, #140]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ea8:	4b20      	ldr	r3, [pc, #128]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	4a1f      	ldr	r2, [pc, #124]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ec8:	4a18      	ldr	r2, [pc, #96]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fe fba1 	bl	8003620 <HAL_GetTick>
 8004ede:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee0:	e00b      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fe fb9d 	bl	8003620 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d902      	bls.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ef8:	e006      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efa:	4b0c      	ldr	r3, [pc, #48]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ec      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0e:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1c:	4903      	ldr	r1, [pc, #12]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f24:	e008      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f26:	7cfb      	ldrb	r3, [r7, #19]
 8004f28:	74bb      	strb	r3, [r7, #18]
 8004f2a:	e005      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f38:	7c7b      	ldrb	r3, [r7, #17]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3e:	4ba7      	ldr	r3, [pc, #668]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f42:	4aa6      	ldr	r2, [pc, #664]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f56:	4ba1      	ldr	r3, [pc, #644]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5c:	f023 0203 	bic.w	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	499d      	ldr	r1, [pc, #628]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f78:	4b98      	ldr	r3, [pc, #608]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7e:	f023 020c 	bic.w	r2, r3, #12
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4995      	ldr	r1, [pc, #596]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f9a:	4b90      	ldr	r3, [pc, #576]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	498c      	ldr	r1, [pc, #560]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fbc:	4b87      	ldr	r3, [pc, #540]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	4984      	ldr	r1, [pc, #528]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fde:	4b7f      	ldr	r3, [pc, #508]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	497b      	ldr	r1, [pc, #492]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005000:	4b76      	ldr	r3, [pc, #472]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005006:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	4973      	ldr	r1, [pc, #460]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005022:	4b6e      	ldr	r3, [pc, #440]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005028:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	496a      	ldr	r1, [pc, #424]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005044:	4b65      	ldr	r3, [pc, #404]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4962      	ldr	r1, [pc, #392]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005066:	4b5d      	ldr	r3, [pc, #372]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	4959      	ldr	r1, [pc, #356]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005088:	4b54      	ldr	r3, [pc, #336]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	4951      	ldr	r1, [pc, #324]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050aa:	4b4c      	ldr	r3, [pc, #304]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	4948      	ldr	r1, [pc, #288]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d015      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050cc:	4b43      	ldr	r3, [pc, #268]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050da:	4940      	ldr	r1, [pc, #256]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050ea:	d105      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ec:	4b3b      	ldr	r3, [pc, #236]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a3a      	ldr	r2, [pc, #232]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005100:	2b00      	cmp	r3, #0
 8005102:	d015      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005104:	4b35      	ldr	r3, [pc, #212]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005112:	4932      	ldr	r1, [pc, #200]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005122:	d105      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005124:	4b2d      	ldr	r3, [pc, #180]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a2c      	ldr	r2, [pc, #176]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800512e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d015      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800513c:	4b27      	ldr	r3, [pc, #156]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005142:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	4924      	ldr	r1, [pc, #144]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005156:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800515a:	d105      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800515c:	4b1f      	ldr	r3, [pc, #124]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4a1e      	ldr	r2, [pc, #120]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005166:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d015      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005174:	4b19      	ldr	r3, [pc, #100]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005182:	4916      	ldr	r1, [pc, #88]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005192:	d105      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005194:	4b11      	ldr	r3, [pc, #68]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4a10      	ldr	r2, [pc, #64]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800519e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d019      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ac:	4b0b      	ldr	r3, [pc, #44]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	4908      	ldr	r1, [pc, #32]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ca:	d109      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051cc:	4b03      	ldr	r3, [pc, #12]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a02      	ldr	r2, [pc, #8]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051d6:	60d3      	str	r3, [r2, #12]
 80051d8:	e002      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d015      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051ec:	4b29      	ldr	r3, [pc, #164]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	4926      	ldr	r1, [pc, #152]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800520a:	d105      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800520c:	4b21      	ldr	r3, [pc, #132]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a20      	ldr	r2, [pc, #128]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005216:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d015      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005224:	4b1b      	ldr	r3, [pc, #108]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005232:	4918      	ldr	r1, [pc, #96]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005242:	d105      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005244:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4a12      	ldr	r2, [pc, #72]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800524a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800524e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d015      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800525c:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800525e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005262:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526a:	490a      	ldr	r1, [pc, #40]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800527a:	d105      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527c:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a04      	ldr	r2, [pc, #16]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005286:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005288:	7cbb      	ldrb	r3, [r7, #18]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000

08005298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e054      	b.n	8005354 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d111      	bne.n	80052da <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 ff3a 	bl	8007138 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a23      	ldr	r2, [pc, #140]	@ (800535c <HAL_TIM_Base_Init+0xc4>)
 80052d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f001 fa83 	bl	80067f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	08003085 	.word	0x08003085

08005360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d001      	beq.n	8005378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e04c      	b.n	8005412 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a26      	ldr	r2, [pc, #152]	@ (8005420 <HAL_TIM_Base_Start+0xc0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005392:	d01d      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a22      	ldr	r2, [pc, #136]	@ (8005424 <HAL_TIM_Base_Start+0xc4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a21      	ldr	r2, [pc, #132]	@ (8005428 <HAL_TIM_Base_Start+0xc8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1f      	ldr	r2, [pc, #124]	@ (800542c <HAL_TIM_Base_Start+0xcc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005430 <HAL_TIM_Base_Start+0xd0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <HAL_TIM_Base_Start+0xd4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005438 <HAL_TIM_Base_Start+0xd8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d115      	bne.n	80053fc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	4b19      	ldr	r3, [pc, #100]	@ (800543c <HAL_TIM_Base_Start+0xdc>)
 80053d8:	4013      	ands	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b06      	cmp	r3, #6
 80053e0:	d015      	beq.n	800540e <HAL_TIM_Base_Start+0xae>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e8:	d011      	beq.n	800540e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0201 	orr.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fa:	e008      	b.n	800540e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e000      	b.n	8005410 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40013400 	.word	0x40013400
 8005434:	40014000 	.word	0x40014000
 8005438:	40015000 	.word	0x40015000
 800543c:	00010007 	.word	0x00010007

08005440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e054      	b.n	8005502 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <HAL_TIM_Base_Start_IT+0xd0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d022      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005482:	d01d      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a22      	ldr	r2, [pc, #136]	@ (8005514 <HAL_TIM_Base_Start_IT+0xd4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d018      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a21      	ldr	r2, [pc, #132]	@ (8005518 <HAL_TIM_Base_Start_IT+0xd8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1f      	ldr	r2, [pc, #124]	@ (800551c <HAL_TIM_Base_Start_IT+0xdc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00e      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005520 <HAL_TIM_Base_Start_IT+0xe0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d009      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005524 <HAL_TIM_Base_Start_IT+0xe4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005528 <HAL_TIM_Base_Start_IT+0xe8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d115      	bne.n	80054ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	4b19      	ldr	r3, [pc, #100]	@ (800552c <HAL_TIM_Base_Start_IT+0xec>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b06      	cmp	r3, #6
 80054d0:	d015      	beq.n	80054fe <HAL_TIM_Base_Start_IT+0xbe>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d8:	d011      	beq.n	80054fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0201 	orr.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ea:	e008      	b.n	80054fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e000      	b.n	8005500 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40013400 	.word	0x40013400
 8005524:	40014000 	.word	0x40014000
 8005528:	40015000 	.word	0x40015000
 800552c:	00010007 	.word	0x00010007

08005530 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e054      	b.n	80055ec <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d111      	bne.n	8005572 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fdee 	bl	8007138 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a23      	ldr	r2, [pc, #140]	@ (80055f4 <HAL_TIM_PWM_Init+0xc4>)
 8005568:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f001 f937 	bl	80067f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	080055f9 	.word	0x080055f9

080055f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <HAL_TIM_PWM_Start_IT+0x28>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	bf14      	ite	ne
 800562c:	2301      	movne	r3, #1
 800562e:	2300      	moveq	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e03c      	b.n	80056ae <HAL_TIM_PWM_Start_IT+0xa2>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b04      	cmp	r3, #4
 8005638:	d109      	bne.n	800564e <HAL_TIM_PWM_Start_IT+0x42>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b01      	cmp	r3, #1
 8005644:	bf14      	ite	ne
 8005646:	2301      	movne	r3, #1
 8005648:	2300      	moveq	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	e02f      	b.n	80056ae <HAL_TIM_PWM_Start_IT+0xa2>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b08      	cmp	r3, #8
 8005652:	d109      	bne.n	8005668 <HAL_TIM_PWM_Start_IT+0x5c>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	bf14      	ite	ne
 8005660:	2301      	movne	r3, #1
 8005662:	2300      	moveq	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	e022      	b.n	80056ae <HAL_TIM_PWM_Start_IT+0xa2>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b0c      	cmp	r3, #12
 800566c:	d109      	bne.n	8005682 <HAL_TIM_PWM_Start_IT+0x76>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b01      	cmp	r3, #1
 8005678:	bf14      	ite	ne
 800567a:	2301      	movne	r3, #1
 800567c:	2300      	moveq	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	e015      	b.n	80056ae <HAL_TIM_PWM_Start_IT+0xa2>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b10      	cmp	r3, #16
 8005686:	d109      	bne.n	800569c <HAL_TIM_PWM_Start_IT+0x90>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	e008      	b.n	80056ae <HAL_TIM_PWM_Start_IT+0xa2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0f1      	b.n	800589a <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <HAL_TIM_PWM_Start_IT+0xba>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056c4:	e023      	b.n	800570e <HAL_TIM_PWM_Start_IT+0x102>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d104      	bne.n	80056d6 <HAL_TIM_PWM_Start_IT+0xca>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	e01b      	b.n	800570e <HAL_TIM_PWM_Start_IT+0x102>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_PWM_Start_IT+0xda>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056e4:	e013      	b.n	800570e <HAL_TIM_PWM_Start_IT+0x102>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b0c      	cmp	r3, #12
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_PWM_Start_IT+0xea>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056f4:	e00b      	b.n	800570e <HAL_TIM_PWM_Start_IT+0x102>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_PWM_Start_IT+0xfa>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005704:	e003      	b.n	800570e <HAL_TIM_PWM_Start_IT+0x102>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b0c      	cmp	r3, #12
 8005712:	d841      	bhi.n	8005798 <HAL_TIM_PWM_Start_IT+0x18c>
 8005714:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <HAL_TIM_PWM_Start_IT+0x110>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005751 	.word	0x08005751
 8005720:	08005799 	.word	0x08005799
 8005724:	08005799 	.word	0x08005799
 8005728:	08005799 	.word	0x08005799
 800572c:	08005763 	.word	0x08005763
 8005730:	08005799 	.word	0x08005799
 8005734:	08005799 	.word	0x08005799
 8005738:	08005799 	.word	0x08005799
 800573c:	08005775 	.word	0x08005775
 8005740:	08005799 	.word	0x08005799
 8005744:	08005799 	.word	0x08005799
 8005748:	08005799 	.word	0x08005799
 800574c:	08005787 	.word	0x08005787
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0202 	orr.w	r2, r2, #2
 800575e:	60da      	str	r2, [r3, #12]
      break;
 8005760:	e01d      	b.n	800579e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0204 	orr.w	r2, r2, #4
 8005770:	60da      	str	r2, [r3, #12]
      break;
 8005772:	e014      	b.n	800579e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0208 	orr.w	r2, r2, #8
 8005782:	60da      	str	r2, [r3, #12]
      break;
 8005784:	e00b      	b.n	800579e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0210 	orr.w	r2, r2, #16
 8005794:	60da      	str	r2, [r3, #12]
      break;
 8005796:	e002      	b.n	800579e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
      break;
 800579c:	bf00      	nop
  }

  if (status == HAL_OK)
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d179      	bne.n	8005898 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2201      	movs	r2, #1
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 fc9d 	bl	80070ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3b      	ldr	r2, [pc, #236]	@ (80058a4 <HAL_TIM_PWM_Start_IT+0x298>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_TIM_PWM_Start_IT+0x1e2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a39      	ldr	r2, [pc, #228]	@ (80058a8 <HAL_TIM_PWM_Start_IT+0x29c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_TIM_PWM_Start_IT+0x1e2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a38      	ldr	r2, [pc, #224]	@ (80058ac <HAL_TIM_PWM_Start_IT+0x2a0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_TIM_PWM_Start_IT+0x1e2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a36      	ldr	r2, [pc, #216]	@ (80058b0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_TIM_PWM_Start_IT+0x1e2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a35      	ldr	r2, [pc, #212]	@ (80058b4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_TIM_PWM_Start_IT+0x1e2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a33      	ldr	r2, [pc, #204]	@ (80058b8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_PWM_Start_IT+0x1e6>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <HAL_TIM_PWM_Start_IT+0x1e8>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005806:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a25      	ldr	r2, [pc, #148]	@ (80058a4 <HAL_TIM_PWM_Start_IT+0x298>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d022      	beq.n	8005858 <HAL_TIM_PWM_Start_IT+0x24c>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581a:	d01d      	beq.n	8005858 <HAL_TIM_PWM_Start_IT+0x24c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a26      	ldr	r2, [pc, #152]	@ (80058bc <HAL_TIM_PWM_Start_IT+0x2b0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d018      	beq.n	8005858 <HAL_TIM_PWM_Start_IT+0x24c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a25      	ldr	r2, [pc, #148]	@ (80058c0 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <HAL_TIM_PWM_Start_IT+0x24c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a23      	ldr	r2, [pc, #140]	@ (80058c4 <HAL_TIM_PWM_Start_IT+0x2b8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00e      	beq.n	8005858 <HAL_TIM_PWM_Start_IT+0x24c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1a      	ldr	r2, [pc, #104]	@ (80058a8 <HAL_TIM_PWM_Start_IT+0x29c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_TIM_PWM_Start_IT+0x24c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a18      	ldr	r2, [pc, #96]	@ (80058ac <HAL_TIM_PWM_Start_IT+0x2a0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_TIM_PWM_Start_IT+0x24c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a19      	ldr	r2, [pc, #100]	@ (80058b8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d115      	bne.n	8005884 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	4b1a      	ldr	r3, [pc, #104]	@ (80058c8 <HAL_TIM_PWM_Start_IT+0x2bc>)
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b06      	cmp	r3, #6
 8005868:	d015      	beq.n	8005896 <HAL_TIM_PWM_Start_IT+0x28a>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005870:	d011      	beq.n	8005896 <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0201 	orr.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005882:	e008      	b.n	8005896 <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e000      	b.n	8005898 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005896:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40013400 	.word	0x40013400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40014400 	.word	0x40014400
 80058b4:	40014800 	.word	0x40014800
 80058b8:	40015000 	.word	0x40015000
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	00010007 	.word	0x00010007

080058cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e04c      	b.n	800597a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d111      	bne.n	8005910 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 fc1f 	bl	8007138 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1f      	ldr	r2, [pc, #124]	@ (8005984 <HAL_TIM_OnePulse_Init+0xb8>)
 8005906:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f000 ff68 	bl	80067f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0208 	bic.w	r2, r2, #8
 8005936:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6819      	ldr	r1, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	08005989 	.word	0x08005989

08005988 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059c4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d108      	bne.n	80059de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059d2:	7b7b      	ldrb	r3, [r7, #13]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d102      	bne.n	80059de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059d8:	7b3b      	ldrb	r3, [r7, #12]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d001      	beq.n	80059e2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e059      	b.n	8005a96 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0202 	orr.w	r2, r2, #2
 8005a10:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0204 	orr.w	r2, r2, #4
 8005a20:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2201      	movs	r2, #1
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 fb5e 	bl	80070ec <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2201      	movs	r2, #1
 8005a36:	2104      	movs	r1, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 fb57 	bl	80070ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a17      	ldr	r2, [pc, #92]	@ (8005aa0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d018      	beq.n	8005a7a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a15      	ldr	r2, [pc, #84]	@ (8005aa4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a14      	ldr	r2, [pc, #80]	@ (8005aa8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a12      	ldr	r2, [pc, #72]	@ (8005aac <HAL_TIM_OnePulse_Start_IT+0x110>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a0f      	ldr	r2, [pc, #60]	@ (8005ab4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d101      	bne.n	8005a7e <HAL_TIM_OnePulse_Start_IT+0xe2>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40013400 	.word	0x40013400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40014400 	.word	0x40014400
 8005ab0:	40014800 	.word	0x40014800
 8005ab4:	40015000 	.word	0x40015000

08005ab8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0a2      	b.n	8005c12 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d111      	bne.n	8005afc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 fb29 	bl	8007138 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d102      	bne.n	8005af4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a4a      	ldr	r2, [pc, #296]	@ (8005c1c <HAL_TIM_Encoder_Init+0x164>)
 8005af2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005b12:	f023 0307 	bic.w	r3, r3, #7
 8005b16:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f000 fe68 	bl	80067f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b50:	f023 0303 	bic.w	r3, r3, #3
 8005b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	4313      	orrs	r3, r2
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005b6e:	f023 030c 	bic.w	r3, r3, #12
 8005b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	011a      	lsls	r2, r3, #4
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005bac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005bb4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	08003005 	.word	0x08003005

08005c20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d110      	bne.n	8005c72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d102      	bne.n	8005c5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c56:	7b7b      	ldrb	r3, [r7, #13]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d001      	beq.n	8005c60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e069      	b.n	8005d34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c70:	e031      	b.n	8005cd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d110      	bne.n	8005c9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d102      	bne.n	8005c84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c7e:	7b3b      	ldrb	r3, [r7, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e055      	b.n	8005d34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c98:	e01d      	b.n	8005cd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d108      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d105      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca6:	7b7b      	ldrb	r3, [r7, #13]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d102      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cac:	7b3b      	ldrb	r3, [r7, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e03e      	b.n	8005d34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_TIM_Encoder_Start+0xc4>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d008      	beq.n	8005cf4 <HAL_TIM_Encoder_Start+0xd4>
 8005ce2:	e00f      	b.n	8005d04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 f9fd 	bl	80070ec <TIM_CCxChannelCmd>
      break;
 8005cf2:	e016      	b.n	8005d22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2104      	movs	r1, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 f9f5 	bl	80070ec <TIM_CCxChannelCmd>
      break;
 8005d02:	e00e      	b.n	8005d22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 f9ed 	bl	80070ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	2104      	movs	r1, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 f9e6 	bl	80070ec <TIM_CCxChannelCmd>
      break;
 8005d20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0201 	orr.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d026      	beq.n	8005dac <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d021      	beq.n	8005dac <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f06f 0202 	mvn.w	r2, #2
 8005d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
 8005d90:	e009      	b.n	8005da6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d026      	beq.n	8005e04 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d021      	beq.n	8005e04 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0204 	mvn.w	r2, #4
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	4798      	blx	r3
 8005de8:	e009      	b.n	8005dfe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d026      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d021      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0208 	mvn.w	r2, #8
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2204      	movs	r2, #4
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
 8005e40:	e009      	b.n	8005e56 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d026      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d021      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0210 	mvn.w	r2, #16
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
 8005e98:	e009      	b.n	8005eae <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00e      	beq.n	8005edc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0201 	mvn.w	r2, #1
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d104      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00e      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00e      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00e      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00e      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f06f 0220 	mvn.w	r2, #32
 8005f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00e      	beq.n	8005fae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00e      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00e      	beq.n	8006026 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800601a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800604a:	2302      	movs	r3, #2
 800604c:	e0ff      	b.n	800624e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b14      	cmp	r3, #20
 800605a:	f200 80f0 	bhi.w	800623e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800605e:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	080060b9 	.word	0x080060b9
 8006068:	0800623f 	.word	0x0800623f
 800606c:	0800623f 	.word	0x0800623f
 8006070:	0800623f 	.word	0x0800623f
 8006074:	080060f9 	.word	0x080060f9
 8006078:	0800623f 	.word	0x0800623f
 800607c:	0800623f 	.word	0x0800623f
 8006080:	0800623f 	.word	0x0800623f
 8006084:	0800613b 	.word	0x0800613b
 8006088:	0800623f 	.word	0x0800623f
 800608c:	0800623f 	.word	0x0800623f
 8006090:	0800623f 	.word	0x0800623f
 8006094:	0800617b 	.word	0x0800617b
 8006098:	0800623f 	.word	0x0800623f
 800609c:	0800623f 	.word	0x0800623f
 80060a0:	0800623f 	.word	0x0800623f
 80060a4:	080061bd 	.word	0x080061bd
 80060a8:	0800623f 	.word	0x0800623f
 80060ac:	0800623f 	.word	0x0800623f
 80060b0:	0800623f 	.word	0x0800623f
 80060b4:	080061fd 	.word	0x080061fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fc4e 	bl	8006960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0208 	orr.w	r2, r2, #8
 80060d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0204 	bic.w	r2, r2, #4
 80060e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6999      	ldr	r1, [r3, #24]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	619a      	str	r2, [r3, #24]
      break;
 80060f6:	e0a5      	b.n	8006244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fcc8 	bl	8006a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6999      	ldr	r1, [r3, #24]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	021a      	lsls	r2, r3, #8
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	619a      	str	r2, [r3, #24]
      break;
 8006138:	e084      	b.n	8006244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fd3b 	bl	8006bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0208 	orr.w	r2, r2, #8
 8006154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0204 	bic.w	r2, r2, #4
 8006164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69d9      	ldr	r1, [r3, #28]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	61da      	str	r2, [r3, #28]
      break;
 8006178:	e064      	b.n	8006244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fdad 	bl	8006ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69d9      	ldr	r1, [r3, #28]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	021a      	lsls	r2, r3, #8
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	61da      	str	r2, [r3, #28]
      break;
 80061ba:	e043      	b.n	8006244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fe20 	bl	8006e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0208 	orr.w	r2, r2, #8
 80061d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0204 	bic.w	r2, r2, #4
 80061e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80061fa:	e023      	b.n	8006244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fe6a 	bl	8006edc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006216:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006226:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800623c:	e002      	b.n	8006244 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	75fb      	strb	r3, [r7, #23]
      break;
 8006242:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop

08006258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIM_ConfigClockSource+0x1c>
 8006270:	2302      	movs	r3, #2
 8006272:	e0f6      	b.n	8006462 <HAL_TIM_ConfigClockSource+0x20a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800629e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a6f      	ldr	r2, [pc, #444]	@ (800646c <HAL_TIM_ConfigClockSource+0x214>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	f000 80c1 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 80062b4:	4a6d      	ldr	r2, [pc, #436]	@ (800646c <HAL_TIM_ConfigClockSource+0x214>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	f200 80c6 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 80062bc:	4a6c      	ldr	r2, [pc, #432]	@ (8006470 <HAL_TIM_ConfigClockSource+0x218>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	f000 80b9 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 80062c4:	4a6a      	ldr	r2, [pc, #424]	@ (8006470 <HAL_TIM_ConfigClockSource+0x218>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	f200 80be 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 80062cc:	4a69      	ldr	r2, [pc, #420]	@ (8006474 <HAL_TIM_ConfigClockSource+0x21c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	f000 80b1 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 80062d4:	4a67      	ldr	r2, [pc, #412]	@ (8006474 <HAL_TIM_ConfigClockSource+0x21c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	f200 80b6 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 80062dc:	4a66      	ldr	r2, [pc, #408]	@ (8006478 <HAL_TIM_ConfigClockSource+0x220>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	f000 80a9 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 80062e4:	4a64      	ldr	r2, [pc, #400]	@ (8006478 <HAL_TIM_ConfigClockSource+0x220>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	f200 80ae 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 80062ec:	4a63      	ldr	r2, [pc, #396]	@ (800647c <HAL_TIM_ConfigClockSource+0x224>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	f000 80a1 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 80062f4:	4a61      	ldr	r2, [pc, #388]	@ (800647c <HAL_TIM_ConfigClockSource+0x224>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	f200 80a6 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 80062fc:	4a60      	ldr	r2, [pc, #384]	@ (8006480 <HAL_TIM_ConfigClockSource+0x228>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	f000 8099 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 8006304:	4a5e      	ldr	r2, [pc, #376]	@ (8006480 <HAL_TIM_ConfigClockSource+0x228>)
 8006306:	4293      	cmp	r3, r2
 8006308:	f200 809e 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 800630c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006310:	f000 8091 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 8006314:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006318:	f200 8096 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 800631c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006320:	f000 8089 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 8006324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006328:	f200 808e 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 800632c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006330:	d03e      	beq.n	80063b0 <HAL_TIM_ConfigClockSource+0x158>
 8006332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006336:	f200 8087 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 800633a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800633e:	f000 8086 	beq.w	800644e <HAL_TIM_ConfigClockSource+0x1f6>
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006346:	d87f      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 8006348:	2b70      	cmp	r3, #112	@ 0x70
 800634a:	d01a      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x12a>
 800634c:	2b70      	cmp	r3, #112	@ 0x70
 800634e:	d87b      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 8006350:	2b60      	cmp	r3, #96	@ 0x60
 8006352:	d050      	beq.n	80063f6 <HAL_TIM_ConfigClockSource+0x19e>
 8006354:	2b60      	cmp	r3, #96	@ 0x60
 8006356:	d877      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 8006358:	2b50      	cmp	r3, #80	@ 0x50
 800635a:	d03c      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0x17e>
 800635c:	2b50      	cmp	r3, #80	@ 0x50
 800635e:	d873      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 8006360:	2b40      	cmp	r3, #64	@ 0x40
 8006362:	d058      	beq.n	8006416 <HAL_TIM_ConfigClockSource+0x1be>
 8006364:	2b40      	cmp	r3, #64	@ 0x40
 8006366:	d86f      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 8006368:	2b30      	cmp	r3, #48	@ 0x30
 800636a:	d064      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 800636c:	2b30      	cmp	r3, #48	@ 0x30
 800636e:	d86b      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 8006370:	2b20      	cmp	r3, #32
 8006372:	d060      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 8006374:	2b20      	cmp	r3, #32
 8006376:	d867      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d05c      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 800637c:	2b10      	cmp	r3, #16
 800637e:	d05a      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x1de>
 8006380:	e062      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006392:	f000 fe8b 	bl	80070ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	609a      	str	r2, [r3, #8]
      break;
 80063ae:	e04f      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063c0:	f000 fe74 	bl	80070ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063d2:	609a      	str	r2, [r3, #8]
      break;
 80063d4:	e03c      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e2:	461a      	mov	r2, r3
 80063e4:	f000 fde6 	bl	8006fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2150      	movs	r1, #80	@ 0x50
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fe3f 	bl	8007072 <TIM_ITRx_SetConfig>
      break;
 80063f4:	e02c      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006402:	461a      	mov	r2, r3
 8006404:	f000 fe05 	bl	8007012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2160      	movs	r1, #96	@ 0x60
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fe2f 	bl	8007072 <TIM_ITRx_SetConfig>
      break;
 8006414:	e01c      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	461a      	mov	r2, r3
 8006424:	f000 fdc6 	bl	8006fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2140      	movs	r1, #64	@ 0x40
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fe1f 	bl	8007072 <TIM_ITRx_SetConfig>
      break;
 8006434:	e00c      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f000 fe16 	bl	8007072 <TIM_ITRx_SetConfig>
      break;
 8006446:	e003      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	73fb      	strb	r3, [r7, #15]
      break;
 800644c:	e000      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800644e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	00100070 	.word	0x00100070
 8006470:	00100060 	.word	0x00100060
 8006474:	00100050 	.word	0x00100050
 8006478:	00100040 	.word	0x00100040
 800647c:	00100030 	.word	0x00100030
 8006480:	00100020 	.word	0x00100020

08006484 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	460b      	mov	r3, r1
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e14a      	b.n	80067ea <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	f040 80dd 	bne.w	800671c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	2b1f      	cmp	r3, #31
 8006566:	f200 80d6 	bhi.w	8006716 <HAL_TIM_RegisterCallback+0x1de>
 800656a:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <HAL_TIM_RegisterCallback+0x38>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065f1 	.word	0x080065f1
 8006574:	080065f9 	.word	0x080065f9
 8006578:	08006601 	.word	0x08006601
 800657c:	08006609 	.word	0x08006609
 8006580:	08006611 	.word	0x08006611
 8006584:	08006619 	.word	0x08006619
 8006588:	08006621 	.word	0x08006621
 800658c:	08006629 	.word	0x08006629
 8006590:	08006631 	.word	0x08006631
 8006594:	08006639 	.word	0x08006639
 8006598:	08006641 	.word	0x08006641
 800659c:	08006649 	.word	0x08006649
 80065a0:	08006651 	.word	0x08006651
 80065a4:	08006659 	.word	0x08006659
 80065a8:	08006663 	.word	0x08006663
 80065ac:	0800666d 	.word	0x0800666d
 80065b0:	08006677 	.word	0x08006677
 80065b4:	08006681 	.word	0x08006681
 80065b8:	0800668b 	.word	0x0800668b
 80065bc:	08006695 	.word	0x08006695
 80065c0:	0800669f 	.word	0x0800669f
 80065c4:	080066a9 	.word	0x080066a9
 80065c8:	080066b3 	.word	0x080066b3
 80065cc:	080066bd 	.word	0x080066bd
 80065d0:	080066c7 	.word	0x080066c7
 80065d4:	080066d1 	.word	0x080066d1
 80065d8:	080066db 	.word	0x080066db
 80065dc:	080066e5 	.word	0x080066e5
 80065e0:	080066ef 	.word	0x080066ef
 80065e4:	080066f9 	.word	0x080066f9
 80065e8:	08006703 	.word	0x08006703
 80065ec:	0800670d 	.word	0x0800670d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80065f6:	e0f7      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80065fe:	e0f3      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006606:	e0ef      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800660e:	e0eb      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006616:	e0e7      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800661e:	e0e3      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006626:	e0df      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800662e:	e0db      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006636:	e0d7      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800663e:	e0d3      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006646:	e0cf      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800664e:	e0cb      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006656:	e0c7      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006660:	e0c2      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800666a:	e0bd      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006674:	e0b8      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800667e:	e0b3      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8006688:	e0ae      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006692:	e0a9      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800669c:	e0a4      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80066a6:	e09f      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80066b0:	e09a      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80066ba:	e095      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80066c4:	e090      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80066ce:	e08b      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80066d8:	e086      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80066e2:	e081      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80066ec:	e07c      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80066f6:	e077      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8006700:	e072      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800670a:	e06d      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006714:	e068      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	75fb      	strb	r3, [r7, #23]
        break;
 800671a:	e065      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d15d      	bne.n	80067e4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	2b0d      	cmp	r3, #13
 800672c:	d857      	bhi.n	80067de <HAL_TIM_RegisterCallback+0x2a6>
 800672e:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <HAL_TIM_RegisterCallback+0x1fc>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	0800676d 	.word	0x0800676d
 8006738:	08006775 	.word	0x08006775
 800673c:	0800677d 	.word	0x0800677d
 8006740:	08006785 	.word	0x08006785
 8006744:	0800678d 	.word	0x0800678d
 8006748:	08006795 	.word	0x08006795
 800674c:	0800679d 	.word	0x0800679d
 8006750:	080067a5 	.word	0x080067a5
 8006754:	080067ad 	.word	0x080067ad
 8006758:	080067b5 	.word	0x080067b5
 800675c:	080067bd 	.word	0x080067bd
 8006760:	080067c5 	.word	0x080067c5
 8006764:	080067cd 	.word	0x080067cd
 8006768:	080067d5 	.word	0x080067d5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006772:	e039      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800677a:	e035      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006782:	e031      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800678a:	e02d      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006792:	e029      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800679a:	e025      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80067a2:	e021      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80067aa:	e01d      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80067b2:	e019      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80067ba:	e015      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80067c2:	e011      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80067ca:	e00d      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80067d2:	e009      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80067dc:	e004      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
        break;
 80067e2:	e001      	b.n	80067e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop

080067f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a4c      	ldr	r2, [pc, #304]	@ (800693c <TIM_Base_SetConfig+0x144>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d017      	beq.n	8006840 <TIM_Base_SetConfig+0x48>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006816:	d013      	beq.n	8006840 <TIM_Base_SetConfig+0x48>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a49      	ldr	r2, [pc, #292]	@ (8006940 <TIM_Base_SetConfig+0x148>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00f      	beq.n	8006840 <TIM_Base_SetConfig+0x48>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a48      	ldr	r2, [pc, #288]	@ (8006944 <TIM_Base_SetConfig+0x14c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00b      	beq.n	8006840 <TIM_Base_SetConfig+0x48>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a47      	ldr	r2, [pc, #284]	@ (8006948 <TIM_Base_SetConfig+0x150>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d007      	beq.n	8006840 <TIM_Base_SetConfig+0x48>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a46      	ldr	r2, [pc, #280]	@ (800694c <TIM_Base_SetConfig+0x154>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d003      	beq.n	8006840 <TIM_Base_SetConfig+0x48>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a45      	ldr	r2, [pc, #276]	@ (8006950 <TIM_Base_SetConfig+0x158>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d108      	bne.n	8006852 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a39      	ldr	r2, [pc, #228]	@ (800693c <TIM_Base_SetConfig+0x144>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d023      	beq.n	80068a2 <TIM_Base_SetConfig+0xaa>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006860:	d01f      	beq.n	80068a2 <TIM_Base_SetConfig+0xaa>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a36      	ldr	r2, [pc, #216]	@ (8006940 <TIM_Base_SetConfig+0x148>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01b      	beq.n	80068a2 <TIM_Base_SetConfig+0xaa>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a35      	ldr	r2, [pc, #212]	@ (8006944 <TIM_Base_SetConfig+0x14c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d017      	beq.n	80068a2 <TIM_Base_SetConfig+0xaa>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a34      	ldr	r2, [pc, #208]	@ (8006948 <TIM_Base_SetConfig+0x150>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <TIM_Base_SetConfig+0xaa>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a33      	ldr	r2, [pc, #204]	@ (800694c <TIM_Base_SetConfig+0x154>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00f      	beq.n	80068a2 <TIM_Base_SetConfig+0xaa>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a33      	ldr	r2, [pc, #204]	@ (8006954 <TIM_Base_SetConfig+0x15c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00b      	beq.n	80068a2 <TIM_Base_SetConfig+0xaa>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a32      	ldr	r2, [pc, #200]	@ (8006958 <TIM_Base_SetConfig+0x160>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d007      	beq.n	80068a2 <TIM_Base_SetConfig+0xaa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a31      	ldr	r2, [pc, #196]	@ (800695c <TIM_Base_SetConfig+0x164>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d003      	beq.n	80068a2 <TIM_Base_SetConfig+0xaa>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2c      	ldr	r2, [pc, #176]	@ (8006950 <TIM_Base_SetConfig+0x158>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d108      	bne.n	80068b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a18      	ldr	r2, [pc, #96]	@ (800693c <TIM_Base_SetConfig+0x144>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <TIM_Base_SetConfig+0x110>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a1a      	ldr	r2, [pc, #104]	@ (800694c <TIM_Base_SetConfig+0x154>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00f      	beq.n	8006908 <TIM_Base_SetConfig+0x110>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006954 <TIM_Base_SetConfig+0x15c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00b      	beq.n	8006908 <TIM_Base_SetConfig+0x110>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a19      	ldr	r2, [pc, #100]	@ (8006958 <TIM_Base_SetConfig+0x160>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_Base_SetConfig+0x110>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a18      	ldr	r2, [pc, #96]	@ (800695c <TIM_Base_SetConfig+0x164>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_Base_SetConfig+0x110>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a13      	ldr	r2, [pc, #76]	@ (8006950 <TIM_Base_SetConfig+0x158>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d103      	bne.n	8006910 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b01      	cmp	r3, #1
 8006920:	d105      	bne.n	800692e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	611a      	str	r2, [r3, #16]
  }
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800
 8006948:	40000c00 	.word	0x40000c00
 800694c:	40013400 	.word	0x40013400
 8006950:	40015000 	.word	0x40015000
 8006954:	40014000 	.word	0x40014000
 8006958:	40014400 	.word	0x40014400
 800695c:	40014800 	.word	0x40014800

08006960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f023 0201 	bic.w	r2, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800698e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0303 	bic.w	r3, r3, #3
 800699a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f023 0302 	bic.w	r3, r3, #2
 80069ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a30      	ldr	r2, [pc, #192]	@ (8006a7c <TIM_OC1_SetConfig+0x11c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d013      	beq.n	80069e8 <TIM_OC1_SetConfig+0x88>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006a80 <TIM_OC1_SetConfig+0x120>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00f      	beq.n	80069e8 <TIM_OC1_SetConfig+0x88>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a2e      	ldr	r2, [pc, #184]	@ (8006a84 <TIM_OC1_SetConfig+0x124>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00b      	beq.n	80069e8 <TIM_OC1_SetConfig+0x88>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006a88 <TIM_OC1_SetConfig+0x128>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d007      	beq.n	80069e8 <TIM_OC1_SetConfig+0x88>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a2c      	ldr	r2, [pc, #176]	@ (8006a8c <TIM_OC1_SetConfig+0x12c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_OC1_SetConfig+0x88>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a90 <TIM_OC1_SetConfig+0x130>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10c      	bne.n	8006a02 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0308 	bic.w	r3, r3, #8
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f023 0304 	bic.w	r3, r3, #4
 8006a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a1d      	ldr	r2, [pc, #116]	@ (8006a7c <TIM_OC1_SetConfig+0x11c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d013      	beq.n	8006a32 <TIM_OC1_SetConfig+0xd2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006a80 <TIM_OC1_SetConfig+0x120>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00f      	beq.n	8006a32 <TIM_OC1_SetConfig+0xd2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a1b      	ldr	r2, [pc, #108]	@ (8006a84 <TIM_OC1_SetConfig+0x124>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00b      	beq.n	8006a32 <TIM_OC1_SetConfig+0xd2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8006a88 <TIM_OC1_SetConfig+0x128>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d007      	beq.n	8006a32 <TIM_OC1_SetConfig+0xd2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a19      	ldr	r2, [pc, #100]	@ (8006a8c <TIM_OC1_SetConfig+0x12c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d003      	beq.n	8006a32 <TIM_OC1_SetConfig+0xd2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a18      	ldr	r2, [pc, #96]	@ (8006a90 <TIM_OC1_SetConfig+0x130>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d111      	bne.n	8006a56 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	621a      	str	r2, [r3, #32]
}
 8006a70:	bf00      	nop
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	40012c00 	.word	0x40012c00
 8006a80:	40013400 	.word	0x40013400
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40014400 	.word	0x40014400
 8006a8c:	40014800 	.word	0x40014800
 8006a90:	40015000 	.word	0x40015000

08006a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f023 0210 	bic.w	r2, r3, #16
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 0320 	bic.w	r3, r3, #32
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba4 <TIM_OC2_SetConfig+0x110>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d007      	beq.n	8006b08 <TIM_OC2_SetConfig+0x74>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a2b      	ldr	r2, [pc, #172]	@ (8006ba8 <TIM_OC2_SetConfig+0x114>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC2_SetConfig+0x74>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a2a      	ldr	r2, [pc, #168]	@ (8006bac <TIM_OC2_SetConfig+0x118>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d10d      	bne.n	8006b24 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba4 <TIM_OC2_SetConfig+0x110>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d013      	beq.n	8006b54 <TIM_OC2_SetConfig+0xc0>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ba8 <TIM_OC2_SetConfig+0x114>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00f      	beq.n	8006b54 <TIM_OC2_SetConfig+0xc0>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb0 <TIM_OC2_SetConfig+0x11c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_OC2_SetConfig+0xc0>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb4 <TIM_OC2_SetConfig+0x120>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_OC2_SetConfig+0xc0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb8 <TIM_OC2_SetConfig+0x124>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_OC2_SetConfig+0xc0>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a17      	ldr	r2, [pc, #92]	@ (8006bac <TIM_OC2_SetConfig+0x118>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d113      	bne.n	8006b7c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40015000 	.word	0x40015000
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800

08006bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	021b      	lsls	r3, r3, #8
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2b      	ldr	r2, [pc, #172]	@ (8006cc8 <TIM_OC3_SetConfig+0x10c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_OC3_SetConfig+0x72>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2a      	ldr	r2, [pc, #168]	@ (8006ccc <TIM_OC3_SetConfig+0x110>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_OC3_SetConfig+0x72>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a29      	ldr	r2, [pc, #164]	@ (8006cd0 <TIM_OC3_SetConfig+0x114>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d10d      	bne.n	8006c4a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc8 <TIM_OC3_SetConfig+0x10c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <TIM_OC3_SetConfig+0xbe>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1d      	ldr	r2, [pc, #116]	@ (8006ccc <TIM_OC3_SetConfig+0x110>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_OC3_SetConfig+0xbe>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cd4 <TIM_OC3_SetConfig+0x118>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_OC3_SetConfig+0xbe>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd8 <TIM_OC3_SetConfig+0x11c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_OC3_SetConfig+0xbe>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cdc <TIM_OC3_SetConfig+0x120>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_OC3_SetConfig+0xbe>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a16      	ldr	r2, [pc, #88]	@ (8006cd0 <TIM_OC3_SetConfig+0x114>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d113      	bne.n	8006ca2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	621a      	str	r2, [r3, #32]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40013400 	.word	0x40013400
 8006cd0:	40015000 	.word	0x40015000
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800

08006ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	031b      	lsls	r3, r3, #12
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8006df0 <TIM_OC4_SetConfig+0x110>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d007      	beq.n	8006d54 <TIM_OC4_SetConfig+0x74>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a2b      	ldr	r2, [pc, #172]	@ (8006df4 <TIM_OC4_SetConfig+0x114>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d003      	beq.n	8006d54 <TIM_OC4_SetConfig+0x74>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8006df8 <TIM_OC4_SetConfig+0x118>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d10d      	bne.n	8006d70 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	031b      	lsls	r3, r3, #12
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1f      	ldr	r2, [pc, #124]	@ (8006df0 <TIM_OC4_SetConfig+0x110>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d013      	beq.n	8006da0 <TIM_OC4_SetConfig+0xc0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006df4 <TIM_OC4_SetConfig+0x114>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00f      	beq.n	8006da0 <TIM_OC4_SetConfig+0xc0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a1e      	ldr	r2, [pc, #120]	@ (8006dfc <TIM_OC4_SetConfig+0x11c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00b      	beq.n	8006da0 <TIM_OC4_SetConfig+0xc0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e00 <TIM_OC4_SetConfig+0x120>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d007      	beq.n	8006da0 <TIM_OC4_SetConfig+0xc0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a1c      	ldr	r2, [pc, #112]	@ (8006e04 <TIM_OC4_SetConfig+0x124>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_OC4_SetConfig+0xc0>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a17      	ldr	r2, [pc, #92]	@ (8006df8 <TIM_OC4_SetConfig+0x118>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d113      	bne.n	8006dc8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006da6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	019b      	lsls	r3, r3, #6
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	019b      	lsls	r3, r3, #6
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	621a      	str	r2, [r3, #32]
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40013400 	.word	0x40013400
 8006df8:	40015000 	.word	0x40015000
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800

08006e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	041b      	lsls	r3, r3, #16
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a19      	ldr	r2, [pc, #100]	@ (8006ec4 <TIM_OC5_SetConfig+0xbc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <TIM_OC5_SetConfig+0x82>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a18      	ldr	r2, [pc, #96]	@ (8006ec8 <TIM_OC5_SetConfig+0xc0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00f      	beq.n	8006e8a <TIM_OC5_SetConfig+0x82>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a17      	ldr	r2, [pc, #92]	@ (8006ecc <TIM_OC5_SetConfig+0xc4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_OC5_SetConfig+0x82>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a16      	ldr	r2, [pc, #88]	@ (8006ed0 <TIM_OC5_SetConfig+0xc8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_OC5_SetConfig+0x82>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a15      	ldr	r2, [pc, #84]	@ (8006ed4 <TIM_OC5_SetConfig+0xcc>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_OC5_SetConfig+0x82>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a14      	ldr	r2, [pc, #80]	@ (8006ed8 <TIM_OC5_SetConfig+0xd0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d109      	bne.n	8006e9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	621a      	str	r2, [r3, #32]
}
 8006eb8:	bf00      	nop
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40014000 	.word	0x40014000
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	40014800 	.word	0x40014800
 8006ed8:	40015000 	.word	0x40015000

08006edc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	051b      	lsls	r3, r3, #20
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a1a      	ldr	r2, [pc, #104]	@ (8006f9c <TIM_OC6_SetConfig+0xc0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d013      	beq.n	8006f60 <TIM_OC6_SetConfig+0x84>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a19      	ldr	r2, [pc, #100]	@ (8006fa0 <TIM_OC6_SetConfig+0xc4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00f      	beq.n	8006f60 <TIM_OC6_SetConfig+0x84>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a18      	ldr	r2, [pc, #96]	@ (8006fa4 <TIM_OC6_SetConfig+0xc8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00b      	beq.n	8006f60 <TIM_OC6_SetConfig+0x84>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a17      	ldr	r2, [pc, #92]	@ (8006fa8 <TIM_OC6_SetConfig+0xcc>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d007      	beq.n	8006f60 <TIM_OC6_SetConfig+0x84>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a16      	ldr	r2, [pc, #88]	@ (8006fac <TIM_OC6_SetConfig+0xd0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d003      	beq.n	8006f60 <TIM_OC6_SetConfig+0x84>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a15      	ldr	r2, [pc, #84]	@ (8006fb0 <TIM_OC6_SetConfig+0xd4>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d109      	bne.n	8006f74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	029b      	lsls	r3, r3, #10
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	621a      	str	r2, [r3, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	40012c00 	.word	0x40012c00
 8006fa0:	40013400 	.word	0x40013400
 8006fa4:	40014000 	.word	0x40014000
 8006fa8:	40014400 	.word	0x40014400
 8006fac:	40014800 	.word	0x40014800
 8006fb0:	40015000 	.word	0x40015000

08006fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	f023 0201 	bic.w	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f023 030a 	bic.w	r3, r3, #10
 8006ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007012:	b480      	push	{r7}
 8007014:	b087      	sub	sp, #28
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f023 0210 	bic.w	r2, r3, #16
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800703c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	031b      	lsls	r3, r3, #12
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800704e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	4313      	orrs	r3, r2
 8007058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	f043 0307 	orr.w	r3, r3, #7
 8007098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	021a      	lsls	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 031f 	and.w	r3, r3, #31
 80070fe:	2201      	movs	r2, #1
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1a      	ldr	r2, [r3, #32]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	43db      	mvns	r3, r3
 800710e:	401a      	ands	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a1a      	ldr	r2, [r3, #32]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 031f 	and.w	r3, r3, #31
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	fa01 f303 	lsl.w	r3, r1, r3
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a26      	ldr	r2, [pc, #152]	@ (80071dc <TIM_ResetCallback+0xa4>)
 8007144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a25      	ldr	r2, [pc, #148]	@ (80071e0 <TIM_ResetCallback+0xa8>)
 800714c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a24      	ldr	r2, [pc, #144]	@ (80071e4 <TIM_ResetCallback+0xac>)
 8007154:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a23      	ldr	r2, [pc, #140]	@ (80071e8 <TIM_ResetCallback+0xb0>)
 800715c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a22      	ldr	r2, [pc, #136]	@ (80071ec <TIM_ResetCallback+0xb4>)
 8007164:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a21      	ldr	r2, [pc, #132]	@ (80071f0 <TIM_ResetCallback+0xb8>)
 800716c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a20      	ldr	r2, [pc, #128]	@ (80071f4 <TIM_ResetCallback+0xbc>)
 8007174:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a1f      	ldr	r2, [pc, #124]	@ (80071f8 <TIM_ResetCallback+0xc0>)
 800717c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a1e      	ldr	r2, [pc, #120]	@ (80071fc <TIM_ResetCallback+0xc4>)
 8007184:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a1d      	ldr	r2, [pc, #116]	@ (8007200 <TIM_ResetCallback+0xc8>)
 800718c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a1c      	ldr	r2, [pc, #112]	@ (8007204 <TIM_ResetCallback+0xcc>)
 8007194:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a1b      	ldr	r2, [pc, #108]	@ (8007208 <TIM_ResetCallback+0xd0>)
 800719c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a1a      	ldr	r2, [pc, #104]	@ (800720c <TIM_ResetCallback+0xd4>)
 80071a4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a19      	ldr	r2, [pc, #100]	@ (8007210 <TIM_ResetCallback+0xd8>)
 80071ac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a18      	ldr	r2, [pc, #96]	@ (8007214 <TIM_ResetCallback+0xdc>)
 80071b4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a17      	ldr	r2, [pc, #92]	@ (8007218 <TIM_ResetCallback+0xe0>)
 80071bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a16      	ldr	r2, [pc, #88]	@ (800721c <TIM_ResetCallback+0xe4>)
 80071c4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a15      	ldr	r2, [pc, #84]	@ (8007220 <TIM_ResetCallback+0xe8>)
 80071cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	08002f39 	.word	0x08002f39
 80071e0:	08006485 	.word	0x08006485
 80071e4:	080064fd 	.word	0x080064fd
 80071e8:	08006511 	.word	0x08006511
 80071ec:	080064ad 	.word	0x080064ad
 80071f0:	080064c1 	.word	0x080064c1
 80071f4:	08006499 	.word	0x08006499
 80071f8:	080064d5 	.word	0x080064d5
 80071fc:	080064e9 	.word	0x080064e9
 8007200:	08006525 	.word	0x08006525
 8007204:	08007351 	.word	0x08007351
 8007208:	08007365 	.word	0x08007365
 800720c:	08007379 	.word	0x08007379
 8007210:	0800738d 	.word	0x0800738d
 8007214:	080073a1 	.word	0x080073a1
 8007218:	080073b5 	.word	0x080073b5
 800721c:	080073c9 	.word	0x080073c9
 8007220:	080073dd 	.word	0x080073dd

08007224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007238:	2302      	movs	r3, #2
 800723a:	e074      	b.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a34      	ldr	r2, [pc, #208]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d009      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a33      	ldr	r2, [pc, #204]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d004      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a31      	ldr	r2, [pc, #196]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d108      	bne.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a21      	ldr	r2, [pc, #132]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d022      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072bc:	d01d      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d018      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007348 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00e      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a15      	ldr	r2, [pc, #84]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d009      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a18      	ldr	r2, [pc, #96]	@ (800734c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a11      	ldr	r2, [pc, #68]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d10c      	bne.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	4313      	orrs	r3, r2
 800730a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40012c00 	.word	0x40012c00
 8007338:	40013400 	.word	0x40013400
 800733c:	40015000 	.word	0x40015000
 8007340:	40000400 	.word	0x40000400
 8007344:	40000800 	.word	0x40000800
 8007348:	40000c00 	.word	0x40000c00
 800734c:	40014000 	.word	0x40014000

08007350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e050      	b.n	80074a4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007408:	2b00      	cmp	r3, #0
 800740a:	d114      	bne.n	8007436 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fe8d 	bl	8008134 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d103      	bne.n	800742c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a21      	ldr	r2, [pc, #132]	@ (80074ac <HAL_UART_Init+0xbc>)
 8007428:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2224      	movs	r2, #36	@ 0x24
 800743a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 f9ba 	bl	80087d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 febb 	bl	80081d8 <UART_SetConfig>
 8007462:	4603      	mov	r3, r0
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e01b      	b.n	80074a4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800747a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800748a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 fa39 	bl	8008914 <UART_CheckIdleState>
 80074a2:	4603      	mov	r3, r0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	08003201 	.word	0x08003201

080074b0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	460b      	mov	r3, r1
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e09c      	b.n	8007616 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d16c      	bne.n	80075c0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80074e6:	7afb      	ldrb	r3, [r7, #11]
 80074e8:	2b0c      	cmp	r3, #12
 80074ea:	d85e      	bhi.n	80075aa <HAL_UART_RegisterCallback+0xfa>
 80074ec:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <HAL_UART_RegisterCallback+0x44>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007533 	.word	0x08007533
 80074fc:	0800753d 	.word	0x0800753d
 8007500:	08007547 	.word	0x08007547
 8007504:	08007551 	.word	0x08007551
 8007508:	0800755b 	.word	0x0800755b
 800750c:	08007565 	.word	0x08007565
 8007510:	0800756f 	.word	0x0800756f
 8007514:	08007579 	.word	0x08007579
 8007518:	08007583 	.word	0x08007583
 800751c:	0800758d 	.word	0x0800758d
 8007520:	08007597 	.word	0x08007597
 8007524:	080075a1 	.word	0x080075a1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007530:	e070      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800753a:	e06b      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007544:	e066      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800754e:	e061      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007558:	e05c      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007562:	e057      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800756c:	e052      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007576:	e04d      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007580:	e048      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800758a:	e043      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007594:	e03e      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800759e:	e039      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80075a8:	e034      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	75fb      	strb	r3, [r7, #23]
        break;
 80075be:	e029      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d11a      	bne.n	8007600 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80075ca:	7afb      	ldrb	r3, [r7, #11]
 80075cc:	2b0b      	cmp	r3, #11
 80075ce:	d002      	beq.n	80075d6 <HAL_UART_RegisterCallback+0x126>
 80075d0:	2b0c      	cmp	r3, #12
 80075d2:	d005      	beq.n	80075e0 <HAL_UART_RegisterCallback+0x130>
 80075d4:	e009      	b.n	80075ea <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80075de:	e019      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80075e8:	e014      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	75fb      	strb	r3, [r7, #23]
        break;
 80075fe:	e009      	b.n	8007614 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007606:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
}
 8007616:	4618      	mov	r0, r3
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop

08007624 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08a      	sub	sp, #40	@ 0x28
 8007628:	af02      	add	r7, sp, #8
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800763a:	2b20      	cmp	r3, #32
 800763c:	f040 80b5 	bne.w	80077aa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_UART_Receive+0x28>
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e0ad      	b.n	80077ac <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2222      	movs	r2, #34	@ 0x22
 800765c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007666:	f7fb ffdb 	bl	8003620 <HAL_GetTick>
 800766a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	88fa      	ldrh	r2, [r7, #6]
 8007678:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007684:	d10e      	bne.n	80076a4 <HAL_UART_Receive+0x80>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d105      	bne.n	800769a <HAL_UART_Receive+0x76>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007694:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007698:	e02d      	b.n	80076f6 <HAL_UART_Receive+0xd2>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	22ff      	movs	r2, #255	@ 0xff
 800769e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076a2:	e028      	b.n	80076f6 <HAL_UART_Receive+0xd2>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10d      	bne.n	80076c8 <HAL_UART_Receive+0xa4>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <HAL_UART_Receive+0x9a>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	22ff      	movs	r2, #255	@ 0xff
 80076b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076bc:	e01b      	b.n	80076f6 <HAL_UART_Receive+0xd2>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	227f      	movs	r2, #127	@ 0x7f
 80076c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076c6:	e016      	b.n	80076f6 <HAL_UART_Receive+0xd2>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d0:	d10d      	bne.n	80076ee <HAL_UART_Receive+0xca>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <HAL_UART_Receive+0xc0>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	227f      	movs	r2, #127	@ 0x7f
 80076de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076e2:	e008      	b.n	80076f6 <HAL_UART_Receive+0xd2>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	223f      	movs	r2, #63	@ 0x3f
 80076e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076ec:	e003      	b.n	80076f6 <HAL_UART_Receive+0xd2>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80076fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007706:	d108      	bne.n	800771a <HAL_UART_Receive+0xf6>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	e003      	b.n	8007722 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007722:	e036      	b.n	8007792 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2200      	movs	r2, #0
 800772c:	2120      	movs	r1, #32
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f001 f99a 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2220      	movs	r2, #32
 800773e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e032      	b.n	80077ac <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007752:	b29a      	uxth	r2, r3
 8007754:	8a7b      	ldrh	r3, [r7, #18]
 8007756:	4013      	ands	r3, r2
 8007758:	b29a      	uxth	r2, r3
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	3302      	adds	r3, #2
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	e00c      	b.n	8007780 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776c:	b2da      	uxtb	r2, r3
 800776e:	8a7b      	ldrh	r3, [r7, #18]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	4013      	ands	r3, r2
 8007774:	b2da      	uxtb	r2, r3
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	3301      	adds	r3, #1
 800777e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1c2      	bne.n	8007724 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e000      	b.n	80077ac <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
  }
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	@ 0x28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	d167      	bne.n	800789c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <HAL_UART_Transmit_DMA+0x24>
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e060      	b.n	800789e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	88fa      	ldrh	r2, [r7, #6]
 80077e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2221      	movs	r2, #33	@ 0x21
 80077fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d028      	beq.n	800785c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800780e:	4a26      	ldr	r2, [pc, #152]	@ (80078a8 <HAL_UART_Transmit_DMA+0xf4>)
 8007810:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007816:	4a25      	ldr	r2, [pc, #148]	@ (80078ac <HAL_UART_Transmit_DMA+0xf8>)
 8007818:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800781e:	4a24      	ldr	r2, [pc, #144]	@ (80078b0 <HAL_UART_Transmit_DMA+0xfc>)
 8007820:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007826:	2200      	movs	r2, #0
 8007828:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007832:	4619      	mov	r1, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3328      	adds	r3, #40	@ 0x28
 800783a:	461a      	mov	r2, r3
 800783c:	88fb      	ldrh	r3, [r7, #6]
 800783e:	f7fc f8b3 	bl	80039a8 <HAL_DMA_Start_IT>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2210      	movs	r2, #16
 800784c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e020      	b.n	800789e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2240      	movs	r2, #64	@ 0x40
 8007862:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3308      	adds	r3, #8
 800786a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	613b      	str	r3, [r7, #16]
   return(result);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787a:	627b      	str	r3, [r7, #36]	@ 0x24
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007884:	623a      	str	r2, [r7, #32]
 8007886:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	69f9      	ldr	r1, [r7, #28]
 800788a:	6a3a      	ldr	r2, [r7, #32]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	61bb      	str	r3, [r7, #24]
   return(result);
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e5      	bne.n	8007864 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	e000      	b.n	800789e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800789c:	2302      	movs	r3, #2
  }
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3728      	adds	r7, #40	@ 0x28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	08008ddf 	.word	0x08008ddf
 80078ac:	08008e7d 	.word	0x08008e7d
 80078b0:	08009017 	.word	0x08009017

080078b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	@ 0x28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d137      	bne.n	800793c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <HAL_UART_Receive_DMA+0x24>
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e030      	b.n	800793e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a18      	ldr	r2, [pc, #96]	@ (8007948 <HAL_UART_Receive_DMA+0x94>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d01f      	beq.n	800792c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d018      	beq.n	800792c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	613b      	str	r3, [r7, #16]
   return(result);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	623b      	str	r3, [r7, #32]
 800791a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	69f9      	ldr	r1, [r7, #28]
 800791e:	6a3a      	ldr	r2, [r7, #32]
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	61bb      	str	r3, [r7, #24]
   return(result);
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e6      	bne.n	80078fa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	461a      	mov	r2, r3
 8007930:	68b9      	ldr	r1, [r7, #8]
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f001 f906 	bl	8008b44 <UART_Start_Receive_DMA>
 8007938:	4603      	mov	r3, r0
 800793a:	e000      	b.n	800793e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800793c:	2302      	movs	r3, #2
  }
}
 800793e:	4618      	mov	r0, r3
 8007940:	3728      	adds	r7, #40	@ 0x28
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40008000 	.word	0x40008000

0800794c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b0ba      	sub	sp, #232	@ 0xe8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007972:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007976:	f640 030f 	movw	r3, #2063	@ 0x80f
 800797a:	4013      	ands	r3, r2
 800797c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11b      	bne.n	80079c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	d015      	beq.n	80079c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d105      	bne.n	80079ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d009      	beq.n	80079c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 82f3 	beq.w	8007f9c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
      }
      return;
 80079be:	e2ed      	b.n	8007f9c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8129 	beq.w	8007c1c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80079ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80079ce:	4b90      	ldr	r3, [pc, #576]	@ (8007c10 <HAL_UART_IRQHandler+0x2c4>)
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d106      	bne.n	80079e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80079d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80079da:	4b8e      	ldr	r3, [pc, #568]	@ (8007c14 <HAL_UART_IRQHandler+0x2c8>)
 80079dc:	4013      	ands	r3, r2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 811c 	beq.w	8007c1c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d011      	beq.n	8007a14 <HAL_UART_IRQHandler+0xc8>
 80079f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2201      	movs	r2, #1
 8007a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0a:	f043 0201 	orr.w	r2, r3, #1
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d011      	beq.n	8007a44 <HAL_UART_IRQHandler+0xf8>
 8007a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2202      	movs	r2, #2
 8007a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a3a:	f043 0204 	orr.w	r2, r3, #4
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d011      	beq.n	8007a74 <HAL_UART_IRQHandler+0x128>
 8007a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2204      	movs	r2, #4
 8007a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a6a:	f043 0202 	orr.w	r2, r3, #2
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d017      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d105      	bne.n	8007a98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a90:	4b5f      	ldr	r3, [pc, #380]	@ (8007c10 <HAL_UART_IRQHandler+0x2c4>)
 8007a92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa6:	f043 0208 	orr.w	r2, r3, #8
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d012      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x196>
 8007abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00c      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad8:	f043 0220 	orr.w	r2, r3, #32
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 8259 	beq.w	8007fa0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d013      	beq.n	8007b22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d007      	beq.n	8007b22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b36:	2b40      	cmp	r3, #64	@ 0x40
 8007b38:	d005      	beq.n	8007b46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d058      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 f8e3 	bl	8008d12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b56:	2b40      	cmp	r3, #64	@ 0x40
 8007b58:	d148      	bne.n	8007bec <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3308      	adds	r3, #8
 8007b60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3308      	adds	r3, #8
 8007b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1d9      	bne.n	8007b5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d017      	beq.n	8007be0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb6:	4a18      	ldr	r2, [pc, #96]	@ (8007c18 <HAL_UART_IRQHandler+0x2cc>)
 8007bb8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fb ffc5 	bl	8003b50 <HAL_DMA_Abort_IT>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01f      	beq.n	8007c0c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bde:	e015      	b.n	8007c0c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bea:	e00f      	b.n	8007c0c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf6:	e009      	b.n	8007c0c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007c0a:	e1c9      	b.n	8007fa0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	bf00      	nop
    return;
 8007c0e:	e1c7      	b.n	8007fa0 <HAL_UART_IRQHandler+0x654>
 8007c10:	10000001 	.word	0x10000001
 8007c14:	04000120 	.word	0x04000120
 8007c18:	0800909b 	.word	0x0800909b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	f040 8157 	bne.w	8007ed4 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8150 	beq.w	8007ed4 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8149 	beq.w	8007ed4 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2210      	movs	r2, #16
 8007c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c54:	2b40      	cmp	r3, #64	@ 0x40
 8007c56:	f040 80bd 	bne.w	8007dd4 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8199 	beq.w	8007fa4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	f080 8191 	bcs.w	8007fa4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f040 8087 	bne.w	8007dae <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1da      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e1      	bne.n	8007cea <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e3      	bne.n	8007d26 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d7c:	f023 0310 	bic.w	r3, r3, #16
 8007d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e4      	bne.n	8007d6c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fb fe78 	bl	8003a9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2202      	movs	r2, #2
 8007db2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	1a8a      	subs	r2, r1, r2
 8007dca:	b292      	uxth	r2, r2
 8007dcc:	4611      	mov	r1, r2
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dd2:	e0e7      	b.n	8007fa4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80d9 	beq.w	8007fa8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8007df6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 80d4 	beq.w	8007fa8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e22:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e24:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e4      	bne.n	8007e00 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	623b      	str	r3, [r7, #32]
   return(result);
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e4c:	f023 0301 	bic.w	r3, r3, #1
 8007e50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e1      	bne.n	8007e36 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0310 	bic.w	r3, r3, #16
 8007e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ea8:	61fb      	str	r3, [r7, #28]
 8007eaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e4      	bne.n	8007e86 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007ec8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8007ecc:	4611      	mov	r1, r2
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ed2:	e069      	b.n	8007fa8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d010      	beq.n	8007f02 <HAL_UART_IRQHandler+0x5b6>
 8007ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007ef4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f00:	e055      	b.n	8007fae <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d014      	beq.n	8007f38 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d105      	bne.n	8007f26 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d008      	beq.n	8007f38 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d03e      	beq.n	8007fac <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
    }
    return;
 8007f36:	e039      	b.n	8007fac <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d009      	beq.n	8007f58 <HAL_UART_IRQHandler+0x60c>
 8007f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f8ba 	bl	80090ca <UART_EndTransmit_IT>
    return;
 8007f56:	e02a      	b.n	8007fae <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <HAL_UART_IRQHandler+0x630>
 8007f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f7a:	e018      	b.n	8007fae <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d012      	beq.n	8007fae <HAL_UART_IRQHandler+0x662>
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da0e      	bge.n	8007fae <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f9a:	e008      	b.n	8007fae <HAL_UART_IRQHandler+0x662>
      return;
 8007f9c:	bf00      	nop
 8007f9e:	e006      	b.n	8007fae <HAL_UART_IRQHandler+0x662>
    return;
 8007fa0:	bf00      	nop
 8007fa2:	e004      	b.n	8007fae <HAL_UART_IRQHandler+0x662>
      return;
 8007fa4:	bf00      	nop
 8007fa6:	e002      	b.n	8007fae <HAL_UART_IRQHandler+0x662>
      return;
 8007fa8:	bf00      	nop
 8007faa:	e000      	b.n	8007fae <HAL_UART_IRQHandler+0x662>
    return;
 8007fac:	bf00      	nop
  }
}
 8007fae:	37e8      	adds	r7, #232	@ 0xe8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a09      	ldr	r2, [pc, #36]	@ (80080a0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d009      	beq.n	8008094 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	615a      	str	r2, [r3, #20]
  }
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	40008000 	.word	0x40008000

080080a4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a18      	ldr	r2, [pc, #96]	@ (8008114 <HAL_UART_EnableReceiverTimeout+0x70>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d027      	beq.n	8008106 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d120      	bne.n	8008102 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_UART_EnableReceiverTimeout+0x2a>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e01c      	b.n	8008108 <HAL_UART_EnableReceiverTimeout+0x64>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2224      	movs	r2, #36	@ 0x24
 80080da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80080ec:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	e002      	b.n	8008108 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8008102:	2302      	movs	r3, #2
 8008104:	e000      	b.n	8008108 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
  }
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	40008000 	.word	0x40008000

08008118 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8008126:	4618      	mov	r0, r3
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
	...

08008134 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a1a      	ldr	r2, [pc, #104]	@ (80081a8 <UART_InitCallbacksToDefault+0x74>)
 8008140:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a19      	ldr	r2, [pc, #100]	@ (80081ac <UART_InitCallbacksToDefault+0x78>)
 8008148:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a18      	ldr	r2, [pc, #96]	@ (80081b0 <UART_InitCallbacksToDefault+0x7c>)
 8008150:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a17      	ldr	r2, [pc, #92]	@ (80081b4 <UART_InitCallbacksToDefault+0x80>)
 8008158:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a16      	ldr	r2, [pc, #88]	@ (80081b8 <UART_InitCallbacksToDefault+0x84>)
 8008160:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a15      	ldr	r2, [pc, #84]	@ (80081bc <UART_InitCallbacksToDefault+0x88>)
 8008168:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a14      	ldr	r2, [pc, #80]	@ (80081c0 <UART_InitCallbacksToDefault+0x8c>)
 8008170:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a13      	ldr	r2, [pc, #76]	@ (80081c4 <UART_InitCallbacksToDefault+0x90>)
 8008178:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a12      	ldr	r2, [pc, #72]	@ (80081c8 <UART_InitCallbacksToDefault+0x94>)
 8008180:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a11      	ldr	r2, [pc, #68]	@ (80081cc <UART_InitCallbacksToDefault+0x98>)
 8008188:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a10      	ldr	r2, [pc, #64]	@ (80081d0 <UART_InitCallbacksToDefault+0x9c>)
 8008190:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a0f      	ldr	r2, [pc, #60]	@ (80081d4 <UART_InitCallbacksToDefault+0xa0>)
 8008198:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	08007fc9 	.word	0x08007fc9
 80081ac:	08007fb5 	.word	0x08007fb5
 80081b0:	08007ff1 	.word	0x08007ff1
 80081b4:	08007fdd 	.word	0x08007fdd
 80081b8:	08008005 	.word	0x08008005
 80081bc:	08008019 	.word	0x08008019
 80081c0:	0800802d 	.word	0x0800802d
 80081c4:	08008041 	.word	0x08008041
 80081c8:	08009125 	.word	0x08009125
 80081cc:	08009139 	.word	0x08009139
 80081d0:	0800914d 	.word	0x0800914d
 80081d4:	08008055 	.word	0x08008055

080081d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081dc:	b08c      	sub	sp, #48	@ 0x30
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	431a      	orrs	r2, r3
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	4baa      	ldr	r3, [pc, #680]	@ (80084b0 <UART_SetConfig+0x2d8>)
 8008208:	4013      	ands	r3, r2
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	6812      	ldr	r2, [r2, #0]
 800820e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008210:	430b      	orrs	r3, r1
 8008212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a9f      	ldr	r2, [pc, #636]	@ (80084b4 <UART_SetConfig+0x2dc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d004      	beq.n	8008244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008240:	4313      	orrs	r3, r2
 8008242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800824e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	6812      	ldr	r2, [r2, #0]
 8008256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008258:	430b      	orrs	r3, r1
 800825a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	f023 010f 	bic.w	r1, r3, #15
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a90      	ldr	r2, [pc, #576]	@ (80084b8 <UART_SetConfig+0x2e0>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d125      	bne.n	80082c8 <UART_SetConfig+0xf0>
 800827c:	4b8f      	ldr	r3, [pc, #572]	@ (80084bc <UART_SetConfig+0x2e4>)
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b03      	cmp	r3, #3
 8008288:	d81a      	bhi.n	80082c0 <UART_SetConfig+0xe8>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <UART_SetConfig+0xb8>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082b1 	.word	0x080082b1
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a6:	e116      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082a8:	2302      	movs	r3, #2
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ae:	e112      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b6:	e10e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082be:	e10a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082c6:	e106      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a7c      	ldr	r2, [pc, #496]	@ (80084c0 <UART_SetConfig+0x2e8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d138      	bne.n	8008344 <UART_SetConfig+0x16c>
 80082d2:	4b7a      	ldr	r3, [pc, #488]	@ (80084bc <UART_SetConfig+0x2e4>)
 80082d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d8:	f003 030c 	and.w	r3, r3, #12
 80082dc:	2b0c      	cmp	r3, #12
 80082de:	d82d      	bhi.n	800833c <UART_SetConfig+0x164>
 80082e0:	a201      	add	r2, pc, #4	@ (adr r2, 80082e8 <UART_SetConfig+0x110>)
 80082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e6:	bf00      	nop
 80082e8:	0800831d 	.word	0x0800831d
 80082ec:	0800833d 	.word	0x0800833d
 80082f0:	0800833d 	.word	0x0800833d
 80082f4:	0800833d 	.word	0x0800833d
 80082f8:	0800832d 	.word	0x0800832d
 80082fc:	0800833d 	.word	0x0800833d
 8008300:	0800833d 	.word	0x0800833d
 8008304:	0800833d 	.word	0x0800833d
 8008308:	08008325 	.word	0x08008325
 800830c:	0800833d 	.word	0x0800833d
 8008310:	0800833d 	.word	0x0800833d
 8008314:	0800833d 	.word	0x0800833d
 8008318:	08008335 	.word	0x08008335
 800831c:	2300      	movs	r3, #0
 800831e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008322:	e0d8      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008324:	2302      	movs	r3, #2
 8008326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800832a:	e0d4      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800832c:	2304      	movs	r3, #4
 800832e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008332:	e0d0      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008334:	2308      	movs	r3, #8
 8008336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800833a:	e0cc      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800833c:	2310      	movs	r3, #16
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008342:	e0c8      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a5e      	ldr	r2, [pc, #376]	@ (80084c4 <UART_SetConfig+0x2ec>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d125      	bne.n	800839a <UART_SetConfig+0x1c2>
 800834e:	4b5b      	ldr	r3, [pc, #364]	@ (80084bc <UART_SetConfig+0x2e4>)
 8008350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008354:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008358:	2b30      	cmp	r3, #48	@ 0x30
 800835a:	d016      	beq.n	800838a <UART_SetConfig+0x1b2>
 800835c:	2b30      	cmp	r3, #48	@ 0x30
 800835e:	d818      	bhi.n	8008392 <UART_SetConfig+0x1ba>
 8008360:	2b20      	cmp	r3, #32
 8008362:	d00a      	beq.n	800837a <UART_SetConfig+0x1a2>
 8008364:	2b20      	cmp	r3, #32
 8008366:	d814      	bhi.n	8008392 <UART_SetConfig+0x1ba>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <UART_SetConfig+0x19a>
 800836c:	2b10      	cmp	r3, #16
 800836e:	d008      	beq.n	8008382 <UART_SetConfig+0x1aa>
 8008370:	e00f      	b.n	8008392 <UART_SetConfig+0x1ba>
 8008372:	2300      	movs	r3, #0
 8008374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008378:	e0ad      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800837a:	2302      	movs	r3, #2
 800837c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008380:	e0a9      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008382:	2304      	movs	r3, #4
 8008384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008388:	e0a5      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800838a:	2308      	movs	r3, #8
 800838c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008390:	e0a1      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008392:	2310      	movs	r3, #16
 8008394:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008398:	e09d      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a4a      	ldr	r2, [pc, #296]	@ (80084c8 <UART_SetConfig+0x2f0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d125      	bne.n	80083f0 <UART_SetConfig+0x218>
 80083a4:	4b45      	ldr	r3, [pc, #276]	@ (80084bc <UART_SetConfig+0x2e4>)
 80083a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80083ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80083b0:	d016      	beq.n	80083e0 <UART_SetConfig+0x208>
 80083b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80083b4:	d818      	bhi.n	80083e8 <UART_SetConfig+0x210>
 80083b6:	2b80      	cmp	r3, #128	@ 0x80
 80083b8:	d00a      	beq.n	80083d0 <UART_SetConfig+0x1f8>
 80083ba:	2b80      	cmp	r3, #128	@ 0x80
 80083bc:	d814      	bhi.n	80083e8 <UART_SetConfig+0x210>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <UART_SetConfig+0x1f0>
 80083c2:	2b40      	cmp	r3, #64	@ 0x40
 80083c4:	d008      	beq.n	80083d8 <UART_SetConfig+0x200>
 80083c6:	e00f      	b.n	80083e8 <UART_SetConfig+0x210>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	e082      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083d0:	2302      	movs	r3, #2
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d6:	e07e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083d8:	2304      	movs	r3, #4
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083de:	e07a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083e0:	2308      	movs	r3, #8
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e6:	e076      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083e8:	2310      	movs	r3, #16
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ee:	e072      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a35      	ldr	r2, [pc, #212]	@ (80084cc <UART_SetConfig+0x2f4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d12a      	bne.n	8008450 <UART_SetConfig+0x278>
 80083fa:	4b30      	ldr	r3, [pc, #192]	@ (80084bc <UART_SetConfig+0x2e4>)
 80083fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008408:	d01a      	beq.n	8008440 <UART_SetConfig+0x268>
 800840a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800840e:	d81b      	bhi.n	8008448 <UART_SetConfig+0x270>
 8008410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008414:	d00c      	beq.n	8008430 <UART_SetConfig+0x258>
 8008416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800841a:	d815      	bhi.n	8008448 <UART_SetConfig+0x270>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <UART_SetConfig+0x250>
 8008420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008424:	d008      	beq.n	8008438 <UART_SetConfig+0x260>
 8008426:	e00f      	b.n	8008448 <UART_SetConfig+0x270>
 8008428:	2300      	movs	r3, #0
 800842a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800842e:	e052      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008430:	2302      	movs	r3, #2
 8008432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008436:	e04e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008438:	2304      	movs	r3, #4
 800843a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800843e:	e04a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008440:	2308      	movs	r3, #8
 8008442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008446:	e046      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008448:	2310      	movs	r3, #16
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800844e:	e042      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a17      	ldr	r2, [pc, #92]	@ (80084b4 <UART_SetConfig+0x2dc>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d13a      	bne.n	80084d0 <UART_SetConfig+0x2f8>
 800845a:	4b18      	ldr	r3, [pc, #96]	@ (80084bc <UART_SetConfig+0x2e4>)
 800845c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008460:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008464:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008468:	d01a      	beq.n	80084a0 <UART_SetConfig+0x2c8>
 800846a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800846e:	d81b      	bhi.n	80084a8 <UART_SetConfig+0x2d0>
 8008470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008474:	d00c      	beq.n	8008490 <UART_SetConfig+0x2b8>
 8008476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800847a:	d815      	bhi.n	80084a8 <UART_SetConfig+0x2d0>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <UART_SetConfig+0x2b0>
 8008480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008484:	d008      	beq.n	8008498 <UART_SetConfig+0x2c0>
 8008486:	e00f      	b.n	80084a8 <UART_SetConfig+0x2d0>
 8008488:	2300      	movs	r3, #0
 800848a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800848e:	e022      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008490:	2302      	movs	r3, #2
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008496:	e01e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008498:	2304      	movs	r3, #4
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800849e:	e01a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80084a0:	2308      	movs	r3, #8
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084a6:	e016      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80084a8:	2310      	movs	r3, #16
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ae:	e012      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80084b0:	cfff69f3 	.word	0xcfff69f3
 80084b4:	40008000 	.word	0x40008000
 80084b8:	40013800 	.word	0x40013800
 80084bc:	40021000 	.word	0x40021000
 80084c0:	40004400 	.word	0x40004400
 80084c4:	40004800 	.word	0x40004800
 80084c8:	40004c00 	.word	0x40004c00
 80084cc:	40005000 	.word	0x40005000
 80084d0:	2310      	movs	r3, #16
 80084d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4aae      	ldr	r2, [pc, #696]	@ (8008794 <UART_SetConfig+0x5bc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	f040 8097 	bne.w	8008610 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d823      	bhi.n	8008532 <UART_SetConfig+0x35a>
 80084ea:	a201      	add	r2, pc, #4	@ (adr r2, 80084f0 <UART_SetConfig+0x318>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008515 	.word	0x08008515
 80084f4:	08008533 	.word	0x08008533
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008533 	.word	0x08008533
 8008500:	08008523 	.word	0x08008523
 8008504:	08008533 	.word	0x08008533
 8008508:	08008533 	.word	0x08008533
 800850c:	08008533 	.word	0x08008533
 8008510:	0800852b 	.word	0x0800852b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008514:	f7fc fc00 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8008518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800851a:	e010      	b.n	800853e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800851c:	4b9e      	ldr	r3, [pc, #632]	@ (8008798 <UART_SetConfig+0x5c0>)
 800851e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008520:	e00d      	b.n	800853e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008522:	f7fc fb8b 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8008526:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008528:	e009      	b.n	800853e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800852a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800852e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008530:	e005      	b.n	800853e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800853c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8130 	beq.w	80087a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854a:	4a94      	ldr	r2, [pc, #592]	@ (800879c <UART_SetConfig+0x5c4>)
 800854c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008550:	461a      	mov	r2, r3
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	fbb3 f3f2 	udiv	r3, r3, r2
 8008558:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	4413      	add	r3, r2
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	429a      	cmp	r2, r3
 8008568:	d305      	bcc.n	8008576 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	429a      	cmp	r2, r3
 8008574:	d903      	bls.n	800857e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800857c:	e113      	b.n	80087a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008580:	2200      	movs	r2, #0
 8008582:	60bb      	str	r3, [r7, #8]
 8008584:	60fa      	str	r2, [r7, #12]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858a:	4a84      	ldr	r2, [pc, #528]	@ (800879c <UART_SetConfig+0x5c4>)
 800858c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008590:	b29b      	uxth	r3, r3
 8008592:	2200      	movs	r2, #0
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800859c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085a0:	f7f8 fc36 	bl	8000e10 <__aeabi_uldivmod>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4610      	mov	r0, r2
 80085aa:	4619      	mov	r1, r3
 80085ac:	f04f 0200 	mov.w	r2, #0
 80085b0:	f04f 0300 	mov.w	r3, #0
 80085b4:	020b      	lsls	r3, r1, #8
 80085b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085ba:	0202      	lsls	r2, r0, #8
 80085bc:	6979      	ldr	r1, [r7, #20]
 80085be:	6849      	ldr	r1, [r1, #4]
 80085c0:	0849      	lsrs	r1, r1, #1
 80085c2:	2000      	movs	r0, #0
 80085c4:	460c      	mov	r4, r1
 80085c6:	4605      	mov	r5, r0
 80085c8:	eb12 0804 	adds.w	r8, r2, r4
 80085cc:	eb43 0905 	adc.w	r9, r3, r5
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	469a      	mov	sl, r3
 80085d8:	4693      	mov	fp, r2
 80085da:	4652      	mov	r2, sl
 80085dc:	465b      	mov	r3, fp
 80085de:	4640      	mov	r0, r8
 80085e0:	4649      	mov	r1, r9
 80085e2:	f7f8 fc15 	bl	8000e10 <__aeabi_uldivmod>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4613      	mov	r3, r2
 80085ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085f4:	d308      	bcc.n	8008608 <UART_SetConfig+0x430>
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085fc:	d204      	bcs.n	8008608 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6a3a      	ldr	r2, [r7, #32]
 8008604:	60da      	str	r2, [r3, #12]
 8008606:	e0ce      	b.n	80087a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800860e:	e0ca      	b.n	80087a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008618:	d166      	bne.n	80086e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800861a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800861e:	2b08      	cmp	r3, #8
 8008620:	d827      	bhi.n	8008672 <UART_SetConfig+0x49a>
 8008622:	a201      	add	r2, pc, #4	@ (adr r2, 8008628 <UART_SetConfig+0x450>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	0800864d 	.word	0x0800864d
 800862c:	08008655 	.word	0x08008655
 8008630:	0800865d 	.word	0x0800865d
 8008634:	08008673 	.word	0x08008673
 8008638:	08008663 	.word	0x08008663
 800863c:	08008673 	.word	0x08008673
 8008640:	08008673 	.word	0x08008673
 8008644:	08008673 	.word	0x08008673
 8008648:	0800866b 	.word	0x0800866b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800864c:	f7fc fb64 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8008650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008652:	e014      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008654:	f7fc fb76 	bl	8004d44 <HAL_RCC_GetPCLK2Freq>
 8008658:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800865a:	e010      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800865c:	4b4e      	ldr	r3, [pc, #312]	@ (8008798 <UART_SetConfig+0x5c0>)
 800865e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008660:	e00d      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008662:	f7fc faeb 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8008666:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008668:	e009      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800866a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800866e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008670:	e005      	b.n	800867e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800867c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 8090 	beq.w	80087a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868a:	4a44      	ldr	r2, [pc, #272]	@ (800879c <UART_SetConfig+0x5c4>)
 800868c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008690:	461a      	mov	r2, r3
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	fbb3 f3f2 	udiv	r3, r3, r2
 8008698:	005a      	lsls	r2, r3, #1
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	441a      	add	r2, r3
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	2b0f      	cmp	r3, #15
 80086b0:	d916      	bls.n	80086e0 <UART_SetConfig+0x508>
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086b8:	d212      	bcs.n	80086e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	f023 030f 	bic.w	r3, r3, #15
 80086c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	8bfb      	ldrh	r3, [r7, #30]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	8bfa      	ldrh	r2, [r7, #30]
 80086dc:	60da      	str	r2, [r3, #12]
 80086de:	e062      	b.n	80087a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086e6:	e05e      	b.n	80087a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d828      	bhi.n	8008742 <UART_SetConfig+0x56a>
 80086f0:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <UART_SetConfig+0x520>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	0800871d 	.word	0x0800871d
 80086fc:	08008725 	.word	0x08008725
 8008700:	0800872d 	.word	0x0800872d
 8008704:	08008743 	.word	0x08008743
 8008708:	08008733 	.word	0x08008733
 800870c:	08008743 	.word	0x08008743
 8008710:	08008743 	.word	0x08008743
 8008714:	08008743 	.word	0x08008743
 8008718:	0800873b 	.word	0x0800873b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800871c:	f7fc fafc 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8008720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008722:	e014      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008724:	f7fc fb0e 	bl	8004d44 <HAL_RCC_GetPCLK2Freq>
 8008728:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800872a:	e010      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800872c:	4b1a      	ldr	r3, [pc, #104]	@ (8008798 <UART_SetConfig+0x5c0>)
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008730:	e00d      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008732:	f7fc fa83 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8008736:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008738:	e009      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800873e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008740:	e005      	b.n	800874e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800874c:	bf00      	nop
    }

    if (pclk != 0U)
 800874e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d028      	beq.n	80087a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008758:	4a10      	ldr	r2, [pc, #64]	@ (800879c <UART_SetConfig+0x5c4>)
 800875a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800875e:	461a      	mov	r2, r3
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	fbb3 f2f2 	udiv	r2, r3, r2
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	085b      	lsrs	r3, r3, #1
 800876c:	441a      	add	r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	fbb2 f3f3 	udiv	r3, r2, r3
 8008776:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b0f      	cmp	r3, #15
 800877c:	d910      	bls.n	80087a0 <UART_SetConfig+0x5c8>
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008784:	d20c      	bcs.n	80087a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	b29a      	uxth	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60da      	str	r2, [r3, #12]
 8008790:	e009      	b.n	80087a6 <UART_SetConfig+0x5ce>
 8008792:	bf00      	nop
 8008794:	40008000 	.word	0x40008000
 8008798:	00f42400 	.word	0x00f42400
 800879c:	08009424 	.word	0x08009424
      }
      else
      {
        ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2200      	movs	r2, #0
 80087ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2200      	movs	r2, #0
 80087c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80087c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3730      	adds	r7, #48	@ 0x30
 80087ca:	46bd      	mov	sp, r7
 80087cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080087d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	f003 0308 	and.w	r3, r3, #8
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01a      	beq.n	80088e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088ce:	d10a      	bne.n	80088e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	605a      	str	r2, [r3, #4]
  }
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b098      	sub	sp, #96	@ 0x60
 8008918:	af02      	add	r7, sp, #8
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008924:	f7fa fe7c 	bl	8003620 <HAL_GetTick>
 8008928:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0308 	and.w	r3, r3, #8
 8008934:	2b08      	cmp	r3, #8
 8008936:	d12f      	bne.n	8008998 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008938:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008940:	2200      	movs	r2, #0
 8008942:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f88e 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d022      	beq.n	8008998 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008966:	653b      	str	r3, [r7, #80]	@ 0x50
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	461a      	mov	r2, r3
 800896e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008970:	647b      	str	r3, [r7, #68]	@ 0x44
 8008972:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800897e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e6      	bne.n	8008952 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e063      	b.n	8008a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d149      	bne.n	8008a3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089ae:	2200      	movs	r2, #0
 80089b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f857 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d03c      	beq.n	8008a3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	623b      	str	r3, [r7, #32]
   return(result);
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089de:	633b      	str	r3, [r7, #48]	@ 0x30
 80089e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e6      	bne.n	80089c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3308      	adds	r3, #8
 80089f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a12:	61fa      	str	r2, [r7, #28]
 8008a14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	69b9      	ldr	r1, [r7, #24]
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e5      	bne.n	80089f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e012      	b.n	8008a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3758      	adds	r7, #88	@ 0x58
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	4613      	mov	r3, r2
 8008a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a78:	e04f      	b.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d04b      	beq.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a82:	f7fa fdcd 	bl	8003620 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d302      	bcc.n	8008a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d101      	bne.n	8008a9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e04e      	b.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d037      	beq.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b80      	cmp	r3, #128	@ 0x80
 8008aae:	d034      	beq.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b40      	cmp	r3, #64	@ 0x40
 8008ab4:	d031      	beq.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d110      	bne.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2208      	movs	r2, #8
 8008aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f920 	bl	8008d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2208      	movs	r2, #8
 8008ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e029      	b.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008af4:	d111      	bne.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 f906 	bl	8008d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e00f      	b.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69da      	ldr	r2, [r3, #28]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4013      	ands	r3, r2
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	bf0c      	ite	eq
 8008b2a:	2301      	moveq	r3, #1
 8008b2c:	2300      	movne	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d0a0      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b096      	sub	sp, #88	@ 0x58
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	88fa      	ldrh	r2, [r7, #6]
 8008b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2222      	movs	r2, #34	@ 0x22
 8008b6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d02d      	beq.n	8008bd6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b80:	4a40      	ldr	r2, [pc, #256]	@ (8008c84 <UART_Start_Receive_DMA+0x140>)
 8008b82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8008c88 <UART_Start_Receive_DMA+0x144>)
 8008b8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b94:	4a3d      	ldr	r2, [pc, #244]	@ (8008c8c <UART_Start_Receive_DMA+0x148>)
 8008b96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3324      	adds	r3, #36	@ 0x24
 8008bae:	4619      	mov	r1, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	f7fa fef6 	bl	80039a8 <HAL_DMA_Start_IT>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2210      	movs	r2, #16
 8008bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e051      	b.n	8008c7a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d018      	beq.n	8008c10 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be6:	e853 3f00 	ldrex	r3, [r3]
 8008bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bfe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c04:	e841 2300 	strex	r3, r2, [r1]
 8008c08:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e6      	bne.n	8008bde <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3308      	adds	r3, #8
 8008c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c30:	637a      	str	r2, [r7, #52]	@ 0x34
 8008c32:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e5      	bne.n	8008c10 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3308      	adds	r3, #8
 8008c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	613b      	str	r3, [r7, #16]
   return(result);
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c64:	623a      	str	r2, [r7, #32]
 8008c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	69f9      	ldr	r1, [r7, #28]
 8008c6a:	6a3a      	ldr	r2, [r7, #32]
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e5      	bne.n	8008c44 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3758      	adds	r7, #88	@ 0x58
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	08008e9d 	.word	0x08008e9d
 8008c88:	08008fd1 	.word	0x08008fd1
 8008c8c:	08009017 	.word	0x08009017

08008c90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b08f      	sub	sp, #60	@ 0x3c
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cb8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cea:	61ba      	str	r2, [r7, #24]
 8008cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6979      	ldr	r1, [r7, #20]
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e5      	bne.n	8008cca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008d06:	bf00      	nop
 8008d08:	373c      	adds	r7, #60	@ 0x3c
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b095      	sub	sp, #84	@ 0x54
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d22:	e853 3f00 	ldrex	r3, [r3]
 8008d26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d40:	e841 2300 	strex	r3, r2, [r1]
 8008d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e6      	bne.n	8008d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3308      	adds	r3, #8
 8008d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d62:	f023 0301 	bic.w	r3, r3, #1
 8008d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d78:	e841 2300 	strex	r3, r2, [r1]
 8008d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e3      	bne.n	8008d4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d118      	bne.n	8008dbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f023 0310 	bic.w	r3, r3, #16
 8008da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008daa:	61bb      	str	r3, [r7, #24]
 8008dac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6979      	ldr	r1, [r7, #20]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	613b      	str	r3, [r7, #16]
   return(result);
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e6      	bne.n	8008d8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008dd2:	bf00      	nop
 8008dd4:	3754      	adds	r7, #84	@ 0x54
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b090      	sub	sp, #64	@ 0x40
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d137      	bne.n	8008e6a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	623b      	str	r3, [r7, #32]
   return(result);
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e22:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e2a:	e841 2300 	strex	r3, r2, [r1]
 8008e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1e5      	bne.n	8008e02 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	e853 3f00 	ldrex	r3, [r3]
 8008e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e54:	61fb      	str	r3, [r7, #28]
 8008e56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e58:	69b9      	ldr	r1, [r7, #24]
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	e841 2300 	strex	r3, r2, [r1]
 8008e60:	617b      	str	r3, [r7, #20]
   return(result);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1e6      	bne.n	8008e36 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e68:	e004      	b.n	8008e74 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8008e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008e72:	4798      	blx	r3
}
 8008e74:	bf00      	nop
 8008e76:	3740      	adds	r7, #64	@ 0x40
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b09c      	sub	sp, #112	@ 0x70
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d171      	bne.n	8008f9c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ede:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ee0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ee4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008eec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e6      	bne.n	8008ec0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f04:	f023 0301 	bic.w	r3, r3, #1
 8008f08:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008f12:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e5      	bne.n	8008ef2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	623b      	str	r3, [r7, #32]
   return(result);
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3308      	adds	r3, #8
 8008f44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f46:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e5      	bne.n	8008f26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d118      	bne.n	8008f9c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0310 	bic.w	r3, r3, #16
 8008f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f88:	61fb      	str	r3, [r7, #28]
 8008f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	69b9      	ldr	r1, [r7, #24]
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	617b      	str	r3, [r7, #20]
   return(result);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e6      	bne.n	8008f6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d109      	bne.n	8008fbe <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008fb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008fb2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008fba:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fbc:	e004      	b.n	8008fc8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8008fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008fc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008fc6:	4798      	blx	r3
}
 8008fc8:	bf00      	nop
 8008fca:	3770      	adds	r7, #112	@ 0x70
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fdc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d10b      	bne.n	8009004 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008ff8:	0852      	lsrs	r2, r2, #1
 8008ffa:	b292      	uxth	r2, r2
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009002:	e004      	b.n	800900e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	4798      	blx	r3
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b086      	sub	sp, #24
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800902a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009032:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800903e:	2b80      	cmp	r3, #128	@ 0x80
 8009040:	d109      	bne.n	8009056 <UART_DMAError+0x40>
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2b21      	cmp	r3, #33	@ 0x21
 8009046:	d106      	bne.n	8009056 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2200      	movs	r2, #0
 800904c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009050:	6978      	ldr	r0, [r7, #20]
 8009052:	f7ff fe1d 	bl	8008c90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009060:	2b40      	cmp	r3, #64	@ 0x40
 8009062:	d109      	bne.n	8009078 <UART_DMAError+0x62>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b22      	cmp	r3, #34	@ 0x22
 8009068:	d106      	bne.n	8009078 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2200      	movs	r2, #0
 800906e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009072:	6978      	ldr	r0, [r7, #20]
 8009074:	f7ff fe4d 	bl	8008d12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907e:	f043 0210 	orr.w	r2, r3, #16
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009092:	bf00      	nop
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090c2:	bf00      	nop
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b088      	sub	sp, #32
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090e6:	61fb      	str	r3, [r7, #28]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	61bb      	str	r3, [r7, #24]
 80090f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6979      	ldr	r1, [r7, #20]
 80090f6:	69ba      	ldr	r2, [r7, #24]
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	613b      	str	r3, [r7, #16]
   return(result);
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e6      	bne.n	80090d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2220      	movs	r2, #32
 8009108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800911c:	bf00      	nop
 800911e:	3720      	adds	r7, #32
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800916e:	2b01      	cmp	r3, #1
 8009170:	d101      	bne.n	8009176 <HAL_UARTEx_DisableFifoMode+0x16>
 8009172:	2302      	movs	r3, #2
 8009174:	e027      	b.n	80091c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2224      	movs	r2, #36	@ 0x24
 8009182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0201 	bic.w	r2, r2, #1
 800919c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80091a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2220      	movs	r2, #32
 80091b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d101      	bne.n	80091ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091e6:	2302      	movs	r3, #2
 80091e8:	e02d      	b.n	8009246 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2224      	movs	r2, #36	@ 0x24
 80091f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0201 	bic.w	r2, r2, #1
 8009210:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f850 	bl	80092cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2220      	movs	r2, #32
 8009238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800925e:	2b01      	cmp	r3, #1
 8009260:	d101      	bne.n	8009266 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009262:	2302      	movs	r3, #2
 8009264:	e02d      	b.n	80092c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2224      	movs	r2, #36	@ 0x24
 8009272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f022 0201 	bic.w	r2, r2, #1
 800928c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f812 	bl	80092cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d108      	bne.n	80092ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092ec:	e031      	b.n	8009352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092ee:	2308      	movs	r3, #8
 80092f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092f2:	2308      	movs	r3, #8
 80092f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	0e5b      	lsrs	r3, r3, #25
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f003 0307 	and.w	r3, r3, #7
 8009304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	0f5b      	lsrs	r3, r3, #29
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 0307 	and.w	r3, r3, #7
 8009314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009316:	7bbb      	ldrb	r3, [r7, #14]
 8009318:	7b3a      	ldrb	r2, [r7, #12]
 800931a:	4911      	ldr	r1, [pc, #68]	@ (8009360 <UARTEx_SetNbDataToProcess+0x94>)
 800931c:	5c8a      	ldrb	r2, [r1, r2]
 800931e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009322:	7b3a      	ldrb	r2, [r7, #12]
 8009324:	490f      	ldr	r1, [pc, #60]	@ (8009364 <UARTEx_SetNbDataToProcess+0x98>)
 8009326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009328:	fb93 f3f2 	sdiv	r3, r3, r2
 800932c:	b29a      	uxth	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009334:	7bfb      	ldrb	r3, [r7, #15]
 8009336:	7b7a      	ldrb	r2, [r7, #13]
 8009338:	4909      	ldr	r1, [pc, #36]	@ (8009360 <UARTEx_SetNbDataToProcess+0x94>)
 800933a:	5c8a      	ldrb	r2, [r1, r2]
 800933c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009340:	7b7a      	ldrb	r2, [r7, #13]
 8009342:	4908      	ldr	r1, [pc, #32]	@ (8009364 <UARTEx_SetNbDataToProcess+0x98>)
 8009344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009346:	fb93 f3f2 	sdiv	r3, r3, r2
 800934a:	b29a      	uxth	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009352:	bf00      	nop
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	0800943c 	.word	0x0800943c
 8009364:	08009444 	.word	0x08009444

08009368 <memset>:
 8009368:	4402      	add	r2, r0
 800936a:	4603      	mov	r3, r0
 800936c:	4293      	cmp	r3, r2
 800936e:	d100      	bne.n	8009372 <memset+0xa>
 8009370:	4770      	bx	lr
 8009372:	f803 1b01 	strb.w	r1, [r3], #1
 8009376:	e7f9      	b.n	800936c <memset+0x4>

08009378 <__libc_init_array>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	4d0d      	ldr	r5, [pc, #52]	@ (80093b0 <__libc_init_array+0x38>)
 800937c:	4c0d      	ldr	r4, [pc, #52]	@ (80093b4 <__libc_init_array+0x3c>)
 800937e:	1b64      	subs	r4, r4, r5
 8009380:	10a4      	asrs	r4, r4, #2
 8009382:	2600      	movs	r6, #0
 8009384:	42a6      	cmp	r6, r4
 8009386:	d109      	bne.n	800939c <__libc_init_array+0x24>
 8009388:	4d0b      	ldr	r5, [pc, #44]	@ (80093b8 <__libc_init_array+0x40>)
 800938a:	4c0c      	ldr	r4, [pc, #48]	@ (80093bc <__libc_init_array+0x44>)
 800938c:	f000 f826 	bl	80093dc <_init>
 8009390:	1b64      	subs	r4, r4, r5
 8009392:	10a4      	asrs	r4, r4, #2
 8009394:	2600      	movs	r6, #0
 8009396:	42a6      	cmp	r6, r4
 8009398:	d105      	bne.n	80093a6 <__libc_init_array+0x2e>
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a0:	4798      	blx	r3
 80093a2:	3601      	adds	r6, #1
 80093a4:	e7ee      	b.n	8009384 <__libc_init_array+0xc>
 80093a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093aa:	4798      	blx	r3
 80093ac:	3601      	adds	r6, #1
 80093ae:	e7f2      	b.n	8009396 <__libc_init_array+0x1e>
 80093b0:	08009454 	.word	0x08009454
 80093b4:	08009454 	.word	0x08009454
 80093b8:	08009454 	.word	0x08009454
 80093bc:	08009458 	.word	0x08009458

080093c0 <memcpy>:
 80093c0:	440a      	add	r2, r1
 80093c2:	4291      	cmp	r1, r2
 80093c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093c8:	d100      	bne.n	80093cc <memcpy+0xc>
 80093ca:	4770      	bx	lr
 80093cc:	b510      	push	{r4, lr}
 80093ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093d6:	4291      	cmp	r1, r2
 80093d8:	d1f9      	bne.n	80093ce <memcpy+0xe>
 80093da:	bd10      	pop	{r4, pc}

080093dc <_init>:
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093de:	bf00      	nop
 80093e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e2:	bc08      	pop	{r3}
 80093e4:	469e      	mov	lr, r3
 80093e6:	4770      	bx	lr

080093e8 <_fini>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	bf00      	nop
 80093ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ee:	bc08      	pop	{r3}
 80093f0:	469e      	mov	lr, r3
 80093f2:	4770      	bx	lr
