
JingJingla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b94  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006d6c  08006d6c  00007d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd0  08006dd0  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd0  08006dd0  00007dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd8  08006dd8  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd8  08006dd8  00007dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ddc  08006ddc  00007ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006de0  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000078  08006e58  00008078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08006e58  0000852c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014697  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294e  00000000  00000000  0001c73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001f090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d17  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026875  00000000  00000000  00020e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148f0  00000000  00000000  000476e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbafb  00000000  00000000  0005bfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157acf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae4  00000000  00000000  00157b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0015c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006d54 	.word	0x08006d54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08006d54 	.word	0x08006d54

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <AMT_encoder_init>:
float diffTime;
float filtered_data;
float ALPHA = 0.3f;

void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f0:	213c      	movs	r1, #60	@ 0x3c
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fcdc 	bl	8004ab0 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 10.0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	220a      	movs	r2, #10
 80010fc:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 10.0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	220a      	movs	r2, #10
 8001102:	605a      	str	r2, [r3, #4]
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	0000      	movs	r0, r0
	...

08001110 <AMT_encoder_update>:

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	e9c7 2300 	strd	r2, r3, [r7]
	//collect data
	AMT_data->TimeStamp[QEI_NOW] = current_time;
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001126:	e9c1 2302 	strd	r2, r3, [r1, #8]
	AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	601a      	str	r2, [r3, #0]

	//Postion 1 turn calculation
	AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a67      	ldr	r2, [pc, #412]	@ (80012d8 <AMT_encoder_update+0x1c8>)
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001140:	fb01 f202 	mul.w	r2, r1, r2
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	621a      	str	r2, [r3, #32]

	//calculate dx
	diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	461a      	mov	r2, r3
 8001158:	4b60      	ldr	r3, [pc, #384]	@ (80012dc <AMT_encoder_update+0x1cc>)
 800115a:	601a      	str	r2, [r3, #0]

	//Handle Warp around
	if(diffPosition > 32767)
 800115c:	4b5f      	ldr	r3, [pc, #380]	@ (80012dc <AMT_encoder_update+0x1cc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001164:	db06      	blt.n	8001174 <AMT_encoder_update+0x64>
		diffPosition -= 65535;
 8001166:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <AMT_encoder_update+0x1cc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 800116e:	3bff      	subs	r3, #255	@ 0xff
 8001170:	4a5a      	ldr	r2, [pc, #360]	@ (80012dc <AMT_encoder_update+0x1cc>)
 8001172:	6013      	str	r3, [r2, #0]
	if(diffPosition < -32767)
 8001174:	4b59      	ldr	r3, [pc, #356]	@ (80012dc <AMT_encoder_update+0x1cc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800117c:	dc06      	bgt.n	800118c <AMT_encoder_update+0x7c>
		diffPosition += 65535;
 800117e:	4b57      	ldr	r3, [pc, #348]	@ (80012dc <AMT_encoder_update+0x1cc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001186:	33ff      	adds	r3, #255	@ 0xff
 8001188:	4a54      	ldr	r2, [pc, #336]	@ (80012dc <AMT_encoder_update+0x1cc>)
 800118a:	6013      	str	r3, [r2, #0]

	//calculate dt
	diffTime = (AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV] );
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001198:	1a84      	subs	r4, r0, r2
 800119a:	eb61 0503 	sbc.w	r5, r1, r3
 800119e:	4620      	mov	r0, r4
 80011a0:	4629      	mov	r1, r5
 80011a2:	f7ff fddd 	bl	8000d60 <__aeabi_ul2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a4d      	ldr	r2, [pc, #308]	@ (80012e0 <AMT_encoder_update+0x1d0>)
 80011aa:	6013      	str	r3, [r2, #0]

	//calculate anglar velocity
	AMT_data->Angular_Velocity = (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6));	//RPM
 80011ac:	4b4b      	ldr	r3, [pc, #300]	@ (80012dc <AMT_encoder_update+0x1cc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f983 	bl	80004bc <__aeabi_i2d>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b4a      	ldr	r3, [pc, #296]	@ (80012e4 <AMT_encoder_update+0x1d4>)
 80011bc:	f7ff f9e8 	bl	8000590 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4690      	mov	r8, r2
 80011c6:	4699      	mov	r9, r3
 80011c8:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <AMT_encoder_update+0x1c8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f965 	bl	800049c <__aeabi_ui2d>
 80011d2:	4604      	mov	r4, r0
 80011d4:	460d      	mov	r5, r1
 80011d6:	4b42      	ldr	r3, [pc, #264]	@ (80012e0 <AMT_encoder_update+0x1d0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f980 	bl	80004e0 <__aeabi_f2d>
 80011e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80012d0 <AMT_encoder_update+0x1c0>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fafd 	bl	80007e4 <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff f9cd 	bl	8000590 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4640      	mov	r0, r8
 80011fc:	4649      	mov	r1, r9
 80011fe:	f7ff faf1 	bl	80007e4 <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fc91 	bl	8000b30 <__aeabi_d2f>
 800120e:	4602      	mov	r2, r0
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24
	AMT_data->Linear_Position += (diffPosition*pulley_cir)/cnt_per_rev;			//mm
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800121a:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <AMT_encoder_update+0x1cc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001226:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <AMT_encoder_update+0x1d8>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001230:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <AMT_encoder_update+0x1c8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800123c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	AMT_data->Linear_Velocity = lowPassFilter((AMT_data->Angular_Velocity / 60.0) * pulley_cir);		//mm/s
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f946 	bl	80004e0 <__aeabi_f2d>
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <AMT_encoder_update+0x1d4>)
 800125a:	f7ff fac3 	bl	80007e4 <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4614      	mov	r4, r2
 8001264:	461d      	mov	r5, r3
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <AMT_encoder_update+0x1d8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f938 	bl	80004e0 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f98a 	bl	8000590 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc54 	bl	8000b30 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	ee00 3a10 	vmov	s0, r3
 800128e:	f000 f82d 	bl	80012ec <lowPassFilter>
 8001292:	eef0 7a40 	vmov.f32	s15, s0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity;					//Uodate Velo
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	619a      	str	r2, [r3, #24]
//	AMT_data->Linear_Acceleration = ((AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) *  1000000.0) / (diffTime);		//mm/s^2

	//store value for next loop
	AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012b2:	68f9      	ldr	r1, [r7, #12]
 80012b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	61da      	str	r2, [r3, #28]
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	412e8480 	.word	0x412e8480
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000094 	.word	0x20000094
 80012e0:	20000098 	.word	0x20000098
 80012e4:	404e0000 	.word	0x404e0000
 80012e8:	20000004 	.word	0x20000004

080012ec <lowPassFilter>:
	AMT_data->Linear_Position = 0;
	AMT_data->Position[QEI_NOW] = 0;

}

float lowPassFilter(float raw_data) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	ed87 0a01 	vstr	s0, [r7, #4]
    // Apply exponential moving average filter
    filtered_data = ALPHA * raw_data + (1.0f - ALPHA) * filtered_data;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <lowPassFilter+0x50>)
 80012f8:	ed93 7a00 	vldr	s14, [r3]
 80012fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <lowPassFilter+0x50>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800130e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <lowPassFilter+0x54>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <lowPassFilter+0x54>)
 8001322:	edc3 7a00 	vstr	s15, [r3]
    return filtered_data;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <lowPassFilter+0x54>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000008 	.word	0x20000008
 8001340:	2000009c 	.word	0x2000009c

08001344 <MOTOR_init>:
 *      Author: napat
 */
#include "Motor.h"

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	460b      	mov	r3, r1
 8001354:	80fb      	strh	r3, [r7, #6]
 8001356:	4613      	mov	r3, r2
 8001358:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	88fa      	ldrh	r2, [r7, #6]
 8001364:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	88ba      	ldrh	r2, [r7, #4]
 800136a:	80da      	strh	r2, [r3, #6]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 8001378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800137c:	b089      	sub	sp, #36	@ 0x24
 800137e:	af00      	add	r7, sp, #0
 8001380:	61f8      	str	r0, [r7, #28]
 8001382:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8263 	beq.w	8001854 <MOTOR_set_duty+0x4dc>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 825e 	beq.w	8001854 <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 8001398:	69b8      	ldr	r0, [r7, #24]
 800139a:	f7ff f8a1 	bl	80004e0 <__aeabi_f2d>
 800139e:	a394      	add	r3, pc, #592	@ (adr r3, 80015f0 <MOTOR_set_duty+0x278>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff f8f4 	bl	8000590 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	a395      	add	r3, pc, #596	@ (adr r3, 8001608 <MOTOR_set_duty+0x290>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff fb71 	bl	8000a9c <__aeabi_dcmpge>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MOTOR_set_duty+0x4c>
 80013c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001600 <MOTOR_set_duty+0x288>)
 80013c2:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 80013c4:	69b8      	ldr	r0, [r7, #24]
 80013c6:	f7ff f88b 	bl	80004e0 <__aeabi_f2d>
 80013ca:	a389      	add	r3, pc, #548	@ (adr r3, 80015f0 <MOTOR_set_duty+0x278>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff f8de 	bl	8000590 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	a386      	add	r3, pc, #536	@ (adr r3, 80015f8 <MOTOR_set_duty+0x280>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff fb51 	bl	8000a88 <__aeabi_dcmple>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MOTOR_set_duty+0x78>
 80013ec:	4b85      	ldr	r3, [pc, #532]	@ (8001604 <MOTOR_set_duty+0x28c>)
 80013ee:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 80013f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	d16e      	bne.n	80014dc <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	889b      	ldrh	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d105      	bne.n	8001412 <MOTOR_set_duty+0x9a>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001410:	e02c      	b.n	800146c <MOTOR_set_duty+0xf4>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	889b      	ldrh	r3, [r3, #4]
 8001416:	2b04      	cmp	r3, #4
 8001418:	d105      	bne.n	8001426 <MOTOR_set_duty+0xae>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2300      	movs	r3, #0
 8001422:	6393      	str	r3, [r2, #56]	@ 0x38
 8001424:	e022      	b.n	800146c <MOTOR_set_duty+0xf4>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	889b      	ldrh	r3, [r3, #4]
 800142a:	2b08      	cmp	r3, #8
 800142c:	d105      	bne.n	800143a <MOTOR_set_duty+0xc2>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2300      	movs	r3, #0
 8001436:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001438:	e018      	b.n	800146c <MOTOR_set_duty+0xf4>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	889b      	ldrh	r3, [r3, #4]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d105      	bne.n	800144e <MOTOR_set_duty+0xd6>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2300      	movs	r3, #0
 800144a:	6413      	str	r3, [r2, #64]	@ 0x40
 800144c:	e00e      	b.n	800146c <MOTOR_set_duty+0xf4>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	889b      	ldrh	r3, [r3, #4]
 8001452:	2b10      	cmp	r3, #16
 8001454:	d105      	bne.n	8001462 <MOTOR_set_duty+0xea>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001460:	e004      	b.n	800146c <MOTOR_set_duty+0xf4>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2300      	movs	r3, #0
 800146a:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	88db      	ldrh	r3, [r3, #6]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <MOTOR_set_duty+0x108>
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34
 800147e:	e1ea      	b.n	8001856 <MOTOR_set_duty+0x4de>
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	88db      	ldrh	r3, [r3, #6]
 8001484:	2b04      	cmp	r3, #4
 8001486:	d105      	bne.n	8001494 <MOTOR_set_duty+0x11c>
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	6393      	str	r3, [r2, #56]	@ 0x38
 8001492:	e1e0      	b.n	8001856 <MOTOR_set_duty+0x4de>
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	88db      	ldrh	r3, [r3, #6]
 8001498:	2b08      	cmp	r3, #8
 800149a:	d105      	bne.n	80014a8 <MOTOR_set_duty+0x130>
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014a6:	e1d6      	b.n	8001856 <MOTOR_set_duty+0x4de>
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	88db      	ldrh	r3, [r3, #6]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d105      	bne.n	80014bc <MOTOR_set_duty+0x144>
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	e1cc      	b.n	8001856 <MOTOR_set_duty+0x4de>
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	88db      	ldrh	r3, [r3, #6]
 80014c0:	2b10      	cmp	r3, #16
 80014c2:	d105      	bne.n	80014d0 <MOTOR_set_duty+0x158>
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2300      	movs	r3, #0
 80014cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ce:	e1c2      	b.n	8001856 <MOTOR_set_duty+0x4de>
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	2300      	movs	r3, #0
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	e1bc      	b.n	8001856 <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 80014dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80014e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	f340 80d6 	ble.w	8001698 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	889b      	ldrh	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <MOTOR_set_duty+0x188>
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2200      	movs	r2, #0
 80014fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014fe:	e02c      	b.n	800155a <MOTOR_set_duty+0x1e2>
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	889b      	ldrh	r3, [r3, #4]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d105      	bne.n	8001514 <MOTOR_set_duty+0x19c>
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	6393      	str	r3, [r2, #56]	@ 0x38
 8001512:	e022      	b.n	800155a <MOTOR_set_duty+0x1e2>
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	889b      	ldrh	r3, [r3, #4]
 8001518:	2b08      	cmp	r3, #8
 800151a:	d105      	bne.n	8001528 <MOTOR_set_duty+0x1b0>
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2300      	movs	r3, #0
 8001524:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001526:	e018      	b.n	800155a <MOTOR_set_duty+0x1e2>
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d105      	bne.n	800153c <MOTOR_set_duty+0x1c4>
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	e00e      	b.n	800155a <MOTOR_set_duty+0x1e2>
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	889b      	ldrh	r3, [r3, #4]
 8001540:	2b10      	cmp	r3, #16
 8001542:	d105      	bne.n	8001550 <MOTOR_set_duty+0x1d8>
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2300      	movs	r3, #0
 800154c:	6493      	str	r3, [r2, #72]	@ 0x48
 800154e:	e004      	b.n	800155a <MOTOR_set_duty+0x1e2>
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2300      	movs	r3, #0
 8001558:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	88db      	ldrh	r3, [r3, #6]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d113      	bne.n	800158a <MOTOR_set_duty+0x212>
 8001562:	69b8      	ldr	r0, [r7, #24]
 8001564:	f7fe ffbc 	bl	80004e0 <__aeabi_f2d>
 8001568:	a321      	add	r3, pc, #132	@ (adr r3, 80015f0 <MOTOR_set_duty+0x278>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f80f 	bl	8000590 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681c      	ldr	r4, [r3, #0]
 8001580:	f7ff fab6 	bl	8000af0 <__aeabi_d2uiz>
 8001584:	4603      	mov	r3, r0
 8001586:	6363      	str	r3, [r4, #52]	@ 0x34
 8001588:	e165      	b.n	8001856 <MOTOR_set_duty+0x4de>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	88db      	ldrh	r3, [r3, #6]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d113      	bne.n	80015ba <MOTOR_set_duty+0x242>
 8001592:	69b8      	ldr	r0, [r7, #24]
 8001594:	f7fe ffa4 	bl	80004e0 <__aeabi_f2d>
 8001598:	a315      	add	r3, pc, #84	@ (adr r3, 80015f0 <MOTOR_set_duty+0x278>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7fe fff7 	bl	8000590 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681c      	ldr	r4, [r3, #0]
 80015b0:	f7ff fa9e 	bl	8000af0 <__aeabi_d2uiz>
 80015b4:	4603      	mov	r3, r0
 80015b6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80015b8:	e14d      	b.n	8001856 <MOTOR_set_duty+0x4de>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	88db      	ldrh	r3, [r3, #6]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d126      	bne.n	8001610 <MOTOR_set_duty+0x298>
 80015c2:	69b8      	ldr	r0, [r7, #24]
 80015c4:	f7fe ff8c 	bl	80004e0 <__aeabi_f2d>
 80015c8:	a309      	add	r3, pc, #36	@ (adr r3, 80015f0 <MOTOR_set_duty+0x278>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7fe ffdf 	bl	8000590 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681c      	ldr	r4, [r3, #0]
 80015e0:	f7ff fa86 	bl	8000af0 <__aeabi_d2uiz>
 80015e4:	4603      	mov	r3, r0
 80015e6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80015e8:	e135      	b.n	8001856 <MOTOR_set_duty+0x4de>
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	3b645a1d 	.word	0x3b645a1d
 80015f4:	40453fdf 	.word	0x40453fdf
 80015f8:	00000000 	.word	0x00000000
 80015fc:	c0e4c060 	.word	0xc0e4c060
 8001600:	47260300 	.word	0x47260300
 8001604:	c7260300 	.word	0xc7260300
 8001608:	00000000 	.word	0x00000000
 800160c:	40e4c060 	.word	0x40e4c060
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	88db      	ldrh	r3, [r3, #6]
 8001614:	2b0c      	cmp	r3, #12
 8001616:	d113      	bne.n	8001640 <MOTOR_set_duty+0x2c8>
 8001618:	69b8      	ldr	r0, [r7, #24]
 800161a:	f7fe ff61 	bl	80004e0 <__aeabi_f2d>
 800161e:	a390      	add	r3, pc, #576	@ (adr r3, 8001860 <MOTOR_set_duty+0x4e8>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe ffb4 	bl	8000590 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681c      	ldr	r4, [r3, #0]
 8001636:	f7ff fa5b 	bl	8000af0 <__aeabi_d2uiz>
 800163a:	4603      	mov	r3, r0
 800163c:	6423      	str	r3, [r4, #64]	@ 0x40
 800163e:	e10a      	b.n	8001856 <MOTOR_set_duty+0x4de>
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	88db      	ldrh	r3, [r3, #6]
 8001644:	2b10      	cmp	r3, #16
 8001646:	d113      	bne.n	8001670 <MOTOR_set_duty+0x2f8>
 8001648:	69b8      	ldr	r0, [r7, #24]
 800164a:	f7fe ff49 	bl	80004e0 <__aeabi_f2d>
 800164e:	a384      	add	r3, pc, #528	@ (adr r3, 8001860 <MOTOR_set_duty+0x4e8>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe ff9c 	bl	8000590 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681c      	ldr	r4, [r3, #0]
 8001666:	f7ff fa43 	bl	8000af0 <__aeabi_d2uiz>
 800166a:	4603      	mov	r3, r0
 800166c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800166e:	e0f2      	b.n	8001856 <MOTOR_set_duty+0x4de>
 8001670:	69b8      	ldr	r0, [r7, #24]
 8001672:	f7fe ff35 	bl	80004e0 <__aeabi_f2d>
 8001676:	a37a      	add	r3, pc, #488	@ (adr r3, 8001860 <MOTOR_set_duty+0x4e8>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ff88 	bl	8000590 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681c      	ldr	r4, [r3, #0]
 800168e:	f7ff fa2f 	bl	8000af0 <__aeabi_d2uiz>
 8001692:	4603      	mov	r3, r0
 8001694:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001696:	e0de      	b.n	8001856 <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	889b      	ldrh	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d106      	bne.n	80016ae <MOTOR_set_duty+0x336>
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f24a 6203 	movw	r2, #42499	@ 0xa603
 80016aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ac:	e031      	b.n	8001712 <MOTOR_set_duty+0x39a>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	889b      	ldrh	r3, [r3, #4]
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d106      	bne.n	80016c4 <MOTOR_set_duty+0x34c>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80016c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80016c2:	e026      	b.n	8001712 <MOTOR_set_duty+0x39a>
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	889b      	ldrh	r3, [r3, #4]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d106      	bne.n	80016da <MOTOR_set_duty+0x362>
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80016d6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016d8:	e01b      	b.n	8001712 <MOTOR_set_duty+0x39a>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	889b      	ldrh	r3, [r3, #4]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d106      	bne.n	80016f0 <MOTOR_set_duty+0x378>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80016ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ee:	e010      	b.n	8001712 <MOTOR_set_duty+0x39a>
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	889b      	ldrh	r3, [r3, #4]
 80016f4:	2b10      	cmp	r3, #16
 80016f6:	d106      	bne.n	8001706 <MOTOR_set_duty+0x38e>
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001702:	6493      	str	r3, [r2, #72]	@ 0x48
 8001704:	e005      	b.n	8001712 <MOTOR_set_duty+0x39a>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001710:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	88db      	ldrh	r3, [r3, #6]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d117      	bne.n	800174a <MOTOR_set_duty+0x3d2>
 800171a:	69b8      	ldr	r0, [r7, #24]
 800171c:	f7fe fee0 	bl	80004e0 <__aeabi_f2d>
 8001720:	a34f      	add	r3, pc, #316	@ (adr r3, 8001860 <MOTOR_set_duty+0x4e8>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe ff33 	bl	8000590 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	613a      	str	r2, [r7, #16]
 8001730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681c      	ldr	r4, [r3, #0]
 800173c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001740:	f7ff f9d6 	bl	8000af0 <__aeabi_d2uiz>
 8001744:	4603      	mov	r3, r0
 8001746:	6363      	str	r3, [r4, #52]	@ 0x34
 8001748:	e085      	b.n	8001856 <MOTOR_set_duty+0x4de>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	88db      	ldrh	r3, [r3, #6]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d117      	bne.n	8001782 <MOTOR_set_duty+0x40a>
 8001752:	69b8      	ldr	r0, [r7, #24]
 8001754:	f7fe fec4 	bl	80004e0 <__aeabi_f2d>
 8001758:	a341      	add	r3, pc, #260	@ (adr r3, 8001860 <MOTOR_set_duty+0x4e8>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe ff17 	bl	8000590 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	60ba      	str	r2, [r7, #8]
 8001768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681c      	ldr	r4, [r3, #0]
 8001774:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001778:	f7ff f9ba 	bl	8000af0 <__aeabi_d2uiz>
 800177c:	4603      	mov	r3, r0
 800177e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001780:	e069      	b.n	8001856 <MOTOR_set_duty+0x4de>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	88db      	ldrh	r3, [r3, #6]
 8001786:	2b08      	cmp	r3, #8
 8001788:	d117      	bne.n	80017ba <MOTOR_set_duty+0x442>
 800178a:	69b8      	ldr	r0, [r7, #24]
 800178c:	f7fe fea8 	bl	80004e0 <__aeabi_f2d>
 8001790:	a333      	add	r3, pc, #204	@ (adr r3, 8001860 <MOTOR_set_duty+0x4e8>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fefb 	bl	8000590 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	603a      	str	r2, [r7, #0]
 80017a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681c      	ldr	r4, [r3, #0]
 80017ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017b0:	f7ff f99e 	bl	8000af0 <__aeabi_d2uiz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80017b8:	e04d      	b.n	8001856 <MOTOR_set_duty+0x4de>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	88db      	ldrh	r3, [r3, #6]
 80017be:	2b0c      	cmp	r3, #12
 80017c0:	d116      	bne.n	80017f0 <MOTOR_set_duty+0x478>
 80017c2:	69b8      	ldr	r0, [r7, #24]
 80017c4:	f7fe fe8c 	bl	80004e0 <__aeabi_f2d>
 80017c8:	a325      	add	r3, pc, #148	@ (adr r3, 8001860 <MOTOR_set_duty+0x4e8>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fedf 	bl	8000590 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4615      	mov	r5, r2
 80017d8:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681c      	ldr	r4, [r3, #0]
 80017e2:	4628      	mov	r0, r5
 80017e4:	4631      	mov	r1, r6
 80017e6:	f7ff f983 	bl	8000af0 <__aeabi_d2uiz>
 80017ea:	4603      	mov	r3, r0
 80017ec:	6423      	str	r3, [r4, #64]	@ 0x40
 80017ee:	e032      	b.n	8001856 <MOTOR_set_duty+0x4de>
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	88db      	ldrh	r3, [r3, #6]
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d116      	bne.n	8001826 <MOTOR_set_duty+0x4ae>
 80017f8:	69b8      	ldr	r0, [r7, #24]
 80017fa:	f7fe fe71 	bl	80004e0 <__aeabi_f2d>
 80017fe:	a318      	add	r3, pc, #96	@ (adr r3, 8001860 <MOTOR_set_duty+0x4e8>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe fec4 	bl	8000590 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4692      	mov	sl, r2
 800180e:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681c      	ldr	r4, [r3, #0]
 8001818:	4650      	mov	r0, sl
 800181a:	4659      	mov	r1, fp
 800181c:	f7ff f968 	bl	8000af0 <__aeabi_d2uiz>
 8001820:	4603      	mov	r3, r0
 8001822:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001824:	e017      	b.n	8001856 <MOTOR_set_duty+0x4de>
 8001826:	69b8      	ldr	r0, [r7, #24]
 8001828:	f7fe fe5a 	bl	80004e0 <__aeabi_f2d>
 800182c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001860 <MOTOR_set_duty+0x4e8>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fead 	bl	8000590 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4690      	mov	r8, r2
 800183c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681c      	ldr	r4, [r3, #0]
 8001846:	4640      	mov	r0, r8
 8001848:	4649      	mov	r1, r9
 800184a:	f7ff f951 	bl	8000af0 <__aeabi_d2uiz>
 800184e:	4603      	mov	r3, r0
 8001850:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001852:	e000      	b.n	8001856 <MOTOR_set_duty+0x4de>
        return;
 8001854:	bf00      	nop
    }
}
 8001856:	3724      	adds	r7, #36	@ 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800185e:	bf00      	nop
 8001860:	3b645a1d 	.word	0x3b645a1d
 8001864:	40453fdf 	.word	0x40453fdf

08001868 <PID_controller_init>:
#include "Encoder.h"
#include "main.h"

float boundary = 0.05;
void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd, float Down_Kp, float Down_Ki, float Down_Kd)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	61f8      	str	r0, [r7, #28]
 8001870:	ed87 0a06 	vstr	s0, [r7, #24]
 8001874:	edc7 0a05 	vstr	s1, [r7, #20]
 8001878:	ed87 1a04 	vstr	s2, [r7, #16]
 800187c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001880:	ed87 2a02 	vstr	s4, [r7, #8]
 8001884:	edc7 2a01 	vstr	s5, [r7, #4]
 PID->Upward_Kp = UP_Kp;
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	601a      	str	r2, [r3, #0]
 PID->Upward_Ki = UP_Ki;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	605a      	str	r2, [r3, #4]
 PID->Upward_Kd = UP_Kd;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	609a      	str	r2, [r3, #8]

 PID->Downward_Kp = Down_Kp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	60da      	str	r2, [r3, #12]
 PID->Downward_Ki = Down_Ki;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	611a      	str	r2, [r3, #16]
 PID->Downward_Kd = Down_Kd;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	615a      	str	r2, [r3, #20]

 PID->Error[n] = 0;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
 PID->Error[n_1] = 0;
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
 PID->Error[n_2] = 0;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
 PID->out = 0;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80018cc:	bf00      	nop
 80018ce:	3724      	adds	r7, #36	@ 0x24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <PID_controller_calculate_velo>:
 PID->Error[n_2] = PID->Error[n_1];
 PID->Error[n_1] = PID->Error[n];
}

void PID_controller_calculate_velo(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	ed87 0a01 	vstr	s0, [r7, #4]
 // Distance between setpoint real read
 PID->Error[n] = setpoint - Feedback->Linear_Velocity;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	edc3 7a06 	vstr	s15, [r3, #24]
// if(fabs(PID->Error[n]) >= boundary)
// {
 if (!((PID->out >= 1000 && PID->Error[n] > 0) || (PID->out <= -1000 && PID->Error[n] < 0))) {
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001900:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001a08 <PID_controller_calculate_velo+0x130>
 8001904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	bfac      	ite	ge
 800190e:	2301      	movge	r3, #1
 8001910:	2300      	movlt	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f083 0301 	eor.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10f      	bne.n	800193e <PID_controller_calculate_velo+0x66>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	edd3 7a06 	vldr	s15, [r3, #24]
 8001924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	bfcc      	ite	gt
 800192e:	2301      	movgt	r3, #1
 8001930:	2300      	movle	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d056      	beq.n	80019ec <PID_controller_calculate_velo+0x114>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001944:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001a0c <PID_controller_calculate_velo+0x134>
 8001948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	bf94      	ite	ls
 8001952:	2301      	movls	r3, #1
 8001954:	2300      	movhi	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f083 0301 	eor.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <PID_controller_calculate_velo+0xaa>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	edd3 7a06 	vldr	s15, [r3, #24]
 8001968:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	bf4c      	ite	mi
 8001972:	2301      	movmi	r3, #1
 8001974:	2300      	movpl	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f083 0301 	eor.w	r3, r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d034      	beq.n	80019ec <PID_controller_calculate_velo+0x114>
     PID->out += ((PID->Upward_Kp + PID->Upward_Ki + PID->Upward_Kd) * PID->Error[n])
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	edd3 6a00 	vldr	s13, [r3]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	edd3 7a01 	vldr	s15, [r3, #4]
 8001994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	edd3 7a02 	vldr	s15, [r3, #8]
 800199e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80019a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Upward_Kp + (2 * PID->Upward_Kd)) * PID->Error[n_1])
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	ed93 6a00 	vldr	s12, [r3]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019bc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80019c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Upward_Kd * PID->Error[n_2]);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	ed93 6a02 	vldr	s12, [r3, #8]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80019da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019de:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Upward_Kp + PID->Upward_Ki + PID->Upward_Kd) * PID->Error[n])
 80019e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 }
// }
// else PID->out = -150;
 PID->Error[n_2] = PID->Error[n_1];
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	621a      	str	r2, [r3, #32]
 PID->Error[n_1] = PID->Error[n];
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	699a      	ldr	r2, [r3, #24]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	61da      	str	r2, [r3, #28]

}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	447a0000 	.word	0x447a0000
 8001a0c:	c47a0000 	.word	0xc47a0000

08001a10 <Traject_init>:
float Time_acc;
float Time_dec;


void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a1c:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <Traject>:

void Traject(Trap_Traj* Traj, float Pos_initial, float Pos_final)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a5c:	edc7 0a01 	vstr	s1, [r7, #4]

	  Distance = Pos_final - Pos_initial;
 8001a60:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a64:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6c:	4bb1      	ldr	r3, [pc, #708]	@ (8001d34 <Traject+0x2e4>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
	  Time_acc = Traj->Velo_max / Traj->Accel_max;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	edd3 6a00 	vldr	s13, [r3]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a82:	4bad      	ldr	r3, [pc, #692]	@ (8001d38 <Traject+0x2e8>)
 8001a84:	edc3 7a00 	vstr	s15, [r3]
	  Time_dec = Time_acc;
 8001a88:	4bab      	ldr	r3, [pc, #684]	@ (8001d38 <Traject+0x2e8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4aab      	ldr	r2, [pc, #684]	@ (8001d3c <Traject+0x2ec>)
 8001a8e:	6013      	str	r3, [r2, #0]


	  if (Distance >0)
 8001a90:	4ba8      	ldr	r3, [pc, #672]	@ (8001d34 <Traject+0x2e4>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9e:	dd23      	ble.n	8001ae8 <Traject+0x98>
			{
		  Acc_max = Traj->Accel_max;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4aa6      	ldr	r2, [pc, #664]	@ (8001d40 <Traject+0x2f0>)
 8001aa6:	6013      	str	r3, [r2, #0]
		  Vel_max = Traj->Velo_max;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4aa5      	ldr	r2, [pc, #660]	@ (8001d44 <Traject+0x2f4>)
 8001aae:	6013      	str	r3, [r2, #0]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8001ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8001d34 <Traject+0x2e4>)
 8001ab2:	ed93 7a00 	vldr	s14, [r3]
 8001ab6:	4ba3      	ldr	r3, [pc, #652]	@ (8001d44 <Traject+0x2f4>)
 8001ab8:	edd3 6a00 	vldr	s13, [r3]
 8001abc:	4b9e      	ldr	r3, [pc, #632]	@ (8001d38 <Traject+0x2e8>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	4b9f      	ldr	r3, [pc, #636]	@ (8001d48 <Traject+0x2f8>)
 8001acc:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 8001ad0:	4b9d      	ldr	r3, [pc, #628]	@ (8001d48 <Traject+0x2f8>)
 8001ad2:	edd3 6a00 	vldr	s13, [r3]
 8001ad6:	4b9b      	ldr	r3, [pc, #620]	@ (8001d44 <Traject+0x2f4>)
 8001ad8:	ed93 7a00 	vldr	s14, [r3]
 8001adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae0:	4b9a      	ldr	r3, [pc, #616]	@ (8001d4c <Traject+0x2fc>)
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
 8001ae6:	e032      	b.n	8001b4e <Traject+0xfe>
			}
	  else if(Distance < 0)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	@ (8001d34 <Traject+0x2e4>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d52a      	bpl.n	8001b4e <Traject+0xfe>
	  {
		  Acc_max = -Traj->Accel_max;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001afe:	eef1 7a67 	vneg.f32	s15, s15
 8001b02:	4b8f      	ldr	r3, [pc, #572]	@ (8001d40 <Traject+0x2f0>)
 8001b04:	edc3 7a00 	vstr	s15, [r3]
		  Vel_max = -Traj->Velo_max;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	eef1 7a67 	vneg.f32	s15, s15
 8001b12:	4b8c      	ldr	r3, [pc, #560]	@ (8001d44 <Traject+0x2f4>)
 8001b14:	edc3 7a00 	vstr	s15, [r3]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8001b18:	4b86      	ldr	r3, [pc, #536]	@ (8001d34 <Traject+0x2e4>)
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	4b89      	ldr	r3, [pc, #548]	@ (8001d44 <Traject+0x2f4>)
 8001b20:	edd3 6a00 	vldr	s13, [r3]
 8001b24:	4b84      	ldr	r3, [pc, #528]	@ (8001d38 <Traject+0x2e8>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b32:	4b85      	ldr	r3, [pc, #532]	@ (8001d48 <Traject+0x2f8>)
 8001b34:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 8001b38:	4b83      	ldr	r3, [pc, #524]	@ (8001d48 <Traject+0x2f8>)
 8001b3a:	edd3 6a00 	vldr	s13, [r3]
 8001b3e:	4b81      	ldr	r3, [pc, #516]	@ (8001d44 <Traject+0x2f4>)
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b48:	4b80      	ldr	r3, [pc, #512]	@ (8001d4c <Traject+0x2fc>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]
	}
	// Update trajectory phase
	time_ref1 = Time_acc + Time_Velo_const;
 8001b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d38 <Traject+0x2e8>)
 8001b50:	ed93 7a00 	vldr	s14, [r3]
 8001b54:	4b7d      	ldr	r3, [pc, #500]	@ (8001d4c <Traject+0x2fc>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d50 <Traject+0x300>)
 8001b60:	edc3 7a00 	vstr	s15, [r3]
	time_ref2 = time_ref1 + Time_dec;
 8001b64:	4b7a      	ldr	r3, [pc, #488]	@ (8001d50 <Traject+0x300>)
 8001b66:	ed93 7a00 	vldr	s14, [r3]
 8001b6a:	4b74      	ldr	r3, [pc, #464]	@ (8001d3c <Traject+0x2ec>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b74:	4b77      	ldr	r3, [pc, #476]	@ (8001d54 <Traject+0x304>)
 8001b76:	edc3 7a00 	vstr	s15, [r3]
	if(Time_Velo_const >0)
 8001b7a:	4b74      	ldr	r3, [pc, #464]	@ (8001d4c <Traject+0x2fc>)
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	f340 80cb 	ble.w	8001d22 <Traject+0x2d2>
	{
//		Time_acc_under = sqrt(Distance/Acc_max);
		if (elapsedTime < Time_acc)
 8001b8c:	4b72      	ldr	r3, [pc, #456]	@ (8001d58 <Traject+0x308>)
 8001b8e:	ed93 7a00 	vldr	s14, [r3]
 8001b92:	4b69      	ldr	r3, [pc, #420]	@ (8001d38 <Traject+0x2e8>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	d52f      	bpl.n	8001c02 <Traject+0x1b2>
		{
			// Acceleration phase
			Traj->currentAcceleration = Acc_max;
 8001ba2:	4b67      	ldr	r3, [pc, #412]	@ (8001d40 <Traject+0x2f0>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 8001baa:	4b65      	ldr	r3, [pc, #404]	@ (8001d40 <Traject+0x2f0>)
 8001bac:	ed93 7a00 	vldr	s14, [r3]
 8001bb0:	4b69      	ldr	r3, [pc, #420]	@ (8001d58 <Traject+0x308>)
 8001bb2:	edd3 7a00 	vldr	s15, [r3]
 8001bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = 0.5f * Acc_max * elapsedTime * elapsedTime + Pos_initial;
 8001bc0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d40 <Traject+0x2f0>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bce:	4b62      	ldr	r3, [pc, #392]	@ (8001d58 <Traject+0x308>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd8:	4b5f      	ldr	r3, [pc, #380]	@ (8001d58 <Traject+0x308>)
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4a59      	ldr	r2, [pc, #356]	@ (8001d5c <Traject+0x30c>)
 8001bf6:	6013      	str	r3, [r2, #0]
			temp_pos_const = Traj->currentPosition;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	@ (8001d60 <Traject+0x310>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e08f      	b.n	8001d22 <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref1 )
 8001c02:	4b55      	ldr	r3, [pc, #340]	@ (8001d58 <Traject+0x308>)
 8001c04:	ed93 7a00 	vldr	s14, [r3]
 8001c08:	4b51      	ldr	r3, [pc, #324]	@ (8001d50 <Traject+0x300>)
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c16:	d521      	bpl.n	8001c5c <Traject+0x20c>
		{
			// Constant velocity phase
			Traj->currentAcceleration = 0;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Vel_max;
 8001c20:	4b48      	ldr	r3, [pc, #288]	@ (8001d44 <Traject+0x2f4>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	60da      	str	r2, [r3, #12]
			Traj->currentPosition = (Vel_max * (elapsedTime-Time_acc)) + temp_pos_acc;
 8001c28:	4b4b      	ldr	r3, [pc, #300]	@ (8001d58 <Traject+0x308>)
 8001c2a:	ed93 7a00 	vldr	s14, [r3]
 8001c2e:	4b42      	ldr	r3, [pc, #264]	@ (8001d38 <Traject+0x2e8>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c38:	4b42      	ldr	r3, [pc, #264]	@ (8001d44 <Traject+0x2f4>)
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c42:	4b46      	ldr	r3, [pc, #280]	@ (8001d5c <Traject+0x30c>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_const = Traj->currentPosition;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	4a42      	ldr	r2, [pc, #264]	@ (8001d60 <Traject+0x310>)
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e062      	b.n	8001d22 <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref2)
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d58 <Traject+0x308>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <Traject+0x304>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	d54f      	bpl.n	8001d12 <Traject+0x2c2>
		{
			// Deceleration phase
			Traj->currentAcceleration = -Acc_max;
 8001c72:	4b33      	ldr	r3, [pc, #204]	@ (8001d40 <Traject+0x2f0>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	eef1 7a67 	vneg.f32	s15, s15
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = -(Acc_max * (elapsedTime-time_ref1)) + Vel_max;
 8001c82:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <Traject+0x2f4>)
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	4b33      	ldr	r3, [pc, #204]	@ (8001d58 <Traject+0x308>)
 8001c8a:	edd3 6a00 	vldr	s13, [r3]
 8001c8e:	4b30      	ldr	r3, [pc, #192]	@ (8001d50 <Traject+0x300>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c98:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <Traject+0x2f0>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Traj->currentVelocity*(elapsedTime-time_ref1)+(0.5f*Acc_max*(elapsedTime-time_ref1)*(elapsedTime-time_ref1))+temp_pos_const ;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <Traject+0x308>)
 8001cb4:	edd3 6a00 	vldr	s13, [r3]
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <Traject+0x300>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <Traject+0x2f0>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001cd0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001cd4:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <Traject+0x308>)
 8001cd6:	ed93 6a00 	vldr	s12, [r3]
 8001cda:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <Traject+0x300>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ce4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <Traject+0x308>)
 8001cea:	ed93 6a00 	vldr	s12, [r3]
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <Traject+0x300>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d00:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <Traject+0x310>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001d10:	e007      	b.n	8001d22 <Traject+0x2d2>
		}
		else {
			// Trajectory complete
			Traj->currentAcceleration = 0.0f;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
//			elapsedTime = 0.0f;
		}
	}
	if (Time_Velo_const <= 0)
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <Traject+0x2fc>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	d918      	bls.n	8001d64 <Traject+0x314>

		}


	}
}
 8001d32:	e0d2      	b.n	8001eda <Traject+0x48a>
 8001d34:	200000c8 	.word	0x200000c8
 8001d38:	200000cc 	.word	0x200000cc
 8001d3c:	200000d0 	.word	0x200000d0
 8001d40:	200000a0 	.word	0x200000a0
 8001d44:	200000a4 	.word	0x200000a4
 8001d48:	200000a8 	.word	0x200000a8
 8001d4c:	200000ac 	.word	0x200000ac
 8001d50:	200000c0 	.word	0x200000c0
 8001d54:	200000c4 	.word	0x200000c4
 8001d58:	200003e0 	.word	0x200003e0
 8001d5c:	200000b4 	.word	0x200000b4
 8001d60:	200000b8 	.word	0x200000b8
		Time_acc_under = sqrt(Distance/Acc_max);
 8001d64:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee4 <Traject+0x494>)
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee8 <Traject+0x498>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d74:	ee16 0a90 	vmov	r0, s13
 8001d78:	f7fe fbb2 	bl	80004e0 <__aeabi_f2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	ec43 2b10 	vmov	d0, r2, r3
 8001d84:	f004 fee0 	bl	8006b48 <sqrt>
 8001d88:	ec53 2b10 	vmov	r2, r3, d0
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe fece 	bl	8000b30 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a55      	ldr	r2, [pc, #340]	@ (8001eec <Traject+0x49c>)
 8001d98:	6013      	str	r3, [r2, #0]
		if (elapsedTime < Time_acc_under)
 8001d9a:	4b55      	ldr	r3, [pc, #340]	@ (8001ef0 <Traject+0x4a0>)
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	4b52      	ldr	r3, [pc, #328]	@ (8001eec <Traject+0x49c>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dae:	d52f      	bpl.n	8001e10 <Traject+0x3c0>
			Traj->currentAcceleration = Acc_max;
 8001db0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee8 <Traject+0x498>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 8001db8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee8 <Traject+0x498>)
 8001dba:	ed93 7a00 	vldr	s14, [r3]
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef0 <Traject+0x4a0>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Pos_initial + 0.5f * Acc_max * elapsedTime * elapsedTime;
 8001dce:	4b46      	ldr	r3, [pc, #280]	@ (8001ee8 <Traject+0x498>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ddc:	4b44      	ldr	r3, [pc, #272]	@ (8001ef0 <Traject+0x4a0>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de6:	4b42      	ldr	r3, [pc, #264]	@ (8001ef0 <Traject+0x4a0>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	4a3c      	ldr	r2, [pc, #240]	@ (8001ef4 <Traject+0x4a4>)
 8001e04:	6013      	str	r3, [r2, #0]
			temp_velo_acc = Traj->currentVelocity;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef8 <Traject+0x4a8>)
 8001e0c:	6013      	str	r3, [r2, #0]
}
 8001e0e:	e064      	b.n	8001eda <Traject+0x48a>
		else if (elapsedTime < 2*Time_acc_under)
 8001e10:	4b36      	ldr	r3, [pc, #216]	@ (8001eec <Traject+0x49c>)
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e1a:	4b35      	ldr	r3, [pc, #212]	@ (8001ef0 <Traject+0x4a0>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	dd4f      	ble.n	8001eca <Traject+0x47a>
			Traj->currentAcceleration = -Acc_max;
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <Traject+0x498>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	eef1 7a67 	vneg.f32	s15, s15
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = temp_velo_acc - Acc_max*(elapsedTime-Time_acc_under);
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <Traject+0x4a8>)
 8001e3c:	ed93 7a00 	vldr	s14, [r3]
 8001e40:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <Traject+0x4a0>)
 8001e42:	edd3 6a00 	vldr	s13, [r3]
 8001e46:	4b29      	ldr	r3, [pc, #164]	@ (8001eec <Traject+0x49c>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e50:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <Traject+0x498>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = temp_pos_acc + Traj->currentVelocity *(elapsedTime-Time_acc_under)+(0.5f*Acc_max*(elapsedTime-Time_acc_under)*(elapsedTime-Time_acc_under));
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <Traject+0x4a0>)
 8001e6c:	edd3 6a00 	vldr	s13, [r3]
 8001e70:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <Traject+0x49c>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <Traject+0x4a4>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e88:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <Traject+0x498>)
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001e92:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <Traject+0x4a0>)
 8001e98:	ed93 6a00 	vldr	s12, [r3]
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <Traject+0x49c>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ea6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eaa:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <Traject+0x4a0>)
 8001eac:	ed93 6a00 	vldr	s12, [r3]
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <Traject+0x49c>)
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001ec8:	e007      	b.n	8001eda <Traject+0x48a>
			Traj->currentAcceleration = 0.0f;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200000c8 	.word	0x200000c8
 8001ee8:	200000a0 	.word	0x200000a0
 8001eec:	200000b0 	.word	0x200000b0
 8001ef0:	200003e0 	.word	0x200003e0
 8001ef4:	200000b4 	.word	0x200000b4
 8001ef8:	200000bc 	.word	0x200000bc
 8001efc:	00000000 	.word	0x00000000

08001f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f04:	b08e      	sub	sp, #56	@ 0x38
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f08:	f000 feaf 	bl	8002c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f0c:	f000 f8fe 	bl	800210c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f10:	f000 fb92 	bl	8002638 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001f14:	f000 f946 	bl	80021a4 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001f18:	f000 f9e2 	bl	80022e0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001f1c:	f000 fb08 	bl	8002530 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001f20:	f000 fa32 	bl	8002388 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f24:	f000 fab6 	bl	8002494 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001f28:	f000 f986 	bl	8002238 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001f2c:	f000 fb4e 	bl	80025cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

HAL_TIM_Base_Start_IT(&htim5);
 8001f30:	4863      	ldr	r0, [pc, #396]	@ (80020c0 <main+0x1c0>)
 8001f32:	f002 fadd 	bl	80044f0 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim4);
 8001f36:	4863      	ldr	r0, [pc, #396]	@ (80020c4 <main+0x1c4>)
 8001f38:	f002 fada 	bl	80044f0 <HAL_TIM_Base_Start_IT>

HAL_TIM_Base_Start(&htim2);
 8001f3c:	4862      	ldr	r0, [pc, #392]	@ (80020c8 <main+0x1c8>)
 8001f3e:	f002 fa67 	bl	8004410 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim3);
 8001f42:	4862      	ldr	r0, [pc, #392]	@ (80020cc <main+0x1cc>)
 8001f44:	f002 fa64 	bl	8004410 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim6);
 8001f48:	4861      	ldr	r0, [pc, #388]	@ (80020d0 <main+0x1d0>)
 8001f4a:	f002 fa61 	bl	8004410 <HAL_TIM_Base_Start>

HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001f4e:	2100      	movs	r1, #0
 8001f50:	485e      	ldr	r0, [pc, #376]	@ (80020cc <main+0x1cc>)
 8001f52:	f002 fba7 	bl	80046a4 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8001f56:	2104      	movs	r1, #4
 8001f58:	485c      	ldr	r0, [pc, #368]	@ (80020cc <main+0x1cc>)
 8001f5a:	f002 fba3 	bl	80046a4 <HAL_TIM_PWM_Start_IT>

float PID_pos_upward[3] = {1.472 ,0.00000000495, 0};
 8001f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80020d4 <main+0x1d4>)
 8001f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f64:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
float PID_pos_downward[3] = {1.6 ,0.000000067, 0};
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80020d8 <main+0x1d8>)
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f72:	e883 0007 	stmia.w	r3, {r0, r1, r2}

float PID_velo_upward[3] = {3.35 ,0.050, 0.001};
 8001f76:	4a59      	ldr	r2, [pc, #356]	@ (80020dc <main+0x1dc>)
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
float PID_velo_downward[3] = {3.35 ,0.050, 0.001};
 8001f82:	4a56      	ldr	r2, [pc, #344]	@ (80020dc <main+0x1dc>)
 8001f84:	463b      	mov	r3, r7
 8001f86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f88:	e883 0007 	stmia.w	r3, {r0, r1, r2}

//float PID_velo_upward[3] = {6 ,0, 0};
//float PID_velo_downward[3] = {6 ,0, 0.0};

AMT_encoder_init(&AMT, &htim2);
 8001f8c:	494e      	ldr	r1, [pc, #312]	@ (80020c8 <main+0x1c8>)
 8001f8e:	4854      	ldr	r0, [pc, #336]	@ (80020e0 <main+0x1e0>)
 8001f90:	f7ff f8a4 	bl	80010dc <AMT_encoder_init>
MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 8001f94:	2300      	movs	r3, #0
 8001f96:	2204      	movs	r2, #4
 8001f98:	494c      	ldr	r1, [pc, #304]	@ (80020cc <main+0x1cc>)
 8001f9a:	4852      	ldr	r0, [pc, #328]	@ (80020e4 <main+0x1e4>)
 8001f9c:	f7ff f9d2 	bl	8001344 <MOTOR_init>
PID_controller_init(&PID_pos,PID_pos_upward[0],PID_pos_upward[1],PID_pos_upward[2],
 8001fa0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fa4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001fa8:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001fac:	ed97 6a06 	vldr	s12, [r7, #24]
 8001fb0:	edd7 5a07 	vldr	s11, [r7, #28]
 8001fb4:	ed97 5a08 	vldr	s10, [r7, #32]
 8001fb8:	eef0 2a45 	vmov.f32	s5, s10
 8001fbc:	eeb0 2a65 	vmov.f32	s4, s11
 8001fc0:	eef0 1a46 	vmov.f32	s3, s12
 8001fc4:	eeb0 1a66 	vmov.f32	s2, s13
 8001fc8:	eef0 0a47 	vmov.f32	s1, s14
 8001fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd0:	4845      	ldr	r0, [pc, #276]	@ (80020e8 <main+0x1e8>)
 8001fd2:	f7ff fc49 	bl	8001868 <PID_controller_init>
						PID_pos_downward[0],PID_pos_downward[1],PID_pos_downward[2]);
PID_controller_init(&PID_velo,PID_velo_upward[0],PID_velo_upward[1],PID_velo_upward[3],
 8001fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fda:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fde:	edd7 6a06 	vldr	s13, [r7, #24]
 8001fe2:	ed97 6a00 	vldr	s12, [r7]
 8001fe6:	edd7 5a04 	vldr	s11, [r7, #16]
 8001fea:	ed97 5a05 	vldr	s10, [r7, #20]
 8001fee:	eef0 2a45 	vmov.f32	s5, s10
 8001ff2:	eeb0 2a65 	vmov.f32	s4, s11
 8001ff6:	eef0 1a46 	vmov.f32	s3, s12
 8001ffa:	eeb0 1a66 	vmov.f32	s2, s13
 8001ffe:	eef0 0a47 	vmov.f32	s1, s14
 8002002:	eeb0 0a67 	vmov.f32	s0, s15
 8002006:	4839      	ldr	r0, [pc, #228]	@ (80020ec <main+0x1ec>)
 8002008:	f7ff fc2e 	bl	8001868 <PID_controller_init>
						PID_velo_downward[0],PID_velo_upward[1],PID_velo_upward[2]);
Traject_init(&Traj,500, 500);
 800200c:	eddf 0a38 	vldr	s1, [pc, #224]	@ 80020f0 <main+0x1f0>
 8002010:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 80020f0 <main+0x1f0>
 8002014:	4837      	ldr	r0, [pc, #220]	@ (80020f4 <main+0x1f4>)
 8002016:	f7ff fcfb 	bl	8001a10 <Traject_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp =0;
	  int64_t currentTime = HAL_GetTick();
 800201a:	f000 fe8b 	bl	8002d34 <HAL_GetTick>
 800201e:	4603      	mov	r3, r0
 8002020:	2200      	movs	r2, #0
 8002022:	4698      	mov	r8, r3
 8002024:	4691      	mov	r9, r2
 8002026:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
	  if(currentTime > timestamp)
 800202a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800202e:	4932      	ldr	r1, [pc, #200]	@ (80020f8 <main+0x1f8>)
 8002030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002034:	4290      	cmp	r0, r2
 8002036:	eb71 0303 	sbcs.w	r3, r1, r3
 800203a:	d211      	bcs.n	8002060 <main+0x160>
	  {
	  timestamp =currentTime + 1;//ms
 800203c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002040:	1c54      	adds	r4, r2, #1
 8002042:	f143 0500 	adc.w	r5, r3, #0
 8002046:	4622      	mov	r2, r4
 8002048:	462b      	mov	r3, r5
 800204a:	492b      	ldr	r1, [pc, #172]	@ (80020f8 <main+0x1f8>)
 800204c:	e9c1 2300 	strd	r2, r3, [r1]
	  AMT_encoder_update(&AMT, &htim2, micros());
 8002050:	f000 fb7e 	bl	8002750 <micros>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	491b      	ldr	r1, [pc, #108]	@ (80020c8 <main+0x1c8>)
 800205a:	4821      	ldr	r0, [pc, #132]	@ (80020e0 <main+0x1e0>)
 800205c:	f7ff f858 	bl	8001110 <AMT_encoder_update>
	  }
	  if(ppp == 1)
 8002060:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <main+0x1fc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d1d8      	bne.n	800201a <main+0x11a>
	  {
		  if (__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET)
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <main+0x1d0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d1d1      	bne.n	800201a <main+0x11a>
			 {
				 // Clear the update flag
				 __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <main+0x1d0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f06f 0201 	mvn.w	r2, #1
 800207e:	611a      	str	r2, [r3, #16]
				 elapsedTime += 0.00001;
 8002080:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <main+0x200>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fa2b 	bl	80004e0 <__aeabi_f2d>
 800208a:	a30b      	add	r3, pc, #44	@ (adr r3, 80020b8 <main+0x1b8>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe f8c8 	bl	8000224 <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fd48 	bl	8000b30 <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <main+0x200>)
 80020a4:	6013      	str	r3, [r2, #0]
				 Traject(&Traj, 0.0, 400.0);
 80020a6:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8002104 <main+0x204>
 80020aa:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8002108 <main+0x208>
 80020ae:	4811      	ldr	r0, [pc, #68]	@ (80020f4 <main+0x1f4>)
 80020b0:	f7ff fcce 	bl	8001a50 <Traject>
  {
 80020b4:	e7b1      	b.n	800201a <main+0x11a>
 80020b6:	bf00      	nop
 80020b8:	88e368f1 	.word	0x88e368f1
 80020bc:	3ee4f8b5 	.word	0x3ee4f8b5
 80020c0:	20000298 	.word	0x20000298
 80020c4:	2000024c 	.word	0x2000024c
 80020c8:	200001b4 	.word	0x200001b4
 80020cc:	20000200 	.word	0x20000200
 80020d0:	200002e4 	.word	0x200002e4
 80020d4:	08006d6c 	.word	0x08006d6c
 80020d8:	08006d78 	.word	0x08006d78
 80020dc:	08006d84 	.word	0x08006d84
 80020e0:	20000330 	.word	0x20000330
 80020e4:	20000370 	.word	0x20000370
 80020e8:	20000378 	.word	0x20000378
 80020ec:	200003a0 	.word	0x200003a0
 80020f0:	43fa0000 	.word	0x43fa0000
 80020f4:	200003c8 	.word	0x200003c8
 80020f8:	200003e8 	.word	0x200003e8
 80020fc:	200003dc 	.word	0x200003dc
 8002100:	200003e0 	.word	0x200003e0
 8002104:	43c80000 	.word	0x43c80000
 8002108:	00000000 	.word	0x00000000

0800210c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b094      	sub	sp, #80	@ 0x50
 8002110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	2238      	movs	r2, #56	@ 0x38
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f004 fce2 	bl	8006ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800212e:	2000      	movs	r0, #0
 8002130:	f001 f8e6 	bl	8003300 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002134:	2302      	movs	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002138:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800213e:	2340      	movs	r3, #64	@ 0x40
 8002140:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002142:	2302      	movs	r3, #2
 8002144:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002146:	2302      	movs	r3, #2
 8002148:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800214a:	2304      	movs	r3, #4
 800214c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800214e:	2355      	movs	r3, #85	@ 0x55
 8002150:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002152:	2302      	movs	r3, #2
 8002154:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002156:	2302      	movs	r3, #2
 8002158:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800215a:	2302      	movs	r3, #2
 800215c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800215e:	f107 0318 	add.w	r3, r7, #24
 8002162:	4618      	mov	r0, r3
 8002164:	f001 f980 	bl	8003468 <HAL_RCC_OscConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800216e:	f000 fb6f 	bl	8002850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002172:	230f      	movs	r3, #15
 8002174:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002176:	2303      	movs	r3, #3
 8002178:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2104      	movs	r1, #4
 800218a:	4618      	mov	r0, r3
 800218c:	f001 fc7e 	bl	8003a8c <HAL_RCC_ClockConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002196:	f000 fb5b 	bl	8002850 <Error_Handler>
  }
}
 800219a:	bf00      	nop
 800219c:	3750      	adds	r7, #80	@ 0x50
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80021a8:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021aa:	4a22      	ldr	r2, [pc, #136]	@ (8002234 <MX_LPUART1_UART_Init+0x90>)
 80021ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80021ae:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d4:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e0:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80021e6:	4812      	ldr	r0, [pc, #72]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021e8:	f003 fe0e 	bl	8005e08 <HAL_UART_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80021f2:	f000 fb2d 	bl	8002850 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f6:	2100      	movs	r1, #0
 80021f8:	480d      	ldr	r0, [pc, #52]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 80021fa:	f004 fba9 	bl	8006950 <HAL_UARTEx_SetTxFifoThreshold>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002204:	f000 fb24 	bl	8002850 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002208:	2100      	movs	r1, #0
 800220a:	4809      	ldr	r0, [pc, #36]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 800220c:	f004 fbde 	bl	80069cc <HAL_UARTEx_SetRxFifoThreshold>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002216:	f000 fb1b 	bl	8002850 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800221a:	4805      	ldr	r0, [pc, #20]	@ (8002230 <MX_LPUART1_UART_Init+0x8c>)
 800221c:	f004 fb5f 	bl	80068de <HAL_UARTEx_DisableFifoMode>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002226:	f000 fb13 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200000d4 	.word	0x200000d4
 8002234:	40008000 	.word	0x40008000

08002238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002256:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 8002258:	4a20      	ldr	r2, [pc, #128]	@ (80022dc <MX_TIM1_Init+0xa4>)
 800225a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800225c:	4b1e      	ldr	r3, [pc, #120]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002268:	4b1b      	ldr	r3, [pc, #108]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 800226a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800226e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002276:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227c:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002282:	4815      	ldr	r0, [pc, #84]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 8002284:	f002 f86c 	bl	8004360 <HAL_TIM_Base_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800228e:	f000 fadf 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002296:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	4619      	mov	r1, r3
 800229e:	480e      	ldr	r0, [pc, #56]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 80022a0:	f002 fef8 	bl	8005094 <HAL_TIM_ConfigClockSource>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80022aa:	f000 fad1 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4806      	ldr	r0, [pc, #24]	@ (80022d8 <MX_TIM1_Init+0xa0>)
 80022c0:	f003 fcc6 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022ca:	f000 fac1 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000168 	.word	0x20000168
 80022dc:	40012c00 	.word	0x40012c00

080022e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	2224      	movs	r2, #36	@ 0x24
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fbf8 	bl	8006ae4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f4:	463b      	mov	r3, r7
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022fe:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <MX_TIM2_Init+0xa4>)
 8002300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002306:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <MX_TIM2_Init+0xa4>)
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230c:	4b1d      	ldr	r3, [pc, #116]	@ (8002384 <MX_TIM2_Init+0xa4>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 8002312:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <MX_TIM2_Init+0xa4>)
 8002314:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231a:	4b1a      	ldr	r3, [pc, #104]	@ (8002384 <MX_TIM2_Init+0xa4>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002320:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <MX_TIM2_Init+0xa4>)
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002326:	2303      	movs	r3, #3
 8002328:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800232e:	2301      	movs	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800233e:	2301      	movs	r3, #1
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002342:	2300      	movs	r3, #0
 8002344:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	4619      	mov	r1, r3
 8002350:	480c      	ldr	r0, [pc, #48]	@ (8002384 <MX_TIM2_Init+0xa4>)
 8002352:	f002 fb07 	bl	8004964 <HAL_TIM_Encoder_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800235c:	f000 fa78 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002368:	463b      	mov	r3, r7
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	@ (8002384 <MX_TIM2_Init+0xa4>)
 800236e:	f003 fc6f 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002378:	f000 fa6a 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	3730      	adds	r7, #48	@ 0x30
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200001b4 	.word	0x200001b4

08002388 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	@ 0x38
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a8:	463b      	mov	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023ba:	4b34      	ldr	r3, [pc, #208]	@ (800248c <MX_TIM3_Init+0x104>)
 80023bc:	4a34      	ldr	r2, [pc, #208]	@ (8002490 <MX_TIM3_Init+0x108>)
 80023be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80023c0:	4b32      	ldr	r3, [pc, #200]	@ (800248c <MX_TIM3_Init+0x104>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b31      	ldr	r3, [pc, #196]	@ (800248c <MX_TIM3_Init+0x104>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 80023cc:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <MX_TIM3_Init+0x104>)
 80023ce:	f24a 6203 	movw	r2, #42499	@ 0xa603
 80023d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b2d      	ldr	r3, [pc, #180]	@ (800248c <MX_TIM3_Init+0x104>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023da:	4b2c      	ldr	r3, [pc, #176]	@ (800248c <MX_TIM3_Init+0x104>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023e0:	482a      	ldr	r0, [pc, #168]	@ (800248c <MX_TIM3_Init+0x104>)
 80023e2:	f001 ffbd 	bl	8004360 <HAL_TIM_Base_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80023ec:	f000 fa30 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023fa:	4619      	mov	r1, r3
 80023fc:	4823      	ldr	r0, [pc, #140]	@ (800248c <MX_TIM3_Init+0x104>)
 80023fe:	f002 fe49 	bl	8005094 <HAL_TIM_ConfigClockSource>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002408:	f000 fa22 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800240c:	481f      	ldr	r0, [pc, #124]	@ (800248c <MX_TIM3_Init+0x104>)
 800240e:	f002 f8e7 	bl	80045e0 <HAL_TIM_PWM_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002418:	f000 fa1a 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4619      	mov	r1, r3
 800242a:	4818      	ldr	r0, [pc, #96]	@ (800248c <MX_TIM3_Init+0x104>)
 800242c:	f003 fc10 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002436:	f000 fa0b 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243a:	2360      	movs	r3, #96	@ 0x60
 800243c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 800243e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002442:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800244c:	463b      	mov	r3, r7
 800244e:	2200      	movs	r2, #0
 8002450:	4619      	mov	r1, r3
 8002452:	480e      	ldr	r0, [pc, #56]	@ (800248c <MX_TIM3_Init+0x104>)
 8002454:	f002 fd0a 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800245e:	f000 f9f7 	bl	8002850 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002466:	463b      	mov	r3, r7
 8002468:	2204      	movs	r2, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4807      	ldr	r0, [pc, #28]	@ (800248c <MX_TIM3_Init+0x104>)
 800246e:	f002 fcfd 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8002478:	f000 f9ea 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800247c:	4803      	ldr	r0, [pc, #12]	@ (800248c <MX_TIM3_Init+0x104>)
 800247e:	f000 fb27 	bl	8002ad0 <HAL_TIM_MspPostInit>

}
 8002482:	bf00      	nop
 8002484:	3738      	adds	r7, #56	@ 0x38
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000200 	.word	0x20000200
 8002490:	40000400 	.word	0x40000400

08002494 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <MX_TIM4_Init+0x94>)
 80024b4:	4a1d      	ldr	r2, [pc, #116]	@ (800252c <MX_TIM4_Init+0x98>)
 80024b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <MX_TIM4_Init+0x94>)
 80024ba:	22a9      	movs	r2, #169	@ 0xa9
 80024bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <MX_TIM4_Init+0x94>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <MX_TIM4_Init+0x94>)
 80024c6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80024ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <MX_TIM4_Init+0x94>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <MX_TIM4_Init+0x94>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024d8:	4813      	ldr	r0, [pc, #76]	@ (8002528 <MX_TIM4_Init+0x94>)
 80024da:	f001 ff41 	bl	8004360 <HAL_TIM_Base_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80024e4:	f000 f9b4 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	4619      	mov	r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <MX_TIM4_Init+0x94>)
 80024f6:	f002 fdcd 	bl	8005094 <HAL_TIM_ConfigClockSource>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002500:	f000 f9a6 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	@ (8002528 <MX_TIM4_Init+0x94>)
 8002512:	f003 fb9d 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800251c:	f000 f998 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000024c 	.word	0x2000024c
 800252c:	40000800 	.word	0x40000800

08002530 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <MX_TIM5_Init+0x94>)
 8002550:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <MX_TIM5_Init+0x98>)
 8002552:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <MX_TIM5_Init+0x94>)
 8002556:	22a9      	movs	r2, #169	@ 0xa9
 8002558:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <MX_TIM5_Init+0x94>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002560:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <MX_TIM5_Init+0x94>)
 8002562:	f04f 32ff 	mov.w	r2, #4294967295
 8002566:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002568:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <MX_TIM5_Init+0x94>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <MX_TIM5_Init+0x94>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002574:	4813      	ldr	r0, [pc, #76]	@ (80025c4 <MX_TIM5_Init+0x94>)
 8002576:	f001 fef3 	bl	8004360 <HAL_TIM_Base_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002580:	f000 f966 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002588:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	4619      	mov	r1, r3
 8002590:	480c      	ldr	r0, [pc, #48]	@ (80025c4 <MX_TIM5_Init+0x94>)
 8002592:	f002 fd7f 	bl	8005094 <HAL_TIM_ConfigClockSource>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800259c:	f000 f958 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <MX_TIM5_Init+0x94>)
 80025ae:	f003 fb4f 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80025b8:	f000 f94a 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000298 	.word	0x20000298
 80025c8:	40000c00 	.word	0x40000c00

080025cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025dc:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <MX_TIM6_Init+0x64>)
 80025de:	4a15      	ldr	r2, [pc, #84]	@ (8002634 <MX_TIM6_Init+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 80025e2:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <MX_TIM6_Init+0x64>)
 80025e4:	22a9      	movs	r2, #169	@ 0xa9
 80025e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <MX_TIM6_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <MX_TIM6_Init+0x64>)
 80025f0:	220a      	movs	r2, #10
 80025f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <MX_TIM6_Init+0x64>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025fa:	480d      	ldr	r0, [pc, #52]	@ (8002630 <MX_TIM6_Init+0x64>)
 80025fc:	f001 feb0 	bl	8004360 <HAL_TIM_Base_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002606:	f000 f923 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800260a:	2320      	movs	r3, #32
 800260c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4806      	ldr	r0, [pc, #24]	@ (8002630 <MX_TIM6_Init+0x64>)
 8002618:	f003 fb1a 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002622:	f000 f915 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200002e4 	.word	0x200002e4
 8002634:	40001000 	.word	0x40001000

08002638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	@ 0x28
 800263c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	4b3e      	ldr	r3, [pc, #248]	@ (8002748 <MX_GPIO_Init+0x110>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	4a3d      	ldr	r2, [pc, #244]	@ (8002748 <MX_GPIO_Init+0x110>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800265a:	4b3b      	ldr	r3, [pc, #236]	@ (8002748 <MX_GPIO_Init+0x110>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002666:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <MX_GPIO_Init+0x110>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266a:	4a37      	ldr	r2, [pc, #220]	@ (8002748 <MX_GPIO_Init+0x110>)
 800266c:	f043 0320 	orr.w	r3, r3, #32
 8002670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002672:	4b35      	ldr	r3, [pc, #212]	@ (8002748 <MX_GPIO_Init+0x110>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <MX_GPIO_Init+0x110>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <MX_GPIO_Init+0x110>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800268a:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <MX_GPIO_Init+0x110>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002696:	4b2c      	ldr	r3, [pc, #176]	@ (8002748 <MX_GPIO_Init+0x110>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	4a2b      	ldr	r2, [pc, #172]	@ (8002748 <MX_GPIO_Init+0x110>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a2:	4b29      	ldr	r3, [pc, #164]	@ (8002748 <MX_GPIO_Init+0x110>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2120      	movs	r1, #32
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026b6:	f000 fdf3 	bl	80032a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	481e      	ldr	r0, [pc, #120]	@ (800274c <MX_GPIO_Init+0x114>)
 80026d2:	f000 fc4b 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Photo_top_Pin Photo_Base_Pin */
  GPIO_InitStruct.Pin = Photo_top_Pin|Photo_Base_Pin;
 80026d6:	2350      	movs	r3, #80	@ 0x50
 80026d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ee:	f000 fc3d 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026f2:	2320      	movs	r3, #32
 80026f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800270c:	f000 fc2e 	bl	8002f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	200a      	movs	r0, #10
 8002716:	f000 fbf4 	bl	8002f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800271a:	200a      	movs	r0, #10
 800271c:	f000 fc0b 	bl	8002f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2100      	movs	r1, #0
 8002724:	2017      	movs	r0, #23
 8002726:	f000 fbec 	bl	8002f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800272a:	2017      	movs	r0, #23
 800272c:	f000 fc03 	bl	8002f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2028      	movs	r0, #40	@ 0x28
 8002736:	f000 fbe4 	bl	8002f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800273a:	2028      	movs	r0, #40	@ 0x28
 800273c:	f000 fbfb 	bl	8002f36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	@ 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	48000800 	.word	0x48000800

08002750 <micros>:

/* USER CODE BEGIN 4 */
// System time microsec
uint64_t micros()
{
 8002750:	b4b0      	push	{r4, r5, r7}
 8002752:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8002754:	4b09      	ldr	r3, [pc, #36]	@ (800277c <micros+0x2c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	2200      	movs	r2, #0
 800275c:	4618      	mov	r0, r3
 800275e:	4611      	mov	r1, r2
 8002760:	4b07      	ldr	r3, [pc, #28]	@ (8002780 <micros+0x30>)
 8002762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002766:	1884      	adds	r4, r0, r2
 8002768:	eb41 0503 	adc.w	r5, r1, r3
 800276c:	4622      	mov	r2, r4
 800276e:	462b      	mov	r3, r5
}
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	bcb0      	pop	{r4, r5, r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000298 	.word	0x20000298
 8002780:	20000368 	.word	0x20000368

08002784 <HAL_TIM_PeriodElapsedCallback>:

// Timer Interupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	6809      	ldr	r1, [r1, #0]
 8002790:	4812      	ldr	r0, [pc, #72]	@ (80027dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002792:	4281      	cmp	r1, r0
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 4294967296ULL;
 8002796:	4912      	ldr	r1, [pc, #72]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800279c:	1c4b      	adds	r3, r1, #1
 800279e:	4602      	mov	r2, r0
 80027a0:	490f      	ldr	r1, [pc, #60]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80027a2:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(htim->Instance == TIM4)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a0e      	ldr	r2, [pc, #56]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d110      	bne.n	80027d2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
//		AMT_encoder_update(&AMT, &htim2, micros());
		PID_controller_calculate_velo(&PID_velo, &AMT, Traj.currentVelocity);
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80027b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	490c      	ldr	r1, [pc, #48]	@ (80027ec <HAL_TIM_PeriodElapsedCallback+0x68>)
 80027bc:	480c      	ldr	r0, [pc, #48]	@ (80027f0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80027be:	f7ff f88b 	bl	80018d8 <PID_controller_calculate_velo>
		MOTOR_set_duty(&MT, PID_velo.out);
 80027c2:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80027c4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80027c8:	eeb0 0a67 	vmov.f32	s0, s15
 80027cc:	4809      	ldr	r0, [pc, #36]	@ (80027f4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80027ce:	f7fe fdd3 	bl	8001378 <MOTOR_set_duty>
//		__HAL_TIM_SET_COMPARE(&htim3 ,TIM_CHANNEL_1,PID_velo.out);
//		MOTOR_set_duty(&MT, ppp);

	}

}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40000c00 	.word	0x40000c00
 80027e0:	20000368 	.word	0x20000368
 80027e4:	40000800 	.word	0x40000800
 80027e8:	200003c8 	.word	0x200003c8
 80027ec:	20000330 	.word	0x20000330
 80027f0:	200003a0 	.word	0x200003a0
 80027f4:	20000370 	.word	0x20000370

080027f8 <HAL_GPIO_EXTI_Callback>:



// Photo Limit Condition
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_6)
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b40      	cmp	r3, #64	@ 0x40
 8002806:	d10e      	bne.n	8002826 <HAL_GPIO_EXTI_Callback+0x2e>
    {
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)
 8002808:	2140      	movs	r1, #64	@ 0x40
 800280a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800280e:	f000 fd2f 	bl	8003270 <HAL_GPIO_ReadPin>
 8002812:	4603      	mov	r3, r0
 8002814:	2b01      	cmp	r3, #1
 8002816:	d117      	bne.n	8002848 <HAL_GPIO_EXTI_Callback+0x50>
    	{
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8002818:	2201      	movs	r2, #1
 800281a:	2120      	movs	r1, #32
 800281c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002820:	f000 fd3e 	bl	80032a0 <HAL_GPIO_WritePin>
    	// Handle the interrupt for PA4
        // Example: Toggle an LED, send a message, etc.
//    	MOTOR_set_duty(&MT, -150);

    }
}
 8002824:	e010      	b.n	8002848 <HAL_GPIO_EXTI_Callback+0x50>
    else if (GPIO_Pin == GPIO_PIN_4)
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d10d      	bne.n	8002848 <HAL_GPIO_EXTI_Callback+0x50>
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 800282c:	2110      	movs	r1, #16
 800282e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002832:	f000 fd1d 	bl	8003270 <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_GPIO_EXTI_Callback+0x50>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800283c:	2201      	movs	r2, #1
 800283e:	2120      	movs	r1, #32
 8002840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002844:	f000 fd2c 	bl	80032a0 <HAL_GPIO_WritePin>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002854:	b672      	cpsid	i
}
 8002856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <Error_Handler+0x8>

0800285c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_MspInit+0x44>)
 8002864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002866:	4a0e      	ldr	r2, [pc, #56]	@ (80028a0 <HAL_MspInit+0x44>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6613      	str	r3, [r2, #96]	@ 0x60
 800286e:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <HAL_MspInit+0x44>)
 8002870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_MspInit+0x44>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <HAL_MspInit+0x44>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002884:	6593      	str	r3, [r2, #88]	@ 0x58
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_MspInit+0x44>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002892:	f000 fdd9 	bl	8003448 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000

080028a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b09e      	sub	sp, #120	@ 0x78
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	2254      	movs	r2, #84	@ 0x54
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 f90d 	bl	8006ae4 <memset>
  if(huart->Instance==LPUART1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1f      	ldr	r2, [pc, #124]	@ (800294c <HAL_UART_MspInit+0xa8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d136      	bne.n	8002942 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80028d4:	2320      	movs	r3, #32
 80028d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 faef 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028ec:	f7ff ffb0 	bl	8002850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80028f0:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <HAL_UART_MspInit+0xac>)
 80028f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f4:	4a16      	ldr	r2, [pc, #88]	@ (8002950 <HAL_UART_MspInit+0xac>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <HAL_UART_MspInit+0xac>)
 80028fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_UART_MspInit+0xac>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290c:	4a10      	ldr	r2, [pc, #64]	@ (8002950 <HAL_UART_MspInit+0xac>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002914:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <HAL_UART_MspInit+0xac>)
 8002916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002920:	230c      	movs	r3, #12
 8002922:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002930:	230c      	movs	r3, #12
 8002932:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002938:	4619      	mov	r1, r3
 800293a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800293e:	f000 fb15 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3778      	adds	r7, #120	@ 0x78
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40008000 	.word	0x40008000
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a35      	ldr	r2, [pc, #212]	@ (8002a38 <HAL_TIM_Base_MspInit+0xe4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10c      	bne.n	8002980 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002966:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 8002968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296a:	4a34      	ldr	r2, [pc, #208]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 800296c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002970:	6613      	str	r3, [r2, #96]	@ 0x60
 8002972:	4b32      	ldr	r3, [pc, #200]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800297e:	e056      	b.n	8002a2e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2e      	ldr	r2, [pc, #184]	@ (8002a40 <HAL_TIM_Base_MspInit+0xec>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10c      	bne.n	80029a4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800298a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6593      	str	r3, [r2, #88]	@ 0x58
 8002996:	4b29      	ldr	r3, [pc, #164]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	69bb      	ldr	r3, [r7, #24]
}
 80029a2:	e044      	b.n	8002a2e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a26      	ldr	r2, [pc, #152]	@ (8002a44 <HAL_TIM_Base_MspInit+0xf0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d114      	bne.n	80029d8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ae:	4b23      	ldr	r3, [pc, #140]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	4a22      	ldr	r2, [pc, #136]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ba:	4b20      	ldr	r3, [pc, #128]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	201e      	movs	r0, #30
 80029cc:	f000 fa99 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029d0:	201e      	movs	r0, #30
 80029d2:	f000 fab0 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 80029d6:	e02a      	b.n	8002a2e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM5)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a48 <HAL_TIM_Base_MspInit+0xf4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d114      	bne.n	8002a0c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e6:	4a15      	ldr	r2, [pc, #84]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ee:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	2032      	movs	r0, #50	@ 0x32
 8002a00:	f000 fa7f 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a04:	2032      	movs	r0, #50	@ 0x32
 8002a06:	f000 fa96 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 8002a0a:	e010      	b.n	8002a2e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0e      	ldr	r2, [pc, #56]	@ (8002a4c <HAL_TIM_Base_MspInit+0xf8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10b      	bne.n	8002a2e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a16:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1a:	4a08      	ldr	r2, [pc, #32]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 8002a1c:	f043 0310 	orr.w	r3, r3, #16
 8002a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_TIM_Base_MspInit+0xe8>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
}
 8002a2e:	bf00      	nop
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800
 8002a48:	40000c00 	.word	0x40000c00
 8002a4c:	40001000 	.word	0x40001000

08002a50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	@ 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a70:	d128      	bne.n	8002ac4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a72:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	4a15      	ldr	r2, [pc, #84]	@ (8002acc <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a7e:	4b13      	ldr	r3, [pc, #76]	@ (8002acc <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002acc <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a96:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ac0:	f000 fa54 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	3728      	adds	r7, #40	@ 0x28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a11      	ldr	r2, [pc, #68]	@ (8002b34 <HAL_TIM_MspPostInit+0x64>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d11b      	bne.n	8002b2a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <HAL_TIM_MspPostInit+0x68>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af6:	4a10      	ldr	r2, [pc, #64]	@ (8002b38 <HAL_TIM_MspPostInit+0x68>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002afe:	4b0e      	ldr	r3, [pc, #56]	@ (8002b38 <HAL_TIM_MspPostInit+0x68>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b0a:	2330      	movs	r3, #48	@ 0x30
 8002b0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4619      	mov	r1, r3
 8002b24:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <HAL_TIM_MspPostInit+0x6c>)
 8002b26:	f000 fa21 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b2a:	bf00      	nop
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	48000400 	.word	0x48000400

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <NMI_Handler+0x4>

08002b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <HardFault_Handler+0x4>

08002b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <MemManage_Handler+0x4>

08002b58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <BusFault_Handler+0x4>

08002b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <UsageFault_Handler+0x4>

08002b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b96:	f000 f8bb 	bl	8002d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photo_top_Pin);
 8002ba2:	2010      	movs	r0, #16
 8002ba4:	f000 fb94 	bl	80032d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photo_Base_Pin);
 8002bb0:	2040      	movs	r0, #64	@ 0x40
 8002bb2:	f000 fb8d 	bl	80032d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bc0:	4802      	ldr	r0, [pc, #8]	@ (8002bcc <TIM4_IRQHandler+0x10>)
 8002bc2:	f002 f803 	bl	8004bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000024c 	.word	0x2000024c

08002bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002bd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bd8:	f000 fb7a 	bl	80032d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002be4:	4802      	ldr	r0, [pc, #8]	@ (8002bf0 <TIM5_IRQHandler+0x10>)
 8002be6:	f001 fff1 	bl	8004bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000298 	.word	0x20000298

08002bf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <SystemInit+0x20>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfe:	4a05      	ldr	r2, [pc, #20]	@ (8002c14 <SystemInit+0x20>)
 8002c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c18:	480d      	ldr	r0, [pc, #52]	@ (8002c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c1c:	f7ff ffea 	bl	8002bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c20:	480c      	ldr	r0, [pc, #48]	@ (8002c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c22:	490d      	ldr	r1, [pc, #52]	@ (8002c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c24:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <LoopForever+0xe>)
  movs r3, #0
 8002c26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c28:	e002      	b.n	8002c30 <LoopCopyDataInit>

08002c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c2e:	3304      	adds	r3, #4

08002c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c34:	d3f9      	bcc.n	8002c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c36:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c38:	4c0a      	ldr	r4, [pc, #40]	@ (8002c64 <LoopForever+0x16>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c3c:	e001      	b.n	8002c42 <LoopFillZerobss>

08002c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c40:	3204      	adds	r2, #4

08002c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c44:	d3fb      	bcc.n	8002c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c46:	f003 ff5b 	bl	8006b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c4a:	f7ff f959 	bl	8001f00 <main>

08002c4e <LoopForever>:

LoopForever:
    b LoopForever
 8002c4e:	e7fe      	b.n	8002c4e <LoopForever>
  ldr   r0, =_estack
 8002c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002c5c:	08006de0 	.word	0x08006de0
  ldr r2, =_sbss
 8002c60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c64:	2000052c 	.word	0x2000052c

08002c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c68:	e7fe      	b.n	8002c68 <ADC1_2_IRQHandler>

08002c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 f939 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f000 f80e 	bl	8002c9c <HAL_InitTick>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	e001      	b.n	8002c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c8c:	f7ff fde6 	bl	800285c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c90:	79fb      	ldrb	r3, [r7, #7]

}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ca8:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <HAL_InitTick+0x68>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d022      	beq.n	8002cf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002cb0:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_InitTick+0x6c>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <HAL_InitTick+0x68>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f944 	bl	8002f52 <HAL_SYSTICK_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10f      	bne.n	8002cf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	d809      	bhi.n	8002cea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	f04f 30ff 	mov.w	r0, #4294967295
 8002cde:	f000 f910 	bl	8002f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <HAL_InitTick+0x70>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e007      	b.n	8002cfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e004      	b.n	8002cfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e001      	b.n	8002cfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000014 	.word	0x20000014
 8002d08:	2000000c 	.word	0x2000000c
 8002d0c:	20000010 	.word	0x20000010

08002d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_IncTick+0x1c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_IncTick+0x20>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a03      	ldr	r2, [pc, #12]	@ (8002d2c <HAL_IncTick+0x1c>)
 8002d20:	6013      	str	r3, [r2, #0]
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	200003f0 	.word	0x200003f0
 8002d30:	20000014 	.word	0x20000014

08002d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return uwTick;
 8002d38:	4b03      	ldr	r3, [pc, #12]	@ (8002d48 <HAL_GetTick+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	200003f0 	.word	0x200003f0

08002d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7e:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60d3      	str	r3, [r2, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d98:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <__NVIC_GetPriorityGrouping+0x18>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0307 	and.w	r3, r3, #7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0b      	blt.n	8002dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4907      	ldr	r1, [pc, #28]	@ (8002de8 <__NVIC_EnableIRQ+0x38>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	@ (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	@ (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	@ 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
         );
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	@ 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f7ff ff8e 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff29 	bl	8002d4c <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff40 	bl	8002d94 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff90 	bl	8002e40 <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5f 	bl	8002dec <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff33 	bl	8002db0 <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffa4 	bl	8002ea8 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f7a:	e15a      	b.n	8003232 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 814c 	beq.w	800322c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d005      	beq.n	8002fac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d130      	bne.n	800300e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0201 	and.w	r2, r3, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b03      	cmp	r3, #3
 8003018:	d017      	beq.n	800304a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d123      	bne.n	800309e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	08da      	lsrs	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3208      	adds	r2, #8
 800305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	08da      	lsrs	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3208      	adds	r2, #8
 8003098:	6939      	ldr	r1, [r7, #16]
 800309a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0203 	and.w	r2, r3, #3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80a6 	beq.w	800322c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e0:	4b5b      	ldr	r3, [pc, #364]	@ (8003250 <HAL_GPIO_Init+0x2e4>)
 80030e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003250 <HAL_GPIO_Init+0x2e4>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ec:	4b58      	ldr	r3, [pc, #352]	@ (8003250 <HAL_GPIO_Init+0x2e4>)
 80030ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f8:	4a56      	ldr	r2, [pc, #344]	@ (8003254 <HAL_GPIO_Init+0x2e8>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003122:	d01f      	beq.n	8003164 <HAL_GPIO_Init+0x1f8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a4c      	ldr	r2, [pc, #304]	@ (8003258 <HAL_GPIO_Init+0x2ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d019      	beq.n	8003160 <HAL_GPIO_Init+0x1f4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a4b      	ldr	r2, [pc, #300]	@ (800325c <HAL_GPIO_Init+0x2f0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_GPIO_Init+0x1f0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a4a      	ldr	r2, [pc, #296]	@ (8003260 <HAL_GPIO_Init+0x2f4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00d      	beq.n	8003158 <HAL_GPIO_Init+0x1ec>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a49      	ldr	r2, [pc, #292]	@ (8003264 <HAL_GPIO_Init+0x2f8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <HAL_GPIO_Init+0x1e8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a48      	ldr	r2, [pc, #288]	@ (8003268 <HAL_GPIO_Init+0x2fc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d101      	bne.n	8003150 <HAL_GPIO_Init+0x1e4>
 800314c:	2305      	movs	r3, #5
 800314e:	e00a      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003150:	2306      	movs	r3, #6
 8003152:	e008      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003154:	2304      	movs	r3, #4
 8003156:	e006      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003158:	2303      	movs	r3, #3
 800315a:	e004      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 800315c:	2302      	movs	r3, #2
 800315e:	e002      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003164:	2300      	movs	r3, #0
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	f002 0203 	and.w	r2, r2, #3
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	4093      	lsls	r3, r2
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003176:	4937      	ldr	r1, [pc, #220]	@ (8003254 <HAL_GPIO_Init+0x2e8>)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003184:	4b39      	ldr	r3, [pc, #228]	@ (800326c <HAL_GPIO_Init+0x300>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	43db      	mvns	r3, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031a8:	4a30      	ldr	r2, [pc, #192]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ae:	4b2f      	ldr	r3, [pc, #188]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031d2:	4a26      	ldr	r2, [pc, #152]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031d8:	4b24      	ldr	r3, [pc, #144]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031fc:	4a1b      	ldr	r2, [pc, #108]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003202:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <HAL_GPIO_Init+0x300>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003226:	4a11      	ldr	r2, [pc, #68]	@ (800326c <HAL_GPIO_Init+0x300>)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	f47f ae9d 	bne.w	8002f7c <HAL_GPIO_Init+0x10>
  }
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40021000 	.word	0x40021000
 8003254:	40010000 	.word	0x40010000
 8003258:	48000400 	.word	0x48000400
 800325c:	48000800 	.word	0x48000800
 8003260:	48000c00 	.word	0x48000c00
 8003264:	48001000 	.word	0x48001000
 8003268:	48001400 	.word	0x48001400
 800326c:	40010400 	.word	0x40010400

08003270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	887b      	ldrh	r3, [r7, #2]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
 800328c:	e001      	b.n	8003292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
 80032ac:	4613      	mov	r3, r2
 80032ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b0:	787b      	ldrb	r3, [r7, #1]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032bc:	e002      	b.n	80032c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d006      	beq.n	80032f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032e6:	4a05      	ldr	r2, [pc, #20]	@ (80032fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fa82 	bl	80027f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40010400 	.word	0x40010400

08003300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d141      	bne.n	8003392 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800330e:	4b4b      	ldr	r3, [pc, #300]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331a:	d131      	bne.n	8003380 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800331c:	4b47      	ldr	r3, [pc, #284]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003322:	4a46      	ldr	r2, [pc, #280]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003328:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800332c:	4b43      	ldr	r3, [pc, #268]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003334:	4a41      	ldr	r2, [pc, #260]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800333a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800333c:	4b40      	ldr	r3, [pc, #256]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2232      	movs	r2, #50	@ 0x32
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	4a3f      	ldr	r2, [pc, #252]	@ (8003444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	0c9b      	lsrs	r3, r3, #18
 800334e:	3301      	adds	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003352:	e002      	b.n	800335a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3b01      	subs	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800335a:	4b38      	ldr	r3, [pc, #224]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003366:	d102      	bne.n	800336e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f2      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800336e:	4b33      	ldr	r3, [pc, #204]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337a:	d158      	bne.n	800342e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e057      	b.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003380:	4b2e      	ldr	r3, [pc, #184]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003386:	4a2d      	ldr	r2, [pc, #180]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800338c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003390:	e04d      	b.n	800342e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003398:	d141      	bne.n	800341e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800339a:	4b28      	ldr	r3, [pc, #160]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a6:	d131      	bne.n	800340c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a8:	4b24      	ldr	r3, [pc, #144]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ae:	4a23      	ldr	r2, [pc, #140]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b8:	4b20      	ldr	r3, [pc, #128]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033c0:	4a1e      	ldr	r2, [pc, #120]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2232      	movs	r2, #50	@ 0x32
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	0c9b      	lsrs	r3, r3, #18
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033de:	e002      	b.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e6:	4b15      	ldr	r3, [pc, #84]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f2:	d102      	bne.n	80033fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f2      	bne.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033fa:	4b10      	ldr	r3, [pc, #64]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003406:	d112      	bne.n	800342e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e011      	b.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800340c:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003412:	4a0a      	ldr	r2, [pc, #40]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003418:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800341c:	e007      	b.n	800342e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800341e:	4b07      	ldr	r3, [pc, #28]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003426:	4a05      	ldr	r2, [pc, #20]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003428:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800342c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40007000 	.word	0x40007000
 8003440:	2000000c 	.word	0x2000000c
 8003444:	431bde83 	.word	0x431bde83

08003448 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a04      	ldr	r2, [pc, #16]	@ (8003464 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003452:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003456:	6093      	str	r3, [r2, #8]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40007000 	.word	0x40007000

08003468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e2fe      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d075      	beq.n	8003572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003486:	4b97      	ldr	r3, [pc, #604]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003490:	4b94      	ldr	r3, [pc, #592]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b0c      	cmp	r3, #12
 800349e:	d102      	bne.n	80034a6 <HAL_RCC_OscConfig+0x3e>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_OscConfig+0x44>
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	4b8d      	ldr	r3, [pc, #564]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05b      	beq.n	8003570 <HAL_RCC_OscConfig+0x108>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d157      	bne.n	8003570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e2d9      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x74>
 80034ce:	4b85      	ldr	r3, [pc, #532]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a84      	ldr	r2, [pc, #528]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e01d      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x98>
 80034e6:	4b7f      	ldr	r3, [pc, #508]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7e      	ldr	r2, [pc, #504]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b7c      	ldr	r3, [pc, #496]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a7b      	ldr	r2, [pc, #492]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 8003500:	4b78      	ldr	r3, [pc, #480]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a77      	ldr	r2, [pc, #476]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b75      	ldr	r3, [pc, #468]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a74      	ldr	r2, [pc, #464]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7ff fc08 	bl	8002d34 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003528:	f7ff fc04 	bl	8002d34 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	@ 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e29e      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353a:	4b6a      	ldr	r3, [pc, #424]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0xc0>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7ff fbf4 	bl	8002d34 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003550:	f7ff fbf0 	bl	8002d34 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	@ 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e28a      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003562:	4b60      	ldr	r3, [pc, #384]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0xe8>
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d075      	beq.n	800366a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357e:	4b59      	ldr	r3, [pc, #356]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003588:	4b56      	ldr	r3, [pc, #344]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d102      	bne.n	800359e <HAL_RCC_OscConfig+0x136>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_OscConfig+0x13c>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d11f      	bne.n	80035e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a4:	4b4f      	ldr	r3, [pc, #316]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_OscConfig+0x154>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e25d      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035bc:	4b49      	ldr	r3, [pc, #292]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	4946      	ldr	r1, [pc, #280]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035d0:	4b45      	ldr	r3, [pc, #276]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fb61 	bl	8002c9c <HAL_InitTick>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d043      	beq.n	8003668 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e249      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b3d      	ldr	r3, [pc, #244]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a3c      	ldr	r2, [pc, #240]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7ff fb9c 	bl	8002d34 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003600:	f7ff fb98 	bl	8002d34 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e232      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003612:	4b34      	ldr	r3, [pc, #208]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b31      	ldr	r3, [pc, #196]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	492d      	ldr	r1, [pc, #180]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
 8003632:	e01a      	b.n	800366a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003634:	4b2b      	ldr	r3, [pc, #172]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a2a      	ldr	r2, [pc, #168]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800363a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7ff fb78 	bl	8002d34 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003648:	f7ff fb74 	bl	8002d34 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e20e      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800365a:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1e0>
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003668:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d041      	beq.n	80036fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367e:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003680:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003684:	4a17      	ldr	r2, [pc, #92]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7ff fb51 	bl	8002d34 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003696:	f7ff fb4d 	bl	8002d34 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1e7      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036a8:	4b0e      	ldr	r3, [pc, #56]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ef      	beq.n	8003696 <HAL_RCC_OscConfig+0x22e>
 80036b6:	e020      	b.n	80036fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b8:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036be:	4a09      	ldr	r2, [pc, #36]	@ (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7ff fb34 	bl	8002d34 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ce:	e00d      	b.n	80036ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d0:	f7ff fb30 	bl	8002d34 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d906      	bls.n	80036ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1ca      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80036ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ea      	bne.n	80036d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80a6 	beq.w	8003854 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800370c:	4b84      	ldr	r3, [pc, #528]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_OscConfig+0x2b4>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x2b6>
 800371c:	2300      	movs	r3, #0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003722:	4b7f      	ldr	r3, [pc, #508]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003726:	4a7e      	ldr	r2, [pc, #504]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800372c:	6593      	str	r3, [r2, #88]	@ 0x58
 800372e:	4b7c      	ldr	r3, [pc, #496]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800373a:	2301      	movs	r3, #1
 800373c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800373e:	4b79      	ldr	r3, [pc, #484]	@ (8003924 <HAL_RCC_OscConfig+0x4bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800374a:	4b76      	ldr	r3, [pc, #472]	@ (8003924 <HAL_RCC_OscConfig+0x4bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a75      	ldr	r2, [pc, #468]	@ (8003924 <HAL_RCC_OscConfig+0x4bc>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003756:	f7ff faed 	bl	8002d34 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7ff fae9 	bl	8002d34 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e183      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003770:	4b6c      	ldr	r3, [pc, #432]	@ (8003924 <HAL_RCC_OscConfig+0x4bc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d108      	bne.n	8003796 <HAL_RCC_OscConfig+0x32e>
 8003784:	4b66      	ldr	r3, [pc, #408]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378a:	4a65      	ldr	r2, [pc, #404]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003794:	e024      	b.n	80037e0 <HAL_RCC_OscConfig+0x378>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b05      	cmp	r3, #5
 800379c:	d110      	bne.n	80037c0 <HAL_RCC_OscConfig+0x358>
 800379e:	4b60      	ldr	r3, [pc, #384]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b4:	4a5a      	ldr	r2, [pc, #360]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037be:	e00f      	b.n	80037e0 <HAL_RCC_OscConfig+0x378>
 80037c0:	4b57      	ldr	r3, [pc, #348]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	4a56      	ldr	r2, [pc, #344]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d0:	4b53      	ldr	r3, [pc, #332]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d6:	4a52      	ldr	r2, [pc, #328]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d016      	beq.n	8003816 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7ff faa4 	bl	8002d34 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f0:	f7ff faa0 	bl	8002d34 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e138      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003806:	4b46      	ldr	r3, [pc, #280]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ed      	beq.n	80037f0 <HAL_RCC_OscConfig+0x388>
 8003814:	e015      	b.n	8003842 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7ff fa8d 	bl	8002d34 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7ff fa89 	bl	8002d34 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e121      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003834:	4b3a      	ldr	r3, [pc, #232]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ed      	bne.n	800381e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003842:	7ffb      	ldrb	r3, [r7, #31]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b35      	ldr	r3, [pc, #212]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384c:	4a34      	ldr	r2, [pc, #208]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003852:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d03c      	beq.n	80038da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01c      	beq.n	80038a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003868:	4b2d      	ldr	r3, [pc, #180]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800386a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800386e:	4a2c      	ldr	r2, [pc, #176]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7ff fa5c 	bl	8002d34 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003880:	f7ff fa58 	bl	8002d34 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0f2      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003892:	4b23      	ldr	r3, [pc, #140]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003894:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ef      	beq.n	8003880 <HAL_RCC_OscConfig+0x418>
 80038a0:	e01b      	b.n	80038da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7ff fa3f 	bl	8002d34 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ba:	f7ff fa3b 	bl	8002d34 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e0d5      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038cc:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ef      	bne.n	80038ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80c9 	beq.w	8003a76 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	f000 8083 	beq.w	80039f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d15e      	bne.n	80039b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b09      	ldr	r3, [pc, #36]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a08      	ldr	r2, [pc, #32]	@ (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7ff fa15 	bl	8002d34 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390c:	e00c      	b.n	8003928 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7ff fa11 	bl	8002d34 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d905      	bls.n	8003928 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e0ab      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
 8003920:	40021000 	.word	0x40021000
 8003924:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003928:	4b55      	ldr	r3, [pc, #340]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ec      	bne.n	800390e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003934:	4b52      	ldr	r3, [pc, #328]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	4b52      	ldr	r3, [pc, #328]	@ (8003a84 <HAL_RCC_OscConfig+0x61c>)
 800393a:	4013      	ands	r3, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6a11      	ldr	r1, [r2, #32]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003944:	3a01      	subs	r2, #1
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800394e:	0212      	lsls	r2, r2, #8
 8003950:	4311      	orrs	r1, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003956:	0852      	lsrs	r2, r2, #1
 8003958:	3a01      	subs	r2, #1
 800395a:	0552      	lsls	r2, r2, #21
 800395c:	4311      	orrs	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800396e:	06d2      	lsls	r2, r2, #27
 8003970:	430a      	orrs	r2, r1
 8003972:	4943      	ldr	r1, [pc, #268]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 8003974:	4313      	orrs	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b41      	ldr	r3, [pc, #260]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a40      	ldr	r2, [pc, #256]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 800397e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003984:	4b3e      	ldr	r3, [pc, #248]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a3d      	ldr	r2, [pc, #244]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 800398a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800398e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7ff f9d0 	bl	8002d34 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7ff f9cc 	bl	8002d34 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e066      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	4b35      	ldr	r3, [pc, #212]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x530>
 80039b6:	e05e      	b.n	8003a76 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b8:	4b31      	ldr	r3, [pc, #196]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a30      	ldr	r2, [pc, #192]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 80039be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7ff f9b6 	bl	8002d34 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7ff f9b2 	bl	8002d34 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e04c      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039de:	4b28      	ldr	r3, [pc, #160]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039ea:	4b25      	ldr	r3, [pc, #148]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	4924      	ldr	r1, [pc, #144]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 80039f0:	4b25      	ldr	r3, [pc, #148]	@ (8003a88 <HAL_RCC_OscConfig+0x620>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	60cb      	str	r3, [r1, #12]
 80039f6:	e03e      	b.n	8003a76 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e039      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a04:	4b1e      	ldr	r3, [pc, #120]	@ (8003a80 <HAL_RCC_OscConfig+0x618>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d12c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	3b01      	subs	r3, #1
 8003a24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d123      	bne.n	8003a72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d11b      	bne.n	8003a72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d113      	bne.n	8003a72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	3b01      	subs	r3, #1
 8003a58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d109      	bne.n	8003a72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	019f800c 	.word	0x019f800c
 8003a88:	feeefffc 	.word	0xfeeefffc

08003a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e11e      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b91      	ldr	r3, [pc, #580]	@ (8003cec <HAL_RCC_ClockConfig+0x260>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d910      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b8e      	ldr	r3, [pc, #568]	@ (8003cec <HAL_RCC_ClockConfig+0x260>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 020f 	bic.w	r2, r3, #15
 8003aba:	498c      	ldr	r1, [pc, #560]	@ (8003cec <HAL_RCC_ClockConfig+0x260>)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b8a      	ldr	r3, [pc, #552]	@ (8003cec <HAL_RCC_ClockConfig+0x260>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e106      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d073      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d129      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae8:	4b81      	ldr	r3, [pc, #516]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0f4      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003af8:	f000 f99e 	bl	8003e38 <RCC_GetSysClockFreqFromPLLSource>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4a7c      	ldr	r2, [pc, #496]	@ (8003cf4 <HAL_RCC_ClockConfig+0x268>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d93f      	bls.n	8003b86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b06:	4b7a      	ldr	r3, [pc, #488]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d033      	beq.n	8003b86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d12f      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b26:	4b72      	ldr	r3, [pc, #456]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b2e:	4a70      	ldr	r2, [pc, #448]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b36:	2380      	movs	r3, #128	@ 0x80
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e024      	b.n	8003b86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d107      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b44:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0c6      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b54:	4b66      	ldr	r3, [pc, #408]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0be      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b64:	f000 f8ce 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4a61      	ldr	r2, [pc, #388]	@ (8003cf4 <HAL_RCC_ClockConfig+0x268>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d909      	bls.n	8003b86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b72:	4b5f      	ldr	r3, [pc, #380]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b7a:	4a5d      	ldr	r2, [pc, #372]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b82:	2380      	movs	r3, #128	@ 0x80
 8003b84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4957      	ldr	r1, [pc, #348]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b98:	f7ff f8cc 	bl	8002d34 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7ff f8c8 	bl	8002d34 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e095      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d023      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be0:	4b43      	ldr	r3, [pc, #268]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a42      	ldr	r2, [pc, #264]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003be6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c00:	4a3b      	ldr	r2, [pc, #236]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003c02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b39      	ldr	r3, [pc, #228]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4936      	ldr	r1, [pc, #216]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b80      	cmp	r3, #128	@ 0x80
 8003c20:	d105      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c22:	4b33      	ldr	r3, [pc, #204]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4a32      	ldr	r2, [pc, #200]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003c28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003cec <HAL_RCC_ClockConfig+0x260>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d21d      	bcs.n	8003c78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cec <HAL_RCC_ClockConfig+0x260>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 020f 	bic.w	r2, r3, #15
 8003c44:	4929      	ldr	r1, [pc, #164]	@ (8003cec <HAL_RCC_ClockConfig+0x260>)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c4c:	f7ff f872 	bl	8002d34 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c54:	f7ff f86e 	bl	8002d34 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e03b      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1ed      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c84:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4917      	ldr	r1, [pc, #92]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca2:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	490f      	ldr	r1, [pc, #60]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb6:	f000 f825 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf0 <HAL_RCC_ClockConfig+0x264>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	490c      	ldr	r1, [pc, #48]	@ (8003cf8 <HAL_RCC_ClockConfig+0x26c>)
 8003cc8:	5ccb      	ldrb	r3, [r1, r3]
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cfc <HAL_RCC_ClockConfig+0x270>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <HAL_RCC_ClockConfig+0x274>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe ffde 	bl	8002c9c <HAL_InitTick>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40022000 	.word	0x40022000
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	04c4b400 	.word	0x04c4b400
 8003cf8:	08006d90 	.word	0x08006d90
 8003cfc:	2000000c 	.word	0x2000000c
 8003d00:	20000010 	.word	0x20000010

08003d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d102      	bne.n	8003d1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d16:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	e047      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d1c:	4b27      	ldr	r3, [pc, #156]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d102      	bne.n	8003d2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d28:	4b26      	ldr	r3, [pc, #152]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	e03e      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d2e:	4b23      	ldr	r3, [pc, #140]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d136      	bne.n	8003da8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d3a:	4b20      	ldr	r3, [pc, #128]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d44:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d10c      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d58:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d62:	68d2      	ldr	r2, [r2, #12]
 8003d64:	0a12      	lsrs	r2, r2, #8
 8003d66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	617b      	str	r3, [r7, #20]
      break;
 8003d70:	e00c      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d72:	4a13      	ldr	r2, [pc, #76]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7a:	4a10      	ldr	r2, [pc, #64]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7c:	68d2      	ldr	r2, [r2, #12]
 8003d7e:	0a12      	lsrs	r2, r2, #8
 8003d80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d84:	fb02 f303 	mul.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
      break;
 8003d8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	0e5b      	lsrs	r3, r3, #25
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	3301      	adds	r3, #1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e001      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003dac:	693b      	ldr	r3, [r7, #16]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	00f42400 	.word	0x00f42400
 8003dc4:	016e3600 	.word	0x016e3600

08003dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dcc:	4b03      	ldr	r3, [pc, #12]	@ (8003ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	2000000c 	.word	0x2000000c

08003de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003de4:	f7ff fff0 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4904      	ldr	r1, [pc, #16]	@ (8003e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000
 8003e08:	08006da0 	.word	0x08006da0

08003e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e10:	f7ff ffda 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	0adb      	lsrs	r3, r3, #11
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	4904      	ldr	r1, [pc, #16]	@ (8003e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e22:	5ccb      	ldrb	r3, [r1, r3]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000
 8003e34:	08006da0 	.word	0x08006da0

08003e38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3301      	adds	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d10c      	bne.n	8003e76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e5c:	4a17      	ldr	r2, [pc, #92]	@ (8003ebc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	4a14      	ldr	r2, [pc, #80]	@ (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e66:	68d2      	ldr	r2, [r2, #12]
 8003e68:	0a12      	lsrs	r2, r2, #8
 8003e6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	617b      	str	r3, [r7, #20]
    break;
 8003e74:	e00c      	b.n	8003e90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e76:	4a12      	ldr	r2, [pc, #72]	@ (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e80:	68d2      	ldr	r2, [r2, #12]
 8003e82:	0a12      	lsrs	r2, r2, #8
 8003e84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
    break;
 8003e8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e90:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	0e5b      	lsrs	r3, r3, #25
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003eaa:	687b      	ldr	r3, [r7, #4]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	016e3600 	.word	0x016e3600
 8003ec0:	00f42400 	.word	0x00f42400

08003ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ecc:	2300      	movs	r3, #0
 8003ece:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8098 	beq.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee6:	4b43      	ldr	r3, [pc, #268]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10d      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	4b40      	ldr	r3, [pc, #256]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003efe:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a39      	ldr	r2, [pc, #228]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f1a:	f7fe ff0b 	bl	8002d34 <HAL_GetTick>
 8003f1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f20:	e009      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f22:	f7fe ff07 	bl	8002d34 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d902      	bls.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	74fb      	strb	r3, [r7, #19]
        break;
 8003f34:	e005      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f36:	4b30      	ldr	r3, [pc, #192]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0ef      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d159      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f48:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01e      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d019      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f64:	4b23      	ldr	r3, [pc, #140]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f70:	4b20      	ldr	r3, [pc, #128]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f76:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f80:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f86:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f90:	4a18      	ldr	r2, [pc, #96]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fe fec7 	bl	8002d34 <HAL_GetTick>
 8003fa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa8:	e00b      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fe fec3 	bl	8002d34 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d902      	bls.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	74fb      	strb	r3, [r7, #19]
            break;
 8003fc0:	e006      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ec      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd6:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe4:	4903      	ldr	r1, [pc, #12]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fec:	e008      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	74bb      	strb	r3, [r7, #18]
 8003ff2:	e005      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004000:	7c7b      	ldrb	r3, [r7, #17]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d105      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004006:	4ba7      	ldr	r3, [pc, #668]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	4aa6      	ldr	r2, [pc, #664]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004010:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800401e:	4ba1      	ldr	r3, [pc, #644]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004024:	f023 0203 	bic.w	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	499d      	ldr	r1, [pc, #628]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004040:	4b98      	ldr	r3, [pc, #608]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f023 020c 	bic.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4995      	ldr	r1, [pc, #596]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004062:	4b90      	ldr	r3, [pc, #576]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	498c      	ldr	r1, [pc, #560]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004084:	4b87      	ldr	r3, [pc, #540]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	4984      	ldr	r1, [pc, #528]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040a6:	4b7f      	ldr	r3, [pc, #508]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	497b      	ldr	r1, [pc, #492]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c8:	4b76      	ldr	r3, [pc, #472]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	4973      	ldr	r1, [pc, #460]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ea:	4b6e      	ldr	r3, [pc, #440]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	496a      	ldr	r1, [pc, #424]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800410c:	4b65      	ldr	r3, [pc, #404]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	4962      	ldr	r1, [pc, #392]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800412e:	4b5d      	ldr	r3, [pc, #372]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004134:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	4959      	ldr	r1, [pc, #356]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004150:	4b54      	ldr	r3, [pc, #336]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	4951      	ldr	r1, [pc, #324]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004172:	4b4c      	ldr	r3, [pc, #304]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	4948      	ldr	r1, [pc, #288]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d015      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004194:	4b43      	ldr	r3, [pc, #268]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	4940      	ldr	r1, [pc, #256]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041b2:	d105      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b4:	4b3b      	ldr	r3, [pc, #236]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a3a      	ldr	r2, [pc, #232]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041cc:	4b35      	ldr	r3, [pc, #212]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041da:	4932      	ldr	r1, [pc, #200]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ea:	d105      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ec:	4b2d      	ldr	r3, [pc, #180]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4a2c      	ldr	r2, [pc, #176]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004204:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004212:	4924      	ldr	r1, [pc, #144]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004222:	d105      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004224:	4b1f      	ldr	r3, [pc, #124]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a1e      	ldr	r2, [pc, #120]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800422e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d015      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800423c:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424a:	4916      	ldr	r1, [pc, #88]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800425a:	d105      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800425c:	4b11      	ldr	r3, [pc, #68]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a10      	ldr	r2, [pc, #64]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004266:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d019      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	4908      	ldr	r1, [pc, #32]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004292:	d109      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004294:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a02      	ldr	r2, [pc, #8]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800429e:	60d3      	str	r3, [r2, #12]
 80042a0:	e002      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d015      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042b4:	4b29      	ldr	r3, [pc, #164]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	4926      	ldr	r1, [pc, #152]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042d2:	d105      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042d4:	4b21      	ldr	r3, [pc, #132]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a20      	ldr	r2, [pc, #128]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042ec:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042fa:	4918      	ldr	r1, [pc, #96]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800430c:	4b13      	ldr	r3, [pc, #76]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4a12      	ldr	r2, [pc, #72]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004316:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004324:	4b0d      	ldr	r3, [pc, #52]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004326:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800432a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004332:	490a      	ldr	r1, [pc, #40]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004342:	d105      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a04      	ldr	r2, [pc, #16]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800434a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800434e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004350:	7cbb      	ldrb	r3, [r7, #18]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000

08004360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e049      	b.n	8004406 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fe fae4 	bl	8002954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f000 ffb6 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d001      	beq.n	8004428 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e04c      	b.n	80044c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a26      	ldr	r2, [pc, #152]	@ (80044d0 <HAL_TIM_Base_Start+0xc0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d022      	beq.n	8004480 <HAL_TIM_Base_Start+0x70>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004442:	d01d      	beq.n	8004480 <HAL_TIM_Base_Start+0x70>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a22      	ldr	r2, [pc, #136]	@ (80044d4 <HAL_TIM_Base_Start+0xc4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d018      	beq.n	8004480 <HAL_TIM_Base_Start+0x70>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a21      	ldr	r2, [pc, #132]	@ (80044d8 <HAL_TIM_Base_Start+0xc8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <HAL_TIM_Base_Start+0x70>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1f      	ldr	r2, [pc, #124]	@ (80044dc <HAL_TIM_Base_Start+0xcc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00e      	beq.n	8004480 <HAL_TIM_Base_Start+0x70>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1e      	ldr	r2, [pc, #120]	@ (80044e0 <HAL_TIM_Base_Start+0xd0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_TIM_Base_Start+0x70>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1c      	ldr	r2, [pc, #112]	@ (80044e4 <HAL_TIM_Base_Start+0xd4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_TIM_Base_Start+0x70>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1b      	ldr	r2, [pc, #108]	@ (80044e8 <HAL_TIM_Base_Start+0xd8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d115      	bne.n	80044ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	4b19      	ldr	r3, [pc, #100]	@ (80044ec <HAL_TIM_Base_Start+0xdc>)
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b06      	cmp	r3, #6
 8004490:	d015      	beq.n	80044be <HAL_TIM_Base_Start+0xae>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004498:	d011      	beq.n	80044be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	e008      	b.n	80044be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e000      	b.n	80044c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40013400 	.word	0x40013400
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40015000 	.word	0x40015000
 80044ec:	00010007 	.word	0x00010007

080044f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	d001      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e054      	b.n	80045b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a26      	ldr	r2, [pc, #152]	@ (80045c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d022      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x80>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004532:	d01d      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x80>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a22      	ldr	r2, [pc, #136]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d018      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x80>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a21      	ldr	r2, [pc, #132]	@ (80045c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x80>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1f      	ldr	r2, [pc, #124]	@ (80045cc <HAL_TIM_Base_Start_IT+0xdc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00e      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x80>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1e      	ldr	r2, [pc, #120]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x80>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x80>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1b      	ldr	r2, [pc, #108]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d115      	bne.n	800459c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <HAL_TIM_Base_Start_IT+0xec>)
 8004578:	4013      	ands	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b06      	cmp	r3, #6
 8004580:	d015      	beq.n	80045ae <HAL_TIM_Base_Start_IT+0xbe>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004588:	d011      	beq.n	80045ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	e008      	b.n	80045ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e000      	b.n	80045b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40013400 	.word	0x40013400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40015000 	.word	0x40015000
 80045dc:	00010007 	.word	0x00010007

080045e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e049      	b.n	8004686 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f841 	bl	800468e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f000 fe76 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <HAL_TIM_PWM_Start_IT+0x28>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e03c      	b.n	8004746 <HAL_TIM_PWM_Start_IT+0xa2>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d109      	bne.n	80046e6 <HAL_TIM_PWM_Start_IT+0x42>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	bf14      	ite	ne
 80046de:	2301      	movne	r3, #1
 80046e0:	2300      	moveq	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	e02f      	b.n	8004746 <HAL_TIM_PWM_Start_IT+0xa2>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d109      	bne.n	8004700 <HAL_TIM_PWM_Start_IT+0x5c>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	bf14      	ite	ne
 80046f8:	2301      	movne	r3, #1
 80046fa:	2300      	moveq	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e022      	b.n	8004746 <HAL_TIM_PWM_Start_IT+0xa2>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b0c      	cmp	r3, #12
 8004704:	d109      	bne.n	800471a <HAL_TIM_PWM_Start_IT+0x76>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	bf14      	ite	ne
 8004712:	2301      	movne	r3, #1
 8004714:	2300      	moveq	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	e015      	b.n	8004746 <HAL_TIM_PWM_Start_IT+0xa2>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b10      	cmp	r3, #16
 800471e:	d109      	bne.n	8004734 <HAL_TIM_PWM_Start_IT+0x90>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e008      	b.n	8004746 <HAL_TIM_PWM_Start_IT+0xa2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0f1      	b.n	8004932 <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start_IT+0xba>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800475c:	e023      	b.n	80047a6 <HAL_TIM_PWM_Start_IT+0x102>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start_IT+0xca>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800476c:	e01b      	b.n	80047a6 <HAL_TIM_PWM_Start_IT+0x102>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d104      	bne.n	800477e <HAL_TIM_PWM_Start_IT+0xda>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800477c:	e013      	b.n	80047a6 <HAL_TIM_PWM_Start_IT+0x102>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b0c      	cmp	r3, #12
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Start_IT+0xea>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800478c:	e00b      	b.n	80047a6 <HAL_TIM_PWM_Start_IT+0x102>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b10      	cmp	r3, #16
 8004792:	d104      	bne.n	800479e <HAL_TIM_PWM_Start_IT+0xfa>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800479c:	e003      	b.n	80047a6 <HAL_TIM_PWM_Start_IT+0x102>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b0c      	cmp	r3, #12
 80047aa:	d841      	bhi.n	8004830 <HAL_TIM_PWM_Start_IT+0x18c>
 80047ac:	a201      	add	r2, pc, #4	@ (adr r2, 80047b4 <HAL_TIM_PWM_Start_IT+0x110>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047e9 	.word	0x080047e9
 80047b8:	08004831 	.word	0x08004831
 80047bc:	08004831 	.word	0x08004831
 80047c0:	08004831 	.word	0x08004831
 80047c4:	080047fb 	.word	0x080047fb
 80047c8:	08004831 	.word	0x08004831
 80047cc:	08004831 	.word	0x08004831
 80047d0:	08004831 	.word	0x08004831
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	08004831 	.word	0x08004831
 80047dc:	08004831 	.word	0x08004831
 80047e0:	08004831 	.word	0x08004831
 80047e4:	0800481f 	.word	0x0800481f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0202 	orr.w	r2, r2, #2
 80047f6:	60da      	str	r2, [r3, #12]
      break;
 80047f8:	e01d      	b.n	8004836 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0204 	orr.w	r2, r2, #4
 8004808:	60da      	str	r2, [r3, #12]
      break;
 800480a:	e014      	b.n	8004836 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0208 	orr.w	r2, r2, #8
 800481a:	60da      	str	r2, [r3, #12]
      break;
 800481c:	e00b      	b.n	8004836 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0210 	orr.w	r2, r2, #16
 800482c:	60da      	str	r2, [r3, #12]
      break;
 800482e:	e002      	b.n	8004836 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
      break;
 8004834:	bf00      	nop
  }

  if (status == HAL_OK)
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d179      	bne.n	8004930 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2201      	movs	r2, #1
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f001 f9dd 	bl	8005c04 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a3b      	ldr	r2, [pc, #236]	@ (800493c <HAL_TIM_PWM_Start_IT+0x298>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <HAL_TIM_PWM_Start_IT+0x1e2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a39      	ldr	r2, [pc, #228]	@ (8004940 <HAL_TIM_PWM_Start_IT+0x29c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_TIM_PWM_Start_IT+0x1e2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a38      	ldr	r2, [pc, #224]	@ (8004944 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <HAL_TIM_PWM_Start_IT+0x1e2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a36      	ldr	r2, [pc, #216]	@ (8004948 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_TIM_PWM_Start_IT+0x1e2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a35      	ldr	r2, [pc, #212]	@ (800494c <HAL_TIM_PWM_Start_IT+0x2a8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_TIM_PWM_Start_IT+0x1e2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a33      	ldr	r2, [pc, #204]	@ (8004950 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <HAL_TIM_PWM_Start_IT+0x1e6>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_TIM_PWM_Start_IT+0x1e8>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800489e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a25      	ldr	r2, [pc, #148]	@ (800493c <HAL_TIM_PWM_Start_IT+0x298>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <HAL_TIM_PWM_Start_IT+0x24c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b2:	d01d      	beq.n	80048f0 <HAL_TIM_PWM_Start_IT+0x24c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a26      	ldr	r2, [pc, #152]	@ (8004954 <HAL_TIM_PWM_Start_IT+0x2b0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_TIM_PWM_Start_IT+0x24c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a25      	ldr	r2, [pc, #148]	@ (8004958 <HAL_TIM_PWM_Start_IT+0x2b4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_TIM_PWM_Start_IT+0x24c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a23      	ldr	r2, [pc, #140]	@ (800495c <HAL_TIM_PWM_Start_IT+0x2b8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_TIM_PWM_Start_IT+0x24c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004940 <HAL_TIM_PWM_Start_IT+0x29c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_TIM_PWM_Start_IT+0x24c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a18      	ldr	r2, [pc, #96]	@ (8004944 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_TIM_PWM_Start_IT+0x24c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a19      	ldr	r2, [pc, #100]	@ (8004950 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d115      	bne.n	800491c <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004960 <HAL_TIM_PWM_Start_IT+0x2bc>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d015      	beq.n	800492e <HAL_TIM_PWM_Start_IT+0x28a>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004908:	d011      	beq.n	800492e <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491a:	e008      	b.n	800492e <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e000      	b.n	8004930 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40013400 	.word	0x40013400
 8004944:	40014000 	.word	0x40014000
 8004948:	40014400 	.word	0x40014400
 800494c:	40014800 	.word	0x40014800
 8004950:	40015000 	.word	0x40015000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	00010007 	.word	0x00010007

08004964 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e097      	b.n	8004aa8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fe f85f 	bl	8002a50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80049a8:	f023 0307 	bic.w	r3, r3, #7
 80049ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f000 fca9 	bl	8005310 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	4313      	orrs	r3, r2
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004a04:	f023 030c 	bic.w	r3, r3, #12
 8004a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	4313      	orrs	r3, r2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	011a      	lsls	r2, r3, #4
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	031b      	lsls	r3, r3, #12
 8004a34:	4313      	orrs	r3, r2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	4313      	orrs	r3, r2
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ac0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ac8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ad0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ad8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d110      	bne.n	8004b02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d102      	bne.n	8004aec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ae6:	7b7b      	ldrb	r3, [r7, #13]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d001      	beq.n	8004af0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e069      	b.n	8004bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b00:	e031      	b.n	8004b66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d110      	bne.n	8004b2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d102      	bne.n	8004b14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b0e:	7b3b      	ldrb	r3, [r7, #12]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e055      	b.n	8004bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b28:	e01d      	b.n	8004b66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d108      	bne.n	8004b42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b30:	7bbb      	ldrb	r3, [r7, #14]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d105      	bne.n	8004b42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b36:	7b7b      	ldrb	r3, [r7, #13]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d102      	bne.n	8004b42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b3c:	7b3b      	ldrb	r3, [r7, #12]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d001      	beq.n	8004b46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e03e      	b.n	8004bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_TIM_Encoder_Start+0xc4>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d008      	beq.n	8004b84 <HAL_TIM_Encoder_Start+0xd4>
 8004b72:	e00f      	b.n	8004b94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 f841 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8004b82:	e016      	b.n	8004bb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2104      	movs	r1, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 f839 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8004b92:	e00e      	b.n	8004bb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 f831 	bl	8005c04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	2104      	movs	r1, #4
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 f82a 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8004bb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d020      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0202 	mvn.w	r2, #2
 8004c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fb5c 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fb4e 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fb5f 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d020      	beq.n	8004c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01b      	beq.n	8004c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0204 	mvn.w	r2, #4
 8004c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2202      	movs	r2, #2
 8004c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fb36 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004c68:	e005      	b.n	8004c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fb28 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fb39 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d020      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01b      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0208 	mvn.w	r2, #8
 8004c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fb10 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004cb4:	e005      	b.n	8004cc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fb02 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fb13 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d020      	beq.n	8004d14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01b      	beq.n	8004d14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0210 	mvn.w	r2, #16
 8004ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 faea 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004d00:	e005      	b.n	8004d0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fadc 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 faed 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00c      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0201 	mvn.w	r2, #1
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd fd26 	bl	8002784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00c      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f001 f815 	bl	8005d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00c      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f001 f80d 	bl	8005da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00c      	beq.n	8004dae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 faa7 	bl	80052fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00c      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f06f 0220 	mvn.w	r2, #32
 8004dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 ffd5 	bl	8005d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00c      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 ffe1 	bl	8005db8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00c      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 ffd9 	bl	8005dcc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00c      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 ffd1 	bl	8005de0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00c      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 ffc9 	bl	8005df4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0ff      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b14      	cmp	r3, #20
 8004e96:	f200 80f0 	bhi.w	800507a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	0800507b 	.word	0x0800507b
 8004ea8:	0800507b 	.word	0x0800507b
 8004eac:	0800507b 	.word	0x0800507b
 8004eb0:	08004f35 	.word	0x08004f35
 8004eb4:	0800507b 	.word	0x0800507b
 8004eb8:	0800507b 	.word	0x0800507b
 8004ebc:	0800507b 	.word	0x0800507b
 8004ec0:	08004f77 	.word	0x08004f77
 8004ec4:	0800507b 	.word	0x0800507b
 8004ec8:	0800507b 	.word	0x0800507b
 8004ecc:	0800507b 	.word	0x0800507b
 8004ed0:	08004fb7 	.word	0x08004fb7
 8004ed4:	0800507b 	.word	0x0800507b
 8004ed8:	0800507b 	.word	0x0800507b
 8004edc:	0800507b 	.word	0x0800507b
 8004ee0:	08004ff9 	.word	0x08004ff9
 8004ee4:	0800507b 	.word	0x0800507b
 8004ee8:	0800507b 	.word	0x0800507b
 8004eec:	0800507b 	.word	0x0800507b
 8004ef0:	08005039 	.word	0x08005039
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fabc 	bl	8005478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0208 	orr.w	r2, r2, #8
 8004f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0204 	bic.w	r2, r2, #4
 8004f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6999      	ldr	r1, [r3, #24]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	619a      	str	r2, [r3, #24]
      break;
 8004f32:	e0a5      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fb36 	bl	80055ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6999      	ldr	r1, [r3, #24]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	021a      	lsls	r2, r3, #8
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	619a      	str	r2, [r3, #24]
      break;
 8004f74:	e084      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fba9 	bl	80056d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0208 	orr.w	r2, r2, #8
 8004f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0204 	bic.w	r2, r2, #4
 8004fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69d9      	ldr	r1, [r3, #28]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	61da      	str	r2, [r3, #28]
      break;
 8004fb4:	e064      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fc1b 	bl	80057f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69d9      	ldr	r1, [r3, #28]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	021a      	lsls	r2, r3, #8
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	61da      	str	r2, [r3, #28]
      break;
 8004ff6:	e043      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fc8e 	bl	8005920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0208 	orr.w	r2, r2, #8
 8005012:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0204 	bic.w	r2, r2, #4
 8005022:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005036:	e023      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fcd8 	bl	80059f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005052:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005062:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	021a      	lsls	r2, r3, #8
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005078:	e002      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
      break;
 800507e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005088:	7dfb      	ldrb	r3, [r7, #23]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop

08005094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_TIM_ConfigClockSource+0x1c>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e0f6      	b.n	800529e <HAL_TIM_ConfigClockSource+0x20a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80050ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a6f      	ldr	r2, [pc, #444]	@ (80052a8 <HAL_TIM_ConfigClockSource+0x214>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	f000 80c1 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80050f0:	4a6d      	ldr	r2, [pc, #436]	@ (80052a8 <HAL_TIM_ConfigClockSource+0x214>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	f200 80c6 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80050f8:	4a6c      	ldr	r2, [pc, #432]	@ (80052ac <HAL_TIM_ConfigClockSource+0x218>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	f000 80b9 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005100:	4a6a      	ldr	r2, [pc, #424]	@ (80052ac <HAL_TIM_ConfigClockSource+0x218>)
 8005102:	4293      	cmp	r3, r2
 8005104:	f200 80be 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005108:	4a69      	ldr	r2, [pc, #420]	@ (80052b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	f000 80b1 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005110:	4a67      	ldr	r2, [pc, #412]	@ (80052b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	f200 80b6 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005118:	4a66      	ldr	r2, [pc, #408]	@ (80052b4 <HAL_TIM_ConfigClockSource+0x220>)
 800511a:	4293      	cmp	r3, r2
 800511c:	f000 80a9 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005120:	4a64      	ldr	r2, [pc, #400]	@ (80052b4 <HAL_TIM_ConfigClockSource+0x220>)
 8005122:	4293      	cmp	r3, r2
 8005124:	f200 80ae 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005128:	4a63      	ldr	r2, [pc, #396]	@ (80052b8 <HAL_TIM_ConfigClockSource+0x224>)
 800512a:	4293      	cmp	r3, r2
 800512c:	f000 80a1 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005130:	4a61      	ldr	r2, [pc, #388]	@ (80052b8 <HAL_TIM_ConfigClockSource+0x224>)
 8005132:	4293      	cmp	r3, r2
 8005134:	f200 80a6 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005138:	4a60      	ldr	r2, [pc, #384]	@ (80052bc <HAL_TIM_ConfigClockSource+0x228>)
 800513a:	4293      	cmp	r3, r2
 800513c:	f000 8099 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005140:	4a5e      	ldr	r2, [pc, #376]	@ (80052bc <HAL_TIM_ConfigClockSource+0x228>)
 8005142:	4293      	cmp	r3, r2
 8005144:	f200 809e 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005148:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800514c:	f000 8091 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005150:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005154:	f200 8096 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800515c:	f000 8089 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005160:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005164:	f200 808e 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800516c:	d03e      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x158>
 800516e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005172:	f200 8087 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517a:	f000 8086 	beq.w	800528a <HAL_TIM_ConfigClockSource+0x1f6>
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005182:	d87f      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005184:	2b70      	cmp	r3, #112	@ 0x70
 8005186:	d01a      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x12a>
 8005188:	2b70      	cmp	r3, #112	@ 0x70
 800518a:	d87b      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 800518c:	2b60      	cmp	r3, #96	@ 0x60
 800518e:	d050      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x19e>
 8005190:	2b60      	cmp	r3, #96	@ 0x60
 8005192:	d877      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005194:	2b50      	cmp	r3, #80	@ 0x50
 8005196:	d03c      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x17e>
 8005198:	2b50      	cmp	r3, #80	@ 0x50
 800519a:	d873      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 800519c:	2b40      	cmp	r3, #64	@ 0x40
 800519e:	d058      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x1be>
 80051a0:	2b40      	cmp	r3, #64	@ 0x40
 80051a2:	d86f      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80051a4:	2b30      	cmp	r3, #48	@ 0x30
 80051a6:	d064      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051a8:	2b30      	cmp	r3, #48	@ 0x30
 80051aa:	d86b      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d060      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d867      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d05c      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d05a      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051bc:	e062      	b.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051ce:	f000 fcf9 	bl	8005bc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	609a      	str	r2, [r3, #8]
      break;
 80051ea:	e04f      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051fc:	f000 fce2 	bl	8005bc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800520e:	609a      	str	r2, [r3, #8]
      break;
 8005210:	e03c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800521e:	461a      	mov	r2, r3
 8005220:	f000 fc54 	bl	8005acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2150      	movs	r1, #80	@ 0x50
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fcad 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005230:	e02c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800523e:	461a      	mov	r2, r3
 8005240:	f000 fc73 	bl	8005b2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2160      	movs	r1, #96	@ 0x60
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fc9d 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005250:	e01c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	461a      	mov	r2, r3
 8005260:	f000 fc34 	bl	8005acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2140      	movs	r1, #64	@ 0x40
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fc8d 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005270:	e00c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f000 fc84 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005282:	e003      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      break;
 8005288:	e000      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800528a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	00100070 	.word	0x00100070
 80052ac:	00100060 	.word	0x00100060
 80052b0:	00100050 	.word	0x00100050
 80052b4:	00100040 	.word	0x00100040
 80052b8:	00100030 	.word	0x00100030
 80052bc:	00100020 	.word	0x00100020

080052c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a4c      	ldr	r2, [pc, #304]	@ (8005454 <TIM_Base_SetConfig+0x144>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d017      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532e:	d013      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a49      	ldr	r2, [pc, #292]	@ (8005458 <TIM_Base_SetConfig+0x148>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00f      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a48      	ldr	r2, [pc, #288]	@ (800545c <TIM_Base_SetConfig+0x14c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00b      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a47      	ldr	r2, [pc, #284]	@ (8005460 <TIM_Base_SetConfig+0x150>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d007      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a46      	ldr	r2, [pc, #280]	@ (8005464 <TIM_Base_SetConfig+0x154>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a45      	ldr	r2, [pc, #276]	@ (8005468 <TIM_Base_SetConfig+0x158>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a39      	ldr	r2, [pc, #228]	@ (8005454 <TIM_Base_SetConfig+0x144>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d023      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005378:	d01f      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a36      	ldr	r2, [pc, #216]	@ (8005458 <TIM_Base_SetConfig+0x148>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01b      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a35      	ldr	r2, [pc, #212]	@ (800545c <TIM_Base_SetConfig+0x14c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d017      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a34      	ldr	r2, [pc, #208]	@ (8005460 <TIM_Base_SetConfig+0x150>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a33      	ldr	r2, [pc, #204]	@ (8005464 <TIM_Base_SetConfig+0x154>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a33      	ldr	r2, [pc, #204]	@ (800546c <TIM_Base_SetConfig+0x15c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a32      	ldr	r2, [pc, #200]	@ (8005470 <TIM_Base_SetConfig+0x160>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a31      	ldr	r2, [pc, #196]	@ (8005474 <TIM_Base_SetConfig+0x164>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005468 <TIM_Base_SetConfig+0x158>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d108      	bne.n	80053cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a18      	ldr	r2, [pc, #96]	@ (8005454 <TIM_Base_SetConfig+0x144>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005464 <TIM_Base_SetConfig+0x154>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a1a      	ldr	r2, [pc, #104]	@ (800546c <TIM_Base_SetConfig+0x15c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <TIM_Base_SetConfig+0x160>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a18      	ldr	r2, [pc, #96]	@ (8005474 <TIM_Base_SetConfig+0x164>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a13      	ldr	r2, [pc, #76]	@ (8005468 <TIM_Base_SetConfig+0x158>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d103      	bne.n	8005428 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]
  }
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40015000 	.word	0x40015000
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f023 0201 	bic.w	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 0302 	bic.w	r3, r3, #2
 80054c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a30      	ldr	r2, [pc, #192]	@ (8005594 <TIM_OC1_SetConfig+0x11c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a2f      	ldr	r2, [pc, #188]	@ (8005598 <TIM_OC1_SetConfig+0x120>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00f      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a2e      	ldr	r2, [pc, #184]	@ (800559c <TIM_OC1_SetConfig+0x124>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a2d      	ldr	r2, [pc, #180]	@ (80055a0 <TIM_OC1_SetConfig+0x128>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a2c      	ldr	r2, [pc, #176]	@ (80055a4 <TIM_OC1_SetConfig+0x12c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2b      	ldr	r2, [pc, #172]	@ (80055a8 <TIM_OC1_SetConfig+0x130>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10c      	bne.n	800551a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0308 	bic.w	r3, r3, #8
 8005506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 0304 	bic.w	r3, r3, #4
 8005518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1d      	ldr	r2, [pc, #116]	@ (8005594 <TIM_OC1_SetConfig+0x11c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <TIM_OC1_SetConfig+0x120>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00f      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <TIM_OC1_SetConfig+0x124>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00b      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1a      	ldr	r2, [pc, #104]	@ (80055a0 <TIM_OC1_SetConfig+0x128>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a19      	ldr	r2, [pc, #100]	@ (80055a4 <TIM_OC1_SetConfig+0x12c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a18      	ldr	r2, [pc, #96]	@ (80055a8 <TIM_OC1_SetConfig+0x130>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d111      	bne.n	800556e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40013400 	.word	0x40013400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800
 80055a8:	40015000 	.word	0x40015000

080055ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f023 0210 	bic.w	r2, r3, #16
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0320 	bic.w	r3, r3, #32
 80055fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a2c      	ldr	r2, [pc, #176]	@ (80056bc <TIM_OC2_SetConfig+0x110>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_OC2_SetConfig+0x74>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a2b      	ldr	r2, [pc, #172]	@ (80056c0 <TIM_OC2_SetConfig+0x114>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_OC2_SetConfig+0x74>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a2a      	ldr	r2, [pc, #168]	@ (80056c4 <TIM_OC2_SetConfig+0x118>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10d      	bne.n	800563c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a1f      	ldr	r2, [pc, #124]	@ (80056bc <TIM_OC2_SetConfig+0x110>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d013      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a1e      	ldr	r2, [pc, #120]	@ (80056c0 <TIM_OC2_SetConfig+0x114>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00f      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1e      	ldr	r2, [pc, #120]	@ (80056c8 <TIM_OC2_SetConfig+0x11c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00b      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <TIM_OC2_SetConfig+0x120>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <TIM_OC2_SetConfig+0x124>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a17      	ldr	r2, [pc, #92]	@ (80056c4 <TIM_OC2_SetConfig+0x118>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d113      	bne.n	8005694 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800567a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40013400 	.word	0x40013400
 80056c4:	40015000 	.word	0x40015000
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2b      	ldr	r2, [pc, #172]	@ (80057e0 <TIM_OC3_SetConfig+0x10c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_OC3_SetConfig+0x72>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2a      	ldr	r2, [pc, #168]	@ (80057e4 <TIM_OC3_SetConfig+0x110>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_OC3_SetConfig+0x72>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a29      	ldr	r2, [pc, #164]	@ (80057e8 <TIM_OC3_SetConfig+0x114>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10d      	bne.n	8005762 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800574c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1e      	ldr	r2, [pc, #120]	@ (80057e0 <TIM_OC3_SetConfig+0x10c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1d      	ldr	r2, [pc, #116]	@ (80057e4 <TIM_OC3_SetConfig+0x110>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00f      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <TIM_OC3_SetConfig+0x118>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1c      	ldr	r2, [pc, #112]	@ (80057f0 <TIM_OC3_SetConfig+0x11c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1b      	ldr	r2, [pc, #108]	@ (80057f4 <TIM_OC3_SetConfig+0x120>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a16      	ldr	r2, [pc, #88]	@ (80057e8 <TIM_OC3_SetConfig+0x114>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d113      	bne.n	80057ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	621a      	str	r2, [r3, #32]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40015000 	.word	0x40015000
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800

080057f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	031b      	lsls	r3, r3, #12
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a2c      	ldr	r2, [pc, #176]	@ (8005908 <TIM_OC4_SetConfig+0x110>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_OC4_SetConfig+0x74>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2b      	ldr	r2, [pc, #172]	@ (800590c <TIM_OC4_SetConfig+0x114>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_OC4_SetConfig+0x74>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2a      	ldr	r2, [pc, #168]	@ (8005910 <TIM_OC4_SetConfig+0x118>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10d      	bne.n	8005888 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	031b      	lsls	r3, r3, #12
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a1f      	ldr	r2, [pc, #124]	@ (8005908 <TIM_OC4_SetConfig+0x110>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1e      	ldr	r2, [pc, #120]	@ (800590c <TIM_OC4_SetConfig+0x114>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00f      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a1e      	ldr	r2, [pc, #120]	@ (8005914 <TIM_OC4_SetConfig+0x11c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00b      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <TIM_OC4_SetConfig+0x120>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	@ (800591c <TIM_OC4_SetConfig+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a17      	ldr	r2, [pc, #92]	@ (8005910 <TIM_OC4_SetConfig+0x118>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d113      	bne.n	80058e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40015000 	.word	0x40015000
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800594e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a19      	ldr	r2, [pc, #100]	@ (80059dc <TIM_OC5_SetConfig+0xbc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a18      	ldr	r2, [pc, #96]	@ (80059e0 <TIM_OC5_SetConfig+0xc0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00f      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a17      	ldr	r2, [pc, #92]	@ (80059e4 <TIM_OC5_SetConfig+0xc4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00b      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a16      	ldr	r2, [pc, #88]	@ (80059e8 <TIM_OC5_SetConfig+0xc8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a15      	ldr	r2, [pc, #84]	@ (80059ec <TIM_OC5_SetConfig+0xcc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a14      	ldr	r2, [pc, #80]	@ (80059f0 <TIM_OC5_SetConfig+0xd0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d109      	bne.n	80059b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40013400 	.word	0x40013400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800
 80059f0:	40015000 	.word	0x40015000

080059f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	051b      	lsls	r3, r3, #20
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab4 <TIM_OC6_SetConfig+0xc0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a19      	ldr	r2, [pc, #100]	@ (8005ab8 <TIM_OC6_SetConfig+0xc4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00f      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a18      	ldr	r2, [pc, #96]	@ (8005abc <TIM_OC6_SetConfig+0xc8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a17      	ldr	r2, [pc, #92]	@ (8005ac0 <TIM_OC6_SetConfig+0xcc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ac4 <TIM_OC6_SetConfig+0xd0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a15      	ldr	r2, [pc, #84]	@ (8005ac8 <TIM_OC6_SetConfig+0xd4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d109      	bne.n	8005a8c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	029b      	lsls	r3, r3, #10
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	621a      	str	r2, [r3, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800
 8005ac8:	40015000 	.word	0x40015000

08005acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f023 0201 	bic.w	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f023 030a 	bic.w	r3, r3, #10
 8005b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b087      	sub	sp, #28
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f023 0210 	bic.w	r2, r3, #16
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	031b      	lsls	r3, r3, #12
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f043 0307 	orr.w	r3, r3, #7
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	021a      	lsls	r2, r3, #8
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	609a      	str	r2, [r3, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	2201      	movs	r2, #1
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	43db      	mvns	r3, r3
 8005c26:	401a      	ands	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e074      	b.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a34      	ldr	r2, [pc, #208]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a33      	ldr	r2, [pc, #204]	@ (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a31      	ldr	r2, [pc, #196]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d108      	bne.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005cac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a21      	ldr	r2, [pc, #132]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d022      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce8:	d01d      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1f      	ldr	r2, [pc, #124]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d018      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d013      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1c      	ldr	r2, [pc, #112]	@ (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00e      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a15      	ldr	r2, [pc, #84]	@ (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d009      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a18      	ldr	r2, [pc, #96]	@ (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d004      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a11      	ldr	r2, [pc, #68]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d10c      	bne.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40015000 	.word	0x40015000
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800
 8005d74:	40000c00 	.word	0x40000c00
 8005d78:	40014000 	.word	0x40014000

08005d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e042      	b.n	8005ea0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7fc fd39 	bl	80028a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2224      	movs	r2, #36	@ 0x24
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fb24 	bl	80064a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f825 	bl	8005ea8 <UART_SetConfig>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e01b      	b.n	8005ea0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fba3 	bl	80065e4 <UART_CheckIdleState>
 8005e9e:	4603      	mov	r3, r0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eac:	b08c      	sub	sp, #48	@ 0x30
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4baa      	ldr	r3, [pc, #680]	@ (8006180 <UART_SetConfig+0x2d8>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a9f      	ldr	r2, [pc, #636]	@ (8006184 <UART_SetConfig+0x2dc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f10:	4313      	orrs	r3, r2
 8005f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005f1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	6812      	ldr	r2, [r2, #0]
 8005f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f32:	f023 010f 	bic.w	r1, r3, #15
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a90      	ldr	r2, [pc, #576]	@ (8006188 <UART_SetConfig+0x2e0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d125      	bne.n	8005f98 <UART_SetConfig+0xf0>
 8005f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800618c <UART_SetConfig+0x2e4>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d81a      	bhi.n	8005f90 <UART_SetConfig+0xe8>
 8005f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f60 <UART_SetConfig+0xb8>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f71 	.word	0x08005f71
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	08005f79 	.word	0x08005f79
 8005f6c:	08005f89 	.word	0x08005f89
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f76:	e116      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7e:	e112      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8005f80:	2304      	movs	r3, #4
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f86:	e10e      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8e:	e10a      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f96:	e106      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a7c      	ldr	r2, [pc, #496]	@ (8006190 <UART_SetConfig+0x2e8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d138      	bne.n	8006014 <UART_SetConfig+0x16c>
 8005fa2:	4b7a      	ldr	r3, [pc, #488]	@ (800618c <UART_SetConfig+0x2e4>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa8:	f003 030c 	and.w	r3, r3, #12
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d82d      	bhi.n	800600c <UART_SetConfig+0x164>
 8005fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb8 <UART_SetConfig+0x110>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	08005fed 	.word	0x08005fed
 8005fbc:	0800600d 	.word	0x0800600d
 8005fc0:	0800600d 	.word	0x0800600d
 8005fc4:	0800600d 	.word	0x0800600d
 8005fc8:	08005ffd 	.word	0x08005ffd
 8005fcc:	0800600d 	.word	0x0800600d
 8005fd0:	0800600d 	.word	0x0800600d
 8005fd4:	0800600d 	.word	0x0800600d
 8005fd8:	08005ff5 	.word	0x08005ff5
 8005fdc:	0800600d 	.word	0x0800600d
 8005fe0:	0800600d 	.word	0x0800600d
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006005 	.word	0x08006005
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff2:	e0d8      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ffa:	e0d4      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006002:	e0d0      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006004:	2308      	movs	r3, #8
 8006006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800600a:	e0cc      	b.n	80061a6 <UART_SetConfig+0x2fe>
 800600c:	2310      	movs	r3, #16
 800600e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006012:	e0c8      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a5e      	ldr	r2, [pc, #376]	@ (8006194 <UART_SetConfig+0x2ec>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d125      	bne.n	800606a <UART_SetConfig+0x1c2>
 800601e:	4b5b      	ldr	r3, [pc, #364]	@ (800618c <UART_SetConfig+0x2e4>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006024:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006028:	2b30      	cmp	r3, #48	@ 0x30
 800602a:	d016      	beq.n	800605a <UART_SetConfig+0x1b2>
 800602c:	2b30      	cmp	r3, #48	@ 0x30
 800602e:	d818      	bhi.n	8006062 <UART_SetConfig+0x1ba>
 8006030:	2b20      	cmp	r3, #32
 8006032:	d00a      	beq.n	800604a <UART_SetConfig+0x1a2>
 8006034:	2b20      	cmp	r3, #32
 8006036:	d814      	bhi.n	8006062 <UART_SetConfig+0x1ba>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <UART_SetConfig+0x19a>
 800603c:	2b10      	cmp	r3, #16
 800603e:	d008      	beq.n	8006052 <UART_SetConfig+0x1aa>
 8006040:	e00f      	b.n	8006062 <UART_SetConfig+0x1ba>
 8006042:	2300      	movs	r3, #0
 8006044:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006048:	e0ad      	b.n	80061a6 <UART_SetConfig+0x2fe>
 800604a:	2302      	movs	r3, #2
 800604c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006050:	e0a9      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006052:	2304      	movs	r3, #4
 8006054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006058:	e0a5      	b.n	80061a6 <UART_SetConfig+0x2fe>
 800605a:	2308      	movs	r3, #8
 800605c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006060:	e0a1      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006062:	2310      	movs	r3, #16
 8006064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006068:	e09d      	b.n	80061a6 <UART_SetConfig+0x2fe>
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a4a      	ldr	r2, [pc, #296]	@ (8006198 <UART_SetConfig+0x2f0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d125      	bne.n	80060c0 <UART_SetConfig+0x218>
 8006074:	4b45      	ldr	r3, [pc, #276]	@ (800618c <UART_SetConfig+0x2e4>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800607e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006080:	d016      	beq.n	80060b0 <UART_SetConfig+0x208>
 8006082:	2bc0      	cmp	r3, #192	@ 0xc0
 8006084:	d818      	bhi.n	80060b8 <UART_SetConfig+0x210>
 8006086:	2b80      	cmp	r3, #128	@ 0x80
 8006088:	d00a      	beq.n	80060a0 <UART_SetConfig+0x1f8>
 800608a:	2b80      	cmp	r3, #128	@ 0x80
 800608c:	d814      	bhi.n	80060b8 <UART_SetConfig+0x210>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <UART_SetConfig+0x1f0>
 8006092:	2b40      	cmp	r3, #64	@ 0x40
 8006094:	d008      	beq.n	80060a8 <UART_SetConfig+0x200>
 8006096:	e00f      	b.n	80060b8 <UART_SetConfig+0x210>
 8006098:	2300      	movs	r3, #0
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609e:	e082      	b.n	80061a6 <UART_SetConfig+0x2fe>
 80060a0:	2302      	movs	r3, #2
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	e07e      	b.n	80061a6 <UART_SetConfig+0x2fe>
 80060a8:	2304      	movs	r3, #4
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ae:	e07a      	b.n	80061a6 <UART_SetConfig+0x2fe>
 80060b0:	2308      	movs	r3, #8
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b6:	e076      	b.n	80061a6 <UART_SetConfig+0x2fe>
 80060b8:	2310      	movs	r3, #16
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060be:	e072      	b.n	80061a6 <UART_SetConfig+0x2fe>
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a35      	ldr	r2, [pc, #212]	@ (800619c <UART_SetConfig+0x2f4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d12a      	bne.n	8006120 <UART_SetConfig+0x278>
 80060ca:	4b30      	ldr	r3, [pc, #192]	@ (800618c <UART_SetConfig+0x2e4>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060d8:	d01a      	beq.n	8006110 <UART_SetConfig+0x268>
 80060da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060de:	d81b      	bhi.n	8006118 <UART_SetConfig+0x270>
 80060e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060e4:	d00c      	beq.n	8006100 <UART_SetConfig+0x258>
 80060e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ea:	d815      	bhi.n	8006118 <UART_SetConfig+0x270>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <UART_SetConfig+0x250>
 80060f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f4:	d008      	beq.n	8006108 <UART_SetConfig+0x260>
 80060f6:	e00f      	b.n	8006118 <UART_SetConfig+0x270>
 80060f8:	2300      	movs	r3, #0
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fe:	e052      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006100:	2302      	movs	r3, #2
 8006102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006106:	e04e      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006108:	2304      	movs	r3, #4
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610e:	e04a      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006110:	2308      	movs	r3, #8
 8006112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006116:	e046      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006118:	2310      	movs	r3, #16
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611e:	e042      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a17      	ldr	r2, [pc, #92]	@ (8006184 <UART_SetConfig+0x2dc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d13a      	bne.n	80061a0 <UART_SetConfig+0x2f8>
 800612a:	4b18      	ldr	r3, [pc, #96]	@ (800618c <UART_SetConfig+0x2e4>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006130:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006134:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006138:	d01a      	beq.n	8006170 <UART_SetConfig+0x2c8>
 800613a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800613e:	d81b      	bhi.n	8006178 <UART_SetConfig+0x2d0>
 8006140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006144:	d00c      	beq.n	8006160 <UART_SetConfig+0x2b8>
 8006146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800614a:	d815      	bhi.n	8006178 <UART_SetConfig+0x2d0>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <UART_SetConfig+0x2b0>
 8006150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006154:	d008      	beq.n	8006168 <UART_SetConfig+0x2c0>
 8006156:	e00f      	b.n	8006178 <UART_SetConfig+0x2d0>
 8006158:	2300      	movs	r3, #0
 800615a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800615e:	e022      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006160:	2302      	movs	r3, #2
 8006162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006166:	e01e      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006168:	2304      	movs	r3, #4
 800616a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800616e:	e01a      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006170:	2308      	movs	r3, #8
 8006172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006176:	e016      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006178:	2310      	movs	r3, #16
 800617a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617e:	e012      	b.n	80061a6 <UART_SetConfig+0x2fe>
 8006180:	cfff69f3 	.word	0xcfff69f3
 8006184:	40008000 	.word	0x40008000
 8006188:	40013800 	.word	0x40013800
 800618c:	40021000 	.word	0x40021000
 8006190:	40004400 	.word	0x40004400
 8006194:	40004800 	.word	0x40004800
 8006198:	40004c00 	.word	0x40004c00
 800619c:	40005000 	.word	0x40005000
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4aae      	ldr	r2, [pc, #696]	@ (8006464 <UART_SetConfig+0x5bc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	f040 8097 	bne.w	80062e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d823      	bhi.n	8006202 <UART_SetConfig+0x35a>
 80061ba:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <UART_SetConfig+0x318>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	08006203 	.word	0x08006203
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	08006203 	.word	0x08006203
 80061d0:	080061f3 	.word	0x080061f3
 80061d4:	08006203 	.word	0x08006203
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006203 	.word	0x08006203
 80061e0:	080061fb 	.word	0x080061fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fd fdfc 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 80061e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061ea:	e010      	b.n	800620e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061ec:	4b9e      	ldr	r3, [pc, #632]	@ (8006468 <UART_SetConfig+0x5c0>)
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061f0:	e00d      	b.n	800620e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061f2:	f7fd fd87 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 80061f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061f8:	e009      	b.n	800620e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006200:	e005      	b.n	800620e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800620c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8130 	beq.w	8006476 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621a:	4a94      	ldr	r2, [pc, #592]	@ (800646c <UART_SetConfig+0x5c4>)
 800621c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006220:	461a      	mov	r2, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	fbb3 f3f2 	udiv	r3, r3, r2
 8006228:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	4413      	add	r3, r2
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	429a      	cmp	r2, r3
 8006238:	d305      	bcc.n	8006246 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	429a      	cmp	r2, r3
 8006244:	d903      	bls.n	800624e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800624c:	e113      	b.n	8006476 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	2200      	movs	r2, #0
 8006252:	60bb      	str	r3, [r7, #8]
 8006254:	60fa      	str	r2, [r7, #12]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	4a84      	ldr	r2, [pc, #528]	@ (800646c <UART_SetConfig+0x5c4>)
 800625c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006260:	b29b      	uxth	r3, r3
 8006262:	2200      	movs	r2, #0
 8006264:	603b      	str	r3, [r7, #0]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006270:	f7fa fdbc 	bl	8000dec <__aeabi_uldivmod>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4610      	mov	r0, r2
 800627a:	4619      	mov	r1, r3
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	020b      	lsls	r3, r1, #8
 8006286:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800628a:	0202      	lsls	r2, r0, #8
 800628c:	6979      	ldr	r1, [r7, #20]
 800628e:	6849      	ldr	r1, [r1, #4]
 8006290:	0849      	lsrs	r1, r1, #1
 8006292:	2000      	movs	r0, #0
 8006294:	460c      	mov	r4, r1
 8006296:	4605      	mov	r5, r0
 8006298:	eb12 0804 	adds.w	r8, r2, r4
 800629c:	eb43 0905 	adc.w	r9, r3, r5
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	469a      	mov	sl, r3
 80062a8:	4693      	mov	fp, r2
 80062aa:	4652      	mov	r2, sl
 80062ac:	465b      	mov	r3, fp
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7fa fd9b 	bl	8000dec <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4613      	mov	r3, r2
 80062bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062c4:	d308      	bcc.n	80062d8 <UART_SetConfig+0x430>
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062cc:	d204      	bcs.n	80062d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6a3a      	ldr	r2, [r7, #32]
 80062d4:	60da      	str	r2, [r3, #12]
 80062d6:	e0ce      	b.n	8006476 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062de:	e0ca      	b.n	8006476 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e8:	d166      	bne.n	80063b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80062ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d827      	bhi.n	8006342 <UART_SetConfig+0x49a>
 80062f2:	a201      	add	r2, pc, #4	@ (adr r2, 80062f8 <UART_SetConfig+0x450>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	08006325 	.word	0x08006325
 8006300:	0800632d 	.word	0x0800632d
 8006304:	08006343 	.word	0x08006343
 8006308:	08006333 	.word	0x08006333
 800630c:	08006343 	.word	0x08006343
 8006310:	08006343 	.word	0x08006343
 8006314:	08006343 	.word	0x08006343
 8006318:	0800633b 	.word	0x0800633b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800631c:	f7fd fd60 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 8006320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006322:	e014      	b.n	800634e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006324:	f7fd fd72 	bl	8003e0c <HAL_RCC_GetPCLK2Freq>
 8006328:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800632a:	e010      	b.n	800634e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800632c:	4b4e      	ldr	r3, [pc, #312]	@ (8006468 <UART_SetConfig+0x5c0>)
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006330:	e00d      	b.n	800634e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006332:	f7fd fce7 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8006336:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006338:	e009      	b.n	800634e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006340:	e005      	b.n	800634e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800634c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8090 	beq.w	8006476 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	4a44      	ldr	r2, [pc, #272]	@ (800646c <UART_SetConfig+0x5c4>)
 800635c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006360:	461a      	mov	r2, r3
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	fbb3 f3f2 	udiv	r3, r3, r2
 8006368:	005a      	lsls	r2, r3, #1
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	441a      	add	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d916      	bls.n	80063b0 <UART_SetConfig+0x508>
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006388:	d212      	bcs.n	80063b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f023 030f 	bic.w	r3, r3, #15
 8006392:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	085b      	lsrs	r3, r3, #1
 8006398:	b29b      	uxth	r3, r3
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	b29a      	uxth	r2, r3
 80063a0:	8bfb      	ldrh	r3, [r7, #30]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	8bfa      	ldrh	r2, [r7, #30]
 80063ac:	60da      	str	r2, [r3, #12]
 80063ae:	e062      	b.n	8006476 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063b6:	e05e      	b.n	8006476 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d828      	bhi.n	8006412 <UART_SetConfig+0x56a>
 80063c0:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <UART_SetConfig+0x520>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	08006413 	.word	0x08006413
 80063d8:	08006403 	.word	0x08006403
 80063dc:	08006413 	.word	0x08006413
 80063e0:	08006413 	.word	0x08006413
 80063e4:	08006413 	.word	0x08006413
 80063e8:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ec:	f7fd fcf8 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 80063f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063f2:	e014      	b.n	800641e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7fd fd0a 	bl	8003e0c <HAL_RCC_GetPCLK2Freq>
 80063f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063fa:	e010      	b.n	800641e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006468 <UART_SetConfig+0x5c0>)
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006400:	e00d      	b.n	800641e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fd fc7f 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8006406:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006408:	e009      	b.n	800641e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006410:	e005      	b.n	800641e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800641c:	bf00      	nop
    }

    if (pclk != 0U)
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d028      	beq.n	8006476 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006428:	4a10      	ldr	r2, [pc, #64]	@ (800646c <UART_SetConfig+0x5c4>)
 800642a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800642e:	461a      	mov	r2, r3
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	fbb3 f2f2 	udiv	r2, r3, r2
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	441a      	add	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	fbb2 f3f3 	udiv	r3, r2, r3
 8006446:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	2b0f      	cmp	r3, #15
 800644c:	d910      	bls.n	8006470 <UART_SetConfig+0x5c8>
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006454:	d20c      	bcs.n	8006470 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	b29a      	uxth	r2, r3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60da      	str	r2, [r3, #12]
 8006460:	e009      	b.n	8006476 <UART_SetConfig+0x5ce>
 8006462:	bf00      	nop
 8006464:	40008000 	.word	0x40008000
 8006468:	00f42400 	.word	0x00f42400
 800646c:	08006da8 	.word	0x08006da8
      }
      else
      {
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2201      	movs	r2, #1
 800647a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2201      	movs	r2, #1
 8006482:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2200      	movs	r2, #0
 800648a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2200      	movs	r2, #0
 8006490:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006492:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006496:	4618      	mov	r0, r3
 8006498:	3730      	adds	r7, #48	@ 0x30
 800649a:	46bd      	mov	sp, r7
 800649c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080064a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01a      	beq.n	80065b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800659e:	d10a      	bne.n	80065b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b098      	sub	sp, #96	@ 0x60
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f4:	f7fc fb9e 	bl	8002d34 <HAL_GetTick>
 80065f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b08      	cmp	r3, #8
 8006606:	d12f      	bne.n	8006668 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006610:	2200      	movs	r2, #0
 8006612:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f88e 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d022      	beq.n	8006668 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006636:	653b      	str	r3, [r7, #80]	@ 0x50
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006640:	647b      	str	r3, [r7, #68]	@ 0x44
 8006642:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800664e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e6      	bne.n	8006622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e063      	b.n	8006730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b04      	cmp	r3, #4
 8006674:	d149      	bne.n	800670a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006676:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800667e:	2200      	movs	r2, #0
 8006680:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f857 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d03c      	beq.n	800670a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	623b      	str	r3, [r7, #32]
   return(result);
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e6      	bne.n	8006690 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066e2:	61fa      	str	r2, [r7, #28]
 80066e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	69b9      	ldr	r1, [r7, #24]
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	617b      	str	r3, [r7, #20]
   return(result);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e5      	bne.n	80066c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e012      	b.n	8006730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3758      	adds	r7, #88	@ 0x58
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006748:	e04f      	b.n	80067ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d04b      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fc faef 	bl	8002d34 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	429a      	cmp	r2, r3
 8006760:	d302      	bcc.n	8006768 <UART_WaitOnFlagUntilTimeout+0x30>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e04e      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d037      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b80      	cmp	r3, #128	@ 0x80
 800677e:	d034      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b40      	cmp	r3, #64	@ 0x40
 8006784:	d031      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b08      	cmp	r3, #8
 8006792:	d110      	bne.n	80067b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2208      	movs	r2, #8
 800679a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f838 	bl	8006812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2208      	movs	r2, #8
 80067a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e029      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067c4:	d111      	bne.n	80067ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f81e 	bl	8006812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e00f      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4013      	ands	r3, r2
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	bf0c      	ite	eq
 80067fa:	2301      	moveq	r3, #1
 80067fc:	2300      	movne	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	429a      	cmp	r2, r3
 8006806:	d0a0      	beq.n	800674a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006812:	b480      	push	{r7}
 8006814:	b095      	sub	sp, #84	@ 0x54
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800682e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006838:	643b      	str	r3, [r7, #64]	@ 0x40
 800683a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800683e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3308      	adds	r3, #8
 8006852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	61fb      	str	r3, [r7, #28]
   return(result);
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3308      	adds	r3, #8
 800686e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006870:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006872:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e3      	bne.n	800684c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006888:	2b01      	cmp	r3, #1
 800688a:	d118      	bne.n	80068be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	60bb      	str	r3, [r7, #8]
   return(result);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f023 0310 	bic.w	r3, r3, #16
 80068a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6979      	ldr	r1, [r7, #20]
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	613b      	str	r3, [r7, #16]
   return(result);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e6      	bne.n	800688c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80068d2:	bf00      	nop
 80068d4:	3754      	adds	r7, #84	@ 0x54
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e027      	b.n	8006944 <HAL_UARTEx_DisableFifoMode+0x66>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2224      	movs	r2, #36	@ 0x24
 8006900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006922:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006964:	2302      	movs	r3, #2
 8006966:	e02d      	b.n	80069c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2224      	movs	r2, #36	@ 0x24
 8006974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0201 	bic.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f84f 	bl	8006a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e02d      	b.n	8006a40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	@ 0x24
 80069f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0201 	bic.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f811 	bl	8006a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d108      	bne.n	8006a6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a68:	e031      	b.n	8006ace <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a6e:	2308      	movs	r3, #8
 8006a70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	0e5b      	lsrs	r3, r3, #25
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	0f5b      	lsrs	r3, r3, #29
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	7b3a      	ldrb	r2, [r7, #12]
 8006a96:	4911      	ldr	r1, [pc, #68]	@ (8006adc <UARTEx_SetNbDataToProcess+0x94>)
 8006a98:	5c8a      	ldrb	r2, [r1, r2]
 8006a9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a9e:	7b3a      	ldrb	r2, [r7, #12]
 8006aa0:	490f      	ldr	r1, [pc, #60]	@ (8006ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8006aa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	7b7a      	ldrb	r2, [r7, #13]
 8006ab4:	4909      	ldr	r1, [pc, #36]	@ (8006adc <UARTEx_SetNbDataToProcess+0x94>)
 8006ab6:	5c8a      	ldrb	r2, [r1, r2]
 8006ab8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006abc:	7b7a      	ldrb	r2, [r7, #13]
 8006abe:	4908      	ldr	r1, [pc, #32]	@ (8006ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ac0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006ace:	bf00      	nop
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	08006dc0 	.word	0x08006dc0
 8006ae0:	08006dc8 	.word	0x08006dc8

08006ae4 <memset>:
 8006ae4:	4402      	add	r2, r0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d100      	bne.n	8006aee <memset+0xa>
 8006aec:	4770      	bx	lr
 8006aee:	f803 1b01 	strb.w	r1, [r3], #1
 8006af2:	e7f9      	b.n	8006ae8 <memset+0x4>

08006af4 <__errno>:
 8006af4:	4b01      	ldr	r3, [pc, #4]	@ (8006afc <__errno+0x8>)
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000018 	.word	0x20000018

08006b00 <__libc_init_array>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	4d0d      	ldr	r5, [pc, #52]	@ (8006b38 <__libc_init_array+0x38>)
 8006b04:	4c0d      	ldr	r4, [pc, #52]	@ (8006b3c <__libc_init_array+0x3c>)
 8006b06:	1b64      	subs	r4, r4, r5
 8006b08:	10a4      	asrs	r4, r4, #2
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	42a6      	cmp	r6, r4
 8006b0e:	d109      	bne.n	8006b24 <__libc_init_array+0x24>
 8006b10:	4d0b      	ldr	r5, [pc, #44]	@ (8006b40 <__libc_init_array+0x40>)
 8006b12:	4c0c      	ldr	r4, [pc, #48]	@ (8006b44 <__libc_init_array+0x44>)
 8006b14:	f000 f91e 	bl	8006d54 <_init>
 8006b18:	1b64      	subs	r4, r4, r5
 8006b1a:	10a4      	asrs	r4, r4, #2
 8006b1c:	2600      	movs	r6, #0
 8006b1e:	42a6      	cmp	r6, r4
 8006b20:	d105      	bne.n	8006b2e <__libc_init_array+0x2e>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b28:	4798      	blx	r3
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7ee      	b.n	8006b0c <__libc_init_array+0xc>
 8006b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b32:	4798      	blx	r3
 8006b34:	3601      	adds	r6, #1
 8006b36:	e7f2      	b.n	8006b1e <__libc_init_array+0x1e>
 8006b38:	08006dd8 	.word	0x08006dd8
 8006b3c:	08006dd8 	.word	0x08006dd8
 8006b40:	08006dd8 	.word	0x08006dd8
 8006b44:	08006ddc 	.word	0x08006ddc

08006b48 <sqrt>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	ed2d 8b02 	vpush	{d8}
 8006b4e:	ec55 4b10 	vmov	r4, r5, d0
 8006b52:	f000 f825 	bl	8006ba0 <__ieee754_sqrt>
 8006b56:	4622      	mov	r2, r4
 8006b58:	462b      	mov	r3, r5
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	eeb0 8a40 	vmov.f32	s16, s0
 8006b62:	eef0 8a60 	vmov.f32	s17, s1
 8006b66:	f7f9 ffad 	bl	8000ac4 <__aeabi_dcmpun>
 8006b6a:	b990      	cbnz	r0, 8006b92 <sqrt+0x4a>
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4620      	mov	r0, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	f7f9 ff7e 	bl	8000a74 <__aeabi_dcmplt>
 8006b78:	b158      	cbz	r0, 8006b92 <sqrt+0x4a>
 8006b7a:	f7ff ffbb 	bl	8006af4 <__errno>
 8006b7e:	2321      	movs	r3, #33	@ 0x21
 8006b80:	6003      	str	r3, [r0, #0]
 8006b82:	2200      	movs	r2, #0
 8006b84:	2300      	movs	r3, #0
 8006b86:	4610      	mov	r0, r2
 8006b88:	4619      	mov	r1, r3
 8006b8a:	f7f9 fe2b 	bl	80007e4 <__aeabi_ddiv>
 8006b8e:	ec41 0b18 	vmov	d8, r0, r1
 8006b92:	eeb0 0a48 	vmov.f32	s0, s16
 8006b96:	eef0 0a68 	vmov.f32	s1, s17
 8006b9a:	ecbd 8b02 	vpop	{d8}
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}

08006ba0 <__ieee754_sqrt>:
 8006ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	4a68      	ldr	r2, [pc, #416]	@ (8006d48 <__ieee754_sqrt+0x1a8>)
 8006ba6:	ec55 4b10 	vmov	r4, r5, d0
 8006baa:	43aa      	bics	r2, r5
 8006bac:	462b      	mov	r3, r5
 8006bae:	4621      	mov	r1, r4
 8006bb0:	d110      	bne.n	8006bd4 <__ieee754_sqrt+0x34>
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	f7f9 fcea 	bl	8000590 <__aeabi_dmul>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	f7f9 fb2e 	bl	8000224 <__adddf3>
 8006bc8:	4604      	mov	r4, r0
 8006bca:	460d      	mov	r5, r1
 8006bcc:	ec45 4b10 	vmov	d0, r4, r5
 8006bd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	2d00      	cmp	r5, #0
 8006bd6:	dc0e      	bgt.n	8006bf6 <__ieee754_sqrt+0x56>
 8006bd8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006bdc:	4322      	orrs	r2, r4
 8006bde:	d0f5      	beq.n	8006bcc <__ieee754_sqrt+0x2c>
 8006be0:	b19d      	cbz	r5, 8006c0a <__ieee754_sqrt+0x6a>
 8006be2:	4622      	mov	r2, r4
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 fb1a 	bl	8000220 <__aeabi_dsub>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	f7f9 fdf8 	bl	80007e4 <__aeabi_ddiv>
 8006bf4:	e7e8      	b.n	8006bc8 <__ieee754_sqrt+0x28>
 8006bf6:	152a      	asrs	r2, r5, #20
 8006bf8:	d115      	bne.n	8006c26 <__ieee754_sqrt+0x86>
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	e009      	b.n	8006c12 <__ieee754_sqrt+0x72>
 8006bfe:	0acb      	lsrs	r3, r1, #11
 8006c00:	3a15      	subs	r2, #21
 8006c02:	0549      	lsls	r1, r1, #21
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0fa      	beq.n	8006bfe <__ieee754_sqrt+0x5e>
 8006c08:	e7f7      	b.n	8006bfa <__ieee754_sqrt+0x5a>
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	e7fa      	b.n	8006c04 <__ieee754_sqrt+0x64>
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	3001      	adds	r0, #1
 8006c12:	02dc      	lsls	r4, r3, #11
 8006c14:	d5fb      	bpl.n	8006c0e <__ieee754_sqrt+0x6e>
 8006c16:	1e44      	subs	r4, r0, #1
 8006c18:	1b12      	subs	r2, r2, r4
 8006c1a:	f1c0 0420 	rsb	r4, r0, #32
 8006c1e:	fa21 f404 	lsr.w	r4, r1, r4
 8006c22:	4323      	orrs	r3, r4
 8006c24:	4081      	lsls	r1, r0
 8006c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c2a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c32:	07d2      	lsls	r2, r2, #31
 8006c34:	bf5c      	itt	pl
 8006c36:	005b      	lslpl	r3, r3, #1
 8006c38:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c40:	bf58      	it	pl
 8006c42:	0049      	lslpl	r1, r1, #1
 8006c44:	2600      	movs	r6, #0
 8006c46:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006c4a:	106d      	asrs	r5, r5, #1
 8006c4c:	0049      	lsls	r1, r1, #1
 8006c4e:	2016      	movs	r0, #22
 8006c50:	4632      	mov	r2, r6
 8006c52:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006c56:	1917      	adds	r7, r2, r4
 8006c58:	429f      	cmp	r7, r3
 8006c5a:	bfde      	ittt	le
 8006c5c:	193a      	addle	r2, r7, r4
 8006c5e:	1bdb      	suble	r3, r3, r7
 8006c60:	1936      	addle	r6, r6, r4
 8006c62:	0fcf      	lsrs	r7, r1, #31
 8006c64:	3801      	subs	r0, #1
 8006c66:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006c6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006c72:	d1f0      	bne.n	8006c56 <__ieee754_sqrt+0xb6>
 8006c74:	4604      	mov	r4, r0
 8006c76:	2720      	movs	r7, #32
 8006c78:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	eb00 0e0c 	add.w	lr, r0, ip
 8006c82:	db02      	blt.n	8006c8a <__ieee754_sqrt+0xea>
 8006c84:	d113      	bne.n	8006cae <__ieee754_sqrt+0x10e>
 8006c86:	458e      	cmp	lr, r1
 8006c88:	d811      	bhi.n	8006cae <__ieee754_sqrt+0x10e>
 8006c8a:	f1be 0f00 	cmp.w	lr, #0
 8006c8e:	eb0e 000c 	add.w	r0, lr, ip
 8006c92:	da42      	bge.n	8006d1a <__ieee754_sqrt+0x17a>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	db40      	blt.n	8006d1a <__ieee754_sqrt+0x17a>
 8006c98:	f102 0801 	add.w	r8, r2, #1
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	458e      	cmp	lr, r1
 8006ca0:	bf88      	it	hi
 8006ca2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006ca6:	eba1 010e 	sub.w	r1, r1, lr
 8006caa:	4464      	add	r4, ip
 8006cac:	4642      	mov	r2, r8
 8006cae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006cb2:	3f01      	subs	r7, #1
 8006cb4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006cb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006cbc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006cc0:	d1dc      	bne.n	8006c7c <__ieee754_sqrt+0xdc>
 8006cc2:	4319      	orrs	r1, r3
 8006cc4:	d01b      	beq.n	8006cfe <__ieee754_sqrt+0x15e>
 8006cc6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006d4c <__ieee754_sqrt+0x1ac>
 8006cca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006d50 <__ieee754_sqrt+0x1b0>
 8006cce:	e9da 0100 	ldrd	r0, r1, [sl]
 8006cd2:	e9db 2300 	ldrd	r2, r3, [fp]
 8006cd6:	f7f9 faa3 	bl	8000220 <__aeabi_dsub>
 8006cda:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	f7f9 fecf 	bl	8000a88 <__aeabi_dcmple>
 8006cea:	b140      	cbz	r0, 8006cfe <__ieee754_sqrt+0x15e>
 8006cec:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006cf0:	e9da 0100 	ldrd	r0, r1, [sl]
 8006cf4:	e9db 2300 	ldrd	r2, r3, [fp]
 8006cf8:	d111      	bne.n	8006d1e <__ieee754_sqrt+0x17e>
 8006cfa:	3601      	adds	r6, #1
 8006cfc:	463c      	mov	r4, r7
 8006cfe:	1072      	asrs	r2, r6, #1
 8006d00:	0863      	lsrs	r3, r4, #1
 8006d02:	07f1      	lsls	r1, r6, #31
 8006d04:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006d08:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006d0c:	bf48      	it	mi
 8006d0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006d12:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006d16:	4618      	mov	r0, r3
 8006d18:	e756      	b.n	8006bc8 <__ieee754_sqrt+0x28>
 8006d1a:	4690      	mov	r8, r2
 8006d1c:	e7be      	b.n	8006c9c <__ieee754_sqrt+0xfc>
 8006d1e:	f7f9 fa81 	bl	8000224 <__adddf3>
 8006d22:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	f7f9 fea1 	bl	8000a74 <__aeabi_dcmplt>
 8006d32:	b120      	cbz	r0, 8006d3e <__ieee754_sqrt+0x19e>
 8006d34:	1ca0      	adds	r0, r4, #2
 8006d36:	bf08      	it	eq
 8006d38:	3601      	addeq	r6, #1
 8006d3a:	3402      	adds	r4, #2
 8006d3c:	e7df      	b.n	8006cfe <__ieee754_sqrt+0x15e>
 8006d3e:	1c63      	adds	r3, r4, #1
 8006d40:	f023 0401 	bic.w	r4, r3, #1
 8006d44:	e7db      	b.n	8006cfe <__ieee754_sqrt+0x15e>
 8006d46:	bf00      	nop
 8006d48:	7ff00000 	.word	0x7ff00000
 8006d4c:	20000070 	.word	0x20000070
 8006d50:	20000068 	.word	0x20000068

08006d54 <_init>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr

08006d60 <_fini>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr
