
JingJingla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08009978  08009978  0000a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a60  08009a60  0000b0a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a60  08009a60  0000aa60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a68  08009a68  0000b0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a68  08009a68  0000aa68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a6c  08009a6c  0000aa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08009a70  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014fc  200000a0  08009b10  0000b0a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000159c  08009b10  0000b59c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001feec  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000397e  00000000  00000000  0002afbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0002e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103a  00000000  00000000  0002fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028677  00000000  00000000  00030e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f067  00000000  00000000  000594a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffe02  00000000  00000000  00078510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c18  00000000  00000000  00178358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0017df70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009960 	.word	0x08009960

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	08009960 	.word	0x08009960

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_frsub>:
 8000c20:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c24:	e002      	b.n	8000c2c <__addsf3>
 8000c26:	bf00      	nop

08000c28 <__aeabi_fsub>:
 8000c28:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c2c <__addsf3>:
 8000c2c:	0042      	lsls	r2, r0, #1
 8000c2e:	bf1f      	itttt	ne
 8000c30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c34:	ea92 0f03 	teqne	r2, r3
 8000c38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c40:	d06a      	beq.n	8000d18 <__addsf3+0xec>
 8000c42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c4a:	bfc1      	itttt	gt
 8000c4c:	18d2      	addgt	r2, r2, r3
 8000c4e:	4041      	eorgt	r1, r0
 8000c50:	4048      	eorgt	r0, r1
 8000c52:	4041      	eorgt	r1, r0
 8000c54:	bfb8      	it	lt
 8000c56:	425b      	neglt	r3, r3
 8000c58:	2b19      	cmp	r3, #25
 8000c5a:	bf88      	it	hi
 8000c5c:	4770      	bxhi	lr
 8000c5e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c66:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c6a:	bf18      	it	ne
 8000c6c:	4240      	negne	r0, r0
 8000c6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c72:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c76:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4249      	negne	r1, r1
 8000c7e:	ea92 0f03 	teq	r2, r3
 8000c82:	d03f      	beq.n	8000d04 <__addsf3+0xd8>
 8000c84:	f1a2 0201 	sub.w	r2, r2, #1
 8000c88:	fa41 fc03 	asr.w	ip, r1, r3
 8000c8c:	eb10 000c 	adds.w	r0, r0, ip
 8000c90:	f1c3 0320 	rsb	r3, r3, #32
 8000c94:	fa01 f103 	lsl.w	r1, r1, r3
 8000c98:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9c:	d502      	bpl.n	8000ca4 <__addsf3+0x78>
 8000c9e:	4249      	negs	r1, r1
 8000ca0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ca4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ca8:	d313      	bcc.n	8000cd2 <__addsf3+0xa6>
 8000caa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cae:	d306      	bcc.n	8000cbe <__addsf3+0x92>
 8000cb0:	0840      	lsrs	r0, r0, #1
 8000cb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cb6:	f102 0201 	add.w	r2, r2, #1
 8000cba:	2afe      	cmp	r2, #254	@ 0xfe
 8000cbc:	d251      	bcs.n	8000d62 <__addsf3+0x136>
 8000cbe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc6:	bf08      	it	eq
 8000cc8:	f020 0001 	biceq.w	r0, r0, #1
 8000ccc:	ea40 0003 	orr.w	r0, r0, r3
 8000cd0:	4770      	bx	lr
 8000cd2:	0049      	lsls	r1, r1, #1
 8000cd4:	eb40 0000 	adc.w	r0, r0, r0
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	bf28      	it	cs
 8000cdc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ce0:	d2ed      	bcs.n	8000cbe <__addsf3+0x92>
 8000ce2:	fab0 fc80 	clz	ip, r0
 8000ce6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cea:	ebb2 020c 	subs.w	r2, r2, ip
 8000cee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cf2:	bfaa      	itet	ge
 8000cf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf8:	4252      	neglt	r2, r2
 8000cfa:	4318      	orrge	r0, r3
 8000cfc:	bfbc      	itt	lt
 8000cfe:	40d0      	lsrlt	r0, r2
 8000d00:	4318      	orrlt	r0, r3
 8000d02:	4770      	bx	lr
 8000d04:	f092 0f00 	teq	r2, #0
 8000d08:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d0c:	bf06      	itte	eq
 8000d0e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d12:	3201      	addeq	r2, #1
 8000d14:	3b01      	subne	r3, #1
 8000d16:	e7b5      	b.n	8000c84 <__addsf3+0x58>
 8000d18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d20:	bf18      	it	ne
 8000d22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d26:	d021      	beq.n	8000d6c <__addsf3+0x140>
 8000d28:	ea92 0f03 	teq	r2, r3
 8000d2c:	d004      	beq.n	8000d38 <__addsf3+0x10c>
 8000d2e:	f092 0f00 	teq	r2, #0
 8000d32:	bf08      	it	eq
 8000d34:	4608      	moveq	r0, r1
 8000d36:	4770      	bx	lr
 8000d38:	ea90 0f01 	teq	r0, r1
 8000d3c:	bf1c      	itt	ne
 8000d3e:	2000      	movne	r0, #0
 8000d40:	4770      	bxne	lr
 8000d42:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d46:	d104      	bne.n	8000d52 <__addsf3+0x126>
 8000d48:	0040      	lsls	r0, r0, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d50:	4770      	bx	lr
 8000d52:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d56:	bf3c      	itt	cc
 8000d58:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d5c:	4770      	bxcc	lr
 8000d5e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d62:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d6a:	4770      	bx	lr
 8000d6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d70:	bf16      	itet	ne
 8000d72:	4608      	movne	r0, r1
 8000d74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d78:	4601      	movne	r1, r0
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	bf06      	itte	eq
 8000d7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d82:	ea90 0f01 	teqeq	r0, r1
 8000d86:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_ui2f>:
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e004      	b.n	8000d9c <__aeabi_i2f+0x8>
 8000d92:	bf00      	nop

08000d94 <__aeabi_i2f>:
 8000d94:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d98:	bf48      	it	mi
 8000d9a:	4240      	negmi	r0, r0
 8000d9c:	ea5f 0c00 	movs.w	ip, r0
 8000da0:	bf08      	it	eq
 8000da2:	4770      	bxeq	lr
 8000da4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000da8:	4601      	mov	r1, r0
 8000daa:	f04f 0000 	mov.w	r0, #0
 8000dae:	e01c      	b.n	8000dea <__aeabi_l2f+0x2a>

08000db0 <__aeabi_ul2f>:
 8000db0:	ea50 0201 	orrs.w	r2, r0, r1
 8000db4:	bf08      	it	eq
 8000db6:	4770      	bxeq	lr
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e00a      	b.n	8000dd4 <__aeabi_l2f+0x14>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_l2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dcc:	d502      	bpl.n	8000dd4 <__aeabi_l2f+0x14>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	ea5f 0c01 	movs.w	ip, r1
 8000dd8:	bf02      	ittt	eq
 8000dda:	4684      	moveq	ip, r0
 8000ddc:	4601      	moveq	r1, r0
 8000dde:	2000      	moveq	r0, #0
 8000de0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000de4:	bf08      	it	eq
 8000de6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dee:	fabc f28c 	clz	r2, ip
 8000df2:	3a08      	subs	r2, #8
 8000df4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df8:	db10      	blt.n	8000e1c <__aeabi_l2f+0x5c>
 8000dfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfe:	4463      	add	r3, ip
 8000e00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	f020 0001 	biceq.w	r0, r0, #1
 8000e1a:	4770      	bx	lr
 8000e1c:	f102 0220 	add.w	r2, r2, #32
 8000e20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_uldivmod>:
 8000e3c:	b953      	cbnz	r3, 8000e54 <__aeabi_uldivmod+0x18>
 8000e3e:	b94a      	cbnz	r2, 8000e54 <__aeabi_uldivmod+0x18>
 8000e40:	2900      	cmp	r1, #0
 8000e42:	bf08      	it	eq
 8000e44:	2800      	cmpeq	r0, #0
 8000e46:	bf1c      	itt	ne
 8000e48:	f04f 31ff 	movne.w	r1, #4294967295
 8000e4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000e50:	f000 b96a 	b.w	8001128 <__aeabi_idiv0>
 8000e54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e5c:	f000 f806 	bl	8000e6c <__udivmoddi4>
 8000e60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e68:	b004      	add	sp, #16
 8000e6a:	4770      	bx	lr

08000e6c <__udivmoddi4>:
 8000e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e70:	9d08      	ldr	r5, [sp, #32]
 8000e72:	460c      	mov	r4, r1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d14e      	bne.n	8000f16 <__udivmoddi4+0xaa>
 8000e78:	4694      	mov	ip, r2
 8000e7a:	458c      	cmp	ip, r1
 8000e7c:	4686      	mov	lr, r0
 8000e7e:	fab2 f282 	clz	r2, r2
 8000e82:	d962      	bls.n	8000f4a <__udivmoddi4+0xde>
 8000e84:	b14a      	cbz	r2, 8000e9a <__udivmoddi4+0x2e>
 8000e86:	f1c2 0320 	rsb	r3, r2, #32
 8000e8a:	4091      	lsls	r1, r2
 8000e8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e94:	4319      	orrs	r1, r3
 8000e96:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9e:	fa1f f68c 	uxth.w	r6, ip
 8000ea2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ea6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eaa:	fb07 1114 	mls	r1, r7, r4, r1
 8000eae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb2:	fb04 f106 	mul.w	r1, r4, r6
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	d90a      	bls.n	8000ed0 <__udivmoddi4+0x64>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ec2:	f080 8112 	bcs.w	80010ea <__udivmoddi4+0x27e>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 810f 	bls.w	80010ea <__udivmoddi4+0x27e>
 8000ecc:	3c02      	subs	r4, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	1a59      	subs	r1, r3, r1
 8000ed2:	fa1f f38e 	uxth.w	r3, lr
 8000ed6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eda:	fb07 1110 	mls	r1, r7, r0, r1
 8000ede:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee2:	fb00 f606 	mul.w	r6, r0, r6
 8000ee6:	429e      	cmp	r6, r3
 8000ee8:	d90a      	bls.n	8000f00 <__udivmoddi4+0x94>
 8000eea:	eb1c 0303 	adds.w	r3, ip, r3
 8000eee:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef2:	f080 80fc 	bcs.w	80010ee <__udivmoddi4+0x282>
 8000ef6:	429e      	cmp	r6, r3
 8000ef8:	f240 80f9 	bls.w	80010ee <__udivmoddi4+0x282>
 8000efc:	4463      	add	r3, ip
 8000efe:	3802      	subs	r0, #2
 8000f00:	1b9b      	subs	r3, r3, r6
 8000f02:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f06:	2100      	movs	r1, #0
 8000f08:	b11d      	cbz	r5, 8000f12 <__udivmoddi4+0xa6>
 8000f0a:	40d3      	lsrs	r3, r2
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d905      	bls.n	8000f26 <__udivmoddi4+0xba>
 8000f1a:	b10d      	cbz	r5, 8000f20 <__udivmoddi4+0xb4>
 8000f1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000f20:	2100      	movs	r1, #0
 8000f22:	4608      	mov	r0, r1
 8000f24:	e7f5      	b.n	8000f12 <__udivmoddi4+0xa6>
 8000f26:	fab3 f183 	clz	r1, r3
 8000f2a:	2900      	cmp	r1, #0
 8000f2c:	d146      	bne.n	8000fbc <__udivmoddi4+0x150>
 8000f2e:	42a3      	cmp	r3, r4
 8000f30:	d302      	bcc.n	8000f38 <__udivmoddi4+0xcc>
 8000f32:	4290      	cmp	r0, r2
 8000f34:	f0c0 80f0 	bcc.w	8001118 <__udivmoddi4+0x2ac>
 8000f38:	1a86      	subs	r6, r0, r2
 8000f3a:	eb64 0303 	sbc.w	r3, r4, r3
 8000f3e:	2001      	movs	r0, #1
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d0e6      	beq.n	8000f12 <__udivmoddi4+0xa6>
 8000f44:	e9c5 6300 	strd	r6, r3, [r5]
 8000f48:	e7e3      	b.n	8000f12 <__udivmoddi4+0xa6>
 8000f4a:	2a00      	cmp	r2, #0
 8000f4c:	f040 8090 	bne.w	8001070 <__udivmoddi4+0x204>
 8000f50:	eba1 040c 	sub.w	r4, r1, ip
 8000f54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f66:	fb08 4416 	mls	r4, r8, r6, r4
 8000f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6e:	fb07 f006 	mul.w	r0, r7, r6
 8000f72:	4298      	cmp	r0, r3
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x11c>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f7e:	d202      	bcs.n	8000f86 <__udivmoddi4+0x11a>
 8000f80:	4298      	cmp	r0, r3
 8000f82:	f200 80cd 	bhi.w	8001120 <__udivmoddi4+0x2b4>
 8000f86:	4626      	mov	r6, r4
 8000f88:	1a1c      	subs	r4, r3, r0
 8000f8a:	fa1f f38e 	uxth.w	r3, lr
 8000f8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f92:	fb08 4410 	mls	r4, r8, r0, r4
 8000f96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f9a:	fb00 f707 	mul.w	r7, r0, r7
 8000f9e:	429f      	cmp	r7, r3
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x148>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000faa:	d202      	bcs.n	8000fb2 <__udivmoddi4+0x146>
 8000fac:	429f      	cmp	r7, r3
 8000fae:	f200 80b0 	bhi.w	8001112 <__udivmoddi4+0x2a6>
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	1bdb      	subs	r3, r3, r7
 8000fb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fba:	e7a5      	b.n	8000f08 <__udivmoddi4+0x9c>
 8000fbc:	f1c1 0620 	rsb	r6, r1, #32
 8000fc0:	408b      	lsls	r3, r1
 8000fc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fcc:	fa04 f301 	lsl.w	r3, r4, r1
 8000fd0:	ea43 030c 	orr.w	r3, r3, ip
 8000fd4:	40f4      	lsrs	r4, r6
 8000fd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000fda:	0c38      	lsrs	r0, r7, #16
 8000fdc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fe0:	fbb4 fef0 	udiv	lr, r4, r0
 8000fe4:	fa1f fc87 	uxth.w	ip, r7
 8000fe8:	fb00 441e 	mls	r4, r0, lr, r4
 8000fec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ff0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ff4:	45a1      	cmp	r9, r4
 8000ff6:	fa02 f201 	lsl.w	r2, r2, r1
 8000ffa:	d90a      	bls.n	8001012 <__udivmoddi4+0x1a6>
 8000ffc:	193c      	adds	r4, r7, r4
 8000ffe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001002:	f080 8084 	bcs.w	800110e <__udivmoddi4+0x2a2>
 8001006:	45a1      	cmp	r9, r4
 8001008:	f240 8081 	bls.w	800110e <__udivmoddi4+0x2a2>
 800100c:	f1ae 0e02 	sub.w	lr, lr, #2
 8001010:	443c      	add	r4, r7
 8001012:	eba4 0409 	sub.w	r4, r4, r9
 8001016:	fa1f f983 	uxth.w	r9, r3
 800101a:	fbb4 f3f0 	udiv	r3, r4, r0
 800101e:	fb00 4413 	mls	r4, r0, r3, r4
 8001022:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001026:	fb03 fc0c 	mul.w	ip, r3, ip
 800102a:	45a4      	cmp	ip, r4
 800102c:	d907      	bls.n	800103e <__udivmoddi4+0x1d2>
 800102e:	193c      	adds	r4, r7, r4
 8001030:	f103 30ff 	add.w	r0, r3, #4294967295
 8001034:	d267      	bcs.n	8001106 <__udivmoddi4+0x29a>
 8001036:	45a4      	cmp	ip, r4
 8001038:	d965      	bls.n	8001106 <__udivmoddi4+0x29a>
 800103a:	3b02      	subs	r3, #2
 800103c:	443c      	add	r4, r7
 800103e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001042:	fba0 9302 	umull	r9, r3, r0, r2
 8001046:	eba4 040c 	sub.w	r4, r4, ip
 800104a:	429c      	cmp	r4, r3
 800104c:	46ce      	mov	lr, r9
 800104e:	469c      	mov	ip, r3
 8001050:	d351      	bcc.n	80010f6 <__udivmoddi4+0x28a>
 8001052:	d04e      	beq.n	80010f2 <__udivmoddi4+0x286>
 8001054:	b155      	cbz	r5, 800106c <__udivmoddi4+0x200>
 8001056:	ebb8 030e 	subs.w	r3, r8, lr
 800105a:	eb64 040c 	sbc.w	r4, r4, ip
 800105e:	fa04 f606 	lsl.w	r6, r4, r6
 8001062:	40cb      	lsrs	r3, r1
 8001064:	431e      	orrs	r6, r3
 8001066:	40cc      	lsrs	r4, r1
 8001068:	e9c5 6400 	strd	r6, r4, [r5]
 800106c:	2100      	movs	r1, #0
 800106e:	e750      	b.n	8000f12 <__udivmoddi4+0xa6>
 8001070:	f1c2 0320 	rsb	r3, r2, #32
 8001074:	fa20 f103 	lsr.w	r1, r0, r3
 8001078:	fa0c fc02 	lsl.w	ip, ip, r2
 800107c:	fa24 f303 	lsr.w	r3, r4, r3
 8001080:	4094      	lsls	r4, r2
 8001082:	430c      	orrs	r4, r1
 8001084:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001088:	fa00 fe02 	lsl.w	lr, r0, r2
 800108c:	fa1f f78c 	uxth.w	r7, ip
 8001090:	fbb3 f0f8 	udiv	r0, r3, r8
 8001094:	fb08 3110 	mls	r1, r8, r0, r3
 8001098:	0c23      	lsrs	r3, r4, #16
 800109a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800109e:	fb00 f107 	mul.w	r1, r0, r7
 80010a2:	4299      	cmp	r1, r3
 80010a4:	d908      	bls.n	80010b8 <__udivmoddi4+0x24c>
 80010a6:	eb1c 0303 	adds.w	r3, ip, r3
 80010aa:	f100 36ff 	add.w	r6, r0, #4294967295
 80010ae:	d22c      	bcs.n	800110a <__udivmoddi4+0x29e>
 80010b0:	4299      	cmp	r1, r3
 80010b2:	d92a      	bls.n	800110a <__udivmoddi4+0x29e>
 80010b4:	3802      	subs	r0, #2
 80010b6:	4463      	add	r3, ip
 80010b8:	1a5b      	subs	r3, r3, r1
 80010ba:	b2a4      	uxth	r4, r4
 80010bc:	fbb3 f1f8 	udiv	r1, r3, r8
 80010c0:	fb08 3311 	mls	r3, r8, r1, r3
 80010c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010c8:	fb01 f307 	mul.w	r3, r1, r7
 80010cc:	42a3      	cmp	r3, r4
 80010ce:	d908      	bls.n	80010e2 <__udivmoddi4+0x276>
 80010d0:	eb1c 0404 	adds.w	r4, ip, r4
 80010d4:	f101 36ff 	add.w	r6, r1, #4294967295
 80010d8:	d213      	bcs.n	8001102 <__udivmoddi4+0x296>
 80010da:	42a3      	cmp	r3, r4
 80010dc:	d911      	bls.n	8001102 <__udivmoddi4+0x296>
 80010de:	3902      	subs	r1, #2
 80010e0:	4464      	add	r4, ip
 80010e2:	1ae4      	subs	r4, r4, r3
 80010e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010e8:	e739      	b.n	8000f5e <__udivmoddi4+0xf2>
 80010ea:	4604      	mov	r4, r0
 80010ec:	e6f0      	b.n	8000ed0 <__udivmoddi4+0x64>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e706      	b.n	8000f00 <__udivmoddi4+0x94>
 80010f2:	45c8      	cmp	r8, r9
 80010f4:	d2ae      	bcs.n	8001054 <__udivmoddi4+0x1e8>
 80010f6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010fa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010fe:	3801      	subs	r0, #1
 8001100:	e7a8      	b.n	8001054 <__udivmoddi4+0x1e8>
 8001102:	4631      	mov	r1, r6
 8001104:	e7ed      	b.n	80010e2 <__udivmoddi4+0x276>
 8001106:	4603      	mov	r3, r0
 8001108:	e799      	b.n	800103e <__udivmoddi4+0x1d2>
 800110a:	4630      	mov	r0, r6
 800110c:	e7d4      	b.n	80010b8 <__udivmoddi4+0x24c>
 800110e:	46d6      	mov	lr, sl
 8001110:	e77f      	b.n	8001012 <__udivmoddi4+0x1a6>
 8001112:	4463      	add	r3, ip
 8001114:	3802      	subs	r0, #2
 8001116:	e74d      	b.n	8000fb4 <__udivmoddi4+0x148>
 8001118:	4606      	mov	r6, r0
 800111a:	4623      	mov	r3, r4
 800111c:	4608      	mov	r0, r1
 800111e:	e70f      	b.n	8000f40 <__udivmoddi4+0xd4>
 8001120:	3e02      	subs	r6, #2
 8001122:	4463      	add	r3, ip
 8001124:	e730      	b.n	8000f88 <__udivmoddi4+0x11c>
 8001126:	bf00      	nop

08001128 <__aeabi_idiv0>:
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <Base_init>:

u16u8_t registerFrame[200];

//------------ Function ------------//
void Base_init(BaseStruct* Base)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	Base->bStatus = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	801a      	strh	r2, [r3, #0]
	Base->PositionZ = 0;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
	Base->PositionX = 0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
	Base->Speed = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
	Base->Acc = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
	Base->Vacuum = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	829a      	strh	r2, [r3, #20]
	Base->Gripper = 0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	82da      	strh	r2, [r3, #22]
	Base->ShelveMode = 0; 	//for ps2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	831a      	strh	r2, [r3, #24]
	Base->Shelve[5] = 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	631a      	str	r2, [r3, #48]	@ 0x30
//	Base-> PointMode;
	Base->GoalPoint = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	861a      	strh	r2, [r3, #48]	@ 0x30
	Base->Pick = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	865a      	strh	r2, [r3, #50]	@ 0x32
	Base->Place = 0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	869a      	strh	r2, [r3, #52]	@ 0x34
	Base->bS = 0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	86da      	strh	r2, [r3, #54]	@ 0x36
	Base->vS = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	871a      	strh	r2, [r3, #56]	@ 0x38
	Base->gmS = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	875a      	strh	r2, [r3, #58]	@ 0x3a
	Base->gmaS = 0;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	879a      	strh	r2, [r3, #60]	@ 0x3c
	Base->zmS = 0;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	87da      	strh	r2, [r3, #62]	@ 0x3e

// for testing
	Base->sw = 0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	Base->swp = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	Base->sh = 0;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	Base->sp = 0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <AMT_encoder_init>:
int32_t diffPosition;
float diffTime;
float ALPHA = 0.3f;

void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011da:	213c      	movs	r1, #60	@ 0x3c
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 ffab 	bl	8006138 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 10.0;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	220a      	movs	r2, #10
 80011e6:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 10.0;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	220a      	movs	r2, #10
 80011ec:	605a      	str	r2, [r3, #4]
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <AMT_encoder_update>:

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 80011f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	e9c7 2300 	strd	r2, r3, [r7]
	//collect data
	AMT_data->TimeStamp[QEI_NOW] = current_time;
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800120e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	601a      	str	r2, [r3, #0]

	//Postion 1 turn calculation
	AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a6d      	ldr	r2, [pc, #436]	@ (80013d8 <AMT_encoder_update+0x1e0>)
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	fbb3 f1f2 	udiv	r1, r3, r2
 8001228:	fb01 f202 	mul.w	r2, r1, r2
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	621a      	str	r2, [r3, #32]

	//calculate dx
	diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	461a      	mov	r2, r3
 8001240:	4b66      	ldr	r3, [pc, #408]	@ (80013dc <AMT_encoder_update+0x1e4>)
 8001242:	601a      	str	r2, [r3, #0]

	//Handle Warp around
	if(diffPosition > 32767)
 8001244:	4b65      	ldr	r3, [pc, #404]	@ (80013dc <AMT_encoder_update+0x1e4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800124c:	db06      	blt.n	800125c <AMT_encoder_update+0x64>
		diffPosition -= 65535;
 800124e:	4b63      	ldr	r3, [pc, #396]	@ (80013dc <AMT_encoder_update+0x1e4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001256:	3bff      	subs	r3, #255	@ 0xff
 8001258:	4a60      	ldr	r2, [pc, #384]	@ (80013dc <AMT_encoder_update+0x1e4>)
 800125a:	6013      	str	r3, [r2, #0]
	if(diffPosition < -32767)
 800125c:	4b5f      	ldr	r3, [pc, #380]	@ (80013dc <AMT_encoder_update+0x1e4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001264:	dc06      	bgt.n	8001274 <AMT_encoder_update+0x7c>
		diffPosition += 65535;
 8001266:	4b5d      	ldr	r3, [pc, #372]	@ (80013dc <AMT_encoder_update+0x1e4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800126e:	33ff      	adds	r3, #255	@ 0xff
 8001270:	4a5a      	ldr	r2, [pc, #360]	@ (80013dc <AMT_encoder_update+0x1e4>)
 8001272:	6013      	str	r3, [r2, #0]

	//calculate dt
	diffTime = (AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV] );
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001280:	1a84      	subs	r4, r0, r2
 8001282:	eb61 0503 	sbc.w	r5, r1, r3
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7ff fd91 	bl	8000db0 <__aeabi_ul2f>
 800128e:	4603      	mov	r3, r0
 8001290:	4a53      	ldr	r2, [pc, #332]	@ (80013e0 <AMT_encoder_update+0x1e8>)
 8001292:	6013      	str	r3, [r2, #0]

	//calculate anglar velocity
	float Vin = (PID_velo.out/1000)*24;
 8001294:	4b53      	ldr	r3, [pc, #332]	@ (80013e4 <AMT_encoder_update+0x1ec>)
 8001296:	ed93 7a06 	vldr	s14, [r3, #24]
 800129a:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80013e8 <AMT_encoder_update+0x1f0>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80012a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012aa:	edc7 7a05 	vstr	s15, [r7, #20]
//	AMT_data->Angular_Velocity = lowPassFilter(SteadyStateKalmanFilter(&Vel_filtered,Vin, (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6))));	//RPM
	AMT_data->Angular_Velocity = lowPassFilter((&Vel_filtered,Vin, (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6))));	//RPM
 80012ae:	4b4b      	ldr	r3, [pc, #300]	@ (80013dc <AMT_encoder_update+0x1e4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f902 	bl	80004bc <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b4b      	ldr	r3, [pc, #300]	@ (80013ec <AMT_encoder_update+0x1f4>)
 80012be:	f7ff f967 	bl	8000590 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4690      	mov	r8, r2
 80012c8:	4699      	mov	r9, r3
 80012ca:	4b43      	ldr	r3, [pc, #268]	@ (80013d8 <AMT_encoder_update+0x1e0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8e4 	bl	800049c <__aeabi_ui2d>
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	4b41      	ldr	r3, [pc, #260]	@ (80013e0 <AMT_encoder_update+0x1e8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f8ff 	bl	80004e0 <__aeabi_f2d>
 80012e2:	a33b      	add	r3, pc, #236	@ (adr r3, 80013d0 <AMT_encoder_update+0x1d8>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fa7c 	bl	80007e4 <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7ff f94c 	bl	8000590 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4640      	mov	r0, r8
 80012fe:	4649      	mov	r1, r9
 8001300:	f7ff fa70 	bl	80007e4 <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fc38 	bl	8000b80 <__aeabi_d2f>
 8001310:	4603      	mov	r3, r0
 8001312:	ee00 3a10 	vmov	s0, r3
 8001316:	f000 f86d 	bl	80013f4 <lowPassFilter>
 800131a:	eef0 7a40 	vmov.f32	s15, s0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	AMT_data->Linear_Position += (diffPosition*pulley_cir)/cnt_per_rev;			//mm
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800132a:	4b2c      	ldr	r3, [pc, #176]	@ (80013dc <AMT_encoder_update+0x1e4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001336:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <AMT_encoder_update+0x1f8>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001340:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <AMT_encoder_update+0x1e0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800134c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	AMT_data->Linear_Velocity = (AMT_data->Angular_Velocity / 60.0) * pulley_cir;		//mm/s
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8be 	bl	80004e0 <__aeabi_f2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <AMT_encoder_update+0x1f4>)
 800136a:	f7ff fa3b 	bl	80007e4 <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4614      	mov	r4, r2
 8001374:	461d      	mov	r5, r3
 8001376:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <AMT_encoder_update+0x1f8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f8b0 	bl	80004e0 <__aeabi_f2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4620      	mov	r0, r4
 8001386:	4629      	mov	r1, r5
 8001388:	f7ff f902 	bl	8000590 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fbf4 	bl	8000b80 <__aeabi_d2f>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	62da      	str	r2, [r3, #44]	@ 0x2c
	AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity;					//Uodate Velo
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	619a      	str	r2, [r3, #24]
//	AMT_data->Linear_Acceleration = ((AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) *  1000000.0) / (diffTime);		//mm/s^2

	//store value for next loop
	AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	605a      	str	r2, [r3, #4]
	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013b4:	68f9      	ldr	r1, [r7, #12]
 80013b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	61da      	str	r2, [r3, #28]
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013cc:	f3af 8000 	nop.w
 80013d0:	00000000 	.word	0x00000000
 80013d4:	412e8480 	.word	0x412e8480
 80013d8:	20000000 	.word	0x20000000
 80013dc:	2000024c 	.word	0x2000024c
 80013e0:	20000250 	.word	0x20000250
 80013e4:	20000af8 	.word	0x20000af8
 80013e8:	447a0000 	.word	0x447a0000
 80013ec:	404e0000 	.word	0x404e0000
 80013f0:	20000004 	.word	0x20000004

080013f4 <lowPassFilter>:
	AMT_data->Linear_Position = 0;
	AMT_data->Position[QEI_NOW] = 0;

}

float lowPassFilter(float raw_data) {
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	ed87 0a01 	vstr	s0, [r7, #4]
    // Apply exponential moving average filter
    float filtered_data = ALPHA * raw_data + (1.0f - ALPHA) * filtered_data;
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <lowPassFilter+0x4c>)
 8001400:	ed93 7a00 	vldr	s14, [r3]
 8001404:	edd7 7a01 	vldr	s15, [r7, #4]
 8001408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <lowPassFilter+0x4c>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001416:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800141a:	edd7 7a03 	vldr	s15, [r7, #12]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	edc7 7a03 	vstr	s15, [r7, #12]
    return filtered_data;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ee07 3a90 	vmov	s15, r3
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008

08001444 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001448:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <modbus_1t5_Timeout+0x3c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <modbus_1t5_Timeout+0x3c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <modbus_1t5_Timeout+0x3c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <modbus_1t5_Timeout+0x3c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000254 	.word	0x20000254

08001484 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <modbus_3t5_Timeout+0x1c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	755a      	strb	r2, [r3, #21]

}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	20000254 	.word	0x20000254

080014a4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f007 f83f 	bl	8008530 <HAL_UART_GetError>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d101      	bne.n	80014bc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80014b8:	f7ff ffc4 	bl	8001444 <modbus_1t5_Timeout>

	}
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80014ce:	4a25      	ldr	r2, [pc, #148]	@ (8001564 <Modbus_init+0xa0>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80014d4:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <Modbus_init+0xa0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <Modbus_init+0xa4>)
 80014e2:	210e      	movs	r1, #14
 80014e4:	4618      	mov	r0, r3
 80014e6:	f005 fab3 	bl	8006a50 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2110      	movs	r1, #16
 80014f0:	4618      	mov	r0, r3
 80014f2:	f006 ffc7 	bl	8008484 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f006 ffde 	bl	80084bc <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4a19      	ldr	r2, [pc, #100]	@ (800156c <Modbus_init+0xa8>)
 8001506:	2104      	movs	r1, #4
 8001508:	4618      	mov	r0, r3
 800150a:	f006 fa5d 	bl	80079c8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <Modbus_init+0xa0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <Modbus_init+0xa0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <Modbus_init+0xa0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001520:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001524:	4413      	add	r3, r2
 8001526:	3302      	adds	r3, #2
 8001528:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800152c:	4619      	mov	r1, r3
 800152e:	f006 fbcd 	bl	8007ccc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001532:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <Modbus_init+0xa0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d10c      	bne.n	800155c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <Modbus_init+0xa0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	4618      	mov	r0, r3
 800154a:	f004 fa05 	bl	8005958 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <Modbus_init+0xa0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f004 fcac 	bl	8005eb4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000254 	.word	0x20000254
 8001568:	08001485 	.word	0x08001485
 800156c:	080014a5 	.word	0x080014a5

08001570 <MOTOR_init>:
 *      Author: napat
 */
#include "Motor.h"

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	460b      	mov	r3, r1
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	4613      	mov	r3, r2
 8001584:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	88ba      	ldrh	r2, [r7, #4]
 8001596:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	4619      	mov	r1, r3
 800159c:	68b8      	ldr	r0, [r7, #8]
 800159e:	f004 fac1 	bl	8005b24 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4619      	mov	r1, r3
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f004 fabc 	bl	8005b24 <HAL_TIM_PWM_Start_IT>

}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 80015b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015bc:	b089      	sub	sp, #36	@ 0x24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	61f8      	str	r0, [r7, #28]
 80015c2:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8263 	beq.w	8001a94 <MOTOR_set_duty+0x4dc>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 825e 	beq.w	8001a94 <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 80015d8:	69b8      	ldr	r0, [r7, #24]
 80015da:	f7fe ff81 	bl	80004e0 <__aeabi_f2d>
 80015de:	a394      	add	r3, pc, #592	@ (adr r3, 8001830 <MOTOR_set_duty+0x278>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe ffd4 	bl	8000590 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	a395      	add	r3, pc, #596	@ (adr r3, 8001848 <MOTOR_set_duty+0x290>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff fa51 	bl	8000a9c <__aeabi_dcmpge>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MOTOR_set_duty+0x4c>
 8001600:	4b8f      	ldr	r3, [pc, #572]	@ (8001840 <MOTOR_set_duty+0x288>)
 8001602:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 8001604:	69b8      	ldr	r0, [r7, #24]
 8001606:	f7fe ff6b 	bl	80004e0 <__aeabi_f2d>
 800160a:	a389      	add	r3, pc, #548	@ (adr r3, 8001830 <MOTOR_set_duty+0x278>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7fe ffbe 	bl	8000590 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	a386      	add	r3, pc, #536	@ (adr r3, 8001838 <MOTOR_set_duty+0x280>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7ff fa31 	bl	8000a88 <__aeabi_dcmple>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MOTOR_set_duty+0x78>
 800162c:	4b85      	ldr	r3, [pc, #532]	@ (8001844 <MOTOR_set_duty+0x28c>)
 800162e:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 8001630:	edd7 7a06 	vldr	s15, [r7, #24]
 8001634:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	d16e      	bne.n	800171c <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d105      	bne.n	8001652 <MOTOR_set_duty+0x9a>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2200      	movs	r2, #0
 800164e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001650:	e02c      	b.n	80016ac <MOTOR_set_duty+0xf4>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	889b      	ldrh	r3, [r3, #4]
 8001656:	2b04      	cmp	r3, #4
 8001658:	d105      	bne.n	8001666 <MOTOR_set_duty+0xae>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	6393      	str	r3, [r2, #56]	@ 0x38
 8001664:	e022      	b.n	80016ac <MOTOR_set_duty+0xf4>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	889b      	ldrh	r3, [r3, #4]
 800166a:	2b08      	cmp	r3, #8
 800166c:	d105      	bne.n	800167a <MOTOR_set_duty+0xc2>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001678:	e018      	b.n	80016ac <MOTOR_set_duty+0xf4>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	889b      	ldrh	r3, [r3, #4]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d105      	bne.n	800168e <MOTOR_set_duty+0xd6>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	6413      	str	r3, [r2, #64]	@ 0x40
 800168c:	e00e      	b.n	80016ac <MOTOR_set_duty+0xf4>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	889b      	ldrh	r3, [r3, #4]
 8001692:	2b10      	cmp	r3, #16
 8001694:	d105      	bne.n	80016a2 <MOTOR_set_duty+0xea>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	6493      	str	r3, [r2, #72]	@ 0x48
 80016a0:	e004      	b.n	80016ac <MOTOR_set_duty+0xf4>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	88db      	ldrh	r3, [r3, #6]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <MOTOR_set_duty+0x108>
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80016be:	e1ea      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	88db      	ldrh	r3, [r3, #6]
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d105      	bne.n	80016d4 <MOTOR_set_duty+0x11c>
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2300      	movs	r3, #0
 80016d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80016d2:	e1e0      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	88db      	ldrh	r3, [r3, #6]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d105      	bne.n	80016e8 <MOTOR_set_duty+0x130>
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2300      	movs	r3, #0
 80016e4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016e6:	e1d6      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	88db      	ldrh	r3, [r3, #6]
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d105      	bne.n	80016fc <MOTOR_set_duty+0x144>
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2300      	movs	r3, #0
 80016f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fa:	e1cc      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	88db      	ldrh	r3, [r3, #6]
 8001700:	2b10      	cmp	r3, #16
 8001702:	d105      	bne.n	8001710 <MOTOR_set_duty+0x158>
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2300      	movs	r3, #0
 800170c:	6493      	str	r3, [r2, #72]	@ 0x48
 800170e:	e1c2      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	e1bc      	b.n	8001a96 <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 800171c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	f340 80d6 	ble.w	80018d8 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	889b      	ldrh	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <MOTOR_set_duty+0x188>
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	@ 0x34
 800173e:	e02c      	b.n	800179a <MOTOR_set_duty+0x1e2>
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	889b      	ldrh	r3, [r3, #4]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d105      	bne.n	8001754 <MOTOR_set_duty+0x19c>
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	2300      	movs	r3, #0
 8001750:	6393      	str	r3, [r2, #56]	@ 0x38
 8001752:	e022      	b.n	800179a <MOTOR_set_duty+0x1e2>
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	889b      	ldrh	r3, [r3, #4]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d105      	bne.n	8001768 <MOTOR_set_duty+0x1b0>
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2300      	movs	r3, #0
 8001764:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001766:	e018      	b.n	800179a <MOTOR_set_duty+0x1e2>
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	889b      	ldrh	r3, [r3, #4]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	d105      	bne.n	800177c <MOTOR_set_duty+0x1c4>
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
 800177a:	e00e      	b.n	800179a <MOTOR_set_duty+0x1e2>
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	889b      	ldrh	r3, [r3, #4]
 8001780:	2b10      	cmp	r3, #16
 8001782:	d105      	bne.n	8001790 <MOTOR_set_duty+0x1d8>
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	6493      	str	r3, [r2, #72]	@ 0x48
 800178e:	e004      	b.n	800179a <MOTOR_set_duty+0x1e2>
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	2300      	movs	r3, #0
 8001798:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	88db      	ldrh	r3, [r3, #6]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d113      	bne.n	80017ca <MOTOR_set_duty+0x212>
 80017a2:	69b8      	ldr	r0, [r7, #24]
 80017a4:	f7fe fe9c 	bl	80004e0 <__aeabi_f2d>
 80017a8:	a321      	add	r3, pc, #132	@ (adr r3, 8001830 <MOTOR_set_duty+0x278>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe feef 	bl	8000590 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681c      	ldr	r4, [r3, #0]
 80017c0:	f7ff f9be 	bl	8000b40 <__aeabi_d2uiz>
 80017c4:	4603      	mov	r3, r0
 80017c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80017c8:	e165      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	88db      	ldrh	r3, [r3, #6]
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d113      	bne.n	80017fa <MOTOR_set_duty+0x242>
 80017d2:	69b8      	ldr	r0, [r7, #24]
 80017d4:	f7fe fe84 	bl	80004e0 <__aeabi_f2d>
 80017d8:	a315      	add	r3, pc, #84	@ (adr r3, 8001830 <MOTOR_set_duty+0x278>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe fed7 	bl	8000590 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681c      	ldr	r4, [r3, #0]
 80017f0:	f7ff f9a6 	bl	8000b40 <__aeabi_d2uiz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80017f8:	e14d      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	88db      	ldrh	r3, [r3, #6]
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d126      	bne.n	8001850 <MOTOR_set_duty+0x298>
 8001802:	69b8      	ldr	r0, [r7, #24]
 8001804:	f7fe fe6c 	bl	80004e0 <__aeabi_f2d>
 8001808:	a309      	add	r3, pc, #36	@ (adr r3, 8001830 <MOTOR_set_duty+0x278>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe febf 	bl	8000590 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681c      	ldr	r4, [r3, #0]
 8001820:	f7ff f98e 	bl	8000b40 <__aeabi_d2uiz>
 8001824:	4603      	mov	r3, r0
 8001826:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001828:	e135      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 800182a:	bf00      	nop
 800182c:	f3af 8000 	nop.w
 8001830:	3b645a1d 	.word	0x3b645a1d
 8001834:	40453fdf 	.word	0x40453fdf
 8001838:	00000000 	.word	0x00000000
 800183c:	c0e4c060 	.word	0xc0e4c060
 8001840:	47260300 	.word	0x47260300
 8001844:	c7260300 	.word	0xc7260300
 8001848:	00000000 	.word	0x00000000
 800184c:	40e4c060 	.word	0x40e4c060
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	88db      	ldrh	r3, [r3, #6]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d113      	bne.n	8001880 <MOTOR_set_duty+0x2c8>
 8001858:	69b8      	ldr	r0, [r7, #24]
 800185a:	f7fe fe41 	bl	80004e0 <__aeabi_f2d>
 800185e:	a390      	add	r3, pc, #576	@ (adr r3, 8001aa0 <MOTOR_set_duty+0x4e8>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fe94 	bl	8000590 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681c      	ldr	r4, [r3, #0]
 8001876:	f7ff f963 	bl	8000b40 <__aeabi_d2uiz>
 800187a:	4603      	mov	r3, r0
 800187c:	6423      	str	r3, [r4, #64]	@ 0x40
 800187e:	e10a      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	88db      	ldrh	r3, [r3, #6]
 8001884:	2b10      	cmp	r3, #16
 8001886:	d113      	bne.n	80018b0 <MOTOR_set_duty+0x2f8>
 8001888:	69b8      	ldr	r0, [r7, #24]
 800188a:	f7fe fe29 	bl	80004e0 <__aeabi_f2d>
 800188e:	a384      	add	r3, pc, #528	@ (adr r3, 8001aa0 <MOTOR_set_duty+0x4e8>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fe7c 	bl	8000590 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681c      	ldr	r4, [r3, #0]
 80018a6:	f7ff f94b 	bl	8000b40 <__aeabi_d2uiz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	64a3      	str	r3, [r4, #72]	@ 0x48
 80018ae:	e0f2      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 80018b0:	69b8      	ldr	r0, [r7, #24]
 80018b2:	f7fe fe15 	bl	80004e0 <__aeabi_f2d>
 80018b6:	a37a      	add	r3, pc, #488	@ (adr r3, 8001aa0 <MOTOR_set_duty+0x4e8>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fe68 	bl	8000590 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681c      	ldr	r4, [r3, #0]
 80018ce:	f7ff f937 	bl	8000b40 <__aeabi_d2uiz>
 80018d2:	4603      	mov	r3, r0
 80018d4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80018d6:	e0de      	b.n	8001a96 <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	889b      	ldrh	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d106      	bne.n	80018ee <MOTOR_set_duty+0x336>
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f24a 6203 	movw	r2, #42499	@ 0xa603
 80018ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ec:	e031      	b.n	8001952 <MOTOR_set_duty+0x39a>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	889b      	ldrh	r3, [r3, #4]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d106      	bne.n	8001904 <MOTOR_set_duty+0x34c>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001900:	6393      	str	r3, [r2, #56]	@ 0x38
 8001902:	e026      	b.n	8001952 <MOTOR_set_duty+0x39a>
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	889b      	ldrh	r3, [r3, #4]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d106      	bne.n	800191a <MOTOR_set_duty+0x362>
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001916:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001918:	e01b      	b.n	8001952 <MOTOR_set_duty+0x39a>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	889b      	ldrh	r3, [r3, #4]
 800191e:	2b0c      	cmp	r3, #12
 8001920:	d106      	bne.n	8001930 <MOTOR_set_duty+0x378>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	f24a 6303 	movw	r3, #42499	@ 0xa603
 800192c:	6413      	str	r3, [r2, #64]	@ 0x40
 800192e:	e010      	b.n	8001952 <MOTOR_set_duty+0x39a>
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	889b      	ldrh	r3, [r3, #4]
 8001934:	2b10      	cmp	r3, #16
 8001936:	d106      	bne.n	8001946 <MOTOR_set_duty+0x38e>
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001942:	6493      	str	r3, [r2, #72]	@ 0x48
 8001944:	e005      	b.n	8001952 <MOTOR_set_duty+0x39a>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8001950:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	88db      	ldrh	r3, [r3, #6]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d117      	bne.n	800198a <MOTOR_set_duty+0x3d2>
 800195a:	69b8      	ldr	r0, [r7, #24]
 800195c:	f7fe fdc0 	bl	80004e0 <__aeabi_f2d>
 8001960:	a34f      	add	r3, pc, #316	@ (adr r3, 8001aa0 <MOTOR_set_duty+0x4e8>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fe13 	bl	8000590 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	613a      	str	r2, [r7, #16]
 8001970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681c      	ldr	r4, [r3, #0]
 800197c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001980:	f7ff f8de 	bl	8000b40 <__aeabi_d2uiz>
 8001984:	4603      	mov	r3, r0
 8001986:	6363      	str	r3, [r4, #52]	@ 0x34
 8001988:	e085      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	88db      	ldrh	r3, [r3, #6]
 800198e:	2b04      	cmp	r3, #4
 8001990:	d117      	bne.n	80019c2 <MOTOR_set_duty+0x40a>
 8001992:	69b8      	ldr	r0, [r7, #24]
 8001994:	f7fe fda4 	bl	80004e0 <__aeabi_f2d>
 8001998:	a341      	add	r3, pc, #260	@ (adr r3, 8001aa0 <MOTOR_set_duty+0x4e8>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fdf7 	bl	8000590 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	60ba      	str	r2, [r7, #8]
 80019a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681c      	ldr	r4, [r3, #0]
 80019b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019b8:	f7ff f8c2 	bl	8000b40 <__aeabi_d2uiz>
 80019bc:	4603      	mov	r3, r0
 80019be:	63a3      	str	r3, [r4, #56]	@ 0x38
 80019c0:	e069      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	88db      	ldrh	r3, [r3, #6]
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d117      	bne.n	80019fa <MOTOR_set_duty+0x442>
 80019ca:	69b8      	ldr	r0, [r7, #24]
 80019cc:	f7fe fd88 	bl	80004e0 <__aeabi_f2d>
 80019d0:	a333      	add	r3, pc, #204	@ (adr r3, 8001aa0 <MOTOR_set_duty+0x4e8>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fddb 	bl	8000590 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	603a      	str	r2, [r7, #0]
 80019e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681c      	ldr	r4, [r3, #0]
 80019ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019f0:	f7ff f8a6 	bl	8000b40 <__aeabi_d2uiz>
 80019f4:	4603      	mov	r3, r0
 80019f6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80019f8:	e04d      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	88db      	ldrh	r3, [r3, #6]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d116      	bne.n	8001a30 <MOTOR_set_duty+0x478>
 8001a02:	69b8      	ldr	r0, [r7, #24]
 8001a04:	f7fe fd6c 	bl	80004e0 <__aeabi_f2d>
 8001a08:	a325      	add	r3, pc, #148	@ (adr r3, 8001aa0 <MOTOR_set_duty+0x4e8>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fdbf 	bl	8000590 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4615      	mov	r5, r2
 8001a18:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681c      	ldr	r4, [r3, #0]
 8001a22:	4628      	mov	r0, r5
 8001a24:	4631      	mov	r1, r6
 8001a26:	f7ff f88b 	bl	8000b40 <__aeabi_d2uiz>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6423      	str	r3, [r4, #64]	@ 0x40
 8001a2e:	e032      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	88db      	ldrh	r3, [r3, #6]
 8001a34:	2b10      	cmp	r3, #16
 8001a36:	d116      	bne.n	8001a66 <MOTOR_set_duty+0x4ae>
 8001a38:	69b8      	ldr	r0, [r7, #24]
 8001a3a:	f7fe fd51 	bl	80004e0 <__aeabi_f2d>
 8001a3e:	a318      	add	r3, pc, #96	@ (adr r3, 8001aa0 <MOTOR_set_duty+0x4e8>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fda4 	bl	8000590 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4692      	mov	sl, r2
 8001a4e:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681c      	ldr	r4, [r3, #0]
 8001a58:	4650      	mov	r0, sl
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	f7ff f870 	bl	8000b40 <__aeabi_d2uiz>
 8001a60:	4603      	mov	r3, r0
 8001a62:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001a64:	e017      	b.n	8001a96 <MOTOR_set_duty+0x4de>
 8001a66:	69b8      	ldr	r0, [r7, #24]
 8001a68:	f7fe fd3a 	bl	80004e0 <__aeabi_f2d>
 8001a6c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001aa0 <MOTOR_set_duty+0x4e8>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fd8d 	bl	8000590 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4690      	mov	r8, r2
 8001a7c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681c      	ldr	r4, [r3, #0]
 8001a86:	4640      	mov	r0, r8
 8001a88:	4649      	mov	r1, r9
 8001a8a:	f7ff f859 	bl	8000b40 <__aeabi_d2uiz>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001a92:	e000      	b.n	8001a96 <MOTOR_set_duty+0x4de>
        return;
 8001a94:	bf00      	nop
    }
}
 8001a96:	3724      	adds	r7, #36	@ 0x24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a9e:	bf00      	nop
 8001aa0:	3b645a1d 	.word	0x3b645a1d
 8001aa4:	40453fdf 	.word	0x40453fdf

08001aa8 <PID_controller_init>:

extern Trap_Traj Traj;

float boundary = 0.05;
void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ab4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ab8:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <PID_controller_calculate_pos>:
void PID_controller_calculate_pos(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output velocity in boundary of 550mm/s
 PID->Error[n] = setpoint - Feedback->Linear_Position;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b10:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 550 && PID->Error[n] > 0) || (PID->out <= -550 && PID->Error[n] < 0))) {
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b24:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001c2c <PID_controller_calculate_pos+0x130>
 8001b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	bfac      	ite	ge
 8001b32:	2301      	movge	r3, #1
 8001b34:	2300      	movlt	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f083 0301 	eor.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <PID_controller_calculate_pos+0x66>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	bfcc      	ite	gt
 8001b52:	2301      	movgt	r3, #1
 8001b54:	2300      	movle	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f083 0301 	eor.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d056      	beq.n	8001c10 <PID_controller_calculate_pos+0x114>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b68:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001c30 <PID_controller_calculate_pos+0x134>
 8001b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	bf94      	ite	ls
 8001b76:	2301      	movls	r3, #1
 8001b78:	2300      	movhi	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10f      	bne.n	8001ba6 <PID_controller_calculate_pos+0xaa>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	bf4c      	ite	mi
 8001b96:	2301      	movmi	r3, #1
 8001b98:	2300      	movpl	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d034      	beq.n	8001c10 <PID_controller_calculate_pos+0x114>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	ed93 7a06 	vldr	s14, [r3, #24]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	edd3 6a00 	vldr	s13, [r3]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bb8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	ed93 6a00 	vldr	s12, [r3]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001be0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bee:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	ed93 6a02 	vldr	s12, [r3, #8]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	44098000 	.word	0x44098000
 8001c30:	c4098000 	.word	0xc4098000

08001c34 <PS2_init>:
extern BaseStruct base;
extern AMT_Encoder AMT;
extern MOTOR MT;
extern u16u8_t registerFrame[200];
void PS2_init(PS2_typedef* PS2)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
    PS2->ps2RX[10] = 0;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	729a      	strb	r2, [r3, #10]
    PS2->digit= 0;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
    PS2->gain[3] = 0;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
    PS2->ps2Y = 0;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	61da      	str	r2, [r3, #28]
    PS2->ps2YPos = 0;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
    PS2->floor[5] = 0;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	639a      	str	r2, [r3, #56]	@ 0x38
    PS2->r[6] = 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	651a      	str	r2, [r3, #80]	@ 0x50
    PS2->l[6] = 0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	669a      	str	r2, [r3, #104]	@ 0x68
    PS2->pwmOut = 0;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	669a      	str	r2, [r3, #104]	@ 0x68
    PS2->mode = 0;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	66da      	str	r2, [r3, #108]	@ 0x6c
    PS2->stop = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	671a      	str	r2, [r3, #112]	@ 0x70
    PS2->counts = 0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	675a      	str	r2, [r3, #116]	@ 0x74
    PS2->PIDPos = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	679a      	str	r2, [r3, #120]	@ 0x78
    PS2->on = 0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <PS2X_Reader>:
extern PS2_typedef ps2;

void PS2X_Reader()
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
//	ps2.ps2Y = 0;
//	ps2.ps2X = 0;
	if (ps2.ps2RX[0] == 69) 		//Press L4 to switch to use Joy stick
 8001ca6:	4b84      	ldr	r3, [pc, #528]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b45      	cmp	r3, #69	@ 0x45
 8001cac:	d105      	bne.n	8001cba <PS2X_Reader+0x1a>
	{
		ps2.mode = 1;
 8001cae:	4b82      	ldr	r3, [pc, #520]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on = 0;
 8001cb4:	4b80      	ldr	r3, [pc, #512]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	67da      	str	r2, [r3, #124]	@ 0x7c
//		ps2.ps2YPos = 132;
	}
	if (ps2.ps2RX[0] == 70)		//Press L5 to switch to use Button
 8001cba:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b46      	cmp	r3, #70	@ 0x46
 8001cc0:	d109      	bne.n	8001cd6 <PS2X_Reader+0x36>
	{
		ps2.mode = 2;
 8001cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	66da      	str	r2, [r3, #108]	@ 0x6c
		ps2.on =1;
 8001cc8:	4b7b      	ldr	r3, [pc, #492]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.PIDPos = AMT.Linear_Position;
 8001cce:	4b7b      	ldr	r3, [pc, #492]	@ (8001ebc <PS2X_Reader+0x21c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a79      	ldr	r2, [pc, #484]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cd4:	6793      	str	r3, [r2, #120]	@ 0x78


	}
	//Mode Joy stick
	if (ps2.mode == 1)
 8001cd6:	4b78      	ldr	r3, [pc, #480]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	f040 80c5 	bne.w	8001e6a <PS2X_Reader+0x1ca>
	{
		//Read Ps2 Joy stick in VERTICAL
		if(ps2.ps2RX[0] == 81){
 8001ce0:	4b75      	ldr	r3, [pc, #468]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b51      	cmp	r3, #81	@ 0x51
 8001ce6:	d169      	bne.n	8001dbc <PS2X_Reader+0x11c>
			if (ps2.ps2RX[2] == 83){
 8001ce8:	4b73      	ldr	r3, [pc, #460]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cea:	789b      	ldrb	r3, [r3, #2]
 8001cec:	2b53      	cmp	r3, #83	@ 0x53
 8001cee:	d103      	bne.n	8001cf8 <PS2X_Reader+0x58>
				ps2.digit = 1;
 8001cf0:	4b71      	ldr	r3, [pc, #452]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	e00e      	b.n	8001d16 <PS2X_Reader+0x76>
			}
			else if (ps2.ps2RX[3] == 83){
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001cfa:	78db      	ldrb	r3, [r3, #3]
 8001cfc:	2b53      	cmp	r3, #83	@ 0x53
 8001cfe:	d103      	bne.n	8001d08 <PS2X_Reader+0x68>
				ps2.digit = 2;
 8001d00:	4b6d      	ldr	r3, [pc, #436]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	e006      	b.n	8001d16 <PS2X_Reader+0x76>
			}
			else if (ps2.ps2RX[4] == 83){
 8001d08:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d0a:	791b      	ldrb	r3, [r3, #4]
 8001d0c:	2b53      	cmp	r3, #83	@ 0x53
 8001d0e:	d102      	bne.n	8001d16 <PS2X_Reader+0x76>
				ps2.digit = 3;
 8001d10:	4b69      	ldr	r3, [pc, #420]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d12:	2203      	movs	r2, #3
 8001d14:	60da      	str	r2, [r3, #12]
			}
			for(int k=1 ; k<5 ; k++){
 8001d16:	2301      	movs	r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e01d      	b.n	8001d58 <PS2X_Reader+0xb8>
				for (int l=0; l<10 ; l++){
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	e014      	b.n	8001d4c <PS2X_Reader+0xac>
					if (ps2.ps2RX[k] == num[l]){
 8001d22:	4a65      	ldr	r2, [pc, #404]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4a64      	ldr	r2, [pc, #400]	@ (8001ec0 <PS2X_Reader+0x220>)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	4299      	cmp	r1, r3
 8001d36:	d106      	bne.n	8001d46 <PS2X_Reader+0xa6>
						ps2.gain[k-1] = l;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	495e      	ldr	r1, [pc, #376]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d3e:	3304      	adds	r3, #4
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int l=0; l<10 ; l++){
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b09      	cmp	r3, #9
 8001d50:	dde7      	ble.n	8001d22 <PS2X_Reader+0x82>
			for(int k=1 ; k<5 ; k++){
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	ddde      	ble.n	8001d1c <PS2X_Reader+0x7c>
					}
				}
			}
			if (ps2.digit == 1){
 8001d5e:	4b56      	ldr	r3, [pc, #344]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d104      	bne.n	8001d70 <PS2X_Reader+0xd0>
				ps2.ps2YPos = ps2.gain[0];
 8001d66:	4b54      	ldr	r3, [pc, #336]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	4a53      	ldr	r2, [pc, #332]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	e025      	b.n	8001dbc <PS2X_Reader+0x11c>
			}
			else if (ps2.digit == 2){
 8001d70:	4b51      	ldr	r3, [pc, #324]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d10c      	bne.n	8001d92 <PS2X_Reader+0xf2>
				ps2.ps2YPos = (ps2.gain[0]*10)+ps2.gain[1];
 8001d78:	4b4f      	ldr	r3, [pc, #316]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e014      	b.n	8001dbc <PS2X_Reader+0x11c>
			}
			else if (ps2.digit == 3){
 8001d92:	4b49      	ldr	r3, [pc, #292]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d110      	bne.n	8001dbc <PS2X_Reader+0x11c>
				ps2.ps2YPos = (ps2.gain[0]*100)+(ps2.gain[1]*10)+ps2.gain[2];
 8001d9a:	4b47      	ldr	r3, [pc, #284]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2264      	movs	r2, #100	@ 0x64
 8001da0:	fb02 f103 	mul.w	r1, r2, r3
 8001da4:	4b44      	ldr	r3, [pc, #272]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	18ca      	adds	r2, r1, r3
 8001db2:	4b41      	ldr	r3, [pc, #260]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a3f      	ldr	r2, [pc, #252]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001dba:	6213      	str	r3, [r2, #32]
		//Convert from 0 - 255 to -128 - 128
//		ps2.ps2Y = (ps2.ps2YPos - 132);
//		ps2.ps2X = ps2.ps2XPos - 132;

		//Generate PWM
		ps2.pwmOut = ((ps2.ps2Y/ 132.0)*300) + 150;
 8001dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fb7b 	bl	80004bc <__aeabi_i2d>
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec4 <PS2X_Reader+0x224>)
 8001dcc:	f7fe fd0a 	bl	80007e4 <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	a333      	add	r3, pc, #204	@ (adr r3, 8001ea8 <PS2X_Reader+0x208>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	f7fe fbd7 	bl	8000590 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	a331      	add	r3, pc, #196	@ (adr r3, 8001eb0 <PS2X_Reader+0x210>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fa18 	bl	8000224 <__adddf3>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe fe78 	bl	8000af0 <__aeabi_d2iz>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e04:	6693      	str	r3, [r2, #104]	@ 0x68
		ps2.pwmOut = 320 - ps2.ps2YPos;
 8001e06:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e10:	6693      	str	r3, [r2, #104]	@ 0x68
		if (ps2.pwmOut > 300)
 8001e12:	4b29      	ldr	r3, [pc, #164]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e16:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001e1a:	dd03      	ble.n	8001e24 <PS2X_Reader+0x184>
		{
			ps2.pwmOut = 300;
 8001e1c:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e22:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < -300)
 8001e24:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e28:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8001e2c:	da02      	bge.n	8001e34 <PS2X_Reader+0x194>
		{
			ps2.pwmOut = 0;
 8001e2e:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	669a      	str	r2, [r3, #104]	@ 0x68
		}
		if (ps2.pwmOut < 0)
 8001e34:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	da05      	bge.n	8001e48 <PS2X_Reader+0x1a8>
		{
			MOTOR_set_duty(&MT, 0);
 8001e3c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001ec8 <PS2X_Reader+0x228>
 8001e40:	4822      	ldr	r0, [pc, #136]	@ (8001ecc <PS2X_Reader+0x22c>)
 8001e42:	f7ff fbb9 	bl	80015b8 <MOTOR_set_duty>
 8001e46:	e0cd      	b.n	8001fe4 <PS2X_Reader+0x344>
		}
		else if (ps2.pwmOut > 0)
 8001e48:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f340 80c9 	ble.w	8001fe4 <PS2X_Reader+0x344>
		{
			MOTOR_set_duty(&MT, ps2.pwmOut);
 8001e52:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e62:	481a      	ldr	r0, [pc, #104]	@ (8001ecc <PS2X_Reader+0x22c>)
 8001e64:	f7ff fba8 	bl	80015b8 <MOTOR_set_duty>
 8001e68:	e0bc      	b.n	8001fe4 <PS2X_Reader+0x344>
		}
	}

	//--- Mode Button ---//
	else if (ps2.mode == 2)
 8001e6a:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f040 80b8 	bne.w	8001fe4 <PS2X_Reader+0x344>
	{
//		ps2.PIDPos = AMT.Linear_Position;
		ps2.on = 1;
 8001e74:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	67da      	str	r2, [r3, #124]	@ 0x7c
		ps2.ps2Y = 0;
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
//		ps2.ps2X = 0;
		//Keys Map
		static uint32_t timestamp =0;
		if(timestamp < HAL_GetTick())
 8001e80:	f001 fe4e 	bl	8003b20 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <PS2X_Reader+0x230>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d908      	bls.n	8001ea0 <PS2X_Reader+0x200>
		{
			timestamp = HAL_GetTick()+100;
 8001e8e:	f001 fe47 	bl	8003b20 <HAL_GetTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	3364      	adds	r3, #100	@ 0x64
 8001e96:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed0 <PS2X_Reader+0x230>)
 8001e98:	6013      	str	r3, [r2, #0]
			ps2.ps2RX[0] = 0;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <PS2X_Reader+0x218>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
		}
		for (int i =0;i<6;i++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	e05a      	b.n	8001f5c <PS2X_Reader+0x2bc>
 8001ea6:	bf00      	nop
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	4072c000 	.word	0x4072c000
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	4062c000 	.word	0x4062c000
 8001eb8:	200013c8 	.word	0x200013c8
 8001ebc:	20000a80 	.word	0x20000a80
 8001ec0:	2000000c 	.word	0x2000000c
 8001ec4:	40608000 	.word	0x40608000
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	20000ab8 	.word	0x20000ab8
 8001ed0:	20000258 	.word	0x20000258
		{
			if (ps2.ps2RX[0] == 0)
 8001ed4:	4b66      	ldr	r3, [pc, #408]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d123      	bne.n	8001f24 <PS2X_Reader+0x284>
			{
				//Left
				ps2.l[0] = 0; //w
 8001edc:	4b64      	ldr	r3, [pc, #400]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	651a      	str	r2, [r3, #80]	@ 0x50
				ps2.l[1] = 0;	//a
 8001ee2:	4b63      	ldr	r3, [pc, #396]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54
				ps2.l[2] = 0;	//s
 8001ee8:	4b61      	ldr	r3, [pc, #388]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	659a      	str	r2, [r3, #88]	@ 0x58
				ps2.l[3] = 0;	//d
 8001eee:	4b60      	ldr	r3, [pc, #384]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
				ps2.l[4] = 0;	//l1
 8001ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	661a      	str	r2, [r3, #96]	@ 0x60
				ps2.l[5] = 0;	//l2
 8001efa:	4b5d      	ldr	r3, [pc, #372]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	665a      	str	r2, [r3, #100]	@ 0x64
				//Right
				ps2.r[0] = 0;	//w
 8001f00:	4b5b      	ldr	r3, [pc, #364]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	639a      	str	r2, [r3, #56]	@ 0x38
				ps2.r[1] = 0;	//a
 8001f06:	4b5a      	ldr	r3, [pc, #360]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
				ps2.r[2] = 0;	//s
 8001f0c:	4b58      	ldr	r3, [pc, #352]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
				ps2.r[3] = 0;	//d
 8001f12:	4b57      	ldr	r3, [pc, #348]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	645a      	str	r2, [r3, #68]	@ 0x44
				ps2.r[4] = 0;	//r1
 8001f18:	4b55      	ldr	r3, [pc, #340]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	649a      	str	r2, [r3, #72]	@ 0x48
				ps2.r[5] = 0;	//r2
 8001f1e:	4b54      	ldr	r3, [pc, #336]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	64da      	str	r2, [r3, #76]	@ 0x4c
			}

			if (ps2.ps2RX[0] - 65 == i)
 8001f24:	4b52      	ldr	r3, [pc, #328]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3b41      	subs	r3, #65	@ 0x41
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d106      	bne.n	8001f3e <PS2X_Reader+0x29e>
			{
				ps2.l[i] = 1;
 8001f30:	4a4f      	ldr	r2, [pc, #316]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3314      	adds	r3, #20
 8001f36:	2101      	movs	r1, #1
 8001f38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001f3c:	e00b      	b.n	8001f56 <PS2X_Reader+0x2b6>
			}

			else if (ps2.ps2RX[0] - 73 == i)
 8001f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3b49      	subs	r3, #73	@ 0x49
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d105      	bne.n	8001f56 <PS2X_Reader+0x2b6>
			{
				ps2.r[i] = 1;
 8001f4a:	4a49      	ldr	r2, [pc, #292]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	330e      	adds	r3, #14
 8001f50:	2101      	movs	r1, #1
 8001f52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i =0;i<6;i++)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	ddb8      	ble.n	8001ed4 <PS2X_Reader+0x234>
			}
		}

		//Generate PWM
		if (ps2.l[2] == 1)
 8001f62:	4b43      	ldr	r3, [pc, #268]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d113      	bne.n	8001f92 <PS2X_Reader+0x2f2>
		{
			//Adjust How to decrease(-) Linear position
			ps2.PIDPos -= 0.1;
 8001f6a:	4b41      	ldr	r3, [pc, #260]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fab6 	bl	80004e0 <__aeabi_f2d>
 8001f74:	a33c      	add	r3, pc, #240	@ (adr r3, 8002068 <PS2X_Reader+0x3c8>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe f951 	bl	8000220 <__aeabi_dsub>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fdfb 	bl	8000b80 <__aeabi_d2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a38      	ldr	r2, [pc, #224]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f8e:	6793      	str	r3, [r2, #120]	@ 0x78
 8001f90:	e028      	b.n	8001fe4 <PS2X_Reader+0x344>
//			if (ps2.pwmOut < 0)
//			{
//				ps2.pwmOut = 0;		// to make pwm1 >= 0
//			}
		}
		else if (ps2.l[3] == 1)
 8001f92:	4b37      	ldr	r3, [pc, #220]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d113      	bne.n	8001fc2 <PS2X_Reader+0x322>
		{
			//Adjust How to increase(+) Linear position
			ps2.PIDPos += 0.1;
 8001f9a:	4b35      	ldr	r3, [pc, #212]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fa9e 	bl	80004e0 <__aeabi_f2d>
 8001fa4:	a330      	add	r3, pc, #192	@ (adr r3, 8002068 <PS2X_Reader+0x3c8>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe f93b 	bl	8000224 <__adddf3>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fde3 	bl	8000b80 <__aeabi_d2f>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001fbe:	6793      	str	r3, [r2, #120]	@ 0x78
 8001fc0:	e010      	b.n	8001fe4 <PS2X_Reader+0x344>
//			ps2.pwmOut = ps2.pwmOut + count;	// + PWM with count
		}
		else if (ps2.l[0] == 1)		//Press down button(l1) to PWM out forward
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d00c      	beq.n	8001fe4 <PS2X_Reader+0x344>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else if (ps2.l[1] == 1)		//Press down button(l1) to PWM out backward
 8001fca:	4b29      	ldr	r3, [pc, #164]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d008      	beq.n	8001fe4 <PS2X_Reader+0x344>
		{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
		}
		else if (ps2.r[1] == 1)		//Press X(r1) to stop
 8001fd2:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d004      	beq.n	8001fe4 <PS2X_Reader+0x344>
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);		//Stop
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		}
		else{
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
			MOTOR_set_duty(&MT, 150);
 8001fda:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8002074 <PS2X_Reader+0x3d4>
 8001fde:	4826      	ldr	r0, [pc, #152]	@ (8002078 <PS2X_Reader+0x3d8>)
 8001fe0:	f7ff faea 	bl	80015b8 <MOTOR_set_duty>
		}
	}
	// Floor Selection
	if(base.ShelveMode == 1){
 8001fe4:	4b25      	ldr	r3, [pc, #148]	@ (800207c <PS2X_Reader+0x3dc>)
 8001fe6:	8b1b      	ldrh	r3, [r3, #24]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d136      	bne.n	800205a <PS2X_Reader+0x3ba>
		if (ps2.ps2RX[0] == 71){
 8001fec:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b47      	cmp	r3, #71	@ 0x47
 8001ff2:	d112      	bne.n	800201a <PS2X_Reader+0x37a>
			base.Shelve[ps2.counts-1] = ps2.PIDPos;
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001ff6:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <PS2X_Reader+0x3d0>)
 8001ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ffe:	3b01      	subs	r3, #1
 8002000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002004:	ee17 1a90 	vmov	r1, s15
 8002008:	4a1c      	ldr	r2, [pc, #112]	@ (800207c <PS2X_Reader+0x3dc>)
 800200a:	3306      	adds	r3, #6
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	6059      	str	r1, [r3, #4]
			ps2.counts=  +1;
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <PS2X_Reader+0x3d0>)
 8002014:	2201      	movs	r2, #1
 8002016:	675a      	str	r2, [r3, #116]	@ 0x74
 8002018:	e011      	b.n	800203e <PS2X_Reader+0x39e>
		}
		else if (ps2.ps2RX[0] == 73){
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <PS2X_Reader+0x3d0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b49      	cmp	r3, #73	@ 0x49
 8002020:	d10d      	bne.n	800203e <PS2X_Reader+0x39e>
			base.Shelve[ps2.counts-1] = 0;
 8002022:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <PS2X_Reader+0x3d0>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002026:	3b01      	subs	r3, #1
 8002028:	4a14      	ldr	r2, [pc, #80]	@ (800207c <PS2X_Reader+0x3dc>)
 800202a:	3306      	adds	r3, #6
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	2200      	movs	r2, #0
 8002032:	605a      	str	r2, [r3, #4]
			ps2.counts = ps2.counts -1;
 8002034:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <PS2X_Reader+0x3d0>)
 8002036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002038:	3b01      	subs	r3, #1
 800203a:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <PS2X_Reader+0x3d0>)
 800203c:	6753      	str	r3, [r2, #116]	@ 0x74
		}

		if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1){
 800203e:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <PS2X_Reader+0x3d0>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b48      	cmp	r3, #72	@ 0x48
 8002044:	d109      	bne.n	800205a <PS2X_Reader+0x3ba>
 8002046:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <PS2X_Reader+0x3dc>)
 8002048:	8b1b      	ldrh	r3, [r3, #24]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <PS2X_Reader+0x3ba>
			base.ShelveMode = 0;
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <PS2X_Reader+0x3dc>)
 8002050:	2200      	movs	r2, #0
 8002052:	831a      	strh	r2, [r3, #24]
			registerFrame[0x10].U16 = 0b0000;
 8002054:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <PS2X_Reader+0x3e0>)
 8002056:	2200      	movs	r2, #0
 8002058:	841a      	strh	r2, [r3, #32]
		}
	}
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	9999999a 	.word	0x9999999a
 800206c:	3fb99999 	.word	0x3fb99999
 8002070:	200013c8 	.word	0x200013c8
 8002074:	43160000 	.word	0x43160000
 8002078:	20000ab8 	.word	0x20000ab8
 800207c:	20001380 	.word	0x20001380
 8002080:	200000bc 	.word	0x200000bc

08002084 <Traject_init>:
float Time_acc;
float Time_dec;


void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002090:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <Traject>:

void Traject(Trap_Traj* Traj, float Pos_initial, float Pos_final)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80020d0:	edc7 0a01 	vstr	s1, [r7, #4]

	  Distance = Pos_final - Pos_initial;
 80020d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80020d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80020dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e0:	4bb1      	ldr	r3, [pc, #708]	@ (80023a8 <Traject+0x2e4>)
 80020e2:	edc3 7a00 	vstr	s15, [r3]
	  Time_acc = Traj->Velo_max / Traj->Accel_max;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	edd3 6a00 	vldr	s13, [r3]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80020f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f6:	4bad      	ldr	r3, [pc, #692]	@ (80023ac <Traject+0x2e8>)
 80020f8:	edc3 7a00 	vstr	s15, [r3]
	  Time_dec = Time_acc;
 80020fc:	4bab      	ldr	r3, [pc, #684]	@ (80023ac <Traject+0x2e8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4aab      	ldr	r2, [pc, #684]	@ (80023b0 <Traject+0x2ec>)
 8002102:	6013      	str	r3, [r2, #0]


	  if (Distance >0)
 8002104:	4ba8      	ldr	r3, [pc, #672]	@ (80023a8 <Traject+0x2e4>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002112:	dd23      	ble.n	800215c <Traject+0x98>
			{
		  Acc_max = Traj->Accel_max;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4aa6      	ldr	r2, [pc, #664]	@ (80023b4 <Traject+0x2f0>)
 800211a:	6013      	str	r3, [r2, #0]
		  Vel_max = Traj->Velo_max;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4aa5      	ldr	r2, [pc, #660]	@ (80023b8 <Traject+0x2f4>)
 8002122:	6013      	str	r3, [r2, #0]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8002124:	4ba0      	ldr	r3, [pc, #640]	@ (80023a8 <Traject+0x2e4>)
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	4ba3      	ldr	r3, [pc, #652]	@ (80023b8 <Traject+0x2f4>)
 800212c:	edd3 6a00 	vldr	s13, [r3]
 8002130:	4b9e      	ldr	r3, [pc, #632]	@ (80023ac <Traject+0x2e8>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800213a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800213e:	4b9f      	ldr	r3, [pc, #636]	@ (80023bc <Traject+0x2f8>)
 8002140:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 8002144:	4b9d      	ldr	r3, [pc, #628]	@ (80023bc <Traject+0x2f8>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	4b9b      	ldr	r3, [pc, #620]	@ (80023b8 <Traject+0x2f4>)
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002154:	4b9a      	ldr	r3, [pc, #616]	@ (80023c0 <Traject+0x2fc>)
 8002156:	edc3 7a00 	vstr	s15, [r3]
 800215a:	e032      	b.n	80021c2 <Traject+0xfe>
			}
	  else if(Distance < 0)
 800215c:	4b92      	ldr	r3, [pc, #584]	@ (80023a8 <Traject+0x2e4>)
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	d52a      	bpl.n	80021c2 <Traject+0xfe>
	  {
		  Acc_max = -Traj->Accel_max;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002172:	eef1 7a67 	vneg.f32	s15, s15
 8002176:	4b8f      	ldr	r3, [pc, #572]	@ (80023b4 <Traject+0x2f0>)
 8002178:	edc3 7a00 	vstr	s15, [r3]
		  Vel_max = -Traj->Velo_max;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	eef1 7a67 	vneg.f32	s15, s15
 8002186:	4b8c      	ldr	r3, [pc, #560]	@ (80023b8 <Traject+0x2f4>)
 8002188:	edc3 7a00 	vstr	s15, [r3]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 800218c:	4b86      	ldr	r3, [pc, #536]	@ (80023a8 <Traject+0x2e4>)
 800218e:	ed93 7a00 	vldr	s14, [r3]
 8002192:	4b89      	ldr	r3, [pc, #548]	@ (80023b8 <Traject+0x2f4>)
 8002194:	edd3 6a00 	vldr	s13, [r3]
 8002198:	4b84      	ldr	r3, [pc, #528]	@ (80023ac <Traject+0x2e8>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a6:	4b85      	ldr	r3, [pc, #532]	@ (80023bc <Traject+0x2f8>)
 80021a8:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 80021ac:	4b83      	ldr	r3, [pc, #524]	@ (80023bc <Traject+0x2f8>)
 80021ae:	edd3 6a00 	vldr	s13, [r3]
 80021b2:	4b81      	ldr	r3, [pc, #516]	@ (80023b8 <Traject+0x2f4>)
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021bc:	4b80      	ldr	r3, [pc, #512]	@ (80023c0 <Traject+0x2fc>)
 80021be:	edc3 7a00 	vstr	s15, [r3]
	}
	// Update trajectory phase
	time_ref1 = Time_acc + Time_Velo_const;
 80021c2:	4b7a      	ldr	r3, [pc, #488]	@ (80023ac <Traject+0x2e8>)
 80021c4:	ed93 7a00 	vldr	s14, [r3]
 80021c8:	4b7d      	ldr	r3, [pc, #500]	@ (80023c0 <Traject+0x2fc>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d2:	4b7c      	ldr	r3, [pc, #496]	@ (80023c4 <Traject+0x300>)
 80021d4:	edc3 7a00 	vstr	s15, [r3]
	time_ref2 = time_ref1 + Time_dec;
 80021d8:	4b7a      	ldr	r3, [pc, #488]	@ (80023c4 <Traject+0x300>)
 80021da:	ed93 7a00 	vldr	s14, [r3]
 80021de:	4b74      	ldr	r3, [pc, #464]	@ (80023b0 <Traject+0x2ec>)
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e8:	4b77      	ldr	r3, [pc, #476]	@ (80023c8 <Traject+0x304>)
 80021ea:	edc3 7a00 	vstr	s15, [r3]
	if(Time_Velo_const >0)
 80021ee:	4b74      	ldr	r3, [pc, #464]	@ (80023c0 <Traject+0x2fc>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fc:	f340 80cb 	ble.w	8002396 <Traject+0x2d2>
	{
//		Time_acc_under = sqrt(Distance/Acc_max);
		if (elapsedTime < Time_acc)
 8002200:	4b72      	ldr	r3, [pc, #456]	@ (80023cc <Traject+0x308>)
 8002202:	ed93 7a00 	vldr	s14, [r3]
 8002206:	4b69      	ldr	r3, [pc, #420]	@ (80023ac <Traject+0x2e8>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002214:	d52f      	bpl.n	8002276 <Traject+0x1b2>
		{
			// Acceleration phase
			Traj->currentAcceleration = Acc_max;
 8002216:	4b67      	ldr	r3, [pc, #412]	@ (80023b4 <Traject+0x2f0>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 800221e:	4b65      	ldr	r3, [pc, #404]	@ (80023b4 <Traject+0x2f0>)
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	4b69      	ldr	r3, [pc, #420]	@ (80023cc <Traject+0x308>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = 0.5f * Acc_max * elapsedTime * elapsedTime + Pos_initial;
 8002234:	4b5f      	ldr	r3, [pc, #380]	@ (80023b4 <Traject+0x2f0>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800223e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002242:	4b62      	ldr	r3, [pc, #392]	@ (80023cc <Traject+0x308>)
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800224c:	4b5f      	ldr	r3, [pc, #380]	@ (80023cc <Traject+0x308>)
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002256:	edd7 7a02 	vldr	s15, [r7, #8]
 800225a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a59      	ldr	r2, [pc, #356]	@ (80023d0 <Traject+0x30c>)
 800226a:	6013      	str	r3, [r2, #0]
			temp_pos_const = Traj->currentPosition;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a58      	ldr	r2, [pc, #352]	@ (80023d4 <Traject+0x310>)
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e08f      	b.n	8002396 <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref1 )
 8002276:	4b55      	ldr	r3, [pc, #340]	@ (80023cc <Traject+0x308>)
 8002278:	ed93 7a00 	vldr	s14, [r3]
 800227c:	4b51      	ldr	r3, [pc, #324]	@ (80023c4 <Traject+0x300>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	d521      	bpl.n	80022d0 <Traject+0x20c>
		{
			// Constant velocity phase
			Traj->currentAcceleration = 0;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Vel_max;
 8002294:	4b48      	ldr	r3, [pc, #288]	@ (80023b8 <Traject+0x2f4>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	60da      	str	r2, [r3, #12]
			Traj->currentPosition = (Vel_max * (elapsedTime-Time_acc)) + temp_pos_acc;
 800229c:	4b4b      	ldr	r3, [pc, #300]	@ (80023cc <Traject+0x308>)
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	4b42      	ldr	r3, [pc, #264]	@ (80023ac <Traject+0x2e8>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ac:	4b42      	ldr	r3, [pc, #264]	@ (80023b8 <Traject+0x2f4>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b6:	4b46      	ldr	r3, [pc, #280]	@ (80023d0 <Traject+0x30c>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_const = Traj->currentPosition;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4a42      	ldr	r2, [pc, #264]	@ (80023d4 <Traject+0x310>)
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e062      	b.n	8002396 <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref2)
 80022d0:	4b3e      	ldr	r3, [pc, #248]	@ (80023cc <Traject+0x308>)
 80022d2:	ed93 7a00 	vldr	s14, [r3]
 80022d6:	4b3c      	ldr	r3, [pc, #240]	@ (80023c8 <Traject+0x304>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	d54f      	bpl.n	8002386 <Traject+0x2c2>
		{
			// Deceleration phase
			Traj->currentAcceleration = -Acc_max;
 80022e6:	4b33      	ldr	r3, [pc, #204]	@ (80023b4 <Traject+0x2f0>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	eef1 7a67 	vneg.f32	s15, s15
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = -(Acc_max * (elapsedTime-time_ref1)) + Vel_max;
 80022f6:	4b30      	ldr	r3, [pc, #192]	@ (80023b8 <Traject+0x2f4>)
 80022f8:	ed93 7a00 	vldr	s14, [r3]
 80022fc:	4b33      	ldr	r3, [pc, #204]	@ (80023cc <Traject+0x308>)
 80022fe:	edd3 6a00 	vldr	s13, [r3]
 8002302:	4b30      	ldr	r3, [pc, #192]	@ (80023c4 <Traject+0x300>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800230c:	4b29      	ldr	r3, [pc, #164]	@ (80023b4 <Traject+0x2f0>)
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Traj->currentVelocity*(elapsedTime-time_ref1)+(0.5f*Acc_max*(elapsedTime-time_ref1)*(elapsedTime-time_ref1))+temp_pos_const ;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	ed93 7a03 	vldr	s14, [r3, #12]
 8002326:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <Traject+0x308>)
 8002328:	edd3 6a00 	vldr	s13, [r3]
 800232c:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <Traject+0x300>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233a:	4b1e      	ldr	r3, [pc, #120]	@ (80023b4 <Traject+0x2f0>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002344:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002348:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <Traject+0x308>)
 800234a:	ed93 6a00 	vldr	s12, [r3]
 800234e:	4b1d      	ldr	r3, [pc, #116]	@ (80023c4 <Traject+0x300>)
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002358:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800235c:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <Traject+0x308>)
 800235e:	ed93 6a00 	vldr	s12, [r3]
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <Traject+0x300>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee76 7a67 	vsub.f32	s15, s12, s15
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002374:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <Traject+0x310>)
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	edc3 7a02 	vstr	s15, [r3, #8]
 8002384:	e007      	b.n	8002396 <Traject+0x2d2>
		}
		else {
			// Trajectory complete
			Traj->currentAcceleration = 0.0f;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
//			elapsedTime = 0.0f;
		}
	}
	if (Time_Velo_const <= 0)
 8002396:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <Traject+0x2fc>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	d918      	bls.n	80023d8 <Traject+0x314>

		}


	}
}
 80023a6:	e0d2      	b.n	800254e <Traject+0x48a>
 80023a8:	20000284 	.word	0x20000284
 80023ac:	20000288 	.word	0x20000288
 80023b0:	2000028c 	.word	0x2000028c
 80023b4:	2000025c 	.word	0x2000025c
 80023b8:	20000260 	.word	0x20000260
 80023bc:	20000264 	.word	0x20000264
 80023c0:	20000268 	.word	0x20000268
 80023c4:	2000027c 	.word	0x2000027c
 80023c8:	20000280 	.word	0x20000280
 80023cc:	20001454 	.word	0x20001454
 80023d0:	20000270 	.word	0x20000270
 80023d4:	20000274 	.word	0x20000274
		Time_acc_under = sqrt(Distance/Acc_max);
 80023d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002558 <Traject+0x494>)
 80023da:	ed93 7a00 	vldr	s14, [r3]
 80023de:	4b5f      	ldr	r3, [pc, #380]	@ (800255c <Traject+0x498>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023e8:	ee16 0a90 	vmov	r0, s13
 80023ec:	f7fe f878 	bl	80004e0 <__aeabi_f2d>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	ec43 2b10 	vmov	d0, r2, r3
 80023f8:	f007 f9ac 	bl	8009754 <sqrt>
 80023fc:	ec53 2b10 	vmov	r2, r3, d0
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fbbc 	bl	8000b80 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	4a55      	ldr	r2, [pc, #340]	@ (8002560 <Traject+0x49c>)
 800240c:	6013      	str	r3, [r2, #0]
		if (elapsedTime < Time_acc_under)
 800240e:	4b55      	ldr	r3, [pc, #340]	@ (8002564 <Traject+0x4a0>)
 8002410:	ed93 7a00 	vldr	s14, [r3]
 8002414:	4b52      	ldr	r3, [pc, #328]	@ (8002560 <Traject+0x49c>)
 8002416:	edd3 7a00 	vldr	s15, [r3]
 800241a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	d52f      	bpl.n	8002484 <Traject+0x3c0>
			Traj->currentAcceleration = Acc_max;
 8002424:	4b4d      	ldr	r3, [pc, #308]	@ (800255c <Traject+0x498>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 800242c:	4b4b      	ldr	r3, [pc, #300]	@ (800255c <Traject+0x498>)
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	4b4c      	ldr	r3, [pc, #304]	@ (8002564 <Traject+0x4a0>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Pos_initial + 0.5f * Acc_max * elapsedTime * elapsedTime;
 8002442:	4b46      	ldr	r3, [pc, #280]	@ (800255c <Traject+0x498>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800244c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002450:	4b44      	ldr	r3, [pc, #272]	@ (8002564 <Traject+0x4a0>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245a:	4b42      	ldr	r3, [pc, #264]	@ (8002564 <Traject+0x4a0>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002464:	edd7 7a02 	vldr	s15, [r7, #8]
 8002468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	4a3c      	ldr	r2, [pc, #240]	@ (8002568 <Traject+0x4a4>)
 8002478:	6013      	str	r3, [r2, #0]
			temp_velo_acc = Traj->currentVelocity;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	4a3b      	ldr	r2, [pc, #236]	@ (800256c <Traject+0x4a8>)
 8002480:	6013      	str	r3, [r2, #0]
}
 8002482:	e064      	b.n	800254e <Traject+0x48a>
		else if (elapsedTime < 2*Time_acc_under)
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <Traject+0x49c>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800248e:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <Traject+0x4a0>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	dd4f      	ble.n	800253e <Traject+0x47a>
			Traj->currentAcceleration = -Acc_max;
 800249e:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <Traject+0x498>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	eef1 7a67 	vneg.f32	s15, s15
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = temp_velo_acc - Acc_max*(elapsedTime-Time_acc_under);
 80024ae:	4b2f      	ldr	r3, [pc, #188]	@ (800256c <Traject+0x4a8>)
 80024b0:	ed93 7a00 	vldr	s14, [r3]
 80024b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002564 <Traject+0x4a0>)
 80024b6:	edd3 6a00 	vldr	s13, [r3]
 80024ba:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <Traject+0x49c>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024c4:	4b25      	ldr	r3, [pc, #148]	@ (800255c <Traject+0x498>)
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = temp_pos_acc + Traj->currentVelocity *(elapsedTime-Time_acc_under)+(0.5f*Acc_max*(elapsedTime-Time_acc_under)*(elapsedTime-Time_acc_under));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	ed93 7a03 	vldr	s14, [r3, #12]
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <Traject+0x4a0>)
 80024e0:	edd3 6a00 	vldr	s13, [r3]
 80024e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <Traject+0x49c>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <Traject+0x4a4>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024fc:	4b17      	ldr	r3, [pc, #92]	@ (800255c <Traject+0x498>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002506:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800250a:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <Traject+0x4a0>)
 800250c:	ed93 6a00 	vldr	s12, [r3]
 8002510:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <Traject+0x49c>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ee76 7a67 	vsub.f32	s15, s12, s15
 800251a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <Traject+0x4a0>)
 8002520:	ed93 6a00 	vldr	s12, [r3]
 8002524:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <Traject+0x49c>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800252e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800253c:	e007      	b.n	800254e <Traject+0x48a>
			Traj->currentAcceleration = 0.0f;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000284 	.word	0x20000284
 800255c:	2000025c 	.word	0x2000025c
 8002560:	2000026c 	.word	0x2000026c
 8002564:	20001454 	.word	0x20001454
 8002568:	20000270 	.word	0x20000270
 800256c:	20000278 	.word	0x20000278

08002570 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter){
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b0b4      	sub	sp, #208	@ 0xd0
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	filter->Q = 0.8f; //0.05
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a42      	ldr	r2, [pc, #264]	@ (8002684 <Kalman_Start+0x114>)
 800257c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002586:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t a[16] = {1.0f, 0.000982689988788924f, -0.644498552609241f, 0.00685085398621353f,
 800258a:	4b3f      	ldr	r3, [pc, #252]	@ (8002688 <Kalman_Start+0x118>)
 800258c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8002590:	461d      	mov	r5, r3
 8002592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800259a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800259c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800259e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                   0.0f, 0.952182328510902f,   -1278.31254883175f, 11.5838211960474f,
	                   0.0f, 0.0f   ,   1.0f  , 0.0f,
	                   0.0f,-0.00424045081249977f, 3.26231142200644f, 0.322011138740237f};

	float32_t b[4] = {0.00117912763553818f,
 80025a6:	4b39      	ldr	r3, [pc, #228]	@ (800268c <Kalman_Start+0x11c>)
 80025a8:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80025ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						3.26231142200644f,
						0.0f,
						0.290474685267255f};

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80025bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	67bb      	str	r3, [r7, #120]	@ 0x78

	float32_t g[4] = {0.0f,
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025d0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80025d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	667b      	str	r3, [r7, #100]	@ 0x64
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	66bb      	str	r3, [r7, #104]	@ 0x68
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80025e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <Kalman_Start+0x120>)
 80025e4:	f107 041c 	add.w	r4, r7, #28
 80025e8:	461d      	mov	r5, r3
 80025ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800261c:	e029      	b.n	8002672 <Kalman_Start+0x102>
	{
		filter->A[i] = a[i];
 800261e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	33d0      	adds	r3, #208	@ 0xd0
 8002626:	443b      	add	r3, r7
 8002628:	3b44      	subs	r3, #68	@ 0x44
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002632:	3314      	adds	r3, #20
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800263a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	33d0      	adds	r3, #208	@ 0xd0
 8002642:	443b      	add	r3, r7
 8002644:	3bb4      	subs	r3, #180	@ 0xb4
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800264e:	3398      	adds	r3, #152	@ 0x98
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800265c:	3304      	adds	r3, #4
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800266c:	3301      	adds	r3, #1
 800266e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002676:	2b0f      	cmp	r3, #15
 8002678:	ddd1      	ble.n	800261e <Kalman_Start+0xae>
	}

	for(i=0;i<4;i++)
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002680:	e044      	b.n	800270c <Kalman_Start+0x19c>
 8002682:	bf00      	nop
 8002684:	3f4ccccd 	.word	0x3f4ccccd
 8002688:	08009978 	.word	0x08009978
 800268c:	080099b8 	.word	0x080099b8
 8002690:	080099c8 	.word	0x080099c8
	{
		filter->X_k[i] = x_k[i];
 8002694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	33d0      	adds	r3, #208	@ 0xd0
 800269c:	443b      	add	r3, r7
 800269e:	3bc4      	subs	r3, #196	@ 0xc4
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	601a      	str	r2, [r3, #0]
		filter->B[i] = b[i];
 80026ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	33d0      	adds	r3, #208	@ 0xd0
 80026b6:	443b      	add	r3, r7
 80026b8:	3b54      	subs	r3, #84	@ 0x54
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026c2:	3324      	adds	r3, #36	@ 0x24
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80026ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	33d0      	adds	r3, #208	@ 0xd0
 80026d2:	443b      	add	r3, r7
 80026d4:	3b64      	subs	r3, #100	@ 0x64
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026de:	3328      	adds	r3, #40	@ 0x28
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80026e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	33d0      	adds	r3, #208	@ 0xd0
 80026ee:	443b      	add	r3, r7
 80026f0:	3b74      	subs	r3, #116	@ 0x74
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026fa:	332c      	adds	r3, #44	@ 0x2c
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002706:	3301      	adds	r3, #1
 8002708:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800270c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002710:	2b03      	cmp	r3, #3
 8002712:	ddbf      	ble.n	8002694 <Kalman_Start+0x124>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	2104      	movs	r1, #4
 8002720:	f006 ffce 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3310      	adds	r3, #16
 800272e:	2204      	movs	r2, #4
 8002730:	2104      	movs	r1, #4
 8002732:	f006 ffc5 	bl	80096c0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3350      	adds	r3, #80	@ 0x50
 8002740:	2204      	movs	r2, #4
 8002742:	2104      	movs	r1, #4
 8002744:	f006 ffbc 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3390      	adds	r3, #144	@ 0x90
 8002752:	2201      	movs	r2, #1
 8002754:	2104      	movs	r1, #4
 8002756:	f006 ffb3 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	33a0      	adds	r3, #160	@ 0xa0
 8002764:	2204      	movs	r2, #4
 8002766:	2101      	movs	r1, #1
 8002768:	f006 ffaa 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	33b0      	adds	r3, #176	@ 0xb0
 8002776:	2201      	movs	r2, #1
 8002778:	2104      	movs	r1, #4
 800277a:	f006 ffa1 	bl	80096c0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	33c8      	adds	r3, #200	@ 0xc8
 8002788:	2204      	movs	r2, #4
 800278a:	2104      	movs	r1, #4
 800278c:	f006 ff98 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800279c:	2201      	movs	r2, #1
 800279e:	2104      	movs	r1, #4
 80027a0:	f006 ff8e 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80027b0:	2204      	movs	r2, #4
 80027b2:	2101      	movs	r1, #1
 80027b4:	f006 ff84 	bl	80096c0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80027c4:	2204      	movs	r2, #4
 80027c6:	2104      	movs	r1, #4
 80027c8:	f006 ff7a 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80027d8:	2204      	movs	r2, #4
 80027da:	2104      	movs	r1, #4
 80027dc:	f006 ff70 	bl	80096c0 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80027ec:	2201      	movs	r2, #1
 80027ee:	2104      	movs	r1, #4
 80027f0:	f006 ff66 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002800:	2201      	movs	r2, #1
 8002802:	2104      	movs	r1, #4
 8002804:	f006 ff5c 	bl	80096c0 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002814:	2204      	movs	r2, #4
 8002816:	2101      	movs	r1, #1
 8002818:	f006 ff52 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002828:	2201      	movs	r2, #1
 800282a:	2101      	movs	r1, #1
 800282c:	f006 ff48 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800283c:	2201      	movs	r2, #1
 800283e:	2101      	movs	r1, #1
 8002840:	f006 ff3e 	bl	80096c0 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002850:	2201      	movs	r2, #1
 8002852:	2104      	movs	r1, #4
 8002854:	f006 ff34 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002864:	2201      	movs	r2, #1
 8002866:	2104      	movs	r1, #4
 8002868:	f006 ff2a 	bl	80096c0 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002878:	2201      	movs	r2, #1
 800287a:	2101      	movs	r1, #1
 800287c:	f006 ff20 	bl	80096c0 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800288c:	2201      	movs	r2, #1
 800288e:	2101      	movs	r1, #1
 8002890:	f006 ff16 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80028a0:	2201      	movs	r2, #1
 80028a2:	2101      	movs	r1, #1
 80028a4:	f006 ff0c 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80028b4:	2201      	movs	r2, #1
 80028b6:	2104      	movs	r1, #4
 80028b8:	f006 ff02 	bl	80096c0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028c8:	2201      	movs	r2, #1
 80028ca:	2101      	movs	r1, #1
 80028cc:	f006 fef8 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028dc:	2204      	movs	r2, #4
 80028de:	2104      	movs	r1, #4
 80028e0:	f006 feee 	bl	80096c0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	33c4      	adds	r3, #196	@ 0xc4
 80028ee:	2201      	movs	r2, #1
 80028f0:	2101      	movs	r1, #1
 80028f2:	f006 fee5 	bl	80096c0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002902:	2201      	movs	r2, #1
 8002904:	2101      	movs	r1, #1
 8002906:	f006 fedb 	bl	80096c0 <arm_mat_init_f32>
}
 800290a:	bf00      	nop
 800290c:	37d0      	adds	r7, #208	@ 0xd0
 800290e:	46bd      	mov	sp, r7
 8002910:	bdb0      	pop	{r4, r5, r7, pc}
 8002912:	bf00      	nop
 8002914:	0000      	movs	r0, r0
	...

08002918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800291c:	b088      	sub	sp, #32
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002920:	f001 f899 	bl	8003a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002924:	f000 f92e 	bl	8002b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002928:	f000 fc74 	bl	8003214 <MX_GPIO_Init>
  MX_DMA_Init();
 800292c:	f000 fc40 	bl	80031b0 <MX_DMA_Init>
  MX_TIM2_Init();
 8002930:	f000 f9c8 	bl	8002cc4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002934:	f000 faee 	bl	8002f14 <MX_TIM5_Init>
  MX_TIM3_Init();
 8002938:	f000 fa18 	bl	8002d6c <MX_TIM3_Init>
  MX_TIM4_Init();
 800293c:	f000 fa9c 	bl	8002e78 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002940:	f000 f96c 	bl	8002c1c <MX_TIM1_Init>
  MX_TIM6_Init();
 8002944:	f000 fb34 	bl	8002fb0 <MX_TIM6_Init>
  MX_TIM16_Init();
 8002948:	f000 fb68 	bl	800301c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800294c:	f000 fbe2 	bl	8003114 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002950:	f000 fb94 	bl	800307c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

HAL_TIM_Base_Start_IT(&htim5);
 8002954:	4870      	ldr	r0, [pc, #448]	@ (8002b18 <main+0x200>)
 8002956:	f002 ffff 	bl	8005958 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim4);
 800295a:	4870      	ldr	r0, [pc, #448]	@ (8002b1c <main+0x204>)
 800295c:	f002 fffc 	bl	8005958 <HAL_TIM_Base_Start_IT>

HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 8002960:	486f      	ldr	r0, [pc, #444]	@ (8002b20 <main+0x208>)
 8002962:	f002 ff89 	bl	8005878 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim3);					// Output compare
 8002966:	486f      	ldr	r0, [pc, #444]	@ (8002b24 <main+0x20c>)
 8002968:	f002 ff86 	bl	8005878 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim6);					// Trajectory trigger
 800296c:	486e      	ldr	r0, [pc, #440]	@ (8002b28 <main+0x210>)
 800296e:	f002 ff83 	bl	8005878 <HAL_TIM_Base_Start>


//float PID_pos_K[3] = {0.01 ,0.0, 0};
float PID_pos_K[3] = {4.5 ,0.00000000495, 0};
 8002972:	4a6e      	ldr	r2, [pc, #440]	@ (8002b2c <main+0x214>)
 8002974:	f107 030c 	add.w	r3, r7, #12
 8002978:	ca07      	ldmia	r2, {r0, r1, r2}
 800297a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

//float PID_velo_K[3] = {3.35 ,0.050, 0.001};
float PID_velo_K[3] = {3.35 ,0.050, 0.001};
 800297e:	4a6c      	ldr	r2, [pc, #432]	@ (8002b30 <main+0x218>)
 8002980:	463b      	mov	r3, r7
 8002982:	ca07      	ldmia	r2, {r0, r1, r2}
 8002984:	e883 0007 	stmia.w	r3, {r0, r1, r2}

// Initialize ASRS
Traject_init(&Traj,450, 500);				// V_max, A_max
 8002988:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 8002b34 <main+0x21c>
 800298c:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 8002b38 <main+0x220>
 8002990:	486a      	ldr	r0, [pc, #424]	@ (8002b3c <main+0x224>)
 8002992:	f7ff fb77 	bl	8002084 <Traject_init>
Kalman_Start(&Vel_filtered);
 8002996:	486a      	ldr	r0, [pc, #424]	@ (8002b40 <main+0x228>)
 8002998:	f7ff fdea 	bl	8002570 <Kalman_Start>
AMT_encoder_init(&AMT, &htim2);
 800299c:	4960      	ldr	r1, [pc, #384]	@ (8002b20 <main+0x208>)
 800299e:	4869      	ldr	r0, [pc, #420]	@ (8002b44 <main+0x22c>)
 80029a0:	f7fe fc11 	bl	80011c6 <AMT_encoder_init>
MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 80029a4:	2300      	movs	r3, #0
 80029a6:	2204      	movs	r2, #4
 80029a8:	495e      	ldr	r1, [pc, #376]	@ (8002b24 <main+0x20c>)
 80029aa:	4867      	ldr	r0, [pc, #412]	@ (8002b48 <main+0x230>)
 80029ac:	f7fe fde0 	bl	8001570 <MOTOR_init>
PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 80029b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80029b8:	edd7 6a05 	vldr	s13, [r7, #20]
 80029bc:	eeb0 1a66 	vmov.f32	s2, s13
 80029c0:	eef0 0a47 	vmov.f32	s1, s14
 80029c4:	eeb0 0a67 	vmov.f32	s0, s15
 80029c8:	4860      	ldr	r0, [pc, #384]	@ (8002b4c <main+0x234>)
 80029ca:	f7ff f86d 	bl	8001aa8 <PID_controller_init>
PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 80029ce:	edd7 7a00 	vldr	s15, [r7]
 80029d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80029d6:	edd7 6a03 	vldr	s13, [r7, #12]
 80029da:	eeb0 1a66 	vmov.f32	s2, s13
 80029de:	eef0 0a47 	vmov.f32	s1, s14
 80029e2:	eeb0 0a67 	vmov.f32	s0, s15
 80029e6:	485a      	ldr	r0, [pc, #360]	@ (8002b50 <main+0x238>)
 80029e8:	f7ff f85e 	bl	8001aa8 <PID_controller_init>
Base_init(&base);
 80029ec:	4859      	ldr	r0, [pc, #356]	@ (8002b54 <main+0x23c>)
 80029ee:	f7fe fb9d 	bl	800112c <Base_init>
PS2_init(&ps2);
 80029f2:	4859      	ldr	r0, [pc, #356]	@ (8002b58 <main+0x240>)
 80029f4:	f7ff f91e 	bl	8001c34 <PS2_init>

// Modbus & Joystick
hmodbus.huart = &huart2;
 80029f8:	4b58      	ldr	r3, [pc, #352]	@ (8002b5c <main+0x244>)
 80029fa:	4a59      	ldr	r2, [pc, #356]	@ (8002b60 <main+0x248>)
 80029fc:	60da      	str	r2, [r3, #12]
hmodbus.htim = &htim16;
 80029fe:	4b57      	ldr	r3, [pc, #348]	@ (8002b5c <main+0x244>)
 8002a00:	4a58      	ldr	r2, [pc, #352]	@ (8002b64 <main+0x24c>)
 8002a02:	611a      	str	r2, [r3, #16]
hmodbus.slaveAddress = 0x15;
 8002a04:	4b55      	ldr	r3, [pc, #340]	@ (8002b5c <main+0x244>)
 8002a06:	2215      	movs	r2, #21
 8002a08:	701a      	strb	r2, [r3, #0]
hmodbus.RegisterSize =200;
 8002a0a:	4b54      	ldr	r3, [pc, #336]	@ (8002b5c <main+0x244>)
 8002a0c:	22c8      	movs	r2, #200	@ 0xc8
 8002a0e:	609a      	str	r2, [r3, #8]
Modbus_init(&hmodbus, registerFrame);
 8002a10:	4955      	ldr	r1, [pc, #340]	@ (8002b68 <main+0x250>)
 8002a12:	4852      	ldr	r0, [pc, #328]	@ (8002b5c <main+0x244>)
 8002a14:	f7fe fd56 	bl	80014c4 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp =0;
	  int64_t currentTime = HAL_GetTick();
 8002a18:	f001 f882 	bl	8003b20 <HAL_GetTick>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2200      	movs	r2, #0
 8002a20:	4698      	mov	r8, r3
 8002a22:	4691      	mov	r9, r2
 8002a24:	e9c7 8906 	strd	r8, r9, [r7, #24]
	  if(currentTime > timestamp)
 8002a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a2c:	494f      	ldr	r1, [pc, #316]	@ (8002b6c <main+0x254>)
 8002a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a32:	4290      	cmp	r0, r2
 8002a34:	eb71 0303 	sbcs.w	r3, r1, r3
 8002a38:	d211      	bcs.n	8002a5e <main+0x146>
	  {
	  timestamp =currentTime + 1;//ms
 8002a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a3e:	1c54      	adds	r4, r2, #1
 8002a40:	f143 0500 	adc.w	r5, r3, #0
 8002a44:	4622      	mov	r2, r4
 8002a46:	462b      	mov	r3, r5
 8002a48:	4948      	ldr	r1, [pc, #288]	@ (8002b6c <main+0x254>)
 8002a4a:	e9c1 2300 	strd	r2, r3, [r1]
	  AMT_encoder_update(&AMT, &htim2, micros());
 8002a4e:	f000 fc6d 	bl	800332c <micros>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4932      	ldr	r1, [pc, #200]	@ (8002b20 <main+0x208>)
 8002a58:	483a      	ldr	r0, [pc, #232]	@ (8002b44 <main+0x22c>)
 8002a5a:	f7fe fbcd 	bl	80011f8 <AMT_encoder_update>
	  }
	  if(ppp == 1)
 8002a5e:	4b44      	ldr	r3, [pc, #272]	@ (8002b70 <main+0x258>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d125      	bne.n	8002ab2 <main+0x19a>
	  {
		  if (__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET)
 8002a66:	4b30      	ldr	r3, [pc, #192]	@ (8002b28 <main+0x210>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d11e      	bne.n	8002ab2 <main+0x19a>
			 {
				 // Clear the update flag
				 __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8002a74:	4b2c      	ldr	r3, [pc, #176]	@ (8002b28 <main+0x210>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0201 	mvn.w	r2, #1
 8002a7c:	611a      	str	r2, [r3, #16]
				 elapsedTime += 0.00001;
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b74 <main+0x25c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd2c 	bl	80004e0 <__aeabi_f2d>
 8002a88:	a321      	add	r3, pc, #132	@ (adr r3, 8002b10 <main+0x1f8>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fbc9 	bl	8000224 <__adddf3>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f871 	bl	8000b80 <__aeabi_d2f>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4a34      	ldr	r2, [pc, #208]	@ (8002b74 <main+0x25c>)
 8002aa2:	6013      	str	r3, [r2, #0]
				 Traject(&Traj, 0.0, 600.0);
 8002aa4:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8002b78 <main+0x260>
 8002aa8:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8002b7c <main+0x264>
 8002aac:	4823      	ldr	r0, [pc, #140]	@ (8002b3c <main+0x224>)
 8002aae:	f7ff fb09 	bl	80020c4 <Traject>
			}
	  }

	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 8002ab2:	230a      	movs	r3, #10
 8002ab4:	220a      	movs	r2, #10
 8002ab6:	4928      	ldr	r1, [pc, #160]	@ (8002b58 <main+0x240>)
 8002ab8:	4831      	ldr	r0, [pc, #196]	@ (8002b80 <main+0x268>)
 8002aba:	f005 f83f 	bl	8007b3c <HAL_UART_Receive>
	  if(ps2.ps2RX[0] == 74){
 8002abe:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <main+0x240>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b4a      	cmp	r3, #74	@ 0x4a
 8002ac4:	d102      	bne.n	8002acc <main+0x1b4>
		  ps2.stop = 1;
 8002ac6:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <main+0x240>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	671a      	str	r2, [r3, #112]	@ 0x70
	  }
	  if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 8002acc:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <main+0x240>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d113      	bne.n	8002afc <main+0x1e4>
 8002ad4:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <main+0x240>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b4b      	cmp	r3, #75	@ 0x4b
 8002ada:	d10f      	bne.n	8002afc <main+0x1e4>
		  ps2.stop = 0;
 8002adc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <main+0x240>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	671a      	str	r2, [r3, #112]	@ 0x70
		  ps2.pwmOut = 150;
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <main+0x240>)
 8002ae4:	2296      	movs	r2, #150	@ 0x96
 8002ae6:	669a      	str	r2, [r3, #104]	@ 0x68
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ps2.pwmOut);		//Stop and Holf Position
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <main+0x240>)
 8002aea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002aec:	4b0d      	ldr	r3, [pc, #52]	@ (8002b24 <main+0x20c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002af2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <main+0x20c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002afa:	e005      	b.n	8002b08 <main+0x1f0>

	  }
	  else if(ps2.stop == 0){
 8002afc:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <main+0x240>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d189      	bne.n	8002a18 <main+0x100>
		  PS2X_Reader();
 8002b04:	f7ff f8cc 	bl	8001ca0 <PS2X_Reader>
  {
 8002b08:	e786      	b.n	8002a18 <main+0x100>
 8002b0a:	bf00      	nop
 8002b0c:	f3af 8000 	nop.w
 8002b10:	88e368f1 	.word	0x88e368f1
 8002b14:	3ee4f8b5 	.word	0x3ee4f8b5
 8002b18:	200005c0 	.word	0x200005c0
 8002b1c:	200004f4 	.word	0x200004f4
 8002b20:	2000035c 	.word	0x2000035c
 8002b24:	20000428 	.word	0x20000428
 8002b28:	2000068c 	.word	0x2000068c
 8002b2c:	08009a08 	.word	0x08009a08
 8002b30:	08009a14 	.word	0x08009a14
 8002b34:	43fa0000 	.word	0x43fa0000
 8002b38:	43e10000 	.word	0x43e10000
 8002b3c:	20000b14 	.word	0x20000b14
 8002b40:	20000b28 	.word	0x20000b28
 8002b44:	20000a80 	.word	0x20000a80
 8002b48:	20000ab8 	.word	0x20000ab8
 8002b4c:	20000adc 	.word	0x20000adc
 8002b50:	20000af8 	.word	0x20000af8
 8002b54:	20001380 	.word	0x20001380
 8002b58:	200013c8 	.word	0x200013c8
 8002b5c:	20000ea8 	.word	0x20000ea8
 8002b60:	200008f0 	.word	0x200008f0
 8002b64:	20000758 	.word	0x20000758
 8002b68:	200000bc 	.word	0x200000bc
 8002b6c:	20001458 	.word	0x20001458
 8002b70:	20001450 	.word	0x20001450
 8002b74:	20001454 	.word	0x20001454
 8002b78:	44160000 	.word	0x44160000
 8002b7c:	00000000 	.word	0x00000000
 8002b80:	20000824 	.word	0x20000824

08002b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b094      	sub	sp, #80	@ 0x50
 8002b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b8a:	f107 0318 	add.w	r3, r7, #24
 8002b8e:	2238      	movs	r2, #56	@ 0x38
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f006 fdac 	bl	80096f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f001 fdd2 	bl	8004750 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bac:	2302      	movs	r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bb6:	2340      	movs	r3, #64	@ 0x40
 8002bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002bc6:	2355      	movs	r3, #85	@ 0x55
 8002bc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd6:	f107 0318 	add.w	r3, r7, #24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 fe6c 	bl	80048b8 <HAL_RCC_OscConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002be6:	f000 fc35 	bl	8003454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bea:	230f      	movs	r3, #15
 8002bec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	2104      	movs	r1, #4
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 f96a 	bl	8004edc <HAL_RCC_ClockConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002c0e:	f000 fc21 	bl	8003454 <Error_Handler>
  }
}
 8002c12:	bf00      	nop
 8002c14:	3750      	adds	r7, #80	@ 0x50
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c22:	f107 0310 	add.w	r3, r7, #16
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c3a:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002c3c:	4a20      	ldr	r2, [pc, #128]	@ (8002cc0 <MX_TIM1_Init+0xa4>)
 8002c3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c40:	4b1e      	ldr	r3, [pc, #120]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c46:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c5a:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c60:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c66:	4815      	ldr	r0, [pc, #84]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002c68:	f002 fda2 	bl	80057b0 <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002c72:	f000 fbef 	bl	8003454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	4619      	mov	r1, r3
 8002c82:	480e      	ldr	r0, [pc, #56]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002c84:	f003 fd74 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002c8e:	f000 fbe1 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4806      	ldr	r0, [pc, #24]	@ (8002cbc <MX_TIM1_Init+0xa0>)
 8002ca4:	f004 fd4a 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002cae:	f000 fbd1 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002cb2:	bf00      	nop
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000290 	.word	0x20000290
 8002cc0:	40012c00 	.word	0x40012c00

08002cc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	@ 0x30
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	2224      	movs	r2, #36	@ 0x24
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f006 fd0c 	bl	80096f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd8:	463b      	mov	r3, r7
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ce2:	4b21      	ldr	r3, [pc, #132]	@ (8002d68 <MX_TIM2_Init+0xa4>)
 8002ce4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ce8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cea:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <MX_TIM2_Init+0xa4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <MX_TIM2_Init+0xa4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <MX_TIM2_Init+0xa4>)
 8002cf8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002cfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <MX_TIM2_Init+0xa4>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d04:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <MX_TIM2_Init+0xa4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d22:	2301      	movs	r3, #1
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	4619      	mov	r1, r3
 8002d34:	480c      	ldr	r0, [pc, #48]	@ (8002d68 <MX_TIM2_Init+0xa4>)
 8002d36:	f003 f94b 	bl	8005fd0 <HAL_TIM_Encoder_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002d40:	f000 fb88 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4805      	ldr	r0, [pc, #20]	@ (8002d68 <MX_TIM2_Init+0xa4>)
 8002d52:	f004 fcf3 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002d5c:	f000 fb7a 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d60:	bf00      	nop
 8002d62:	3730      	adds	r7, #48	@ 0x30
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	2000035c 	.word	0x2000035c

08002d6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08e      	sub	sp, #56	@ 0x38
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	611a      	str	r2, [r3, #16]
 8002d9a:	615a      	str	r2, [r3, #20]
 8002d9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d9e:	4b34      	ldr	r3, [pc, #208]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002da0:	4a34      	ldr	r2, [pc, #208]	@ (8002e74 <MX_TIM3_Init+0x108>)
 8002da2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002da4:	4b32      	ldr	r3, [pc, #200]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002daa:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 8002db0:	4b2f      	ldr	r3, [pc, #188]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002db2:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8002db6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dc4:	482a      	ldr	r0, [pc, #168]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002dc6:	f002 fcf3 	bl	80057b0 <HAL_TIM_Base_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002dd0:	f000 fb40 	bl	8003454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dde:	4619      	mov	r1, r3
 8002de0:	4823      	ldr	r0, [pc, #140]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002de2:	f003 fcc5 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002dec:	f000 fb32 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002df0:	481f      	ldr	r0, [pc, #124]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002df2:	f002 fe29 	bl	8005a48 <HAL_TIM_PWM_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002dfc:	f000 fb2a 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4818      	ldr	r0, [pc, #96]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002e10:	f004 fc94 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002e1a:	f000 fb1b 	bl	8003454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e1e:	2360      	movs	r3, #96	@ 0x60
 8002e20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e30:	463b      	mov	r3, r7
 8002e32:	2200      	movs	r2, #0
 8002e34:	4619      	mov	r1, r3
 8002e36:	480e      	ldr	r0, [pc, #56]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002e38:	f003 fb86 	bl	8006548 <HAL_TIM_PWM_ConfigChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002e42:	f000 fb07 	bl	8003454 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4807      	ldr	r0, [pc, #28]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002e52:	f003 fb79 	bl	8006548 <HAL_TIM_PWM_ConfigChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8002e5c:	f000 fafa 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e60:	4803      	ldr	r0, [pc, #12]	@ (8002e70 <MX_TIM3_Init+0x104>)
 8002e62:	f000 fc03 	bl	800366c <HAL_TIM_MspPostInit>

}
 8002e66:	bf00      	nop
 8002e68:	3738      	adds	r7, #56	@ 0x38
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000428 	.word	0x20000428
 8002e74:	40000400 	.word	0x40000400

08002e78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e96:	4b1d      	ldr	r3, [pc, #116]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002e98:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <MX_TIM4_Init+0x98>)
 8002e9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002e9e:	22a9      	movs	r2, #169	@ 0xa9
 8002ea0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002ea8:	4b18      	ldr	r3, [pc, #96]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002eaa:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002eae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb0:	4b16      	ldr	r3, [pc, #88]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb6:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ebc:	4813      	ldr	r0, [pc, #76]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002ebe:	f002 fc77 	bl	80057b0 <HAL_TIM_Base_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002ec8:	f000 fac4 	bl	8003454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ed0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ed2:	f107 0310 	add.w	r3, r7, #16
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	480c      	ldr	r0, [pc, #48]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002eda:	f003 fc49 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002ee4:	f000 fab6 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4805      	ldr	r0, [pc, #20]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002ef6:	f004 fc21 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002f00:	f000 faa8 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f04:	bf00      	nop
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	200004f4 	.word	0x200004f4
 8002f10:	40000800 	.word	0x40000800

08002f14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f34:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <MX_TIM5_Init+0x98>)
 8002f36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f3a:	22a9      	movs	r2, #169	@ 0xa9
 8002f3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002f44:	4b18      	ldr	r3, [pc, #96]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f46:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f4c:	4b16      	ldr	r3, [pc, #88]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f58:	4813      	ldr	r0, [pc, #76]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f5a:	f002 fc29 	bl	80057b0 <HAL_TIM_Base_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002f64:	f000 fa76 	bl	8003454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f6e:	f107 0310 	add.w	r3, r7, #16
 8002f72:	4619      	mov	r1, r3
 8002f74:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f76:	f003 fbfb 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002f80:	f000 fa68 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f84:	2300      	movs	r3, #0
 8002f86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f92:	f004 fbd3 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002f9c:	f000 fa5a 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002fa0:	bf00      	nop
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200005c0 	.word	0x200005c0
 8002fac:	40000c00 	.word	0x40000c00

08002fb0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fc0:	4b14      	ldr	r3, [pc, #80]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fc2:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <MX_TIM6_Init+0x68>)
 8002fc4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8002fc6:	4b13      	ldr	r3, [pc, #76]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fc8:	22a9      	movs	r2, #169	@ 0xa9
 8002fca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fd4:	220a      	movs	r2, #10
 8002fd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fde:	480d      	ldr	r0, [pc, #52]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fe0:	f002 fbe6 	bl	80057b0 <HAL_TIM_Base_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002fea:	f000 fa33 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4806      	ldr	r0, [pc, #24]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002ffc:	f004 fb9e 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003006:	f000 fa25 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	2000068c 	.word	0x2000068c
 8003018:	40001000 	.word	0x40001000

0800301c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003020:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <MX_TIM16_Init+0x58>)
 8003022:	4a15      	ldr	r2, [pc, #84]	@ (8003078 <MX_TIM16_Init+0x5c>)
 8003024:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003026:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <MX_TIM16_Init+0x58>)
 8003028:	22a9      	movs	r2, #169	@ 0xa9
 800302a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302c:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <MX_TIM16_Init+0x58>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003032:	4b10      	ldr	r3, [pc, #64]	@ (8003074 <MX_TIM16_Init+0x58>)
 8003034:	f240 4279 	movw	r2, #1145	@ 0x479
 8003038:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303a:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <MX_TIM16_Init+0x58>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <MX_TIM16_Init+0x58>)
 8003042:	2200      	movs	r2, #0
 8003044:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <MX_TIM16_Init+0x58>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800304c:	4809      	ldr	r0, [pc, #36]	@ (8003074 <MX_TIM16_Init+0x58>)
 800304e:	f002 fbaf 	bl	80057b0 <HAL_TIM_Base_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003058:	f000 f9fc 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800305c:	2108      	movs	r1, #8
 800305e:	4805      	ldr	r0, [pc, #20]	@ (8003074 <MX_TIM16_Init+0x58>)
 8003060:	f002 fec0 	bl	8005de4 <HAL_TIM_OnePulse_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800306a:	f000 f9f3 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000758 	.word	0x20000758
 8003078:	40014400 	.word	0x40014400

0800307c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003080:	4b22      	ldr	r3, [pc, #136]	@ (800310c <MX_UART4_Init+0x90>)
 8003082:	4a23      	ldr	r2, [pc, #140]	@ (8003110 <MX_UART4_Init+0x94>)
 8003084:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9700;
 8003086:	4b21      	ldr	r3, [pc, #132]	@ (800310c <MX_UART4_Init+0x90>)
 8003088:	f242 52e4 	movw	r2, #9700	@ 0x25e4
 800308c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800308e:	4b1f      	ldr	r3, [pc, #124]	@ (800310c <MX_UART4_Init+0x90>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003094:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <MX_UART4_Init+0x90>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800309a:	4b1c      	ldr	r3, [pc, #112]	@ (800310c <MX_UART4_Init+0x90>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030a0:	4b1a      	ldr	r3, [pc, #104]	@ (800310c <MX_UART4_Init+0x90>)
 80030a2:	220c      	movs	r2, #12
 80030a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a6:	4b19      	ldr	r3, [pc, #100]	@ (800310c <MX_UART4_Init+0x90>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ac:	4b17      	ldr	r3, [pc, #92]	@ (800310c <MX_UART4_Init+0x90>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030b2:	4b16      	ldr	r3, [pc, #88]	@ (800310c <MX_UART4_Init+0x90>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030b8:	4b14      	ldr	r3, [pc, #80]	@ (800310c <MX_UART4_Init+0x90>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030be:	4b13      	ldr	r3, [pc, #76]	@ (800310c <MX_UART4_Init+0x90>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030c4:	4811      	ldr	r0, [pc, #68]	@ (800310c <MX_UART4_Init+0x90>)
 80030c6:	f004 fc1f 	bl	8007908 <HAL_UART_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80030d0:	f000 f9c0 	bl	8003454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030d4:	2100      	movs	r1, #0
 80030d6:	480d      	ldr	r0, [pc, #52]	@ (800310c <MX_UART4_Init+0x90>)
 80030d8:	f006 fa28 	bl	800952c <HAL_UARTEx_SetTxFifoThreshold>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80030e2:	f000 f9b7 	bl	8003454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030e6:	2100      	movs	r1, #0
 80030e8:	4808      	ldr	r0, [pc, #32]	@ (800310c <MX_UART4_Init+0x90>)
 80030ea:	f006 fa5d 	bl	80095a8 <HAL_UARTEx_SetRxFifoThreshold>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80030f4:	f000 f9ae 	bl	8003454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80030f8:	4804      	ldr	r0, [pc, #16]	@ (800310c <MX_UART4_Init+0x90>)
 80030fa:	f006 f9de 	bl	80094ba <HAL_UARTEx_DisableFifoMode>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003104:	f000 f9a6 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000824 	.word	0x20000824
 8003110:	40004c00 	.word	0x40004c00

08003114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003118:	4b23      	ldr	r3, [pc, #140]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 800311a:	4a24      	ldr	r2, [pc, #144]	@ (80031ac <MX_USART2_UART_Init+0x98>)
 800311c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800311e:	4b22      	ldr	r3, [pc, #136]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003120:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003126:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003128:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800312c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800312e:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003130:	2200      	movs	r2, #0
 8003132:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003134:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003136:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800313a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800313c:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 800313e:	220c      	movs	r2, #12
 8003140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003142:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003148:	4b17      	ldr	r3, [pc, #92]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800314e:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003150:	2200      	movs	r2, #0
 8003152:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003154:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003156:	2200      	movs	r2, #0
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800315a:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 800315c:	2200      	movs	r2, #0
 800315e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003160:	4811      	ldr	r0, [pc, #68]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003162:	f004 fbd1 	bl	8007908 <HAL_UART_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800316c:	f000 f972 	bl	8003454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003170:	2100      	movs	r1, #0
 8003172:	480d      	ldr	r0, [pc, #52]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003174:	f006 f9da 	bl	800952c <HAL_UARTEx_SetTxFifoThreshold>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800317e:	f000 f969 	bl	8003454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003182:	2100      	movs	r1, #0
 8003184:	4808      	ldr	r0, [pc, #32]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003186:	f006 fa0f 	bl	80095a8 <HAL_UARTEx_SetRxFifoThreshold>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003190:	f000 f960 	bl	8003454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003194:	4804      	ldr	r0, [pc, #16]	@ (80031a8 <MX_USART2_UART_Init+0x94>)
 8003196:	f006 f990 	bl	80094ba <HAL_UARTEx_DisableFifoMode>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80031a0:	f000 f958 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	200008f0 	.word	0x200008f0
 80031ac:	40004400 	.word	0x40004400

080031b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80031b6:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <MX_DMA_Init+0x60>)
 80031b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ba:	4a15      	ldr	r2, [pc, #84]	@ (8003210 <MX_DMA_Init+0x60>)
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80031c2:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <MX_DMA_Init+0x60>)
 80031c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ce:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <MX_DMA_Init+0x60>)
 80031d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003210 <MX_DMA_Init+0x60>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80031da:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <MX_DMA_Init+0x60>)
 80031dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2100      	movs	r1, #0
 80031ea:	200b      	movs	r0, #11
 80031ec:	f000 fd7f 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031f0:	200b      	movs	r0, #11
 80031f2:	f000 fd96 	bl	8003d22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	200c      	movs	r0, #12
 80031fc:	f000 fd77 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003200:	200c      	movs	r0, #12
 8003202:	f000 fd8e 	bl	8003d22 <HAL_NVIC_EnableIRQ>

}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000

08003214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	@ 0x28
 8003218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321a:	f107 0314 	add.w	r3, r7, #20
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	60da      	str	r2, [r3, #12]
 8003228:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800322a:	4b3e      	ldr	r3, [pc, #248]	@ (8003324 <MX_GPIO_Init+0x110>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322e:	4a3d      	ldr	r2, [pc, #244]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003236:	4b3b      	ldr	r3, [pc, #236]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003242:	4b38      	ldr	r3, [pc, #224]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003246:	4a37      	ldr	r2, [pc, #220]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003248:	f043 0320 	orr.w	r3, r3, #32
 800324c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800324e:	4b35      	ldr	r3, [pc, #212]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	4b32      	ldr	r3, [pc, #200]	@ (8003324 <MX_GPIO_Init+0x110>)
 800325c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325e:	4a31      	ldr	r2, [pc, #196]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003266:	4b2f      	ldr	r3, [pc, #188]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003272:	4b2c      	ldr	r3, [pc, #176]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	4a2b      	ldr	r2, [pc, #172]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003278:	f043 0302 	orr.w	r3, r3, #2
 800327c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800327e:	4b29      	ldr	r3, [pc, #164]	@ (8003324 <MX_GPIO_Init+0x110>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800328a:	2200      	movs	r2, #0
 800328c:	2120      	movs	r1, #32
 800328e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003292:	f001 fa2d 	bl	80046f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800329a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800329c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80032a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	481e      	ldr	r0, [pc, #120]	@ (8003328 <MX_GPIO_Init+0x114>)
 80032ae:	f001 f885 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Photo_top_Pin Photo_Base_Pin */
  GPIO_InitStruct.Pin = Photo_top_Pin|Photo_Base_Pin;
 80032b2:	2350      	movs	r3, #80	@ 0x50
 80032b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80032ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4619      	mov	r1, r3
 80032c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ca:	f001 f877 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80032ce:	2320      	movs	r3, #32
 80032d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4619      	mov	r1, r3
 80032e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032e8:	f001 f868 	bl	80043bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	200a      	movs	r0, #10
 80032f2:	f000 fcfc 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80032f6:	200a      	movs	r0, #10
 80032f8:	f000 fd13 	bl	8003d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	2017      	movs	r0, #23
 8003302:	f000 fcf4 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003306:	2017      	movs	r0, #23
 8003308:	f000 fd0b 	bl	8003d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800330c:	2200      	movs	r2, #0
 800330e:	2100      	movs	r1, #0
 8003310:	2028      	movs	r0, #40	@ 0x28
 8003312:	f000 fcec 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003316:	2028      	movs	r0, #40	@ 0x28
 8003318:	f000 fd03 	bl	8003d22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800331c:	bf00      	nop
 800331e:	3728      	adds	r7, #40	@ 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000
 8003328:	48000800 	.word	0x48000800

0800332c <micros>:

/* USER CODE BEGIN 4 */

uint64_t micros() 							// Microsecond
{
 800332c:	b4b0      	push	{r4, r5, r7}
 800332e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8003330:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <micros+0x2c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	2200      	movs	r2, #0
 8003338:	4618      	mov	r0, r3
 800333a:	4611      	mov	r1, r2
 800333c:	4b07      	ldr	r3, [pc, #28]	@ (800335c <micros+0x30>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	1884      	adds	r4, r0, r2
 8003344:	eb41 0503 	adc.w	r5, r1, r3
 8003348:	4622      	mov	r2, r4
 800334a:	462b      	mov	r3, r5
}
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	bcb0      	pop	{r4, r5, r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	200005c0 	.word	0x200005c0
 800335c:	20001448 	.word	0x20001448

08003360 <HAL_TIM_PeriodElapsedCallback>:

// Timer Interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)			// Timer Interrupt
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)				// 1 MHz
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	6809      	ldr	r1, [r1, #0]
 800336c:	481b      	ldr	r0, [pc, #108]	@ (80033dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800336e:	4281      	cmp	r1, r0
 8003370:	d107      	bne.n	8003382 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 4294967296ULL;
 8003372:	491b      	ldr	r1, [pc, #108]	@ (80033e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003378:	1c4b      	adds	r3, r1, #1
 800337a:	4602      	mov	r2, r0
 800337c:	4918      	ldr	r1, [pc, #96]	@ (80033e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800337e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(htim->Instance == TIM4)				// 2000 Hz
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a17      	ldr	r2, [pc, #92]	@ (80033e4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d123      	bne.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		if (ps2.mode == 2){
 800338c:	4b16      	ldr	r3, [pc, #88]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800338e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003390:	2b02      	cmp	r3, #2
 8003392:	d110      	bne.n	80033b6 <HAL_TIM_PeriodElapsedCallback+0x56>
			PID_controller_calculate_pos(&PID_pos,&AMT,ps2.PIDPos);
 8003394:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003396:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800339a:	eeb0 0a67 	vmov.f32	s0, s15
 800339e:	4913      	ldr	r1, [pc, #76]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80033a0:	4813      	ldr	r0, [pc, #76]	@ (80033f0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033a2:	f7fe fbab 	bl	8001afc <PID_controller_calculate_pos>
			MOTOR_set_duty(&MT,PID.out);
 80033a6:	4b13      	ldr	r3, [pc, #76]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80033a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80033ac:	eeb0 0a67 	vmov.f32	s0, s15
 80033b0:	4811      	ldr	r0, [pc, #68]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80033b2:	f7fe f901 	bl	80015b8 <MOTOR_set_duty>
		}
//		PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
		if (ps2.mode == 1){
 80033b6:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80033b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10a      	bne.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x74>
			MOTOR_set_duty(&MT,ps2.pwmOut);
 80033be:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80033c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ca:	eeb0 0a67 	vmov.f32	s0, s15
 80033ce:	480a      	ldr	r0, [pc, #40]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80033d0:	f7fe f8f2 	bl	80015b8 <MOTOR_set_duty>
		}

	}

}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40000c00 	.word	0x40000c00
 80033e0:	20001448 	.word	0x20001448
 80033e4:	40000800 	.word	0x40000800
 80033e8:	200013c8 	.word	0x200013c8
 80033ec:	20000a80 	.word	0x20000a80
 80033f0:	20000adc 	.word	0x20000adc
 80033f4:	20000ac0 	.word	0x20000ac0
 80033f8:	20000ab8 	.word	0x20000ab8

080033fc <HAL_GPIO_EXTI_Callback>:

// Photo Limit Condition
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_6)				// Interrupt for Top Photo
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b40      	cmp	r3, #64	@ 0x40
 800340a:	d10e      	bne.n	800342a <HAL_GPIO_EXTI_Callback+0x2e>
    {
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)
 800340c:	2140      	movs	r1, #64	@ 0x40
 800340e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003412:	f001 f955 	bl	80046c0 <HAL_GPIO_ReadPin>
 8003416:	4603      	mov	r3, r0
 8003418:	2b01      	cmp	r3, #1
 800341a:	d117      	bne.n	800344c <HAL_GPIO_EXTI_Callback+0x50>
    	{
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800341c:	2201      	movs	r2, #1
 800341e:	2120      	movs	r1, #32
 8003420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003424:	f001 f964 	bl	80046f0 <HAL_GPIO_WritePin>
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
    	{
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
    	}
    }
}
 8003428:	e010      	b.n	800344c <HAL_GPIO_EXTI_Callback+0x50>
    else if (GPIO_Pin == GPIO_PIN_4)		// Interrupt for Base Photo
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b10      	cmp	r3, #16
 800342e:	d10d      	bne.n	800344c <HAL_GPIO_EXTI_Callback+0x50>
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 8003430:	2110      	movs	r1, #16
 8003432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003436:	f001 f943 	bl	80046c0 <HAL_GPIO_ReadPin>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_GPIO_EXTI_Callback+0x50>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8003440:	2201      	movs	r2, #1
 8003442:	2120      	movs	r1, #32
 8003444:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003448:	f001 f952 	bl	80046f0 <HAL_GPIO_WritePin>
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003458:	b672      	cpsid	i
}
 800345a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <Error_Handler+0x8>

08003460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	4b0f      	ldr	r3, [pc, #60]	@ (80034a4 <HAL_MspInit+0x44>)
 8003468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346a:	4a0e      	ldr	r2, [pc, #56]	@ (80034a4 <HAL_MspInit+0x44>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6613      	str	r3, [r2, #96]	@ 0x60
 8003472:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <HAL_MspInit+0x44>)
 8003474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_MspInit+0x44>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003482:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <HAL_MspInit+0x44>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003488:	6593      	str	r3, [r2, #88]	@ 0x58
 800348a:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_MspInit+0x44>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003496:	f001 f9ff 	bl	8004898 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000

080034a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a46      	ldr	r2, [pc, #280]	@ (80035d0 <HAL_TIM_Base_MspInit+0x128>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d114      	bne.n	80034e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ba:	4b46      	ldr	r3, [pc, #280]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80034bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034be:	4a45      	ldr	r2, [pc, #276]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80034c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80034c6:	4b43      	ldr	r3, [pc, #268]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80034c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	2019      	movs	r0, #25
 80034d8:	f000 fc09 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80034dc:	2019      	movs	r0, #25
 80034de:	f000 fc20 	bl	8003d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80034e2:	e070      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3b      	ldr	r2, [pc, #236]	@ (80035d8 <HAL_TIM_Base_MspInit+0x130>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d10c      	bne.n	8003508 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034ee:	4b39      	ldr	r3, [pc, #228]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f2:	4a38      	ldr	r2, [pc, #224]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80034fa:	4b36      	ldr	r3, [pc, #216]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	69bb      	ldr	r3, [r7, #24]
}
 8003506:	e05e      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a33      	ldr	r2, [pc, #204]	@ (80035dc <HAL_TIM_Base_MspInit+0x134>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d114      	bne.n	800353c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003512:	4b30      	ldr	r3, [pc, #192]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	4a2f      	ldr	r2, [pc, #188]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	6593      	str	r3, [r2, #88]	@ 0x58
 800351e:	4b2d      	ldr	r3, [pc, #180]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	2100      	movs	r1, #0
 800352e:	201e      	movs	r0, #30
 8003530:	f000 fbdd 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003534:	201e      	movs	r0, #30
 8003536:	f000 fbf4 	bl	8003d22 <HAL_NVIC_EnableIRQ>
}
 800353a:	e044      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM5)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <HAL_TIM_Base_MspInit+0x138>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d114      	bne.n	8003570 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003546:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	4a22      	ldr	r2, [pc, #136]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 800354c:	f043 0308 	orr.w	r3, r3, #8
 8003550:	6593      	str	r3, [r2, #88]	@ 0x58
 8003552:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2100      	movs	r1, #0
 8003562:	2032      	movs	r0, #50	@ 0x32
 8003564:	f000 fbc3 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003568:	2032      	movs	r0, #50	@ 0x32
 800356a:	f000 fbda 	bl	8003d22 <HAL_NVIC_EnableIRQ>
}
 800356e:	e02a      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM6)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <HAL_TIM_Base_MspInit+0x13c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10c      	bne.n	8003594 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800357a:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	4a15      	ldr	r2, [pc, #84]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003580:	f043 0310 	orr.w	r3, r3, #16
 8003584:	6593      	str	r3, [r2, #88]	@ 0x58
 8003586:	4b13      	ldr	r3, [pc, #76]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	e018      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM16)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a13      	ldr	r2, [pc, #76]	@ (80035e8 <HAL_TIM_Base_MspInit+0x140>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d113      	bne.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800359e:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80035a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a2:	4a0c      	ldr	r2, [pc, #48]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80035ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2100      	movs	r1, #0
 80035ba:	2019      	movs	r0, #25
 80035bc:	f000 fb97 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80035c0:	2019      	movs	r0, #25
 80035c2:	f000 fbae 	bl	8003d22 <HAL_NVIC_EnableIRQ>
}
 80035c6:	bf00      	nop
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00
 80035e4:	40001000 	.word	0x40001000
 80035e8:	40014400 	.word	0x40014400

080035ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	@ 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360c:	d128      	bne.n	8003660 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800360e:	4b16      	ldr	r3, [pc, #88]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003612:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6593      	str	r3, [r2, #88]	@ 0x58
 800361a:	4b13      	ldr	r3, [pc, #76]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x7c>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003626:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362a:	4a0f      	ldr	r2, [pc, #60]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x7c>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800363e:	2303      	movs	r3, #3
 8003640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003642:	2302      	movs	r3, #2
 8003644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	2300      	movs	r3, #0
 800364c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800364e:	2301      	movs	r3, #1
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003652:	f107 0314 	add.w	r3, r7, #20
 8003656:	4619      	mov	r1, r3
 8003658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800365c:	f000 feae 	bl	80043bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003660:	bf00      	nop
 8003662:	3728      	adds	r7, #40	@ 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000

0800366c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a11      	ldr	r2, [pc, #68]	@ (80036d0 <HAL_TIM_MspPostInit+0x64>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d11b      	bne.n	80036c6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_TIM_MspPostInit+0x68>)
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	4a10      	ldr	r2, [pc, #64]	@ (80036d4 <HAL_TIM_MspPostInit+0x68>)
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800369a:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_TIM_MspPostInit+0x68>)
 800369c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036a6:	2330      	movs	r3, #48	@ 0x30
 80036a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036b6:	2302      	movs	r3, #2
 80036b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	4619      	mov	r1, r3
 80036c0:	4805      	ldr	r0, [pc, #20]	@ (80036d8 <HAL_TIM_MspPostInit+0x6c>)
 80036c2:	f000 fe7b 	bl	80043bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036c6:	bf00      	nop
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40021000 	.word	0x40021000
 80036d8:	48000400 	.word	0x48000400

080036dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b0a0      	sub	sp, #128	@ 0x80
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036f4:	f107 0318 	add.w	r3, r7, #24
 80036f8:	2254      	movs	r2, #84	@ 0x54
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f005 fff7 	bl	80096f0 <memset>
  if(huart->Instance==UART4)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a6b      	ldr	r2, [pc, #428]	@ (80038b4 <HAL_UART_MspInit+0x1d8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d137      	bne.n	800377c <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800370c:	2308      	movs	r3, #8
 800370e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003710:	2300      	movs	r3, #0
 8003712:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003714:	f107 0318 	add.w	r3, r7, #24
 8003718:	4618      	mov	r0, r3
 800371a:	f001 fdfb 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003724:	f7ff fe96 	bl	8003454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003728:	4b63      	ldr	r3, [pc, #396]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	4a62      	ldr	r2, [pc, #392]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 800372e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003732:	6593      	str	r3, [r2, #88]	@ 0x58
 8003734:	4b60      	ldr	r3, [pc, #384]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003740:	4b5d      	ldr	r3, [pc, #372]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 8003742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003744:	4a5c      	ldr	r2, [pc, #368]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 8003746:	f043 0304 	orr.w	r3, r3, #4
 800374a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800374c:	4b5a      	ldr	r3, [pc, #360]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 800374e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003758:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800375c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2302      	movs	r3, #2
 8003760:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	2300      	movs	r3, #0
 8003768:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800376a:	2305      	movs	r3, #5
 800376c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003772:	4619      	mov	r1, r3
 8003774:	4851      	ldr	r0, [pc, #324]	@ (80038bc <HAL_UART_MspInit+0x1e0>)
 8003776:	f000 fe21 	bl	80043bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800377a:	e097      	b.n	80038ac <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a4f      	ldr	r2, [pc, #316]	@ (80038c0 <HAL_UART_MspInit+0x1e4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	f040 8092 	bne.w	80038ac <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003788:	2302      	movs	r3, #2
 800378a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800378c:	2300      	movs	r3, #0
 800378e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003790:	f107 0318 	add.w	r3, r7, #24
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fdbd 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80037a0:	f7ff fe58 	bl	8003454 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037a4:	4b44      	ldr	r3, [pc, #272]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 80037a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a8:	4a43      	ldr	r2, [pc, #268]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80037b0:	4b41      	ldr	r3, [pc, #260]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037bc:	4b3e      	ldr	r3, [pc, #248]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 80037be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c0:	4a3d      	ldr	r2, [pc, #244]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037c8:	4b3b      	ldr	r3, [pc, #236]	@ (80038b8 <HAL_UART_MspInit+0x1dc>)
 80037ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037d4:	230c      	movs	r3, #12
 80037d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	2302      	movs	r3, #2
 80037da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	2300      	movs	r3, #0
 80037e2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037e4:	2307      	movs	r3, #7
 80037e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80037ec:	4619      	mov	r1, r3
 80037ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037f2:	f000 fde3 	bl	80043bc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80037f6:	4b33      	ldr	r3, [pc, #204]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 80037f8:	4a33      	ldr	r2, [pc, #204]	@ (80038c8 <HAL_UART_MspInit+0x1ec>)
 80037fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80037fc:	4b31      	ldr	r3, [pc, #196]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 80037fe:	221b      	movs	r2, #27
 8003800:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003802:	4b30      	ldr	r3, [pc, #192]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 8003804:	2210      	movs	r2, #16
 8003806:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003808:	4b2e      	ldr	r3, [pc, #184]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 800380a:	2200      	movs	r2, #0
 800380c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800380e:	4b2d      	ldr	r3, [pc, #180]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 8003810:	2280      	movs	r2, #128	@ 0x80
 8003812:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003814:	4b2b      	ldr	r3, [pc, #172]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 8003816:	2200      	movs	r2, #0
 8003818:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800381a:	4b2a      	ldr	r3, [pc, #168]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003820:	4b28      	ldr	r3, [pc, #160]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003826:	4b27      	ldr	r3, [pc, #156]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 8003828:	2200      	movs	r2, #0
 800382a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800382c:	4825      	ldr	r0, [pc, #148]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 800382e:	f000 fa93 	bl	8003d58 <HAL_DMA_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_UART_MspInit+0x160>
      Error_Handler();
 8003838:	f7ff fe0c 	bl	8003454 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a21      	ldr	r2, [pc, #132]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 8003840:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003842:	4a20      	ldr	r2, [pc, #128]	@ (80038c4 <HAL_UART_MspInit+0x1e8>)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003848:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 800384a:	4a21      	ldr	r2, [pc, #132]	@ (80038d0 <HAL_UART_MspInit+0x1f4>)
 800384c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800384e:	4b1f      	ldr	r3, [pc, #124]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 8003850:	221a      	movs	r2, #26
 8003852:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003854:	4b1d      	ldr	r3, [pc, #116]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800385a:	4b1c      	ldr	r3, [pc, #112]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 800385c:	2200      	movs	r2, #0
 800385e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003860:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 8003862:	2280      	movs	r2, #128	@ 0x80
 8003864:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003866:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 8003868:	2200      	movs	r2, #0
 800386a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800386c:	4b17      	ldr	r3, [pc, #92]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 800386e:	2200      	movs	r2, #0
 8003870:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003872:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 8003874:	2200      	movs	r2, #0
 8003876:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003878:	4b14      	ldr	r3, [pc, #80]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 800387a:	2200      	movs	r2, #0
 800387c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800387e:	4813      	ldr	r0, [pc, #76]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 8003880:	f000 fa6a 	bl	8003d58 <HAL_DMA_Init>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 800388a:	f7ff fde3 	bl	8003454 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a0e      	ldr	r2, [pc, #56]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 8003892:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003896:	4a0d      	ldr	r2, [pc, #52]	@ (80038cc <HAL_UART_MspInit+0x1f0>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800389c:	2200      	movs	r2, #0
 800389e:	2100      	movs	r1, #0
 80038a0:	2026      	movs	r0, #38	@ 0x26
 80038a2:	f000 fa24 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038a6:	2026      	movs	r0, #38	@ 0x26
 80038a8:	f000 fa3b 	bl	8003d22 <HAL_NVIC_EnableIRQ>
}
 80038ac:	bf00      	nop
 80038ae:	3780      	adds	r7, #128	@ 0x80
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40004c00 	.word	0x40004c00
 80038b8:	40021000 	.word	0x40021000
 80038bc:	48000800 	.word	0x48000800
 80038c0:	40004400 	.word	0x40004400
 80038c4:	200009bc 	.word	0x200009bc
 80038c8:	40020008 	.word	0x40020008
 80038cc:	20000a1c 	.word	0x20000a1c
 80038d0:	4002001c 	.word	0x4002001c

080038d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <NMI_Handler+0x4>

080038dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <HardFault_Handler+0x4>

080038e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <MemManage_Handler+0x4>

080038ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <BusFault_Handler+0x4>

080038f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f8:	bf00      	nop
 80038fa:	e7fd      	b.n	80038f8 <UsageFault_Handler+0x4>

080038fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800392a:	f000 f8e7 	bl	8003afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}

08003932 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photo_top_Pin);
 8003936:	2010      	movs	r0, #16
 8003938:	f000 fef2 	bl	8004720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}

08003940 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003944:	4802      	ldr	r0, [pc, #8]	@ (8003950 <DMA1_Channel1_IRQHandler+0x10>)
 8003946:	f000 fbea 	bl	800411e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200009bc 	.word	0x200009bc

08003954 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003958:	4802      	ldr	r0, [pc, #8]	@ (8003964 <DMA1_Channel2_IRQHandler+0x10>)
 800395a:	f000 fbe0 	bl	800411e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000a1c 	.word	0x20000a1c

08003968 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photo_Base_Pin);
 800396c:	2040      	movs	r0, #64	@ 0x40
 800396e:	f000 fed7 	bl	8004720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800397c:	4803      	ldr	r0, [pc, #12]	@ (800398c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800397e:	f002 fc69 	bl	8006254 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003982:	4803      	ldr	r0, [pc, #12]	@ (8003990 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003984:	f002 fc66 	bl	8006254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000290 	.word	0x20000290
 8003990:	20000758 	.word	0x20000758

08003994 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003998:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <TIM4_IRQHandler+0x10>)
 800399a:	f002 fc5b 	bl	8006254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200004f4 	.word	0x200004f4

080039a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039ac:	4802      	ldr	r0, [pc, #8]	@ (80039b8 <USART2_IRQHandler+0x10>)
 80039ae:	f004 f9d9 	bl	8007d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200008f0 	.word	0x200008f0

080039bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80039c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80039c4:	f000 feac 	bl	8004720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}

080039cc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80039d0:	4802      	ldr	r0, [pc, #8]	@ (80039dc <TIM5_IRQHandler+0x10>)
 80039d2:	f002 fc3f 	bl	8006254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200005c0 	.word	0x200005c0

080039e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039e4:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <SystemInit+0x20>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ea:	4a05      	ldr	r2, [pc, #20]	@ (8003a00 <SystemInit+0x20>)
 80039ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a04:	480d      	ldr	r0, [pc, #52]	@ (8003a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a08:	f7ff ffea 	bl	80039e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a0c:	480c      	ldr	r0, [pc, #48]	@ (8003a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a0e:	490d      	ldr	r1, [pc, #52]	@ (8003a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a10:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <LoopForever+0xe>)
  movs r3, #0
 8003a12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a14:	e002      	b.n	8003a1c <LoopCopyDataInit>

08003a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a1a:	3304      	adds	r3, #4

08003a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a20:	d3f9      	bcc.n	8003a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a22:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a24:	4c0a      	ldr	r4, [pc, #40]	@ (8003a50 <LoopForever+0x16>)
  movs r3, #0
 8003a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a28:	e001      	b.n	8003a2e <LoopFillZerobss>

08003a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a2c:	3204      	adds	r2, #4

08003a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a30:	d3fb      	bcc.n	8003a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a32:	f005 fe6b 	bl	800970c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a36:	f7fe ff6f 	bl	8002918 <main>

08003a3a <LoopForever>:

LoopForever:
    b LoopForever
 8003a3a:	e7fe      	b.n	8003a3a <LoopForever>
  ldr   r0, =_estack
 8003a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a44:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003a48:	08009a70 	.word	0x08009a70
  ldr r2, =_sbss
 8003a4c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003a50:	2000159c 	.word	0x2000159c

08003a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a54:	e7fe      	b.n	8003a54 <ADC1_2_IRQHandler>

08003a56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a60:	2003      	movs	r0, #3
 8003a62:	f000 f939 	bl	8003cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a66:	2000      	movs	r0, #0
 8003a68:	f000 f80e 	bl	8003a88 <HAL_InitTick>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	71fb      	strb	r3, [r7, #7]
 8003a76:	e001      	b.n	8003a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a78:	f7ff fcf2 	bl	8003460 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a7c:	79fb      	ldrb	r3, [r7, #7]

}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003a94:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <HAL_InitTick+0x68>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d022      	beq.n	8003ae2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a9c:	4b15      	ldr	r3, [pc, #84]	@ (8003af4 <HAL_InitTick+0x6c>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b13      	ldr	r3, [pc, #76]	@ (8003af0 <HAL_InitTick+0x68>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f944 	bl	8003d3e <HAL_SYSTICK_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10f      	bne.n	8003adc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b0f      	cmp	r3, #15
 8003ac0:	d809      	bhi.n	8003ad6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aca:	f000 f910 	bl	8003cee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ace:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <HAL_InitTick+0x70>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e007      	b.n	8003ae6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e004      	b.n	8003ae6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
 8003ae0:	e001      	b.n	8003ae6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	2000003c 	.word	0x2000003c
 8003af4:	20000034 	.word	0x20000034
 8003af8:	20000038 	.word	0x20000038

08003afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b00:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <HAL_IncTick+0x1c>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <HAL_IncTick+0x20>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4413      	add	r3, r2
 8003b0a:	4a03      	ldr	r2, [pc, #12]	@ (8003b18 <HAL_IncTick+0x1c>)
 8003b0c:	6013      	str	r3, [r2, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	20001460 	.word	0x20001460
 8003b1c:	2000003c 	.word	0x2000003c

08003b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return uwTick;
 8003b24:	4b03      	ldr	r3, [pc, #12]	@ (8003b34 <HAL_GetTick+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20001460 	.word	0x20001460

08003b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b48:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b54:	4013      	ands	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b6a:	4a04      	ldr	r2, [pc, #16]	@ (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	60d3      	str	r3, [r2, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <__NVIC_GetPriorityGrouping+0x18>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	f003 0307 	and.w	r3, r3, #7
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	db0b      	blt.n	8003bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	4907      	ldr	r1, [pc, #28]	@ (8003bd4 <__NVIC_EnableIRQ+0x38>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	6039      	str	r1, [r7, #0]
 8003be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	db0a      	blt.n	8003c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	490c      	ldr	r1, [pc, #48]	@ (8003c24 <__NVIC_SetPriority+0x4c>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	0112      	lsls	r2, r2, #4
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c00:	e00a      	b.n	8003c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	4908      	ldr	r1, [pc, #32]	@ (8003c28 <__NVIC_SetPriority+0x50>)
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	3b04      	subs	r3, #4
 8003c10:	0112      	lsls	r2, r2, #4
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	440b      	add	r3, r1
 8003c16:	761a      	strb	r2, [r3, #24]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000e100 	.word	0xe000e100
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	@ 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f1c3 0307 	rsb	r3, r3, #7
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	bf28      	it	cs
 8003c4a:	2304      	movcs	r3, #4
 8003c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3304      	adds	r3, #4
 8003c52:	2b06      	cmp	r3, #6
 8003c54:	d902      	bls.n	8003c5c <NVIC_EncodePriority+0x30>
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3b03      	subs	r3, #3
 8003c5a:	e000      	b.n	8003c5e <NVIC_EncodePriority+0x32>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	401a      	ands	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c74:	f04f 31ff 	mov.w	r1, #4294967295
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	43d9      	mvns	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c84:	4313      	orrs	r3, r2
         );
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3724      	adds	r7, #36	@ 0x24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ca4:	d301      	bcc.n	8003caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00f      	b.n	8003cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003caa:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd4 <SysTick_Config+0x40>)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cb2:	210f      	movs	r1, #15
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	f7ff ff8e 	bl	8003bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <SysTick_Config+0x40>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc2:	4b04      	ldr	r3, [pc, #16]	@ (8003cd4 <SysTick_Config+0x40>)
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	e000e010 	.word	0xe000e010

08003cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff29 	bl	8003b38 <__NVIC_SetPriorityGrouping>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cfc:	f7ff ff40 	bl	8003b80 <__NVIC_GetPriorityGrouping>
 8003d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	6978      	ldr	r0, [r7, #20]
 8003d08:	f7ff ff90 	bl	8003c2c <NVIC_EncodePriority>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff5f 	bl	8003bd8 <__NVIC_SetPriority>
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff33 	bl	8003b9c <__NVIC_EnableIRQ>
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ffa4 	bl	8003c94 <SysTick_Config>
 8003d4c:	4603      	mov	r3, r0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e08d      	b.n	8003e86 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b47      	ldr	r3, [pc, #284]	@ (8003e90 <HAL_DMA_Init+0x138>)
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d80f      	bhi.n	8003d96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b45      	ldr	r3, [pc, #276]	@ (8003e94 <HAL_DMA_Init+0x13c>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	4a45      	ldr	r2, [pc, #276]	@ (8003e98 <HAL_DMA_Init+0x140>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	009a      	lsls	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a42      	ldr	r2, [pc, #264]	@ (8003e9c <HAL_DMA_Init+0x144>)
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d94:	e00e      	b.n	8003db4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b40      	ldr	r3, [pc, #256]	@ (8003ea0 <HAL_DMA_Init+0x148>)
 8003d9e:	4413      	add	r3, r2
 8003da0:	4a3d      	ldr	r2, [pc, #244]	@ (8003e98 <HAL_DMA_Init+0x140>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	009a      	lsls	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ea4 <HAL_DMA_Init+0x14c>)
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa76 	bl	80042f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e14:	d102      	bne.n	8003e1c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e30:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d010      	beq.n	8003e5c <HAL_DMA_Init+0x104>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d80c      	bhi.n	8003e5c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa96 	bl	8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	e008      	b.n	8003e6e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40020407 	.word	0x40020407
 8003e94:	bffdfff8 	.word	0xbffdfff8
 8003e98:	cccccccd 	.word	0xcccccccd
 8003e9c:	40020000 	.word	0x40020000
 8003ea0:	bffdfbf8 	.word	0xbffdfbf8
 8003ea4:	40020400 	.word	0x40020400

08003ea8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_DMA_Start_IT+0x20>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e066      	b.n	8003f96 <HAL_DMA_Start_IT+0xee>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d155      	bne.n	8003f88 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f9bb 	bl	800427c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 020e 	orr.w	r2, r2, #14
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e00f      	b.n	8003f40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0204 	bic.w	r2, r2, #4
 8003f2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 020a 	orr.w	r2, r2, #10
 8003f3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f5c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f74:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e005      	b.n	8003f94 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
 8003f92:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d005      	beq.n	8003fc2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
 8003fc0:	e037      	b.n	8004032 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 020e 	bic.w	r2, r2, #14
 8003fd0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fe0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f003 021f 	and.w	r2, r3, #31
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f202 	lsl.w	r2, r1, r2
 8004004:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800400e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00c      	beq.n	8004032 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004022:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004026:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004030:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d00d      	beq.n	8004084 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2204      	movs	r2, #4
 800406c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
 8004082:	e047      	b.n	8004114 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 020e 	bic.w	r2, r2, #14
 8004092:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2101      	movs	r1, #1
 80040c2:	fa01 f202 	lsl.w	r2, r1, r2
 80040c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
    }
  }
  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2204      	movs	r2, #4
 8004140:	409a      	lsls	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d026      	beq.n	8004198 <HAL_DMA_IRQHandler+0x7a>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d021      	beq.n	8004198 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d107      	bne.n	8004172 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0204 	bic.w	r2, r2, #4
 8004170:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f003 021f 	and.w	r2, r3, #31
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	2104      	movs	r1, #4
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	2b00      	cmp	r3, #0
 800418c:	d071      	beq.n	8004272 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004196:	e06c      	b.n	8004272 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2202      	movs	r2, #2
 80041a2:	409a      	lsls	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02e      	beq.n	800420a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d029      	beq.n	800420a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 020a 	bic.w	r2, r2, #10
 80041d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e0:	f003 021f 	and.w	r2, r3, #31
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	2102      	movs	r1, #2
 80041ea:	fa01 f202 	lsl.w	r2, r1, r2
 80041ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d038      	beq.n	8004272 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004208:	e033      	b.n	8004272 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2208      	movs	r2, #8
 8004214:	409a      	lsls	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d02a      	beq.n	8004274 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d025      	beq.n	8004274 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 020e 	bic.w	r2, r2, #14
 8004236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423c:	f003 021f 	and.w	r2, r3, #31
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f202 	lsl.w	r2, r1, r2
 800424a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004272:	bf00      	nop
 8004274:	bf00      	nop
}
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004292:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f003 021f 	and.w	r2, r3, #31
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	2101      	movs	r1, #1
 80042b4:	fa01 f202 	lsl.w	r2, r1, r2
 80042b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d108      	bne.n	80042dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042da:	e007      	b.n	80042ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	4b16      	ldr	r3, [pc, #88]	@ (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004308:	429a      	cmp	r2, r3
 800430a:	d802      	bhi.n	8004312 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800430c:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e001      	b.n	8004316 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004312:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004314:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3b08      	subs	r3, #8
 8004322:	4a12      	ldr	r2, [pc, #72]	@ (800436c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	009a      	lsls	r2, r3, #2
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	461a      	mov	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a0b      	ldr	r2, [pc, #44]	@ (8004370 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004342:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	2201      	movs	r2, #1
 800434c:	409a      	lsls	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40020407 	.word	0x40020407
 8004364:	40020800 	.word	0x40020800
 8004368:	40020820 	.word	0x40020820
 800436c:	cccccccd 	.word	0xcccccccd
 8004370:	40020880 	.word	0x40020880

08004374 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	461a      	mov	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a08      	ldr	r2, [pc, #32]	@ (80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004396:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3b01      	subs	r3, #1
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	2201      	movs	r2, #1
 80043a2:	409a      	lsls	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	1000823f 	.word	0x1000823f
 80043b8:	40020940 	.word	0x40020940

080043bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043ca:	e15a      	b.n	8004682 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2101      	movs	r1, #1
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	fa01 f303 	lsl.w	r3, r1, r3
 80043d8:	4013      	ands	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 814c 	beq.w	800467c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d005      	beq.n	80043fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d130      	bne.n	800445e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004432:	2201      	movs	r2, #1
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	091b      	lsrs	r3, r3, #4
 8004448:	f003 0201 	and.w	r2, r3, #1
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b03      	cmp	r3, #3
 8004468:	d017      	beq.n	800449a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	2203      	movs	r2, #3
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4013      	ands	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d123      	bne.n	80044ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	08da      	lsrs	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3208      	adds	r2, #8
 80044ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	220f      	movs	r2, #15
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	08da      	lsrs	r2, r3, #3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3208      	adds	r2, #8
 80044e8:	6939      	ldr	r1, [r7, #16]
 80044ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	2203      	movs	r2, #3
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 0203 	and.w	r2, r3, #3
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80a6 	beq.w	800467c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004530:	4b5b      	ldr	r3, [pc, #364]	@ (80046a0 <HAL_GPIO_Init+0x2e4>)
 8004532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004534:	4a5a      	ldr	r2, [pc, #360]	@ (80046a0 <HAL_GPIO_Init+0x2e4>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6613      	str	r3, [r2, #96]	@ 0x60
 800453c:	4b58      	ldr	r3, [pc, #352]	@ (80046a0 <HAL_GPIO_Init+0x2e4>)
 800453e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004548:	4a56      	ldr	r2, [pc, #344]	@ (80046a4 <HAL_GPIO_Init+0x2e8>)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	3302      	adds	r3, #2
 8004550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004554:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	220f      	movs	r2, #15
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004572:	d01f      	beq.n	80045b4 <HAL_GPIO_Init+0x1f8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a4c      	ldr	r2, [pc, #304]	@ (80046a8 <HAL_GPIO_Init+0x2ec>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d019      	beq.n	80045b0 <HAL_GPIO_Init+0x1f4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a4b      	ldr	r2, [pc, #300]	@ (80046ac <HAL_GPIO_Init+0x2f0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <HAL_GPIO_Init+0x1f0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a4a      	ldr	r2, [pc, #296]	@ (80046b0 <HAL_GPIO_Init+0x2f4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00d      	beq.n	80045a8 <HAL_GPIO_Init+0x1ec>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a49      	ldr	r2, [pc, #292]	@ (80046b4 <HAL_GPIO_Init+0x2f8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d007      	beq.n	80045a4 <HAL_GPIO_Init+0x1e8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a48      	ldr	r2, [pc, #288]	@ (80046b8 <HAL_GPIO_Init+0x2fc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <HAL_GPIO_Init+0x1e4>
 800459c:	2305      	movs	r3, #5
 800459e:	e00a      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045a0:	2306      	movs	r3, #6
 80045a2:	e008      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045a4:	2304      	movs	r3, #4
 80045a6:	e006      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045a8:	2303      	movs	r3, #3
 80045aa:	e004      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e002      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045b4:	2300      	movs	r3, #0
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	f002 0203 	and.w	r2, r2, #3
 80045bc:	0092      	lsls	r2, r2, #2
 80045be:	4093      	lsls	r3, r2
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045c6:	4937      	ldr	r1, [pc, #220]	@ (80046a4 <HAL_GPIO_Init+0x2e8>)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	3302      	adds	r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045d4:	4b39      	ldr	r3, [pc, #228]	@ (80046bc <HAL_GPIO_Init+0x300>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	43db      	mvns	r3, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045f8:	4a30      	ldr	r2, [pc, #192]	@ (80046bc <HAL_GPIO_Init+0x300>)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045fe:	4b2f      	ldr	r3, [pc, #188]	@ (80046bc <HAL_GPIO_Init+0x300>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	43db      	mvns	r3, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004622:	4a26      	ldr	r2, [pc, #152]	@ (80046bc <HAL_GPIO_Init+0x300>)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004628:	4b24      	ldr	r3, [pc, #144]	@ (80046bc <HAL_GPIO_Init+0x300>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	43db      	mvns	r3, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800464c:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <HAL_GPIO_Init+0x300>)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004652:	4b1a      	ldr	r3, [pc, #104]	@ (80046bc <HAL_GPIO_Init+0x300>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004676:	4a11      	ldr	r2, [pc, #68]	@ (80046bc <HAL_GPIO_Init+0x300>)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f ae9d 	bne.w	80043cc <HAL_GPIO_Init+0x10>
  }
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40010000 	.word	0x40010000
 80046a8:	48000400 	.word	0x48000400
 80046ac:	48000800 	.word	0x48000800
 80046b0:	48000c00 	.word	0x48000c00
 80046b4:	48001000 	.word	0x48001000
 80046b8:	48001400 	.word	0x48001400
 80046bc:	40010400 	.word	0x40010400

080046c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	887b      	ldrh	r3, [r7, #2]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e001      	b.n	80046e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]
 80046fc:	4613      	mov	r3, r2
 80046fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004700:	787b      	ldrb	r3, [r7, #1]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004706:	887a      	ldrh	r2, [r7, #2]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800470c:	e002      	b.n	8004714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800470e:	887a      	ldrh	r2, [r7, #2]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800472a:	4b08      	ldr	r3, [pc, #32]	@ (800474c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004736:	4a05      	ldr	r2, [pc, #20]	@ (800474c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fe5c 	bl	80033fc <HAL_GPIO_EXTI_Callback>
  }
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40010400 	.word	0x40010400

08004750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d141      	bne.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800475e:	4b4b      	ldr	r3, [pc, #300]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476a:	d131      	bne.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800476c:	4b47      	ldr	r3, [pc, #284]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004772:	4a46      	ldr	r2, [pc, #280]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004778:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800477c:	4b43      	ldr	r3, [pc, #268]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004784:	4a41      	ldr	r2, [pc, #260]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800478a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800478c:	4b40      	ldr	r3, [pc, #256]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2232      	movs	r2, #50	@ 0x32
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	4a3f      	ldr	r2, [pc, #252]	@ (8004894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	0c9b      	lsrs	r3, r3, #18
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047a2:	e002      	b.n	80047aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047aa:	4b38      	ldr	r3, [pc, #224]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b6:	d102      	bne.n	80047be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f2      	bne.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047be:	4b33      	ldr	r3, [pc, #204]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ca:	d158      	bne.n	800487e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e057      	b.n	8004880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047d0:	4b2e      	ldr	r3, [pc, #184]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d6:	4a2d      	ldr	r2, [pc, #180]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80047e0:	e04d      	b.n	800487e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e8:	d141      	bne.n	800486e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ea:	4b28      	ldr	r3, [pc, #160]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f6:	d131      	bne.n	800485c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047f8:	4b24      	ldr	r3, [pc, #144]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047fe:	4a23      	ldr	r2, [pc, #140]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004808:	4b20      	ldr	r3, [pc, #128]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004810:	4a1e      	ldr	r2, [pc, #120]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004816:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004818:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2232      	movs	r2, #50	@ 0x32
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	4a1c      	ldr	r2, [pc, #112]	@ (8004894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	0c9b      	lsrs	r3, r3, #18
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800482e:	e002      	b.n	8004836 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3b01      	subs	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004836:	4b15      	ldr	r3, [pc, #84]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004842:	d102      	bne.n	800484a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f2      	bne.n	8004830 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800484a:	4b10      	ldr	r3, [pc, #64]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004856:	d112      	bne.n	800487e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e011      	b.n	8004880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004862:	4a0a      	ldr	r2, [pc, #40]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004868:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800486c:	e007      	b.n	800487e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800486e:	4b07      	ldr	r3, [pc, #28]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004876:	4a05      	ldr	r2, [pc, #20]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004878:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800487c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40007000 	.word	0x40007000
 8004890:	20000034 	.word	0x20000034
 8004894:	431bde83 	.word	0x431bde83

08004898 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a04      	ldr	r2, [pc, #16]	@ (80048b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048a6:	6093      	str	r3, [r2, #8]
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40007000 	.word	0x40007000

080048b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e2fe      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d075      	beq.n	80049c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d6:	4b97      	ldr	r3, [pc, #604]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e0:	4b94      	ldr	r3, [pc, #592]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b0c      	cmp	r3, #12
 80048ee:	d102      	bne.n	80048f6 <HAL_RCC_OscConfig+0x3e>
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d002      	beq.n	80048fc <HAL_RCC_OscConfig+0x44>
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d10b      	bne.n	8004914 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	4b8d      	ldr	r3, [pc, #564]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d05b      	beq.n	80049c0 <HAL_RCC_OscConfig+0x108>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d157      	bne.n	80049c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e2d9      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491c:	d106      	bne.n	800492c <HAL_RCC_OscConfig+0x74>
 800491e:	4b85      	ldr	r3, [pc, #532]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a84      	ldr	r2, [pc, #528]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e01d      	b.n	8004968 <HAL_RCC_OscConfig+0xb0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004934:	d10c      	bne.n	8004950 <HAL_RCC_OscConfig+0x98>
 8004936:	4b7f      	ldr	r3, [pc, #508]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 800493c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	4b7c      	ldr	r3, [pc, #496]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a7b      	ldr	r2, [pc, #492]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e00b      	b.n	8004968 <HAL_RCC_OscConfig+0xb0>
 8004950:	4b78      	ldr	r3, [pc, #480]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a77      	ldr	r2, [pc, #476]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	4b75      	ldr	r3, [pc, #468]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a74      	ldr	r2, [pc, #464]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d013      	beq.n	8004998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7ff f8d6 	bl	8003b20 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004978:	f7ff f8d2 	bl	8003b20 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	@ 0x64
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e29e      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800498a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0xc0>
 8004996:	e014      	b.n	80049c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7ff f8c2 	bl	8003b20 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a0:	f7ff f8be 	bl	8003b20 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	@ 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e28a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049b2:	4b60      	ldr	r3, [pc, #384]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0xe8>
 80049be:	e000      	b.n	80049c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d075      	beq.n	8004aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ce:	4b59      	ldr	r3, [pc, #356]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d8:	4b56      	ldr	r3, [pc, #344]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b0c      	cmp	r3, #12
 80049e6:	d102      	bne.n	80049ee <HAL_RCC_OscConfig+0x136>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d002      	beq.n	80049f4 <HAL_RCC_OscConfig+0x13c>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11f      	bne.n	8004a34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_OscConfig+0x154>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e25d      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0c:	4b49      	ldr	r3, [pc, #292]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	061b      	lsls	r3, r3, #24
 8004a1a:	4946      	ldr	r1, [pc, #280]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a20:	4b45      	ldr	r3, [pc, #276]	@ (8004b38 <HAL_RCC_OscConfig+0x280>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff f82f 	bl	8003a88 <HAL_InitTick>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d043      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e249      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d023      	beq.n	8004a84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a3c      	ldr	r2, [pc, #240]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7ff f86a 	bl	8003b20 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a50:	f7ff f866 	bl	8003b20 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e232      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a62:	4b34      	ldr	r3, [pc, #208]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6e:	4b31      	ldr	r3, [pc, #196]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	061b      	lsls	r3, r3, #24
 8004a7c:	492d      	ldr	r1, [pc, #180]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	604b      	str	r3, [r1, #4]
 8004a82:	e01a      	b.n	8004aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a84:	4b2b      	ldr	r3, [pc, #172]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2a      	ldr	r2, [pc, #168]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004a8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7ff f846 	bl	8003b20 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a98:	f7ff f842 	bl	8003b20 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e20e      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aaa:	4b22      	ldr	r3, [pc, #136]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x1e0>
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d041      	beq.n	8004b4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01c      	beq.n	8004b08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ace:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ad4:	4a17      	ldr	r2, [pc, #92]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ade:	f7ff f81f 	bl	8003b20 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae6:	f7ff f81b 	bl	8003b20 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e1e7      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004af8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ef      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x22e>
 8004b06:	e020      	b.n	8004b4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b08:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b0e:	4a09      	ldr	r2, [pc, #36]	@ (8004b34 <HAL_RCC_OscConfig+0x27c>)
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b18:	f7ff f802 	bl	8003b20 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b1e:	e00d      	b.n	8004b3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b20:	f7fe fffe 	bl	8003b20 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d906      	bls.n	8004b3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e1ca      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ea      	bne.n	8004b20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 80a6 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b5c:	4b84      	ldr	r3, [pc, #528]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_OscConfig+0x2b4>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x2b6>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b72:	4b7f      	ldr	r3, [pc, #508]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b76:	4a7e      	ldr	r2, [pc, #504]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b7e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8e:	4b79      	ldr	r3, [pc, #484]	@ (8004d74 <HAL_RCC_OscConfig+0x4bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d118      	bne.n	8004bcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b9a:	4b76      	ldr	r3, [pc, #472]	@ (8004d74 <HAL_RCC_OscConfig+0x4bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a75      	ldr	r2, [pc, #468]	@ (8004d74 <HAL_RCC_OscConfig+0x4bc>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba6:	f7fe ffbb 	bl	8003b20 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bae:	f7fe ffb7 	bl	8003b20 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e183      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8004d74 <HAL_RCC_OscConfig+0x4bc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d108      	bne.n	8004be6 <HAL_RCC_OscConfig+0x32e>
 8004bd4:	4b66      	ldr	r3, [pc, #408]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bda:	4a65      	ldr	r2, [pc, #404]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004be4:	e024      	b.n	8004c30 <HAL_RCC_OscConfig+0x378>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d110      	bne.n	8004c10 <HAL_RCC_OscConfig+0x358>
 8004bee:	4b60      	ldr	r3, [pc, #384]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c04:	4a5a      	ldr	r2, [pc, #360]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c0e:	e00f      	b.n	8004c30 <HAL_RCC_OscConfig+0x378>
 8004c10:	4b57      	ldr	r3, [pc, #348]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c16:	4a56      	ldr	r2, [pc, #344]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c20:	4b53      	ldr	r3, [pc, #332]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c26:	4a52      	ldr	r2, [pc, #328]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c28:	f023 0304 	bic.w	r3, r3, #4
 8004c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d016      	beq.n	8004c66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fe ff72 	bl	8003b20 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c40:	f7fe ff6e 	bl	8003b20 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e138      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c56:	4b46      	ldr	r3, [pc, #280]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ed      	beq.n	8004c40 <HAL_RCC_OscConfig+0x388>
 8004c64:	e015      	b.n	8004c92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fe ff5b 	bl	8003b20 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fe ff57 	bl	8003b20 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e121      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c84:	4b3a      	ldr	r3, [pc, #232]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1ed      	bne.n	8004c6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c92:	7ffb      	ldrb	r3, [r7, #31]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d105      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c98:	4b35      	ldr	r3, [pc, #212]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9c:	4a34      	ldr	r2, [pc, #208]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d03c      	beq.n	8004d2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01c      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fe ff2a 	bl	8003b20 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cd0:	f7fe ff26 	bl	8003b20 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e0f2      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ce2:	4b23      	ldr	r3, [pc, #140]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0ef      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x418>
 8004cf0:	e01b      	b.n	8004d2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fe ff0d 	bl	8003b20 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d0a:	f7fe ff09 	bl	8003b20 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e0d5      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d1c:	4b14      	ldr	r3, [pc, #80]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1ef      	bne.n	8004d0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80c9 	beq.w	8004ec6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d34:	4b0e      	ldr	r3, [pc, #56]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	f000 8083 	beq.w	8004e48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d15e      	bne.n	8004e08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4a:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a08      	ldr	r2, [pc, #32]	@ (8004d70 <HAL_RCC_OscConfig+0x4b8>)
 8004d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fe fee3 	bl	8003b20 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5c:	e00c      	b.n	8004d78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5e:	f7fe fedf 	bl	8003b20 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d905      	bls.n	8004d78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0ab      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d78:	4b55      	ldr	r3, [pc, #340]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ec      	bne.n	8004d5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d84:	4b52      	ldr	r3, [pc, #328]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	4b52      	ldr	r3, [pc, #328]	@ (8004ed4 <HAL_RCC_OscConfig+0x61c>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6a11      	ldr	r1, [r2, #32]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d94:	3a01      	subs	r2, #1
 8004d96:	0112      	lsls	r2, r2, #4
 8004d98:	4311      	orrs	r1, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d9e:	0212      	lsls	r2, r2, #8
 8004da0:	4311      	orrs	r1, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004da6:	0852      	lsrs	r2, r2, #1
 8004da8:	3a01      	subs	r2, #1
 8004daa:	0552      	lsls	r2, r2, #21
 8004dac:	4311      	orrs	r1, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004db2:	0852      	lsrs	r2, r2, #1
 8004db4:	3a01      	subs	r2, #1
 8004db6:	0652      	lsls	r2, r2, #25
 8004db8:	4311      	orrs	r1, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dbe:	06d2      	lsls	r2, r2, #27
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	4943      	ldr	r1, [pc, #268]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc8:	4b41      	ldr	r3, [pc, #260]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a40      	ldr	r2, [pc, #256]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fe fe9e 	bl	8003b20 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fe fe9a 	bl	8003b20 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e066      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfa:	4b35      	ldr	r3, [pc, #212]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x530>
 8004e06:	e05e      	b.n	8004ec6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b31      	ldr	r3, [pc, #196]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a30      	ldr	r2, [pc, #192]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fe fe84 	bl	8003b20 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fe fe80 	bl	8003b20 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e04c      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2e:	4b28      	ldr	r3, [pc, #160]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e3a:	4b25      	ldr	r3, [pc, #148]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	4924      	ldr	r1, [pc, #144]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004e40:	4b25      	ldr	r3, [pc, #148]	@ (8004ed8 <HAL_RCC_OscConfig+0x620>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	60cb      	str	r3, [r1, #12]
 8004e46:	e03e      	b.n	8004ec6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e039      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e54:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f003 0203 	and.w	r2, r3, #3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d12c      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	3b01      	subs	r3, #1
 8004e74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d123      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d11b      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d113      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d109      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d001      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	019f800c 	.word	0x019f800c
 8004ed8:	feeefffc 	.word	0xfeeefffc

08004edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e11e      	b.n	8005132 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b91      	ldr	r3, [pc, #580]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d910      	bls.n	8004f24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b8e      	ldr	r3, [pc, #568]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 020f 	bic.w	r2, r3, #15
 8004f0a:	498c      	ldr	r1, [pc, #560]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b8a      	ldr	r3, [pc, #552]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e106      	b.n	8005132 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d073      	beq.n	8005018 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d129      	bne.n	8004f8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f38:	4b81      	ldr	r3, [pc, #516]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0f4      	b.n	8005132 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f48:	f000 f99e 	bl	8005288 <RCC_GetSysClockFreqFromPLLSource>
 8004f4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4a7c      	ldr	r2, [pc, #496]	@ (8005144 <HAL_RCC_ClockConfig+0x268>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d93f      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f56:	4b7a      	ldr	r3, [pc, #488]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d033      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d12f      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f76:	4b72      	ldr	r3, [pc, #456]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f7e:	4a70      	ldr	r2, [pc, #448]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f86:	2380      	movs	r3, #128	@ 0x80
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e024      	b.n	8004fd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f94:	4b6a      	ldr	r3, [pc, #424]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0c6      	b.n	8005132 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fa4:	4b66      	ldr	r3, [pc, #408]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0be      	b.n	8005132 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004fb4:	f000 f8ce 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4a61      	ldr	r2, [pc, #388]	@ (8005144 <HAL_RCC_ClockConfig+0x268>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d909      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fca:	4a5d      	ldr	r2, [pc, #372]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004fd2:	2380      	movs	r3, #128	@ 0x80
 8004fd4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f023 0203 	bic.w	r2, r3, #3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	4957      	ldr	r1, [pc, #348]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe8:	f7fe fd9a 	bl	8003b20 <HAL_GetTick>
 8004fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fee:	e00a      	b.n	8005006 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff0:	f7fe fd96 	bl	8003b20 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e095      	b.n	8005132 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005006:	4b4e      	ldr	r3, [pc, #312]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 020c 	and.w	r2, r3, #12
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	429a      	cmp	r2, r3
 8005016:	d1eb      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d023      	beq.n	800506c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005030:	4b43      	ldr	r3, [pc, #268]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a42      	ldr	r2, [pc, #264]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8005036:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800503a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005048:	4b3d      	ldr	r3, [pc, #244]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005050:	4a3b      	ldr	r2, [pc, #236]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8005052:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005056:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005058:	4b39      	ldr	r3, [pc, #228]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4936      	ldr	r1, [pc, #216]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
 800506a:	e008      	b.n	800507e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b80      	cmp	r3, #128	@ 0x80
 8005070:	d105      	bne.n	800507e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005072:	4b33      	ldr	r3, [pc, #204]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	4a32      	ldr	r2, [pc, #200]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8005078:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800507c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507e:	4b2f      	ldr	r3, [pc, #188]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d21d      	bcs.n	80050c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508c:	4b2b      	ldr	r3, [pc, #172]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f023 020f 	bic.w	r2, r3, #15
 8005094:	4929      	ldr	r1, [pc, #164]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800509c:	f7fe fd40 	bl	8003b20 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fe fd3c 	bl	8003b20 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e03b      	b.n	8005132 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b20      	ldr	r3, [pc, #128]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d1ed      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	4917      	ldr	r1, [pc, #92]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050f2:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	490f      	ldr	r1, [pc, #60]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005106:	f000 f825 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 800510a:	4602      	mov	r2, r0
 800510c:	4b0c      	ldr	r3, [pc, #48]	@ (8005140 <HAL_RCC_ClockConfig+0x264>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	490c      	ldr	r1, [pc, #48]	@ (8005148 <HAL_RCC_ClockConfig+0x26c>)
 8005118:	5ccb      	ldrb	r3, [r1, r3]
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	fa22 f303 	lsr.w	r3, r2, r3
 8005122:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <HAL_RCC_ClockConfig+0x270>)
 8005124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005126:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <HAL_RCC_ClockConfig+0x274>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fcac 	bl	8003a88 <HAL_InitTick>
 8005130:	4603      	mov	r3, r0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40022000 	.word	0x40022000
 8005140:	40021000 	.word	0x40021000
 8005144:	04c4b400 	.word	0x04c4b400
 8005148:	08009a20 	.word	0x08009a20
 800514c:	20000034 	.word	0x20000034
 8005150:	20000038 	.word	0x20000038

08005154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800515a:	4b2c      	ldr	r3, [pc, #176]	@ (800520c <HAL_RCC_GetSysClockFreq+0xb8>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	2b04      	cmp	r3, #4
 8005164:	d102      	bne.n	800516c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005166:	4b2a      	ldr	r3, [pc, #168]	@ (8005210 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	e047      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800516c:	4b27      	ldr	r3, [pc, #156]	@ (800520c <HAL_RCC_GetSysClockFreq+0xb8>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b08      	cmp	r3, #8
 8005176:	d102      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005178:	4b26      	ldr	r3, [pc, #152]	@ (8005214 <HAL_RCC_GetSysClockFreq+0xc0>)
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	e03e      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800517e:	4b23      	ldr	r3, [pc, #140]	@ (800520c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b0c      	cmp	r3, #12
 8005188:	d136      	bne.n	80051f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800518a:	4b20      	ldr	r3, [pc, #128]	@ (800520c <HAL_RCC_GetSysClockFreq+0xb8>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005194:	4b1d      	ldr	r3, [pc, #116]	@ (800520c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	3301      	adds	r3, #1
 80051a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d10c      	bne.n	80051c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005214 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b0:	4a16      	ldr	r2, [pc, #88]	@ (800520c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b2:	68d2      	ldr	r2, [r2, #12]
 80051b4:	0a12      	lsrs	r2, r2, #8
 80051b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	617b      	str	r3, [r7, #20]
      break;
 80051c0:	e00c      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051c2:	4a13      	ldr	r2, [pc, #76]	@ (8005210 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ca:	4a10      	ldr	r2, [pc, #64]	@ (800520c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051cc:	68d2      	ldr	r2, [r2, #12]
 80051ce:	0a12      	lsrs	r2, r2, #8
 80051d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051d4:	fb02 f303 	mul.w	r3, r2, r3
 80051d8:	617b      	str	r3, [r7, #20]
      break;
 80051da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	0e5b      	lsrs	r3, r3, #25
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	3301      	adds	r3, #1
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e001      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051fc:	693b      	ldr	r3, [r7, #16]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000
 8005210:	00f42400 	.word	0x00f42400
 8005214:	016e3600 	.word	0x016e3600

08005218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800521c:	4b03      	ldr	r3, [pc, #12]	@ (800522c <HAL_RCC_GetHCLKFreq+0x14>)
 800521e:	681b      	ldr	r3, [r3, #0]
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20000034 	.word	0x20000034

08005230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005234:	f7ff fff0 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	0a1b      	lsrs	r3, r3, #8
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4904      	ldr	r1, [pc, #16]	@ (8005258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000
 8005258:	08009a30 	.word	0x08009a30

0800525c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005260:	f7ff ffda 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	0adb      	lsrs	r3, r3, #11
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	4904      	ldr	r1, [pc, #16]	@ (8005284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800527c:	4618      	mov	r0, r3
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40021000 	.word	0x40021000
 8005284:	08009a30 	.word	0x08009a30

08005288 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800528e:	4b1e      	ldr	r3, [pc, #120]	@ (8005308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005298:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3301      	adds	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d10c      	bne.n	80052c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ac:	4a17      	ldr	r2, [pc, #92]	@ (800530c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	4a14      	ldr	r2, [pc, #80]	@ (8005308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052b6:	68d2      	ldr	r2, [r2, #12]
 80052b8:	0a12      	lsrs	r2, r2, #8
 80052ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	617b      	str	r3, [r7, #20]
    break;
 80052c4:	e00c      	b.n	80052e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052c6:	4a12      	ldr	r2, [pc, #72]	@ (8005310 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052d0:	68d2      	ldr	r2, [r2, #12]
 80052d2:	0a12      	lsrs	r2, r2, #8
 80052d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]
    break;
 80052de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e0:	4b09      	ldr	r3, [pc, #36]	@ (8005308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	0e5b      	lsrs	r3, r3, #25
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	3301      	adds	r3, #1
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052fa:	687b      	ldr	r3, [r7, #4]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40021000 	.word	0x40021000
 800530c:	016e3600 	.word	0x016e3600
 8005310:	00f42400 	.word	0x00f42400

08005314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800531c:	2300      	movs	r3, #0
 800531e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005320:	2300      	movs	r3, #0
 8005322:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8098 	beq.w	8005462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005332:	2300      	movs	r3, #0
 8005334:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005336:	4b43      	ldr	r3, [pc, #268]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	4b40      	ldr	r3, [pc, #256]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005346:	4a3f      	ldr	r2, [pc, #252]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534c:	6593      	str	r3, [r2, #88]	@ 0x58
 800534e:	4b3d      	ldr	r3, [pc, #244]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535a:	2301      	movs	r3, #1
 800535c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800535e:	4b3a      	ldr	r3, [pc, #232]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a39      	ldr	r2, [pc, #228]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005368:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800536a:	f7fe fbd9 	bl	8003b20 <HAL_GetTick>
 800536e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005370:	e009      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005372:	f7fe fbd5 	bl	8003b20 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d902      	bls.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	74fb      	strb	r3, [r7, #19]
        break;
 8005384:	e005      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005386:	4b30      	ldr	r3, [pc, #192]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ef      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d159      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005398:	4b2a      	ldr	r3, [pc, #168]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01e      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d019      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053b4:	4b23      	ldr	r3, [pc, #140]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053c0:	4b20      	ldr	r3, [pc, #128]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053e0:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d016      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f2:	f7fe fb95 	bl	8003b20 <HAL_GetTick>
 80053f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f8:	e00b      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fe fb91 	bl	8003b20 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d902      	bls.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	74fb      	strb	r3, [r7, #19]
            break;
 8005410:	e006      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005412:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0ec      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005426:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005434:	4903      	ldr	r1, [pc, #12]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800543c:	e008      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	74bb      	strb	r3, [r7, #18]
 8005442:	e005      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005444:	40021000 	.word	0x40021000
 8005448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544c:	7cfb      	ldrb	r3, [r7, #19]
 800544e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005450:	7c7b      	ldrb	r3, [r7, #17]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d105      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005456:	4ba7      	ldr	r3, [pc, #668]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545a:	4aa6      	ldr	r2, [pc, #664]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005460:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800546e:	4ba1      	ldr	r3, [pc, #644]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005474:	f023 0203 	bic.w	r2, r3, #3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	499d      	ldr	r1, [pc, #628]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005490:	4b98      	ldr	r3, [pc, #608]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005496:	f023 020c 	bic.w	r2, r3, #12
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4995      	ldr	r1, [pc, #596]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054b2:	4b90      	ldr	r3, [pc, #576]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	498c      	ldr	r1, [pc, #560]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054d4:	4b87      	ldr	r3, [pc, #540]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	4984      	ldr	r1, [pc, #528]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054f6:	4b7f      	ldr	r3, [pc, #508]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	497b      	ldr	r1, [pc, #492]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005518:	4b76      	ldr	r3, [pc, #472]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	4973      	ldr	r1, [pc, #460]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800553a:	4b6e      	ldr	r3, [pc, #440]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	496a      	ldr	r1, [pc, #424]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800555c:	4b65      	ldr	r3, [pc, #404]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005562:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4962      	ldr	r1, [pc, #392]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800557e:	4b5d      	ldr	r3, [pc, #372]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	4959      	ldr	r1, [pc, #356]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055a0:	4b54      	ldr	r3, [pc, #336]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055a6:	f023 0203 	bic.w	r2, r3, #3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ae:	4951      	ldr	r1, [pc, #324]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055c2:	4b4c      	ldr	r3, [pc, #304]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	4948      	ldr	r1, [pc, #288]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d015      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055e4:	4b43      	ldr	r3, [pc, #268]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	4940      	ldr	r1, [pc, #256]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005602:	d105      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005604:	4b3b      	ldr	r3, [pc, #236]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a3a      	ldr	r2, [pc, #232]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800560e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005618:	2b00      	cmp	r3, #0
 800561a:	d015      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800561c:	4b35      	ldr	r3, [pc, #212]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005622:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562a:	4932      	ldr	r1, [pc, #200]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800563a:	d105      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800563c:	4b2d      	ldr	r3, [pc, #180]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4a2c      	ldr	r2, [pc, #176]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005646:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d015      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005654:	4b27      	ldr	r3, [pc, #156]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005662:	4924      	ldr	r1, [pc, #144]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005672:	d105      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005674:	4b1f      	ldr	r3, [pc, #124]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	4a1e      	ldr	r2, [pc, #120]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800567e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d015      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800568c:	4b19      	ldr	r3, [pc, #100]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005692:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569a:	4916      	ldr	r1, [pc, #88]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056aa:	d105      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056ac:	4b11      	ldr	r3, [pc, #68]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	4a10      	ldr	r2, [pc, #64]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d019      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	4908      	ldr	r1, [pc, #32]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e2:	d109      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e4:	4b03      	ldr	r3, [pc, #12]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a02      	ldr	r2, [pc, #8]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ee:	60d3      	str	r3, [r2, #12]
 80056f0:	e002      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d015      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005704:	4b29      	ldr	r3, [pc, #164]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005712:	4926      	ldr	r1, [pc, #152]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005722:	d105      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005724:	4b21      	ldr	r3, [pc, #132]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	4a20      	ldr	r2, [pc, #128]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800572a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800572e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d015      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800573c:	4b1b      	ldr	r3, [pc, #108]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005742:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800574a:	4918      	ldr	r1, [pc, #96]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800575a:	d105      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800575c:	4b13      	ldr	r3, [pc, #76]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4a12      	ldr	r2, [pc, #72]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005766:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d015      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005774:	4b0d      	ldr	r3, [pc, #52]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800577a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005782:	490a      	ldr	r1, [pc, #40]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800578e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005792:	d105      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005794:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4a04      	ldr	r2, [pc, #16]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800579a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800579e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000

080057b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e054      	b.n	800586c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d111      	bne.n	80057f2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 ff3a 	bl	8007650 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a23      	ldr	r2, [pc, #140]	@ (8005874 <HAL_TIM_Base_Init+0xc4>)
 80057e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f001 fa83 	bl	8006d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	080034a9 	.word	0x080034a9

08005878 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	d001      	beq.n	8005890 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e04c      	b.n	800592a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a26      	ldr	r2, [pc, #152]	@ (8005938 <HAL_TIM_Base_Start+0xc0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d022      	beq.n	80058e8 <HAL_TIM_Base_Start+0x70>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058aa:	d01d      	beq.n	80058e8 <HAL_TIM_Base_Start+0x70>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a22      	ldr	r2, [pc, #136]	@ (800593c <HAL_TIM_Base_Start+0xc4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d018      	beq.n	80058e8 <HAL_TIM_Base_Start+0x70>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a21      	ldr	r2, [pc, #132]	@ (8005940 <HAL_TIM_Base_Start+0xc8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <HAL_TIM_Base_Start+0x70>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005944 <HAL_TIM_Base_Start+0xcc>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00e      	beq.n	80058e8 <HAL_TIM_Base_Start+0x70>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005948 <HAL_TIM_Base_Start+0xd0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d009      	beq.n	80058e8 <HAL_TIM_Base_Start+0x70>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1c      	ldr	r2, [pc, #112]	@ (800594c <HAL_TIM_Base_Start+0xd4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_TIM_Base_Start+0x70>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005950 <HAL_TIM_Base_Start+0xd8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d115      	bne.n	8005914 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	4b19      	ldr	r3, [pc, #100]	@ (8005954 <HAL_TIM_Base_Start+0xdc>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d015      	beq.n	8005926 <HAL_TIM_Base_Start+0xae>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005900:	d011      	beq.n	8005926 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0201 	orr.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005912:	e008      	b.n	8005926 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e000      	b.n	8005928 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800
 8005944:	40000c00 	.word	0x40000c00
 8005948:	40013400 	.word	0x40013400
 800594c:	40014000 	.word	0x40014000
 8005950:	40015000 	.word	0x40015000
 8005954:	00010007 	.word	0x00010007

08005958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d001      	beq.n	8005970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e054      	b.n	8005a1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a26      	ldr	r2, [pc, #152]	@ (8005a28 <HAL_TIM_Base_Start_IT+0xd0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d022      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x80>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800599a:	d01d      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x80>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a22      	ldr	r2, [pc, #136]	@ (8005a2c <HAL_TIM_Base_Start_IT+0xd4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d018      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x80>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a21      	ldr	r2, [pc, #132]	@ (8005a30 <HAL_TIM_Base_Start_IT+0xd8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d013      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x80>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a34 <HAL_TIM_Base_Start_IT+0xdc>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00e      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x80>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1e      	ldr	r2, [pc, #120]	@ (8005a38 <HAL_TIM_Base_Start_IT+0xe0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d009      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x80>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a3c <HAL_TIM_Base_Start_IT+0xe4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x80>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a40 <HAL_TIM_Base_Start_IT+0xe8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d115      	bne.n	8005a04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	4b19      	ldr	r3, [pc, #100]	@ (8005a44 <HAL_TIM_Base_Start_IT+0xec>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b06      	cmp	r3, #6
 80059e8:	d015      	beq.n	8005a16 <HAL_TIM_Base_Start_IT+0xbe>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f0:	d011      	beq.n	8005a16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0201 	orr.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a02:	e008      	b.n	8005a16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e000      	b.n	8005a18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40012c00 	.word	0x40012c00
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00
 8005a38:	40013400 	.word	0x40013400
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40015000 	.word	0x40015000
 8005a44:	00010007 	.word	0x00010007

08005a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e054      	b.n	8005b04 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d111      	bne.n	8005a8a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 fdee 	bl	8007650 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a23      	ldr	r2, [pc, #140]	@ (8005b0c <HAL_TIM_PWM_Init+0xc4>)
 8005a80:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	f001 f937 	bl	8006d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	08005b11 	.word	0x08005b11

08005b10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d109      	bne.n	8005b4c <HAL_TIM_PWM_Start_IT+0x28>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	e03c      	b.n	8005bc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d109      	bne.n	8005b66 <HAL_TIM_PWM_Start_IT+0x42>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	bf14      	ite	ne
 8005b5e:	2301      	movne	r3, #1
 8005b60:	2300      	moveq	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	e02f      	b.n	8005bc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d109      	bne.n	8005b80 <HAL_TIM_PWM_Start_IT+0x5c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	bf14      	ite	ne
 8005b78:	2301      	movne	r3, #1
 8005b7a:	2300      	moveq	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	e022      	b.n	8005bc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d109      	bne.n	8005b9a <HAL_TIM_PWM_Start_IT+0x76>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	bf14      	ite	ne
 8005b92:	2301      	movne	r3, #1
 8005b94:	2300      	moveq	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	e015      	b.n	8005bc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d109      	bne.n	8005bb4 <HAL_TIM_PWM_Start_IT+0x90>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e008      	b.n	8005bc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e0f1      	b.n	8005db2 <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_PWM_Start_IT+0xba>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bdc:	e023      	b.n	8005c26 <HAL_TIM_PWM_Start_IT+0x102>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_PWM_Start_IT+0xca>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bec:	e01b      	b.n	8005c26 <HAL_TIM_PWM_Start_IT+0x102>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_PWM_Start_IT+0xda>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bfc:	e013      	b.n	8005c26 <HAL_TIM_PWM_Start_IT+0x102>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d104      	bne.n	8005c0e <HAL_TIM_PWM_Start_IT+0xea>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c0c:	e00b      	b.n	8005c26 <HAL_TIM_PWM_Start_IT+0x102>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d104      	bne.n	8005c1e <HAL_TIM_PWM_Start_IT+0xfa>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c1c:	e003      	b.n	8005c26 <HAL_TIM_PWM_Start_IT+0x102>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b0c      	cmp	r3, #12
 8005c2a:	d841      	bhi.n	8005cb0 <HAL_TIM_PWM_Start_IT+0x18c>
 8005c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c34 <HAL_TIM_PWM_Start_IT+0x110>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005c69 	.word	0x08005c69
 8005c38:	08005cb1 	.word	0x08005cb1
 8005c3c:	08005cb1 	.word	0x08005cb1
 8005c40:	08005cb1 	.word	0x08005cb1
 8005c44:	08005c7b 	.word	0x08005c7b
 8005c48:	08005cb1 	.word	0x08005cb1
 8005c4c:	08005cb1 	.word	0x08005cb1
 8005c50:	08005cb1 	.word	0x08005cb1
 8005c54:	08005c8d 	.word	0x08005c8d
 8005c58:	08005cb1 	.word	0x08005cb1
 8005c5c:	08005cb1 	.word	0x08005cb1
 8005c60:	08005cb1 	.word	0x08005cb1
 8005c64:	08005c9f 	.word	0x08005c9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0202 	orr.w	r2, r2, #2
 8005c76:	60da      	str	r2, [r3, #12]
      break;
 8005c78:	e01d      	b.n	8005cb6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0204 	orr.w	r2, r2, #4
 8005c88:	60da      	str	r2, [r3, #12]
      break;
 8005c8a:	e014      	b.n	8005cb6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0208 	orr.w	r2, r2, #8
 8005c9a:	60da      	str	r2, [r3, #12]
      break;
 8005c9c:	e00b      	b.n	8005cb6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0210 	orr.w	r2, r2, #16
 8005cac:	60da      	str	r2, [r3, #12]
      break;
 8005cae:	e002      	b.n	8005cb6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d179      	bne.n	8005db0 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fc9d 	bl	8007604 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a3b      	ldr	r2, [pc, #236]	@ (8005dbc <HAL_TIM_PWM_Start_IT+0x298>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a39      	ldr	r2, [pc, #228]	@ (8005dc0 <HAL_TIM_PWM_Start_IT+0x29c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a38      	ldr	r2, [pc, #224]	@ (8005dc4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a36      	ldr	r2, [pc, #216]	@ (8005dc8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a35      	ldr	r2, [pc, #212]	@ (8005dcc <HAL_TIM_PWM_Start_IT+0x2a8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a33      	ldr	r2, [pc, #204]	@ (8005dd0 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_Start_IT+0x1e6>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <HAL_TIM_PWM_Start_IT+0x1e8>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a25      	ldr	r2, [pc, #148]	@ (8005dbc <HAL_TIM_PWM_Start_IT+0x298>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_TIM_PWM_Start_IT+0x24c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d32:	d01d      	beq.n	8005d70 <HAL_TIM_PWM_Start_IT+0x24c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a26      	ldr	r2, [pc, #152]	@ (8005dd4 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_TIM_PWM_Start_IT+0x24c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a25      	ldr	r2, [pc, #148]	@ (8005dd8 <HAL_TIM_PWM_Start_IT+0x2b4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_TIM_PWM_Start_IT+0x24c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	@ (8005ddc <HAL_TIM_PWM_Start_IT+0x2b8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_TIM_PWM_Start_IT+0x24c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc0 <HAL_TIM_PWM_Start_IT+0x29c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_TIM_PWM_Start_IT+0x24c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a18      	ldr	r2, [pc, #96]	@ (8005dc4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_TIM_PWM_Start_IT+0x24c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a19      	ldr	r2, [pc, #100]	@ (8005dd0 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d115      	bne.n	8005d9c <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	4b1a      	ldr	r3, [pc, #104]	@ (8005de0 <HAL_TIM_PWM_Start_IT+0x2bc>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b06      	cmp	r3, #6
 8005d80:	d015      	beq.n	8005dae <HAL_TIM_PWM_Start_IT+0x28a>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d88:	d011      	beq.n	8005dae <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9a:	e008      	b.n	8005dae <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e000      	b.n	8005db0 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800
 8005dd0:	40015000 	.word	0x40015000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	00010007 	.word	0x00010007

08005de4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e04c      	b.n	8005e92 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d111      	bne.n	8005e28 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 fc1f 	bl	8007650 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8005e9c <HAL_TIM_OnePulse_Init+0xb8>)
 8005e1e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f000 ff68 	bl	8006d10 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0208 	bic.w	r2, r2, #8
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6819      	ldr	r1, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	08005ea1 	.word	0x08005ea1

08005ea0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ec4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ecc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ed4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005edc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d108      	bne.n	8005ef6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d105      	bne.n	8005ef6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eea:	7b7b      	ldrb	r3, [r7, #13]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d102      	bne.n	8005ef6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ef0:	7b3b      	ldrb	r3, [r7, #12]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d001      	beq.n	8005efa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e059      	b.n	8005fae <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0202 	orr.w	r2, r2, #2
 8005f28:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0204 	orr.w	r2, r2, #4
 8005f38:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fb5e 	bl	8007604 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	2104      	movs	r1, #4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 fb57 	bl	8007604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a17      	ldr	r2, [pc, #92]	@ (8005fb8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d018      	beq.n	8005f92 <HAL_TIM_OnePulse_Start_IT+0xde>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a15      	ldr	r2, [pc, #84]	@ (8005fbc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <HAL_TIM_OnePulse_Start_IT+0xde>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a14      	ldr	r2, [pc, #80]	@ (8005fc0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00e      	beq.n	8005f92 <HAL_TIM_OnePulse_Start_IT+0xde>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a12      	ldr	r2, [pc, #72]	@ (8005fc4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d009      	beq.n	8005f92 <HAL_TIM_OnePulse_Start_IT+0xde>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a11      	ldr	r2, [pc, #68]	@ (8005fc8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d004      	beq.n	8005f92 <HAL_TIM_OnePulse_Start_IT+0xde>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8005fcc <HAL_TIM_OnePulse_Start_IT+0x118>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d101      	bne.n	8005f96 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8005f96:	2300      	movs	r3, #0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005faa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40012c00 	.word	0x40012c00
 8005fbc:	40013400 	.word	0x40013400
 8005fc0:	40014000 	.word	0x40014000
 8005fc4:	40014400 	.word	0x40014400
 8005fc8:	40014800 	.word	0x40014800
 8005fcc:	40015000 	.word	0x40015000

08005fd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0a2      	b.n	800612a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d111      	bne.n	8006014 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fb29 	bl	8007650 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a4a      	ldr	r2, [pc, #296]	@ (8006134 <HAL_TIM_Encoder_Init+0x164>)
 800600a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 fe68 	bl	8006d10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	4313      	orrs	r3, r2
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006086:	f023 030c 	bic.w	r3, r3, #12
 800608a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006092:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	4313      	orrs	r3, r2
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	011a      	lsls	r2, r3, #4
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	4313      	orrs	r3, r2
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80060c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80060cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	4313      	orrs	r3, r2
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	080035ed 	.word	0x080035ed

08006138 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006148:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006150:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006158:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006160:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d110      	bne.n	800618a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d102      	bne.n	8006174 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800616e:	7b7b      	ldrb	r3, [r7, #13]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d001      	beq.n	8006178 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e069      	b.n	800624c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006188:	e031      	b.n	80061ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b04      	cmp	r3, #4
 800618e:	d110      	bne.n	80061b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d102      	bne.n	800619c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006196:	7b3b      	ldrb	r3, [r7, #12]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d001      	beq.n	80061a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e055      	b.n	800624c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061b0:	e01d      	b.n	80061ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d108      	bne.n	80061ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d105      	bne.n	80061ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061be:	7b7b      	ldrb	r3, [r7, #13]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d102      	bne.n	80061ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061c4:	7b3b      	ldrb	r3, [r7, #12]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d001      	beq.n	80061ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e03e      	b.n	800624c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2202      	movs	r2, #2
 80061da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2202      	movs	r2, #2
 80061e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_TIM_Encoder_Start+0xc4>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d008      	beq.n	800620c <HAL_TIM_Encoder_Start+0xd4>
 80061fa:	e00f      	b.n	800621c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2201      	movs	r2, #1
 8006202:	2100      	movs	r1, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f001 f9fd 	bl	8007604 <TIM_CCxChannelCmd>
      break;
 800620a:	e016      	b.n	800623a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2201      	movs	r2, #1
 8006212:	2104      	movs	r1, #4
 8006214:	4618      	mov	r0, r3
 8006216:	f001 f9f5 	bl	8007604 <TIM_CCxChannelCmd>
      break;
 800621a:	e00e      	b.n	800623a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2201      	movs	r2, #1
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f001 f9ed 	bl	8007604 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2201      	movs	r2, #1
 8006230:	2104      	movs	r1, #4
 8006232:	4618      	mov	r0, r3
 8006234:	f001 f9e6 	bl	8007604 <TIM_CCxChannelCmd>
      break;
 8006238:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d026      	beq.n	80062c4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d021      	beq.n	80062c4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0202 	mvn.w	r2, #2
 8006288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	4798      	blx	r3
 80062a8:	e009      	b.n	80062be <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d026      	beq.n	800631c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d021      	beq.n	800631c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0204 	mvn.w	r2, #4
 80062e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2202      	movs	r2, #2
 80062e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
 8006300:	e009      	b.n	8006316 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d026      	beq.n	8006374 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d021      	beq.n	8006374 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0208 	mvn.w	r2, #8
 8006338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2204      	movs	r2, #4
 800633e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
 8006358:	e009      	b.n	800636e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b00      	cmp	r3, #0
 800637c:	d026      	beq.n	80063cc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b00      	cmp	r3, #0
 8006386:	d021      	beq.n	80063cc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0210 	mvn.w	r2, #16
 8006390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2208      	movs	r2, #8
 8006396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
 80063b0:	e009      	b.n	80063c6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00e      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0201 	mvn.w	r2, #1
 80063e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00e      	beq.n	8006426 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640e:	2b00      	cmp	r3, #0
 8006410:	d009      	beq.n	8006426 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800641a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00e      	beq.n	800644e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00e      	beq.n	8006476 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800646a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f06f 0220 	mvn.w	r2, #32
 8006492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80064ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80064e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00e      	beq.n	8006516 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800650a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00e      	beq.n	800653e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006562:	2302      	movs	r3, #2
 8006564:	e0ff      	b.n	8006766 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b14      	cmp	r3, #20
 8006572:	f200 80f0 	bhi.w	8006756 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006576:	a201      	add	r2, pc, #4	@ (adr r2, 800657c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	080065d1 	.word	0x080065d1
 8006580:	08006757 	.word	0x08006757
 8006584:	08006757 	.word	0x08006757
 8006588:	08006757 	.word	0x08006757
 800658c:	08006611 	.word	0x08006611
 8006590:	08006757 	.word	0x08006757
 8006594:	08006757 	.word	0x08006757
 8006598:	08006757 	.word	0x08006757
 800659c:	08006653 	.word	0x08006653
 80065a0:	08006757 	.word	0x08006757
 80065a4:	08006757 	.word	0x08006757
 80065a8:	08006757 	.word	0x08006757
 80065ac:	08006693 	.word	0x08006693
 80065b0:	08006757 	.word	0x08006757
 80065b4:	08006757 	.word	0x08006757
 80065b8:	08006757 	.word	0x08006757
 80065bc:	080066d5 	.word	0x080066d5
 80065c0:	08006757 	.word	0x08006757
 80065c4:	08006757 	.word	0x08006757
 80065c8:	08006757 	.word	0x08006757
 80065cc:	08006715 	.word	0x08006715
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fc4e 	bl	8006e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0208 	orr.w	r2, r2, #8
 80065ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0204 	bic.w	r2, r2, #4
 80065fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6999      	ldr	r1, [r3, #24]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	619a      	str	r2, [r3, #24]
      break;
 800660e:	e0a5      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fcc8 	bl	8006fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800662a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800663a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6999      	ldr	r1, [r3, #24]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	619a      	str	r2, [r3, #24]
      break;
 8006650:	e084      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fd3b 	bl	80070d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69da      	ldr	r2, [r3, #28]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0208 	orr.w	r2, r2, #8
 800666c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0204 	bic.w	r2, r2, #4
 800667c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69d9      	ldr	r1, [r3, #28]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	61da      	str	r2, [r3, #28]
      break;
 8006690:	e064      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fdad 	bl	80071f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69d9      	ldr	r1, [r3, #28]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	021a      	lsls	r2, r3, #8
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	61da      	str	r2, [r3, #28]
      break;
 80066d2:	e043      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fe20 	bl	8007320 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0208 	orr.w	r2, r2, #8
 80066ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0204 	bic.w	r2, r2, #4
 80066fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006712:	e023      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fe6a 	bl	80073f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800672e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800673e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	021a      	lsls	r2, r3, #8
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006754:	e002      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
      break;
 800675a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006764:	7dfb      	ldrb	r3, [r7, #23]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_TIM_ConfigClockSource+0x1c>
 8006788:	2302      	movs	r3, #2
 800678a:	e0f6      	b.n	800697a <HAL_TIM_ConfigClockSource+0x20a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80067aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80067ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a6f      	ldr	r2, [pc, #444]	@ (8006984 <HAL_TIM_ConfigClockSource+0x214>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	f000 80c1 	beq.w	800694e <HAL_TIM_ConfigClockSource+0x1de>
 80067cc:	4a6d      	ldr	r2, [pc, #436]	@ (8006984 <HAL_TIM_ConfigClockSource+0x214>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	f200 80c6 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 80067d4:	4a6c      	ldr	r2, [pc, #432]	@ (8006988 <HAL_TIM_ConfigClockSource+0x218>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	f000 80b9 	beq.w	800694e <HAL_TIM_ConfigClockSource+0x1de>
 80067dc:	4a6a      	ldr	r2, [pc, #424]	@ (8006988 <HAL_TIM_ConfigClockSource+0x218>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	f200 80be 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 80067e4:	4a69      	ldr	r2, [pc, #420]	@ (800698c <HAL_TIM_ConfigClockSource+0x21c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	f000 80b1 	beq.w	800694e <HAL_TIM_ConfigClockSource+0x1de>
 80067ec:	4a67      	ldr	r2, [pc, #412]	@ (800698c <HAL_TIM_ConfigClockSource+0x21c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	f200 80b6 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 80067f4:	4a66      	ldr	r2, [pc, #408]	@ (8006990 <HAL_TIM_ConfigClockSource+0x220>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	f000 80a9 	beq.w	800694e <HAL_TIM_ConfigClockSource+0x1de>
 80067fc:	4a64      	ldr	r2, [pc, #400]	@ (8006990 <HAL_TIM_ConfigClockSource+0x220>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	f200 80ae 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006804:	4a63      	ldr	r2, [pc, #396]	@ (8006994 <HAL_TIM_ConfigClockSource+0x224>)
 8006806:	4293      	cmp	r3, r2
 8006808:	f000 80a1 	beq.w	800694e <HAL_TIM_ConfigClockSource+0x1de>
 800680c:	4a61      	ldr	r2, [pc, #388]	@ (8006994 <HAL_TIM_ConfigClockSource+0x224>)
 800680e:	4293      	cmp	r3, r2
 8006810:	f200 80a6 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006814:	4a60      	ldr	r2, [pc, #384]	@ (8006998 <HAL_TIM_ConfigClockSource+0x228>)
 8006816:	4293      	cmp	r3, r2
 8006818:	f000 8099 	beq.w	800694e <HAL_TIM_ConfigClockSource+0x1de>
 800681c:	4a5e      	ldr	r2, [pc, #376]	@ (8006998 <HAL_TIM_ConfigClockSource+0x228>)
 800681e:	4293      	cmp	r3, r2
 8006820:	f200 809e 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006824:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006828:	f000 8091 	beq.w	800694e <HAL_TIM_ConfigClockSource+0x1de>
 800682c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006830:	f200 8096 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006838:	f000 8089 	beq.w	800694e <HAL_TIM_ConfigClockSource+0x1de>
 800683c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006840:	f200 808e 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006848:	d03e      	beq.n	80068c8 <HAL_TIM_ConfigClockSource+0x158>
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684e:	f200 8087 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006856:	f000 8086 	beq.w	8006966 <HAL_TIM_ConfigClockSource+0x1f6>
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800685e:	d87f      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006860:	2b70      	cmp	r3, #112	@ 0x70
 8006862:	d01a      	beq.n	800689a <HAL_TIM_ConfigClockSource+0x12a>
 8006864:	2b70      	cmp	r3, #112	@ 0x70
 8006866:	d87b      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006868:	2b60      	cmp	r3, #96	@ 0x60
 800686a:	d050      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x19e>
 800686c:	2b60      	cmp	r3, #96	@ 0x60
 800686e:	d877      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006870:	2b50      	cmp	r3, #80	@ 0x50
 8006872:	d03c      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0x17e>
 8006874:	2b50      	cmp	r3, #80	@ 0x50
 8006876:	d873      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	d058      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x1be>
 800687c:	2b40      	cmp	r3, #64	@ 0x40
 800687e:	d86f      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006880:	2b30      	cmp	r3, #48	@ 0x30
 8006882:	d064      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x1de>
 8006884:	2b30      	cmp	r3, #48	@ 0x30
 8006886:	d86b      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006888:	2b20      	cmp	r3, #32
 800688a:	d060      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x1de>
 800688c:	2b20      	cmp	r3, #32
 800688e:	d867      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d05c      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x1de>
 8006894:	2b10      	cmp	r3, #16
 8006896:	d05a      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x1de>
 8006898:	e062      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068aa:	f000 fe8b 	bl	80075c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	609a      	str	r2, [r3, #8]
      break;
 80068c6:	e04f      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068d8:	f000 fe74 	bl	80075c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068ea:	609a      	str	r2, [r3, #8]
      break;
 80068ec:	e03c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fa:	461a      	mov	r2, r3
 80068fc:	f000 fde6 	bl	80074cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2150      	movs	r1, #80	@ 0x50
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fe3f 	bl	800758a <TIM_ITRx_SetConfig>
      break;
 800690c:	e02c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800691a:	461a      	mov	r2, r3
 800691c:	f000 fe05 	bl	800752a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2160      	movs	r1, #96	@ 0x60
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fe2f 	bl	800758a <TIM_ITRx_SetConfig>
      break;
 800692c:	e01c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800693a:	461a      	mov	r2, r3
 800693c:	f000 fdc6 	bl	80074cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2140      	movs	r1, #64	@ 0x40
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fe1f 	bl	800758a <TIM_ITRx_SetConfig>
      break;
 800694c:	e00c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4619      	mov	r1, r3
 8006958:	4610      	mov	r0, r2
 800695a:	f000 fe16 	bl	800758a <TIM_ITRx_SetConfig>
      break;
 800695e:	e003      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
      break;
 8006964:	e000      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	00100070 	.word	0x00100070
 8006988:	00100060 	.word	0x00100060
 800698c:	00100050 	.word	0x00100050
 8006990:	00100040 	.word	0x00100040
 8006994:	00100030 	.word	0x00100030
 8006998:	00100020 	.word	0x00100020

0800699c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e14a      	b.n	8006d02 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f040 80dd 	bne.w	8006c34 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	2b1f      	cmp	r3, #31
 8006a7e:	f200 80d6 	bhi.w	8006c2e <HAL_TIM_RegisterCallback+0x1de>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <HAL_TIM_RegisterCallback+0x38>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006b09 	.word	0x08006b09
 8006a8c:	08006b11 	.word	0x08006b11
 8006a90:	08006b19 	.word	0x08006b19
 8006a94:	08006b21 	.word	0x08006b21
 8006a98:	08006b29 	.word	0x08006b29
 8006a9c:	08006b31 	.word	0x08006b31
 8006aa0:	08006b39 	.word	0x08006b39
 8006aa4:	08006b41 	.word	0x08006b41
 8006aa8:	08006b49 	.word	0x08006b49
 8006aac:	08006b51 	.word	0x08006b51
 8006ab0:	08006b59 	.word	0x08006b59
 8006ab4:	08006b61 	.word	0x08006b61
 8006ab8:	08006b69 	.word	0x08006b69
 8006abc:	08006b71 	.word	0x08006b71
 8006ac0:	08006b7b 	.word	0x08006b7b
 8006ac4:	08006b85 	.word	0x08006b85
 8006ac8:	08006b8f 	.word	0x08006b8f
 8006acc:	08006b99 	.word	0x08006b99
 8006ad0:	08006ba3 	.word	0x08006ba3
 8006ad4:	08006bad 	.word	0x08006bad
 8006ad8:	08006bb7 	.word	0x08006bb7
 8006adc:	08006bc1 	.word	0x08006bc1
 8006ae0:	08006bcb 	.word	0x08006bcb
 8006ae4:	08006bd5 	.word	0x08006bd5
 8006ae8:	08006bdf 	.word	0x08006bdf
 8006aec:	08006be9 	.word	0x08006be9
 8006af0:	08006bf3 	.word	0x08006bf3
 8006af4:	08006bfd 	.word	0x08006bfd
 8006af8:	08006c07 	.word	0x08006c07
 8006afc:	08006c11 	.word	0x08006c11
 8006b00:	08006c1b 	.word	0x08006c1b
 8006b04:	08006c25 	.word	0x08006c25
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006b0e:	e0f7      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006b16:	e0f3      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006b1e:	e0ef      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006b26:	e0eb      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006b2e:	e0e7      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006b36:	e0e3      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006b3e:	e0df      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006b46:	e0db      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006b4e:	e0d7      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006b56:	e0d3      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006b5e:	e0cf      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006b66:	e0cb      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006b6e:	e0c7      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006b78:	e0c2      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8006b82:	e0bd      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006b8c:	e0b8      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8006b96:	e0b3      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8006ba0:	e0ae      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006baa:	e0a9      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006bb4:	e0a4      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8006bbe:	e09f      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006bc8:	e09a      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8006bd2:	e095      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006bdc:	e090      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8006be6:	e08b      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8006bf0:	e086      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8006bfa:	e081      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8006c04:	e07c      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8006c0e:	e077      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8006c18:	e072      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8006c22:	e06d      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006c2c:	e068      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	75fb      	strb	r3, [r7, #23]
        break;
 8006c32:	e065      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d15d      	bne.n	8006cfc <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	2b0d      	cmp	r3, #13
 8006c44:	d857      	bhi.n	8006cf6 <HAL_TIM_RegisterCallback+0x2a6>
 8006c46:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <HAL_TIM_RegisterCallback+0x1fc>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c85 	.word	0x08006c85
 8006c50:	08006c8d 	.word	0x08006c8d
 8006c54:	08006c95 	.word	0x08006c95
 8006c58:	08006c9d 	.word	0x08006c9d
 8006c5c:	08006ca5 	.word	0x08006ca5
 8006c60:	08006cad 	.word	0x08006cad
 8006c64:	08006cb5 	.word	0x08006cb5
 8006c68:	08006cbd 	.word	0x08006cbd
 8006c6c:	08006cc5 	.word	0x08006cc5
 8006c70:	08006ccd 	.word	0x08006ccd
 8006c74:	08006cd5 	.word	0x08006cd5
 8006c78:	08006cdd 	.word	0x08006cdd
 8006c7c:	08006ce5 	.word	0x08006ce5
 8006c80:	08006ced 	.word	0x08006ced
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006c8a:	e039      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006c92:	e035      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006c9a:	e031      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006ca2:	e02d      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006caa:	e029      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006cb2:	e025      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006cba:	e021      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006cc2:	e01d      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006cca:	e019      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006cd2:	e015      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006cda:	e011      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006ce2:	e00d      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006cea:	e009      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006cf4:	e004      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]
        break;
 8006cfa:	e001      	b.n	8006d00 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop

08006d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a4c      	ldr	r2, [pc, #304]	@ (8006e54 <TIM_Base_SetConfig+0x144>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d017      	beq.n	8006d58 <TIM_Base_SetConfig+0x48>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2e:	d013      	beq.n	8006d58 <TIM_Base_SetConfig+0x48>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a49      	ldr	r2, [pc, #292]	@ (8006e58 <TIM_Base_SetConfig+0x148>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00f      	beq.n	8006d58 <TIM_Base_SetConfig+0x48>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a48      	ldr	r2, [pc, #288]	@ (8006e5c <TIM_Base_SetConfig+0x14c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00b      	beq.n	8006d58 <TIM_Base_SetConfig+0x48>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a47      	ldr	r2, [pc, #284]	@ (8006e60 <TIM_Base_SetConfig+0x150>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d007      	beq.n	8006d58 <TIM_Base_SetConfig+0x48>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a46      	ldr	r2, [pc, #280]	@ (8006e64 <TIM_Base_SetConfig+0x154>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <TIM_Base_SetConfig+0x48>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a45      	ldr	r2, [pc, #276]	@ (8006e68 <TIM_Base_SetConfig+0x158>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d108      	bne.n	8006d6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a39      	ldr	r2, [pc, #228]	@ (8006e54 <TIM_Base_SetConfig+0x144>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d023      	beq.n	8006dba <TIM_Base_SetConfig+0xaa>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d78:	d01f      	beq.n	8006dba <TIM_Base_SetConfig+0xaa>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a36      	ldr	r2, [pc, #216]	@ (8006e58 <TIM_Base_SetConfig+0x148>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01b      	beq.n	8006dba <TIM_Base_SetConfig+0xaa>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a35      	ldr	r2, [pc, #212]	@ (8006e5c <TIM_Base_SetConfig+0x14c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d017      	beq.n	8006dba <TIM_Base_SetConfig+0xaa>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a34      	ldr	r2, [pc, #208]	@ (8006e60 <TIM_Base_SetConfig+0x150>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <TIM_Base_SetConfig+0xaa>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a33      	ldr	r2, [pc, #204]	@ (8006e64 <TIM_Base_SetConfig+0x154>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00f      	beq.n	8006dba <TIM_Base_SetConfig+0xaa>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a33      	ldr	r2, [pc, #204]	@ (8006e6c <TIM_Base_SetConfig+0x15c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00b      	beq.n	8006dba <TIM_Base_SetConfig+0xaa>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a32      	ldr	r2, [pc, #200]	@ (8006e70 <TIM_Base_SetConfig+0x160>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d007      	beq.n	8006dba <TIM_Base_SetConfig+0xaa>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a31      	ldr	r2, [pc, #196]	@ (8006e74 <TIM_Base_SetConfig+0x164>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d003      	beq.n	8006dba <TIM_Base_SetConfig+0xaa>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2c      	ldr	r2, [pc, #176]	@ (8006e68 <TIM_Base_SetConfig+0x158>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d108      	bne.n	8006dcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a18      	ldr	r2, [pc, #96]	@ (8006e54 <TIM_Base_SetConfig+0x144>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d013      	beq.n	8006e20 <TIM_Base_SetConfig+0x110>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8006e64 <TIM_Base_SetConfig+0x154>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00f      	beq.n	8006e20 <TIM_Base_SetConfig+0x110>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a1a      	ldr	r2, [pc, #104]	@ (8006e6c <TIM_Base_SetConfig+0x15c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00b      	beq.n	8006e20 <TIM_Base_SetConfig+0x110>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a19      	ldr	r2, [pc, #100]	@ (8006e70 <TIM_Base_SetConfig+0x160>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d007      	beq.n	8006e20 <TIM_Base_SetConfig+0x110>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a18      	ldr	r2, [pc, #96]	@ (8006e74 <TIM_Base_SetConfig+0x164>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_Base_SetConfig+0x110>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a13      	ldr	r2, [pc, #76]	@ (8006e68 <TIM_Base_SetConfig+0x158>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d103      	bne.n	8006e28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d105      	bne.n	8006e46 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f023 0201 	bic.w	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	611a      	str	r2, [r3, #16]
  }
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40012c00 	.word	0x40012c00
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	40013400 	.word	0x40013400
 8006e68:	40015000 	.word	0x40015000
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40014400 	.word	0x40014400
 8006e74:	40014800 	.word	0x40014800

08006e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f023 0201 	bic.w	r2, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0303 	bic.w	r3, r3, #3
 8006eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f023 0302 	bic.w	r3, r3, #2
 8006ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a30      	ldr	r2, [pc, #192]	@ (8006f94 <TIM_OC1_SetConfig+0x11c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <TIM_OC1_SetConfig+0x88>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a2f      	ldr	r2, [pc, #188]	@ (8006f98 <TIM_OC1_SetConfig+0x120>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00f      	beq.n	8006f00 <TIM_OC1_SetConfig+0x88>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8006f9c <TIM_OC1_SetConfig+0x124>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00b      	beq.n	8006f00 <TIM_OC1_SetConfig+0x88>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a2d      	ldr	r2, [pc, #180]	@ (8006fa0 <TIM_OC1_SetConfig+0x128>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_OC1_SetConfig+0x88>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8006fa4 <TIM_OC1_SetConfig+0x12c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_OC1_SetConfig+0x88>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a2b      	ldr	r2, [pc, #172]	@ (8006fa8 <TIM_OC1_SetConfig+0x130>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10c      	bne.n	8006f1a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f023 0308 	bic.w	r3, r3, #8
 8006f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f023 0304 	bic.w	r3, r3, #4
 8006f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f94 <TIM_OC1_SetConfig+0x11c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <TIM_OC1_SetConfig+0xd2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1c      	ldr	r2, [pc, #112]	@ (8006f98 <TIM_OC1_SetConfig+0x120>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00f      	beq.n	8006f4a <TIM_OC1_SetConfig+0xd2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006f9c <TIM_OC1_SetConfig+0x124>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00b      	beq.n	8006f4a <TIM_OC1_SetConfig+0xd2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a1a      	ldr	r2, [pc, #104]	@ (8006fa0 <TIM_OC1_SetConfig+0x128>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d007      	beq.n	8006f4a <TIM_OC1_SetConfig+0xd2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a19      	ldr	r2, [pc, #100]	@ (8006fa4 <TIM_OC1_SetConfig+0x12c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d003      	beq.n	8006f4a <TIM_OC1_SetConfig+0xd2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a18      	ldr	r2, [pc, #96]	@ (8006fa8 <TIM_OC1_SetConfig+0x130>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d111      	bne.n	8006f6e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	621a      	str	r2, [r3, #32]
}
 8006f88:	bf00      	nop
 8006f8a:	371c      	adds	r7, #28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	40012c00 	.word	0x40012c00
 8006f98:	40013400 	.word	0x40013400
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40014400 	.word	0x40014400
 8006fa4:	40014800 	.word	0x40014800
 8006fa8:	40015000 	.word	0x40015000

08006fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	f023 0210 	bic.w	r2, r3, #16
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	021b      	lsls	r3, r3, #8
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f023 0320 	bic.w	r3, r3, #32
 8006ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a2c      	ldr	r2, [pc, #176]	@ (80070bc <TIM_OC2_SetConfig+0x110>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_OC2_SetConfig+0x74>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a2b      	ldr	r2, [pc, #172]	@ (80070c0 <TIM_OC2_SetConfig+0x114>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_OC2_SetConfig+0x74>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a2a      	ldr	r2, [pc, #168]	@ (80070c4 <TIM_OC2_SetConfig+0x118>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10d      	bne.n	800703c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800703a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a1f      	ldr	r2, [pc, #124]	@ (80070bc <TIM_OC2_SetConfig+0x110>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d013      	beq.n	800706c <TIM_OC2_SetConfig+0xc0>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a1e      	ldr	r2, [pc, #120]	@ (80070c0 <TIM_OC2_SetConfig+0x114>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00f      	beq.n	800706c <TIM_OC2_SetConfig+0xc0>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a1e      	ldr	r2, [pc, #120]	@ (80070c8 <TIM_OC2_SetConfig+0x11c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00b      	beq.n	800706c <TIM_OC2_SetConfig+0xc0>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1d      	ldr	r2, [pc, #116]	@ (80070cc <TIM_OC2_SetConfig+0x120>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d007      	beq.n	800706c <TIM_OC2_SetConfig+0xc0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <TIM_OC2_SetConfig+0x124>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_OC2_SetConfig+0xc0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a17      	ldr	r2, [pc, #92]	@ (80070c4 <TIM_OC2_SetConfig+0x118>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d113      	bne.n	8007094 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800707a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40012c00 	.word	0x40012c00
 80070c0:	40013400 	.word	0x40013400
 80070c4:	40015000 	.word	0x40015000
 80070c8:	40014000 	.word	0x40014000
 80070cc:	40014400 	.word	0x40014400
 80070d0:	40014800 	.word	0x40014800

080070d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2b      	ldr	r2, [pc, #172]	@ (80071e0 <TIM_OC3_SetConfig+0x10c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d007      	beq.n	8007146 <TIM_OC3_SetConfig+0x72>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2a      	ldr	r2, [pc, #168]	@ (80071e4 <TIM_OC3_SetConfig+0x110>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_OC3_SetConfig+0x72>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a29      	ldr	r2, [pc, #164]	@ (80071e8 <TIM_OC3_SetConfig+0x114>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d10d      	bne.n	8007162 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800714c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a1e      	ldr	r2, [pc, #120]	@ (80071e0 <TIM_OC3_SetConfig+0x10c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <TIM_OC3_SetConfig+0xbe>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a1d      	ldr	r2, [pc, #116]	@ (80071e4 <TIM_OC3_SetConfig+0x110>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00f      	beq.n	8007192 <TIM_OC3_SetConfig+0xbe>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a1d      	ldr	r2, [pc, #116]	@ (80071ec <TIM_OC3_SetConfig+0x118>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00b      	beq.n	8007192 <TIM_OC3_SetConfig+0xbe>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1c      	ldr	r2, [pc, #112]	@ (80071f0 <TIM_OC3_SetConfig+0x11c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d007      	beq.n	8007192 <TIM_OC3_SetConfig+0xbe>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1b      	ldr	r2, [pc, #108]	@ (80071f4 <TIM_OC3_SetConfig+0x120>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_OC3_SetConfig+0xbe>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a16      	ldr	r2, [pc, #88]	@ (80071e8 <TIM_OC3_SetConfig+0x114>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d113      	bne.n	80071ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	621a      	str	r2, [r3, #32]
}
 80071d4:	bf00      	nop
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	40012c00 	.word	0x40012c00
 80071e4:	40013400 	.word	0x40013400
 80071e8:	40015000 	.word	0x40015000
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800

080071f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800722a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	031b      	lsls	r3, r3, #12
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a2c      	ldr	r2, [pc, #176]	@ (8007308 <TIM_OC4_SetConfig+0x110>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d007      	beq.n	800726c <TIM_OC4_SetConfig+0x74>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a2b      	ldr	r2, [pc, #172]	@ (800730c <TIM_OC4_SetConfig+0x114>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_OC4_SetConfig+0x74>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a2a      	ldr	r2, [pc, #168]	@ (8007310 <TIM_OC4_SetConfig+0x118>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d10d      	bne.n	8007288 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	031b      	lsls	r3, r3, #12
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007286:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a1f      	ldr	r2, [pc, #124]	@ (8007308 <TIM_OC4_SetConfig+0x110>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <TIM_OC4_SetConfig+0xc0>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a1e      	ldr	r2, [pc, #120]	@ (800730c <TIM_OC4_SetConfig+0x114>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00f      	beq.n	80072b8 <TIM_OC4_SetConfig+0xc0>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a1e      	ldr	r2, [pc, #120]	@ (8007314 <TIM_OC4_SetConfig+0x11c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00b      	beq.n	80072b8 <TIM_OC4_SetConfig+0xc0>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007318 <TIM_OC4_SetConfig+0x120>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d007      	beq.n	80072b8 <TIM_OC4_SetConfig+0xc0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1c      	ldr	r2, [pc, #112]	@ (800731c <TIM_OC4_SetConfig+0x124>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC4_SetConfig+0xc0>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a17      	ldr	r2, [pc, #92]	@ (8007310 <TIM_OC4_SetConfig+0x118>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d113      	bne.n	80072e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	019b      	lsls	r3, r3, #6
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	019b      	lsls	r3, r3, #6
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40012c00 	.word	0x40012c00
 800730c:	40013400 	.word	0x40013400
 8007310:	40015000 	.word	0x40015000
 8007314:	40014000 	.word	0x40014000
 8007318:	40014400 	.word	0x40014400
 800731c:	40014800 	.word	0x40014800

08007320 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800734e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007364:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	041b      	lsls	r3, r3, #16
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a19      	ldr	r2, [pc, #100]	@ (80073dc <TIM_OC5_SetConfig+0xbc>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <TIM_OC5_SetConfig+0x82>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a18      	ldr	r2, [pc, #96]	@ (80073e0 <TIM_OC5_SetConfig+0xc0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00f      	beq.n	80073a2 <TIM_OC5_SetConfig+0x82>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a17      	ldr	r2, [pc, #92]	@ (80073e4 <TIM_OC5_SetConfig+0xc4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00b      	beq.n	80073a2 <TIM_OC5_SetConfig+0x82>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a16      	ldr	r2, [pc, #88]	@ (80073e8 <TIM_OC5_SetConfig+0xc8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d007      	beq.n	80073a2 <TIM_OC5_SetConfig+0x82>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a15      	ldr	r2, [pc, #84]	@ (80073ec <TIM_OC5_SetConfig+0xcc>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d003      	beq.n	80073a2 <TIM_OC5_SetConfig+0x82>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a14      	ldr	r2, [pc, #80]	@ (80073f0 <TIM_OC5_SetConfig+0xd0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d109      	bne.n	80073b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	621a      	str	r2, [r3, #32]
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40013400 	.word	0x40013400
 80073e4:	40014000 	.word	0x40014000
 80073e8:	40014400 	.word	0x40014400
 80073ec:	40014800 	.word	0x40014800
 80073f0:	40015000 	.word	0x40015000

080073f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800743a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	051b      	lsls	r3, r3, #20
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a1a      	ldr	r2, [pc, #104]	@ (80074b4 <TIM_OC6_SetConfig+0xc0>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d013      	beq.n	8007478 <TIM_OC6_SetConfig+0x84>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a19      	ldr	r2, [pc, #100]	@ (80074b8 <TIM_OC6_SetConfig+0xc4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00f      	beq.n	8007478 <TIM_OC6_SetConfig+0x84>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a18      	ldr	r2, [pc, #96]	@ (80074bc <TIM_OC6_SetConfig+0xc8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00b      	beq.n	8007478 <TIM_OC6_SetConfig+0x84>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a17      	ldr	r2, [pc, #92]	@ (80074c0 <TIM_OC6_SetConfig+0xcc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_OC6_SetConfig+0x84>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a16      	ldr	r2, [pc, #88]	@ (80074c4 <TIM_OC6_SetConfig+0xd0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_OC6_SetConfig+0x84>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a15      	ldr	r2, [pc, #84]	@ (80074c8 <TIM_OC6_SetConfig+0xd4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d109      	bne.n	800748c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800747e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	029b      	lsls	r3, r3, #10
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40012c00 	.word	0x40012c00
 80074b8:	40013400 	.word	0x40013400
 80074bc:	40014000 	.word	0x40014000
 80074c0:	40014400 	.word	0x40014400
 80074c4:	40014800 	.word	0x40014800
 80074c8:	40015000 	.word	0x40015000

080074cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f023 0201 	bic.w	r2, r3, #1
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f023 030a 	bic.w	r3, r3, #10
 8007508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800752a:	b480      	push	{r7}
 800752c:	b087      	sub	sp, #28
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	f023 0210 	bic.w	r2, r3, #16
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	031b      	lsls	r3, r3, #12
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007566:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	011b      	lsls	r3, r3, #4
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	621a      	str	r2, [r3, #32]
}
 800757e:	bf00      	nop
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80075a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f043 0307 	orr.w	r3, r3, #7
 80075b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	021a      	lsls	r2, r3, #8
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	609a      	str	r2, [r3, #8]
}
 80075f8:	bf00      	nop
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	2201      	movs	r2, #1
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a1a      	ldr	r2, [r3, #32]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	43db      	mvns	r3, r3
 8007626:	401a      	ands	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6a1a      	ldr	r2, [r3, #32]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	fa01 f303 	lsl.w	r3, r1, r3
 800763c:	431a      	orrs	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	621a      	str	r2, [r3, #32]
}
 8007642:	bf00      	nop
 8007644:	371c      	adds	r7, #28
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
	...

08007650 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a26      	ldr	r2, [pc, #152]	@ (80076f4 <TIM_ResetCallback+0xa4>)
 800765c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a25      	ldr	r2, [pc, #148]	@ (80076f8 <TIM_ResetCallback+0xa8>)
 8007664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a24      	ldr	r2, [pc, #144]	@ (80076fc <TIM_ResetCallback+0xac>)
 800766c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a23      	ldr	r2, [pc, #140]	@ (8007700 <TIM_ResetCallback+0xb0>)
 8007674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a22      	ldr	r2, [pc, #136]	@ (8007704 <TIM_ResetCallback+0xb4>)
 800767c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a21      	ldr	r2, [pc, #132]	@ (8007708 <TIM_ResetCallback+0xb8>)
 8007684:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a20      	ldr	r2, [pc, #128]	@ (800770c <TIM_ResetCallback+0xbc>)
 800768c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a1f      	ldr	r2, [pc, #124]	@ (8007710 <TIM_ResetCallback+0xc0>)
 8007694:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a1e      	ldr	r2, [pc, #120]	@ (8007714 <TIM_ResetCallback+0xc4>)
 800769c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007718 <TIM_ResetCallback+0xc8>)
 80076a4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a1c      	ldr	r2, [pc, #112]	@ (800771c <TIM_ResetCallback+0xcc>)
 80076ac:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007720 <TIM_ResetCallback+0xd0>)
 80076b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007724 <TIM_ResetCallback+0xd4>)
 80076bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a19      	ldr	r2, [pc, #100]	@ (8007728 <TIM_ResetCallback+0xd8>)
 80076c4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a18      	ldr	r2, [pc, #96]	@ (800772c <TIM_ResetCallback+0xdc>)
 80076cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a17      	ldr	r2, [pc, #92]	@ (8007730 <TIM_ResetCallback+0xe0>)
 80076d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a16      	ldr	r2, [pc, #88]	@ (8007734 <TIM_ResetCallback+0xe4>)
 80076dc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a15      	ldr	r2, [pc, #84]	@ (8007738 <TIM_ResetCallback+0xe8>)
 80076e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	08003361 	.word	0x08003361
 80076f8:	0800699d 	.word	0x0800699d
 80076fc:	08006a15 	.word	0x08006a15
 8007700:	08006a29 	.word	0x08006a29
 8007704:	080069c5 	.word	0x080069c5
 8007708:	080069d9 	.word	0x080069d9
 800770c:	080069b1 	.word	0x080069b1
 8007710:	080069ed 	.word	0x080069ed
 8007714:	08006a01 	.word	0x08006a01
 8007718:	08006a3d 	.word	0x08006a3d
 800771c:	08007869 	.word	0x08007869
 8007720:	0800787d 	.word	0x0800787d
 8007724:	08007891 	.word	0x08007891
 8007728:	080078a5 	.word	0x080078a5
 800772c:	080078b9 	.word	0x080078b9
 8007730:	080078cd 	.word	0x080078cd
 8007734:	080078e1 	.word	0x080078e1
 8007738:	080078f5 	.word	0x080078f5

0800773c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007750:	2302      	movs	r3, #2
 8007752:	e074      	b.n	800783e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a34      	ldr	r2, [pc, #208]	@ (800784c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d009      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a33      	ldr	r2, [pc, #204]	@ (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a31      	ldr	r2, [pc, #196]	@ (8007854 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d108      	bne.n	80077a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007798:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80077aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a21      	ldr	r2, [pc, #132]	@ (800784c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d022      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d4:	d01d      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a1f      	ldr	r2, [pc, #124]	@ (8007858 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d018      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1d      	ldr	r2, [pc, #116]	@ (800785c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007860 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00e      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a15      	ldr	r2, [pc, #84]	@ (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d009      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a18      	ldr	r2, [pc, #96]	@ (8007864 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d004      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a11      	ldr	r2, [pc, #68]	@ (8007854 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d10c      	bne.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	4313      	orrs	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40012c00 	.word	0x40012c00
 8007850:	40013400 	.word	0x40013400
 8007854:	40015000 	.word	0x40015000
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800
 8007860:	40000c00 	.word	0x40000c00
 8007864:	40014000 	.word	0x40014000

08007868 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e050      	b.n	80079bc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007920:	2b00      	cmp	r3, #0
 8007922:	d114      	bne.n	800794e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fe0d 	bl	800854c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d103      	bne.n	8007944 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a21      	ldr	r2, [pc, #132]	@ (80079c4 <HAL_UART_Init+0xbc>)
 8007940:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2224      	movs	r2, #36	@ 0x24
 8007952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0201 	bic.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 f93a 	bl	8008be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fe3b 	bl	80085f0 <UART_SetConfig>
 800797a:	4603      	mov	r3, r0
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e01b      	b.n	80079bc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 f9b9 	bl	8008d2c <UART_CheckIdleState>
 80079ba:	4603      	mov	r3, r0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	080036dd 	.word	0x080036dd

080079c8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	460b      	mov	r3, r1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e09c      	b.n	8007b2e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	d16c      	bne.n	8007ad8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	2b0c      	cmp	r3, #12
 8007a02:	d85e      	bhi.n	8007ac2 <HAL_UART_RegisterCallback+0xfa>
 8007a04:	a201      	add	r2, pc, #4	@ (adr r2, 8007a0c <HAL_UART_RegisterCallback+0x44>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a41 	.word	0x08007a41
 8007a10:	08007a4b 	.word	0x08007a4b
 8007a14:	08007a55 	.word	0x08007a55
 8007a18:	08007a5f 	.word	0x08007a5f
 8007a1c:	08007a69 	.word	0x08007a69
 8007a20:	08007a73 	.word	0x08007a73
 8007a24:	08007a7d 	.word	0x08007a7d
 8007a28:	08007a87 	.word	0x08007a87
 8007a2c:	08007a91 	.word	0x08007a91
 8007a30:	08007a9b 	.word	0x08007a9b
 8007a34:	08007aa5 	.word	0x08007aa5
 8007a38:	08007aaf 	.word	0x08007aaf
 8007a3c:	08007ab9 	.word	0x08007ab9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007a48:	e070      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007a52:	e06b      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007a5c:	e066      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007a66:	e061      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007a70:	e05c      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007a7a:	e057      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007a84:	e052      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007a8e:	e04d      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007a98:	e048      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007aa2:	e043      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007aac:	e03e      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007ab6:	e039      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007ac0:	e034      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ac8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]
        break;
 8007ad6:	e029      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d11a      	bne.n	8007b18 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
 8007ae4:	2b0b      	cmp	r3, #11
 8007ae6:	d002      	beq.n	8007aee <HAL_UART_RegisterCallback+0x126>
 8007ae8:	2b0c      	cmp	r3, #12
 8007aea:	d005      	beq.n	8007af8 <HAL_UART_RegisterCallback+0x130>
 8007aec:	e009      	b.n	8007b02 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007af6:	e019      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007b00:	e014      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]
        break;
 8007b16:	e009      	b.n	8007b2c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop

08007b3c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	@ 0x28
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	f040 80b5 	bne.w	8007cc2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <HAL_UART_Receive+0x28>
 8007b5e:	88fb      	ldrh	r3, [r7, #6]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e0ad      	b.n	8007cc4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2222      	movs	r2, #34	@ 0x22
 8007b74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b7e:	f7fb ffcf 	bl	8003b20 <HAL_GetTick>
 8007b82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	88fa      	ldrh	r2, [r7, #6]
 8007b88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	88fa      	ldrh	r2, [r7, #6]
 8007b90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b9c:	d10e      	bne.n	8007bbc <HAL_UART_Receive+0x80>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d105      	bne.n	8007bb2 <HAL_UART_Receive+0x76>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007bac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bb0:	e02d      	b.n	8007c0e <HAL_UART_Receive+0xd2>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	22ff      	movs	r2, #255	@ 0xff
 8007bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bba:	e028      	b.n	8007c0e <HAL_UART_Receive+0xd2>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10d      	bne.n	8007be0 <HAL_UART_Receive+0xa4>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <HAL_UART_Receive+0x9a>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	22ff      	movs	r2, #255	@ 0xff
 8007bd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bd4:	e01b      	b.n	8007c0e <HAL_UART_Receive+0xd2>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	227f      	movs	r2, #127	@ 0x7f
 8007bda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bde:	e016      	b.n	8007c0e <HAL_UART_Receive+0xd2>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007be8:	d10d      	bne.n	8007c06 <HAL_UART_Receive+0xca>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d104      	bne.n	8007bfc <HAL_UART_Receive+0xc0>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	227f      	movs	r2, #127	@ 0x7f
 8007bf6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bfa:	e008      	b.n	8007c0e <HAL_UART_Receive+0xd2>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	223f      	movs	r2, #63	@ 0x3f
 8007c00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c04:	e003      	b.n	8007c0e <HAL_UART_Receive+0xd2>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c14:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1e:	d108      	bne.n	8007c32 <HAL_UART_Receive+0xf6>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d104      	bne.n	8007c32 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	61bb      	str	r3, [r7, #24]
 8007c30:	e003      	b.n	8007c3a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007c3a:	e036      	b.n	8007caa <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2200      	movs	r2, #0
 8007c44:	2120      	movs	r1, #32
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f001 f91a 	bl	8008e80 <UART_WaitOnFlagUntilTimeout>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d005      	beq.n	8007c5e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e032      	b.n	8007cc4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10c      	bne.n	8007c7e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	8a7b      	ldrh	r3, [r7, #18]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	3302      	adds	r3, #2
 8007c7a:	61bb      	str	r3, [r7, #24]
 8007c7c:	e00c      	b.n	8007c98 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	8a7b      	ldrh	r3, [r7, #18]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	3301      	adds	r3, #1
 8007c96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1c2      	bne.n	8007c3c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e000      	b.n	8007cc4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007cc2:	2302      	movs	r3, #2
  }
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	@ 0x28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	d137      	bne.n	8007d54 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_UART_Receive_DMA+0x24>
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e030      	b.n	8007d56 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a18      	ldr	r2, [pc, #96]	@ (8007d60 <HAL_UART_Receive_DMA+0x94>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d01f      	beq.n	8007d44 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d018      	beq.n	8007d44 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	623b      	str	r3, [r7, #32]
 8007d32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	69f9      	ldr	r1, [r7, #28]
 8007d36:	6a3a      	ldr	r2, [r7, #32]
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e6      	bne.n	8007d12 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	461a      	mov	r2, r3
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f001 f906 	bl	8008f5c <UART_Start_Receive_DMA>
 8007d50:	4603      	mov	r3, r0
 8007d52:	e000      	b.n	8007d56 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d54:	2302      	movs	r3, #2
  }
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3728      	adds	r7, #40	@ 0x28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40008000 	.word	0x40008000

08007d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b0ba      	sub	sp, #232	@ 0xe8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d92:	4013      	ands	r3, r2
 8007d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11b      	bne.n	8007dd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d015      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d009      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 82f3 	beq.w	80083b4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
      }
      return;
 8007dd6:	e2ed      	b.n	80083b4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 8129 	beq.w	8008034 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007de2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007de6:	4b90      	ldr	r3, [pc, #576]	@ (8008028 <HAL_UART_IRQHandler+0x2c4>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d106      	bne.n	8007dfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007dee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007df2:	4b8e      	ldr	r3, [pc, #568]	@ (800802c <HAL_UART_IRQHandler+0x2c8>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 811c 	beq.w	8008034 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d011      	beq.n	8007e2c <HAL_UART_IRQHandler+0xc8>
 8007e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e22:	f043 0201 	orr.w	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d011      	beq.n	8007e5c <HAL_UART_IRQHandler+0xf8>
 8007e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e52:	f043 0204 	orr.w	r2, r3, #4
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d011      	beq.n	8007e8c <HAL_UART_IRQHandler+0x128>
 8007e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2204      	movs	r2, #4
 8007e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e82:	f043 0202 	orr.w	r2, r3, #2
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d017      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d105      	bne.n	8007eb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8008028 <HAL_UART_IRQHandler+0x2c4>)
 8007eaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ebe:	f043 0208 	orr.w	r2, r3, #8
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d012      	beq.n	8007efa <HAL_UART_IRQHandler+0x196>
 8007ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00c      	beq.n	8007efa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef0:	f043 0220 	orr.w	r2, r3, #32
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 8259 	beq.w	80083b8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d013      	beq.n	8007f3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d105      	bne.n	8007f2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4e:	2b40      	cmp	r3, #64	@ 0x40
 8007f50:	d005      	beq.n	8007f5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d058      	beq.n	8008010 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 f8e3 	bl	800912a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6e:	2b40      	cmp	r3, #64	@ 0x40
 8007f70:	d148      	bne.n	8008004 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1d9      	bne.n	8007f72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d017      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fce:	4a18      	ldr	r2, [pc, #96]	@ (8008030 <HAL_UART_IRQHandler+0x2cc>)
 8007fd0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fc f839 	bl	8004050 <HAL_DMA_Abort_IT>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01f      	beq.n	8008024 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff6:	e015      	b.n	8008024 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008002:	e00f      	b.n	8008024 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800e:	e009      	b.n	8008024 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008022:	e1c9      	b.n	80083b8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008024:	bf00      	nop
    return;
 8008026:	e1c7      	b.n	80083b8 <HAL_UART_IRQHandler+0x654>
 8008028:	10000001 	.word	0x10000001
 800802c:	04000120 	.word	0x04000120
 8008030:	080093f5 	.word	0x080093f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008038:	2b01      	cmp	r3, #1
 800803a:	f040 8157 	bne.w	80082ec <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800803e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008042:	f003 0310 	and.w	r3, r3, #16
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 8150 	beq.w	80082ec <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800804c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8149 	beq.w	80082ec <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2210      	movs	r2, #16
 8008060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800806c:	2b40      	cmp	r3, #64	@ 0x40
 800806e:	f040 80bd 	bne.w	80081ec <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8199 	beq.w	80083bc <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008090:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008094:	429a      	cmp	r2, r3
 8008096:	f080 8191 	bcs.w	80083bc <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f040 8087 	bne.w	80081c6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1da      	bne.n	80080b8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008112:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008126:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800812a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800812e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e1      	bne.n	8008102 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800814e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008154:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008162:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008164:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008168:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e3      	bne.n	800813e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008194:	f023 0310 	bic.w	r3, r3, #16
 8008198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e4      	bne.n	8008184 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fb feec 	bl	8003f9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2202      	movs	r2, #2
 80081ca:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80081de:	b292      	uxth	r2, r2
 80081e0:	1a8a      	subs	r2, r1, r2
 80081e2:	b292      	uxth	r2, r2
 80081e4:	4611      	mov	r1, r2
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081ea:	e0e7      	b.n	80083bc <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80d9 	beq.w	80083c0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800820e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80d4 	beq.w	80083c0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800822c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	461a      	mov	r2, r3
 8008236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800823a:	647b      	str	r3, [r7, #68]	@ 0x44
 800823c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e4      	bne.n	8008218 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	623b      	str	r3, [r7, #32]
   return(result);
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008264:	f023 0301 	bic.w	r3, r3, #1
 8008268:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3308      	adds	r3, #8
 8008272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008276:	633a      	str	r2, [r7, #48]	@ 0x30
 8008278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800827c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e1      	bne.n	800824e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0310 	bic.w	r3, r3, #16
 80082b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80082c0:	61fb      	str	r3, [r7, #28]
 80082c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	69b9      	ldr	r1, [r7, #24]
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	617b      	str	r3, [r7, #20]
   return(result);
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e4      	bne.n	800829e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80082e0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80082e4:	4611      	mov	r1, r2
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082ea:	e069      	b.n	80083c0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d010      	beq.n	800831a <HAL_UART_IRQHandler+0x5b6>
 80082f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00a      	beq.n	800831a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800830c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008318:	e055      	b.n	80083c6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800831a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800831e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008322:	2b00      	cmp	r3, #0
 8008324:	d014      	beq.n	8008350 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d105      	bne.n	800833e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d008      	beq.n	8008350 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008342:	2b00      	cmp	r3, #0
 8008344:	d03e      	beq.n	80083c4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	4798      	blx	r3
    }
    return;
 800834e:	e039      	b.n	80083c4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008358:	2b00      	cmp	r3, #0
 800835a:	d009      	beq.n	8008370 <HAL_UART_IRQHandler+0x60c>
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 f85b 	bl	8009424 <UART_EndTransmit_IT>
    return;
 800836e:	e02a      	b.n	80083c6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00b      	beq.n	8008394 <HAL_UART_IRQHandler+0x630>
 800837c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008380:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008392:	e018      	b.n	80083c6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d012      	beq.n	80083c6 <HAL_UART_IRQHandler+0x662>
 80083a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da0e      	bge.n	80083c6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083b2:	e008      	b.n	80083c6 <HAL_UART_IRQHandler+0x662>
      return;
 80083b4:	bf00      	nop
 80083b6:	e006      	b.n	80083c6 <HAL_UART_IRQHandler+0x662>
    return;
 80083b8:	bf00      	nop
 80083ba:	e004      	b.n	80083c6 <HAL_UART_IRQHandler+0x662>
      return;
 80083bc:	bf00      	nop
 80083be:	e002      	b.n	80083c6 <HAL_UART_IRQHandler+0x662>
      return;
 80083c0:	bf00      	nop
 80083c2:	e000      	b.n	80083c6 <HAL_UART_IRQHandler+0x662>
    return;
 80083c4:	bf00      	nop
  }
}
 80083c6:	37e8      	adds	r7, #232	@ 0xe8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a09      	ldr	r2, [pc, #36]	@ (80084b8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d009      	beq.n	80084ac <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	615a      	str	r2, [r3, #20]
  }
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	40008000 	.word	0x40008000

080084bc <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a18      	ldr	r2, [pc, #96]	@ (800852c <HAL_UART_EnableReceiverTimeout+0x70>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d027      	beq.n	800851e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	d120      	bne.n	800851a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <HAL_UART_EnableReceiverTimeout+0x2a>
 80084e2:	2302      	movs	r3, #2
 80084e4:	e01c      	b.n	8008520 <HAL_UART_EnableReceiverTimeout+0x64>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2224      	movs	r2, #36	@ 0x24
 80084f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008504:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2220      	movs	r2, #32
 800850a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	e002      	b.n	8008520 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800851a:	2302      	movs	r3, #2
 800851c:	e000      	b.n	8008520 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
  }
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	40008000 	.word	0x40008000

08008530 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a1a      	ldr	r2, [pc, #104]	@ (80085c0 <UART_InitCallbacksToDefault+0x74>)
 8008558:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a19      	ldr	r2, [pc, #100]	@ (80085c4 <UART_InitCallbacksToDefault+0x78>)
 8008560:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a18      	ldr	r2, [pc, #96]	@ (80085c8 <UART_InitCallbacksToDefault+0x7c>)
 8008568:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a17      	ldr	r2, [pc, #92]	@ (80085cc <UART_InitCallbacksToDefault+0x80>)
 8008570:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a16      	ldr	r2, [pc, #88]	@ (80085d0 <UART_InitCallbacksToDefault+0x84>)
 8008578:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a15      	ldr	r2, [pc, #84]	@ (80085d4 <UART_InitCallbacksToDefault+0x88>)
 8008580:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a14      	ldr	r2, [pc, #80]	@ (80085d8 <UART_InitCallbacksToDefault+0x8c>)
 8008588:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a13      	ldr	r2, [pc, #76]	@ (80085dc <UART_InitCallbacksToDefault+0x90>)
 8008590:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a12      	ldr	r2, [pc, #72]	@ (80085e0 <UART_InitCallbacksToDefault+0x94>)
 8008598:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a11      	ldr	r2, [pc, #68]	@ (80085e4 <UART_InitCallbacksToDefault+0x98>)
 80085a0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a10      	ldr	r2, [pc, #64]	@ (80085e8 <UART_InitCallbacksToDefault+0x9c>)
 80085a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a0f      	ldr	r2, [pc, #60]	@ (80085ec <UART_InitCallbacksToDefault+0xa0>)
 80085b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	080083e1 	.word	0x080083e1
 80085c4:	080083cd 	.word	0x080083cd
 80085c8:	08008409 	.word	0x08008409
 80085cc:	080083f5 	.word	0x080083f5
 80085d0:	0800841d 	.word	0x0800841d
 80085d4:	08008431 	.word	0x08008431
 80085d8:	08008445 	.word	0x08008445
 80085dc:	08008459 	.word	0x08008459
 80085e0:	0800947f 	.word	0x0800947f
 80085e4:	08009493 	.word	0x08009493
 80085e8:	080094a7 	.word	0x080094a7
 80085ec:	0800846d 	.word	0x0800846d

080085f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085f4:	b08c      	sub	sp, #48	@ 0x30
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	689a      	ldr	r2, [r3, #8]
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	431a      	orrs	r2, r3
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	431a      	orrs	r2, r3
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	4313      	orrs	r3, r2
 8008616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	4baa      	ldr	r3, [pc, #680]	@ (80088c8 <UART_SetConfig+0x2d8>)
 8008620:	4013      	ands	r3, r2
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008628:	430b      	orrs	r3, r1
 800862a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a9f      	ldr	r2, [pc, #636]	@ (80088cc <UART_SetConfig+0x2dc>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d004      	beq.n	800865c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008658:	4313      	orrs	r3, r2
 800865a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008666:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	6812      	ldr	r2, [r2, #0]
 800866e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008670:	430b      	orrs	r3, r1
 8008672:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867a:	f023 010f 	bic.w	r1, r3, #15
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a90      	ldr	r2, [pc, #576]	@ (80088d0 <UART_SetConfig+0x2e0>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d125      	bne.n	80086e0 <UART_SetConfig+0xf0>
 8008694:	4b8f      	ldr	r3, [pc, #572]	@ (80088d4 <UART_SetConfig+0x2e4>)
 8008696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d81a      	bhi.n	80086d8 <UART_SetConfig+0xe8>
 80086a2:	a201      	add	r2, pc, #4	@ (adr r2, 80086a8 <UART_SetConfig+0xb8>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	080086b9 	.word	0x080086b9
 80086ac:	080086c9 	.word	0x080086c9
 80086b0:	080086c1 	.word	0x080086c1
 80086b4:	080086d1 	.word	0x080086d1
 80086b8:	2301      	movs	r3, #1
 80086ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086be:	e116      	b.n	80088ee <UART_SetConfig+0x2fe>
 80086c0:	2302      	movs	r3, #2
 80086c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086c6:	e112      	b.n	80088ee <UART_SetConfig+0x2fe>
 80086c8:	2304      	movs	r3, #4
 80086ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ce:	e10e      	b.n	80088ee <UART_SetConfig+0x2fe>
 80086d0:	2308      	movs	r3, #8
 80086d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086d6:	e10a      	b.n	80088ee <UART_SetConfig+0x2fe>
 80086d8:	2310      	movs	r3, #16
 80086da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086de:	e106      	b.n	80088ee <UART_SetConfig+0x2fe>
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a7c      	ldr	r2, [pc, #496]	@ (80088d8 <UART_SetConfig+0x2e8>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d138      	bne.n	800875c <UART_SetConfig+0x16c>
 80086ea:	4b7a      	ldr	r3, [pc, #488]	@ (80088d4 <UART_SetConfig+0x2e4>)
 80086ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f0:	f003 030c 	and.w	r3, r3, #12
 80086f4:	2b0c      	cmp	r3, #12
 80086f6:	d82d      	bhi.n	8008754 <UART_SetConfig+0x164>
 80086f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008700 <UART_SetConfig+0x110>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008735 	.word	0x08008735
 8008704:	08008755 	.word	0x08008755
 8008708:	08008755 	.word	0x08008755
 800870c:	08008755 	.word	0x08008755
 8008710:	08008745 	.word	0x08008745
 8008714:	08008755 	.word	0x08008755
 8008718:	08008755 	.word	0x08008755
 800871c:	08008755 	.word	0x08008755
 8008720:	0800873d 	.word	0x0800873d
 8008724:	08008755 	.word	0x08008755
 8008728:	08008755 	.word	0x08008755
 800872c:	08008755 	.word	0x08008755
 8008730:	0800874d 	.word	0x0800874d
 8008734:	2300      	movs	r3, #0
 8008736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800873a:	e0d8      	b.n	80088ee <UART_SetConfig+0x2fe>
 800873c:	2302      	movs	r3, #2
 800873e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008742:	e0d4      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008744:	2304      	movs	r3, #4
 8008746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800874a:	e0d0      	b.n	80088ee <UART_SetConfig+0x2fe>
 800874c:	2308      	movs	r3, #8
 800874e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008752:	e0cc      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008754:	2310      	movs	r3, #16
 8008756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800875a:	e0c8      	b.n	80088ee <UART_SetConfig+0x2fe>
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a5e      	ldr	r2, [pc, #376]	@ (80088dc <UART_SetConfig+0x2ec>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d125      	bne.n	80087b2 <UART_SetConfig+0x1c2>
 8008766:	4b5b      	ldr	r3, [pc, #364]	@ (80088d4 <UART_SetConfig+0x2e4>)
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800876c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008770:	2b30      	cmp	r3, #48	@ 0x30
 8008772:	d016      	beq.n	80087a2 <UART_SetConfig+0x1b2>
 8008774:	2b30      	cmp	r3, #48	@ 0x30
 8008776:	d818      	bhi.n	80087aa <UART_SetConfig+0x1ba>
 8008778:	2b20      	cmp	r3, #32
 800877a:	d00a      	beq.n	8008792 <UART_SetConfig+0x1a2>
 800877c:	2b20      	cmp	r3, #32
 800877e:	d814      	bhi.n	80087aa <UART_SetConfig+0x1ba>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <UART_SetConfig+0x19a>
 8008784:	2b10      	cmp	r3, #16
 8008786:	d008      	beq.n	800879a <UART_SetConfig+0x1aa>
 8008788:	e00f      	b.n	80087aa <UART_SetConfig+0x1ba>
 800878a:	2300      	movs	r3, #0
 800878c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008790:	e0ad      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008792:	2302      	movs	r3, #2
 8008794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008798:	e0a9      	b.n	80088ee <UART_SetConfig+0x2fe>
 800879a:	2304      	movs	r3, #4
 800879c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087a0:	e0a5      	b.n	80088ee <UART_SetConfig+0x2fe>
 80087a2:	2308      	movs	r3, #8
 80087a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087a8:	e0a1      	b.n	80088ee <UART_SetConfig+0x2fe>
 80087aa:	2310      	movs	r3, #16
 80087ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b0:	e09d      	b.n	80088ee <UART_SetConfig+0x2fe>
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a4a      	ldr	r2, [pc, #296]	@ (80088e0 <UART_SetConfig+0x2f0>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d125      	bne.n	8008808 <UART_SetConfig+0x218>
 80087bc:	4b45      	ldr	r3, [pc, #276]	@ (80088d4 <UART_SetConfig+0x2e4>)
 80087be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80087c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80087c8:	d016      	beq.n	80087f8 <UART_SetConfig+0x208>
 80087ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80087cc:	d818      	bhi.n	8008800 <UART_SetConfig+0x210>
 80087ce:	2b80      	cmp	r3, #128	@ 0x80
 80087d0:	d00a      	beq.n	80087e8 <UART_SetConfig+0x1f8>
 80087d2:	2b80      	cmp	r3, #128	@ 0x80
 80087d4:	d814      	bhi.n	8008800 <UART_SetConfig+0x210>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <UART_SetConfig+0x1f0>
 80087da:	2b40      	cmp	r3, #64	@ 0x40
 80087dc:	d008      	beq.n	80087f0 <UART_SetConfig+0x200>
 80087de:	e00f      	b.n	8008800 <UART_SetConfig+0x210>
 80087e0:	2300      	movs	r3, #0
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087e6:	e082      	b.n	80088ee <UART_SetConfig+0x2fe>
 80087e8:	2302      	movs	r3, #2
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ee:	e07e      	b.n	80088ee <UART_SetConfig+0x2fe>
 80087f0:	2304      	movs	r3, #4
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f6:	e07a      	b.n	80088ee <UART_SetConfig+0x2fe>
 80087f8:	2308      	movs	r3, #8
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087fe:	e076      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008800:	2310      	movs	r3, #16
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008806:	e072      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a35      	ldr	r2, [pc, #212]	@ (80088e4 <UART_SetConfig+0x2f4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d12a      	bne.n	8008868 <UART_SetConfig+0x278>
 8008812:	4b30      	ldr	r3, [pc, #192]	@ (80088d4 <UART_SetConfig+0x2e4>)
 8008814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800881c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008820:	d01a      	beq.n	8008858 <UART_SetConfig+0x268>
 8008822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008826:	d81b      	bhi.n	8008860 <UART_SetConfig+0x270>
 8008828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800882c:	d00c      	beq.n	8008848 <UART_SetConfig+0x258>
 800882e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008832:	d815      	bhi.n	8008860 <UART_SetConfig+0x270>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <UART_SetConfig+0x250>
 8008838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800883c:	d008      	beq.n	8008850 <UART_SetConfig+0x260>
 800883e:	e00f      	b.n	8008860 <UART_SetConfig+0x270>
 8008840:	2300      	movs	r3, #0
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008846:	e052      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008848:	2302      	movs	r3, #2
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884e:	e04e      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008856:	e04a      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885e:	e046      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008866:	e042      	b.n	80088ee <UART_SetConfig+0x2fe>
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a17      	ldr	r2, [pc, #92]	@ (80088cc <UART_SetConfig+0x2dc>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d13a      	bne.n	80088e8 <UART_SetConfig+0x2f8>
 8008872:	4b18      	ldr	r3, [pc, #96]	@ (80088d4 <UART_SetConfig+0x2e4>)
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008878:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800887c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008880:	d01a      	beq.n	80088b8 <UART_SetConfig+0x2c8>
 8008882:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008886:	d81b      	bhi.n	80088c0 <UART_SetConfig+0x2d0>
 8008888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800888c:	d00c      	beq.n	80088a8 <UART_SetConfig+0x2b8>
 800888e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008892:	d815      	bhi.n	80088c0 <UART_SetConfig+0x2d0>
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <UART_SetConfig+0x2b0>
 8008898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800889c:	d008      	beq.n	80088b0 <UART_SetConfig+0x2c0>
 800889e:	e00f      	b.n	80088c0 <UART_SetConfig+0x2d0>
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088a6:	e022      	b.n	80088ee <UART_SetConfig+0x2fe>
 80088a8:	2302      	movs	r3, #2
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ae:	e01e      	b.n	80088ee <UART_SetConfig+0x2fe>
 80088b0:	2304      	movs	r3, #4
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b6:	e01a      	b.n	80088ee <UART_SetConfig+0x2fe>
 80088b8:	2308      	movs	r3, #8
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088be:	e016      	b.n	80088ee <UART_SetConfig+0x2fe>
 80088c0:	2310      	movs	r3, #16
 80088c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c6:	e012      	b.n	80088ee <UART_SetConfig+0x2fe>
 80088c8:	cfff69f3 	.word	0xcfff69f3
 80088cc:	40008000 	.word	0x40008000
 80088d0:	40013800 	.word	0x40013800
 80088d4:	40021000 	.word	0x40021000
 80088d8:	40004400 	.word	0x40004400
 80088dc:	40004800 	.word	0x40004800
 80088e0:	40004c00 	.word	0x40004c00
 80088e4:	40005000 	.word	0x40005000
 80088e8:	2310      	movs	r3, #16
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4aae      	ldr	r2, [pc, #696]	@ (8008bac <UART_SetConfig+0x5bc>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	f040 8097 	bne.w	8008a28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088fe:	2b08      	cmp	r3, #8
 8008900:	d823      	bhi.n	800894a <UART_SetConfig+0x35a>
 8008902:	a201      	add	r2, pc, #4	@ (adr r2, 8008908 <UART_SetConfig+0x318>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	0800892d 	.word	0x0800892d
 800890c:	0800894b 	.word	0x0800894b
 8008910:	08008935 	.word	0x08008935
 8008914:	0800894b 	.word	0x0800894b
 8008918:	0800893b 	.word	0x0800893b
 800891c:	0800894b 	.word	0x0800894b
 8008920:	0800894b 	.word	0x0800894b
 8008924:	0800894b 	.word	0x0800894b
 8008928:	08008943 	.word	0x08008943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800892c:	f7fc fc80 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8008930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008932:	e010      	b.n	8008956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008934:	4b9e      	ldr	r3, [pc, #632]	@ (8008bb0 <UART_SetConfig+0x5c0>)
 8008936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008938:	e00d      	b.n	8008956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800893a:	f7fc fc0b 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 800893e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008940:	e009      	b.n	8008956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008948:	e005      	b.n	8008956 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8130 	beq.w	8008bbe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008962:	4a94      	ldr	r2, [pc, #592]	@ (8008bb4 <UART_SetConfig+0x5c4>)
 8008964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008968:	461a      	mov	r2, r3
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008970:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4413      	add	r3, r2
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	429a      	cmp	r2, r3
 8008980:	d305      	bcc.n	800898e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	429a      	cmp	r2, r3
 800898c:	d903      	bls.n	8008996 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008994:	e113      	b.n	8008bbe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	2200      	movs	r2, #0
 800899a:	60bb      	str	r3, [r7, #8]
 800899c:	60fa      	str	r2, [r7, #12]
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a2:	4a84      	ldr	r2, [pc, #528]	@ (8008bb4 <UART_SetConfig+0x5c4>)
 80089a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2200      	movs	r2, #0
 80089ac:	603b      	str	r3, [r7, #0]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089b8:	f7f8 fa40 	bl	8000e3c <__aeabi_uldivmod>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	4610      	mov	r0, r2
 80089c2:	4619      	mov	r1, r3
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	020b      	lsls	r3, r1, #8
 80089ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089d2:	0202      	lsls	r2, r0, #8
 80089d4:	6979      	ldr	r1, [r7, #20]
 80089d6:	6849      	ldr	r1, [r1, #4]
 80089d8:	0849      	lsrs	r1, r1, #1
 80089da:	2000      	movs	r0, #0
 80089dc:	460c      	mov	r4, r1
 80089de:	4605      	mov	r5, r0
 80089e0:	eb12 0804 	adds.w	r8, r2, r4
 80089e4:	eb43 0905 	adc.w	r9, r3, r5
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	469a      	mov	sl, r3
 80089f0:	4693      	mov	fp, r2
 80089f2:	4652      	mov	r2, sl
 80089f4:	465b      	mov	r3, fp
 80089f6:	4640      	mov	r0, r8
 80089f8:	4649      	mov	r1, r9
 80089fa:	f7f8 fa1f 	bl	8000e3c <__aeabi_uldivmod>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	4613      	mov	r3, r2
 8008a04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a0c:	d308      	bcc.n	8008a20 <UART_SetConfig+0x430>
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a14:	d204      	bcs.n	8008a20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6a3a      	ldr	r2, [r7, #32]
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	e0ce      	b.n	8008bbe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a26:	e0ca      	b.n	8008bbe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a30:	d166      	bne.n	8008b00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008a32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a36:	2b08      	cmp	r3, #8
 8008a38:	d827      	bhi.n	8008a8a <UART_SetConfig+0x49a>
 8008a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a40 <UART_SetConfig+0x450>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008a65 	.word	0x08008a65
 8008a44:	08008a6d 	.word	0x08008a6d
 8008a48:	08008a75 	.word	0x08008a75
 8008a4c:	08008a8b 	.word	0x08008a8b
 8008a50:	08008a7b 	.word	0x08008a7b
 8008a54:	08008a8b 	.word	0x08008a8b
 8008a58:	08008a8b 	.word	0x08008a8b
 8008a5c:	08008a8b 	.word	0x08008a8b
 8008a60:	08008a83 	.word	0x08008a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a64:	f7fc fbe4 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8008a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a6a:	e014      	b.n	8008a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a6c:	f7fc fbf6 	bl	800525c <HAL_RCC_GetPCLK2Freq>
 8008a70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a72:	e010      	b.n	8008a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a74:	4b4e      	ldr	r3, [pc, #312]	@ (8008bb0 <UART_SetConfig+0x5c0>)
 8008a76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a78:	e00d      	b.n	8008a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a7a:	f7fc fb6b 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 8008a7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a80:	e009      	b.n	8008a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a88:	e005      	b.n	8008a96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8090 	beq.w	8008bbe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa2:	4a44      	ldr	r2, [pc, #272]	@ (8008bb4 <UART_SetConfig+0x5c4>)
 8008aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab0:	005a      	lsls	r2, r3, #1
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	085b      	lsrs	r3, r3, #1
 8008ab8:	441a      	add	r2, r3
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	2b0f      	cmp	r3, #15
 8008ac8:	d916      	bls.n	8008af8 <UART_SetConfig+0x508>
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ad0:	d212      	bcs.n	8008af8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f023 030f 	bic.w	r3, r3, #15
 8008ada:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	085b      	lsrs	r3, r3, #1
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	8bfb      	ldrh	r3, [r7, #30]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	8bfa      	ldrh	r2, [r7, #30]
 8008af4:	60da      	str	r2, [r3, #12]
 8008af6:	e062      	b.n	8008bbe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008afe:	e05e      	b.n	8008bbe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d828      	bhi.n	8008b5a <UART_SetConfig+0x56a>
 8008b08:	a201      	add	r2, pc, #4	@ (adr r2, 8008b10 <UART_SetConfig+0x520>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b35 	.word	0x08008b35
 8008b14:	08008b3d 	.word	0x08008b3d
 8008b18:	08008b45 	.word	0x08008b45
 8008b1c:	08008b5b 	.word	0x08008b5b
 8008b20:	08008b4b 	.word	0x08008b4b
 8008b24:	08008b5b 	.word	0x08008b5b
 8008b28:	08008b5b 	.word	0x08008b5b
 8008b2c:	08008b5b 	.word	0x08008b5b
 8008b30:	08008b53 	.word	0x08008b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b34:	f7fc fb7c 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8008b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b3a:	e014      	b.n	8008b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b3c:	f7fc fb8e 	bl	800525c <HAL_RCC_GetPCLK2Freq>
 8008b40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b42:	e010      	b.n	8008b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b44:	4b1a      	ldr	r3, [pc, #104]	@ (8008bb0 <UART_SetConfig+0x5c0>)
 8008b46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b48:	e00d      	b.n	8008b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b4a:	f7fc fb03 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 8008b4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b50:	e009      	b.n	8008b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b58:	e005      	b.n	8008b66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b64:	bf00      	nop
    }

    if (pclk != 0U)
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d028      	beq.n	8008bbe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b70:	4a10      	ldr	r2, [pc, #64]	@ (8008bb4 <UART_SetConfig+0x5c4>)
 8008b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b76:	461a      	mov	r2, r3
 8008b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	085b      	lsrs	r3, r3, #1
 8008b84:	441a      	add	r2, r3
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	2b0f      	cmp	r3, #15
 8008b94:	d910      	bls.n	8008bb8 <UART_SetConfig+0x5c8>
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b9c:	d20c      	bcs.n	8008bb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60da      	str	r2, [r3, #12]
 8008ba8:	e009      	b.n	8008bbe <UART_SetConfig+0x5ce>
 8008baa:	bf00      	nop
 8008bac:	40008000 	.word	0x40008000
 8008bb0:	00f42400 	.word	0x00f42400
 8008bb4:	08009a38 	.word	0x08009a38
      }
      else
      {
        ret = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008bda:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3730      	adds	r7, #48	@ 0x30
 8008be2:	46bd      	mov	sp, r7
 8008be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf4:	f003 0308 	and.w	r3, r3, #8
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00a      	beq.n	8008c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c38:	f003 0302 	and.w	r3, r3, #2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00a      	beq.n	8008c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7c:	f003 0310 	and.w	r3, r3, #16
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00a      	beq.n	8008c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01a      	beq.n	8008cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ce6:	d10a      	bne.n	8008cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	605a      	str	r2, [r3, #4]
  }
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b098      	sub	sp, #96	@ 0x60
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d3c:	f7fa fef0 	bl	8003b20 <HAL_GetTick>
 8008d40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0308 	and.w	r3, r3, #8
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d12f      	bne.n	8008db0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f88e 	bl	8008e80 <UART_WaitOnFlagUntilTimeout>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d022      	beq.n	8008db0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e6      	bne.n	8008d6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e063      	b.n	8008e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b04      	cmp	r3, #4
 8008dbc:	d149      	bne.n	8008e52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f857 	bl	8008e80 <UART_WaitOnFlagUntilTimeout>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d03c      	beq.n	8008e52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	623b      	str	r3, [r7, #32]
   return(result);
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008df6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e6      	bne.n	8008dd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	e853 3f00 	ldrex	r3, [r3]
 8008e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f023 0301 	bic.w	r3, r3, #1
 8008e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3308      	adds	r3, #8
 8008e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e2a:	61fa      	str	r2, [r7, #28]
 8008e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	69b9      	ldr	r1, [r7, #24]
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	617b      	str	r3, [r7, #20]
   return(result);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e5      	bne.n	8008e0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e012      	b.n	8008e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3758      	adds	r7, #88	@ 0x58
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e90:	e04f      	b.n	8008f32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e98:	d04b      	beq.n	8008f32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e9a:	f7fa fe41 	bl	8003b20 <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d302      	bcc.n	8008eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e04e      	b.n	8008f52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d037      	beq.n	8008f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b80      	cmp	r3, #128	@ 0x80
 8008ec6:	d034      	beq.n	8008f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2b40      	cmp	r3, #64	@ 0x40
 8008ecc:	d031      	beq.n	8008f32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	f003 0308 	and.w	r3, r3, #8
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d110      	bne.n	8008efe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2208      	movs	r2, #8
 8008ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 f920 	bl	800912a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2208      	movs	r2, #8
 8008eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e029      	b.n	8008f52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f0c:	d111      	bne.n	8008f32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 f906 	bl	800912a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e00f      	b.n	8008f52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69da      	ldr	r2, [r3, #28]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	bf0c      	ite	eq
 8008f42:	2301      	moveq	r3, #1
 8008f44:	2300      	movne	r3, #0
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d0a0      	beq.n	8008e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b096      	sub	sp, #88	@ 0x58
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	4613      	mov	r3, r2
 8008f68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	88fa      	ldrh	r2, [r7, #6]
 8008f74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2222      	movs	r2, #34	@ 0x22
 8008f84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d02d      	beq.n	8008fee <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f98:	4a40      	ldr	r2, [pc, #256]	@ (800909c <UART_Start_Receive_DMA+0x140>)
 8008f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80090a0 <UART_Start_Receive_DMA+0x144>)
 8008fa4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fac:	4a3d      	ldr	r2, [pc, #244]	@ (80090a4 <UART_Start_Receive_DMA+0x148>)
 8008fae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3324      	adds	r3, #36	@ 0x24
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fcc:	461a      	mov	r2, r3
 8008fce:	88fb      	ldrh	r3, [r7, #6]
 8008fd0:	f7fa ff6a 	bl	8003ea8 <HAL_DMA_Start_IT>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2210      	movs	r2, #16
 8008fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e051      	b.n	8009092 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d018      	beq.n	8009028 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800900a:	657b      	str	r3, [r7, #84]	@ 0x54
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009016:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800901a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e6      	bne.n	8008ff6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3308      	adds	r3, #8
 800902e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903a:	f043 0301 	orr.w	r3, r3, #1
 800903e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3308      	adds	r3, #8
 8009046:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009048:	637a      	str	r2, [r7, #52]	@ 0x34
 800904a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800904e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e5      	bne.n	8009028 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3308      	adds	r3, #8
 8009062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	613b      	str	r3, [r7, #16]
   return(result);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3308      	adds	r3, #8
 800907a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800907c:	623a      	str	r2, [r7, #32]
 800907e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	69f9      	ldr	r1, [r7, #28]
 8009082:	6a3a      	ldr	r2, [r7, #32]
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	61bb      	str	r3, [r7, #24]
   return(result);
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e5      	bne.n	800905c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3758      	adds	r7, #88	@ 0x58
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	080091f7 	.word	0x080091f7
 80090a0:	0800932b 	.word	0x0800932b
 80090a4:	08009371 	.word	0x08009371

080090a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b08f      	sub	sp, #60	@ 0x3c
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80090c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090d0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e6      	bne.n	80090b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3308      	adds	r3, #8
 80090e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	e853 3f00 	ldrex	r3, [r3]
 80090f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80090f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009102:	61ba      	str	r2, [r7, #24]
 8009104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6979      	ldr	r1, [r7, #20]
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	613b      	str	r3, [r7, #16]
   return(result);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e5      	bne.n	80090e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800911e:	bf00      	nop
 8009120:	373c      	adds	r7, #60	@ 0x3c
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800912a:	b480      	push	{r7}
 800912c:	b095      	sub	sp, #84	@ 0x54
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009142:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009150:	643b      	str	r3, [r7, #64]	@ 0x40
 8009152:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800915e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e6      	bne.n	8009132 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3308      	adds	r3, #8
 800916a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	61fb      	str	r3, [r7, #28]
   return(result);
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800917a:	f023 0301 	bic.w	r3, r3, #1
 800917e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3308      	adds	r3, #8
 8009186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009188:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800918a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800918e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e3      	bne.n	8009164 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d118      	bne.n	80091d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f023 0310 	bic.w	r3, r3, #16
 80091b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091c2:	61bb      	str	r3, [r7, #24]
 80091c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6979      	ldr	r1, [r7, #20]
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	613b      	str	r3, [r7, #16]
   return(result);
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e6      	bne.n	80091a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80091ea:	bf00      	nop
 80091ec:	3754      	adds	r7, #84	@ 0x54
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b09c      	sub	sp, #112	@ 0x70
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009202:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0320 	and.w	r3, r3, #32
 800920e:	2b00      	cmp	r3, #0
 8009210:	d171      	bne.n	80092f6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009214:	2200      	movs	r2, #0
 8009216:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800921a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009222:	e853 3f00 	ldrex	r3, [r3]
 8009226:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800922a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800922e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009238:	65bb      	str	r3, [r7, #88]	@ 0x58
 800923a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800923e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e6      	bne.n	800921a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3308      	adds	r3, #8
 8009252:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800925c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925e:	f023 0301 	bic.w	r3, r3, #1
 8009262:	667b      	str	r3, [r7, #100]	@ 0x64
 8009264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800926c:	647a      	str	r2, [r7, #68]	@ 0x44
 800926e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800927a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e5      	bne.n	800924c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009280:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3308      	adds	r3, #8
 8009286:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	623b      	str	r3, [r7, #32]
   return(result);
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009296:	663b      	str	r3, [r7, #96]	@ 0x60
 8009298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3308      	adds	r3, #8
 800929e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80092a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80092a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092a8:	e841 2300 	strex	r3, r2, [r1]
 80092ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e5      	bne.n	8009280 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092b6:	2220      	movs	r2, #32
 80092b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d118      	bne.n	80092f6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f023 0310 	bic.w	r3, r3, #16
 80092d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092e2:	61fb      	str	r3, [r7, #28]
 80092e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	69b9      	ldr	r1, [r7, #24]
 80092e8:	69fa      	ldr	r2, [r7, #28]
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	617b      	str	r3, [r7, #20]
   return(result);
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e6      	bne.n	80092c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092f8:	2200      	movs	r2, #0
 80092fa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009300:	2b01      	cmp	r3, #1
 8009302:	d109      	bne.n	8009318 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009306:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800930a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800930c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009310:	4611      	mov	r1, r2
 8009312:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009314:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009316:	e004      	b.n	8009322 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8009318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800931a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800931e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009320:	4798      	blx	r3
}
 8009322:	bf00      	nop
 8009324:	3770      	adds	r7, #112	@ 0x70
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009336:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009342:	2b01      	cmp	r3, #1
 8009344:	d10b      	bne.n	800935e <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009352:	0852      	lsrs	r2, r2, #1
 8009354:	b292      	uxth	r2, r2
 8009356:	4611      	mov	r1, r2
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800935c:	e004      	b.n	8009368 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	4798      	blx	r3
}
 8009368:	bf00      	nop
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009384:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800938c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009398:	2b80      	cmp	r3, #128	@ 0x80
 800939a:	d109      	bne.n	80093b0 <UART_DMAError+0x40>
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b21      	cmp	r3, #33	@ 0x21
 80093a0:	d106      	bne.n	80093b0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80093aa:	6978      	ldr	r0, [r7, #20]
 80093ac:	f7ff fe7c 	bl	80090a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ba:	2b40      	cmp	r3, #64	@ 0x40
 80093bc:	d109      	bne.n	80093d2 <UART_DMAError+0x62>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b22      	cmp	r3, #34	@ 0x22
 80093c2:	d106      	bne.n	80093d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80093cc:	6978      	ldr	r0, [r7, #20]
 80093ce:	f7ff feac 	bl	800912a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d8:	f043 0210 	orr.w	r2, r3, #16
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80093e8:	6978      	ldr	r0, [r7, #20]
 80093ea:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ec:	bf00      	nop
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800941c:	bf00      	nop
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	60bb      	str	r3, [r7, #8]
   return(result);
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009440:	61fb      	str	r3, [r7, #28]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	61bb      	str	r3, [r7, #24]
 800944c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944e:	6979      	ldr	r1, [r7, #20]
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	e841 2300 	strex	r3, r2, [r1]
 8009456:	613b      	str	r3, [r7, #16]
   return(result);
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e6      	bne.n	800942c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2220      	movs	r2, #32
 8009462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009476:	bf00      	nop
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b085      	sub	sp, #20
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e027      	b.n	8009520 <HAL_UARTEx_DisableFifoMode+0x66>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2224      	movs	r2, #36	@ 0x24
 80094dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0201 	bic.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009540:	2302      	movs	r3, #2
 8009542:	e02d      	b.n	80095a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2224      	movs	r2, #36	@ 0x24
 8009550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 0201 	bic.w	r2, r2, #1
 800956a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f84f 	bl	8009624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2220      	movs	r2, #32
 8009592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095bc:	2302      	movs	r3, #2
 80095be:	e02d      	b.n	800961c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2224      	movs	r2, #36	@ 0x24
 80095cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0201 	bic.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f811 	bl	8009624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009630:	2b00      	cmp	r3, #0
 8009632:	d108      	bne.n	8009646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009644:	e031      	b.n	80096aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009646:	2308      	movs	r3, #8
 8009648:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800964a:	2308      	movs	r3, #8
 800964c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	0e5b      	lsrs	r3, r3, #25
 8009656:	b2db      	uxtb	r3, r3
 8009658:	f003 0307 	and.w	r3, r3, #7
 800965c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	0f5b      	lsrs	r3, r3, #29
 8009666:	b2db      	uxtb	r3, r3
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	7b3a      	ldrb	r2, [r7, #12]
 8009672:	4911      	ldr	r1, [pc, #68]	@ (80096b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009674:	5c8a      	ldrb	r2, [r1, r2]
 8009676:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800967a:	7b3a      	ldrb	r2, [r7, #12]
 800967c:	490f      	ldr	r1, [pc, #60]	@ (80096bc <UARTEx_SetNbDataToProcess+0x98>)
 800967e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009680:	fb93 f3f2 	sdiv	r3, r3, r2
 8009684:	b29a      	uxth	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	7b7a      	ldrb	r2, [r7, #13]
 8009690:	4909      	ldr	r1, [pc, #36]	@ (80096b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009692:	5c8a      	ldrb	r2, [r1, r2]
 8009694:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009698:	7b7a      	ldrb	r2, [r7, #13]
 800969a:	4908      	ldr	r1, [pc, #32]	@ (80096bc <UARTEx_SetNbDataToProcess+0x98>)
 800969c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800969e:	fb93 f3f2 	sdiv	r3, r3, r2
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096aa:	bf00      	nop
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	08009a50 	.word	0x08009a50
 80096bc:	08009a58 	.word	0x08009a58

080096c0 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	607b      	str	r3, [r7, #4]
 80096ca:	460b      	mov	r3, r1
 80096cc:	817b      	strh	r3, [r7, #10]
 80096ce:	4613      	mov	r3, r2
 80096d0:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	897a      	ldrh	r2, [r7, #10]
 80096d6:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	893a      	ldrh	r2, [r7, #8]
 80096dc:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	605a      	str	r2, [r3, #4]
}
 80096e4:	bf00      	nop
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <memset>:
 80096f0:	4402      	add	r2, r0
 80096f2:	4603      	mov	r3, r0
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d100      	bne.n	80096fa <memset+0xa>
 80096f8:	4770      	bx	lr
 80096fa:	f803 1b01 	strb.w	r1, [r3], #1
 80096fe:	e7f9      	b.n	80096f4 <memset+0x4>

08009700 <__errno>:
 8009700:	4b01      	ldr	r3, [pc, #4]	@ (8009708 <__errno+0x8>)
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	20000040 	.word	0x20000040

0800970c <__libc_init_array>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	4d0d      	ldr	r5, [pc, #52]	@ (8009744 <__libc_init_array+0x38>)
 8009710:	4c0d      	ldr	r4, [pc, #52]	@ (8009748 <__libc_init_array+0x3c>)
 8009712:	1b64      	subs	r4, r4, r5
 8009714:	10a4      	asrs	r4, r4, #2
 8009716:	2600      	movs	r6, #0
 8009718:	42a6      	cmp	r6, r4
 800971a:	d109      	bne.n	8009730 <__libc_init_array+0x24>
 800971c:	4d0b      	ldr	r5, [pc, #44]	@ (800974c <__libc_init_array+0x40>)
 800971e:	4c0c      	ldr	r4, [pc, #48]	@ (8009750 <__libc_init_array+0x44>)
 8009720:	f000 f91e 	bl	8009960 <_init>
 8009724:	1b64      	subs	r4, r4, r5
 8009726:	10a4      	asrs	r4, r4, #2
 8009728:	2600      	movs	r6, #0
 800972a:	42a6      	cmp	r6, r4
 800972c:	d105      	bne.n	800973a <__libc_init_array+0x2e>
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	f855 3b04 	ldr.w	r3, [r5], #4
 8009734:	4798      	blx	r3
 8009736:	3601      	adds	r6, #1
 8009738:	e7ee      	b.n	8009718 <__libc_init_array+0xc>
 800973a:	f855 3b04 	ldr.w	r3, [r5], #4
 800973e:	4798      	blx	r3
 8009740:	3601      	adds	r6, #1
 8009742:	e7f2      	b.n	800972a <__libc_init_array+0x1e>
 8009744:	08009a68 	.word	0x08009a68
 8009748:	08009a68 	.word	0x08009a68
 800974c:	08009a68 	.word	0x08009a68
 8009750:	08009a6c 	.word	0x08009a6c

08009754 <sqrt>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	ed2d 8b02 	vpush	{d8}
 800975a:	ec55 4b10 	vmov	r4, r5, d0
 800975e:	f000 f825 	bl	80097ac <__ieee754_sqrt>
 8009762:	4622      	mov	r2, r4
 8009764:	462b      	mov	r3, r5
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	eeb0 8a40 	vmov.f32	s16, s0
 800976e:	eef0 8a60 	vmov.f32	s17, s1
 8009772:	f7f7 f9a7 	bl	8000ac4 <__aeabi_dcmpun>
 8009776:	b990      	cbnz	r0, 800979e <sqrt+0x4a>
 8009778:	2200      	movs	r2, #0
 800977a:	2300      	movs	r3, #0
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f7 f978 	bl	8000a74 <__aeabi_dcmplt>
 8009784:	b158      	cbz	r0, 800979e <sqrt+0x4a>
 8009786:	f7ff ffbb 	bl	8009700 <__errno>
 800978a:	2321      	movs	r3, #33	@ 0x21
 800978c:	6003      	str	r3, [r0, #0]
 800978e:	2200      	movs	r2, #0
 8009790:	2300      	movs	r3, #0
 8009792:	4610      	mov	r0, r2
 8009794:	4619      	mov	r1, r3
 8009796:	f7f7 f825 	bl	80007e4 <__aeabi_ddiv>
 800979a:	ec41 0b18 	vmov	d8, r0, r1
 800979e:	eeb0 0a48 	vmov.f32	s0, s16
 80097a2:	eef0 0a68 	vmov.f32	s1, s17
 80097a6:	ecbd 8b02 	vpop	{d8}
 80097aa:	bd38      	pop	{r3, r4, r5, pc}

080097ac <__ieee754_sqrt>:
 80097ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	4a68      	ldr	r2, [pc, #416]	@ (8009954 <__ieee754_sqrt+0x1a8>)
 80097b2:	ec55 4b10 	vmov	r4, r5, d0
 80097b6:	43aa      	bics	r2, r5
 80097b8:	462b      	mov	r3, r5
 80097ba:	4621      	mov	r1, r4
 80097bc:	d110      	bne.n	80097e0 <__ieee754_sqrt+0x34>
 80097be:	4622      	mov	r2, r4
 80097c0:	4620      	mov	r0, r4
 80097c2:	4629      	mov	r1, r5
 80097c4:	f7f6 fee4 	bl	8000590 <__aeabi_dmul>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4620      	mov	r0, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	f7f6 fd28 	bl	8000224 <__adddf3>
 80097d4:	4604      	mov	r4, r0
 80097d6:	460d      	mov	r5, r1
 80097d8:	ec45 4b10 	vmov	d0, r4, r5
 80097dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	dc0e      	bgt.n	8009802 <__ieee754_sqrt+0x56>
 80097e4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80097e8:	4322      	orrs	r2, r4
 80097ea:	d0f5      	beq.n	80097d8 <__ieee754_sqrt+0x2c>
 80097ec:	b19d      	cbz	r5, 8009816 <__ieee754_sqrt+0x6a>
 80097ee:	4622      	mov	r2, r4
 80097f0:	4620      	mov	r0, r4
 80097f2:	4629      	mov	r1, r5
 80097f4:	f7f6 fd14 	bl	8000220 <__aeabi_dsub>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	f7f6 fff2 	bl	80007e4 <__aeabi_ddiv>
 8009800:	e7e8      	b.n	80097d4 <__ieee754_sqrt+0x28>
 8009802:	152a      	asrs	r2, r5, #20
 8009804:	d115      	bne.n	8009832 <__ieee754_sqrt+0x86>
 8009806:	2000      	movs	r0, #0
 8009808:	e009      	b.n	800981e <__ieee754_sqrt+0x72>
 800980a:	0acb      	lsrs	r3, r1, #11
 800980c:	3a15      	subs	r2, #21
 800980e:	0549      	lsls	r1, r1, #21
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0fa      	beq.n	800980a <__ieee754_sqrt+0x5e>
 8009814:	e7f7      	b.n	8009806 <__ieee754_sqrt+0x5a>
 8009816:	462a      	mov	r2, r5
 8009818:	e7fa      	b.n	8009810 <__ieee754_sqrt+0x64>
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	3001      	adds	r0, #1
 800981e:	02dc      	lsls	r4, r3, #11
 8009820:	d5fb      	bpl.n	800981a <__ieee754_sqrt+0x6e>
 8009822:	1e44      	subs	r4, r0, #1
 8009824:	1b12      	subs	r2, r2, r4
 8009826:	f1c0 0420 	rsb	r4, r0, #32
 800982a:	fa21 f404 	lsr.w	r4, r1, r4
 800982e:	4323      	orrs	r3, r4
 8009830:	4081      	lsls	r1, r0
 8009832:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009836:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800983a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800983e:	07d2      	lsls	r2, r2, #31
 8009840:	bf5c      	itt	pl
 8009842:	005b      	lslpl	r3, r3, #1
 8009844:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800984c:	bf58      	it	pl
 800984e:	0049      	lslpl	r1, r1, #1
 8009850:	2600      	movs	r6, #0
 8009852:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009856:	106d      	asrs	r5, r5, #1
 8009858:	0049      	lsls	r1, r1, #1
 800985a:	2016      	movs	r0, #22
 800985c:	4632      	mov	r2, r6
 800985e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009862:	1917      	adds	r7, r2, r4
 8009864:	429f      	cmp	r7, r3
 8009866:	bfde      	ittt	le
 8009868:	193a      	addle	r2, r7, r4
 800986a:	1bdb      	suble	r3, r3, r7
 800986c:	1936      	addle	r6, r6, r4
 800986e:	0fcf      	lsrs	r7, r1, #31
 8009870:	3801      	subs	r0, #1
 8009872:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009876:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800987a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800987e:	d1f0      	bne.n	8009862 <__ieee754_sqrt+0xb6>
 8009880:	4604      	mov	r4, r0
 8009882:	2720      	movs	r7, #32
 8009884:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009888:	429a      	cmp	r2, r3
 800988a:	eb00 0e0c 	add.w	lr, r0, ip
 800988e:	db02      	blt.n	8009896 <__ieee754_sqrt+0xea>
 8009890:	d113      	bne.n	80098ba <__ieee754_sqrt+0x10e>
 8009892:	458e      	cmp	lr, r1
 8009894:	d811      	bhi.n	80098ba <__ieee754_sqrt+0x10e>
 8009896:	f1be 0f00 	cmp.w	lr, #0
 800989a:	eb0e 000c 	add.w	r0, lr, ip
 800989e:	da42      	bge.n	8009926 <__ieee754_sqrt+0x17a>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	db40      	blt.n	8009926 <__ieee754_sqrt+0x17a>
 80098a4:	f102 0801 	add.w	r8, r2, #1
 80098a8:	1a9b      	subs	r3, r3, r2
 80098aa:	458e      	cmp	lr, r1
 80098ac:	bf88      	it	hi
 80098ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80098b2:	eba1 010e 	sub.w	r1, r1, lr
 80098b6:	4464      	add	r4, ip
 80098b8:	4642      	mov	r2, r8
 80098ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80098be:	3f01      	subs	r7, #1
 80098c0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80098c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80098c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80098cc:	d1dc      	bne.n	8009888 <__ieee754_sqrt+0xdc>
 80098ce:	4319      	orrs	r1, r3
 80098d0:	d01b      	beq.n	800990a <__ieee754_sqrt+0x15e>
 80098d2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009958 <__ieee754_sqrt+0x1ac>
 80098d6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800995c <__ieee754_sqrt+0x1b0>
 80098da:	e9da 0100 	ldrd	r0, r1, [sl]
 80098de:	e9db 2300 	ldrd	r2, r3, [fp]
 80098e2:	f7f6 fc9d 	bl	8000220 <__aeabi_dsub>
 80098e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	4640      	mov	r0, r8
 80098f0:	4649      	mov	r1, r9
 80098f2:	f7f7 f8c9 	bl	8000a88 <__aeabi_dcmple>
 80098f6:	b140      	cbz	r0, 800990a <__ieee754_sqrt+0x15e>
 80098f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80098fc:	e9da 0100 	ldrd	r0, r1, [sl]
 8009900:	e9db 2300 	ldrd	r2, r3, [fp]
 8009904:	d111      	bne.n	800992a <__ieee754_sqrt+0x17e>
 8009906:	3601      	adds	r6, #1
 8009908:	463c      	mov	r4, r7
 800990a:	1072      	asrs	r2, r6, #1
 800990c:	0863      	lsrs	r3, r4, #1
 800990e:	07f1      	lsls	r1, r6, #31
 8009910:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009914:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009918:	bf48      	it	mi
 800991a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800991e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009922:	4618      	mov	r0, r3
 8009924:	e756      	b.n	80097d4 <__ieee754_sqrt+0x28>
 8009926:	4690      	mov	r8, r2
 8009928:	e7be      	b.n	80098a8 <__ieee754_sqrt+0xfc>
 800992a:	f7f6 fc7b 	bl	8000224 <__adddf3>
 800992e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4640      	mov	r0, r8
 8009938:	4649      	mov	r1, r9
 800993a:	f7f7 f89b 	bl	8000a74 <__aeabi_dcmplt>
 800993e:	b120      	cbz	r0, 800994a <__ieee754_sqrt+0x19e>
 8009940:	1ca0      	adds	r0, r4, #2
 8009942:	bf08      	it	eq
 8009944:	3601      	addeq	r6, #1
 8009946:	3402      	adds	r4, #2
 8009948:	e7df      	b.n	800990a <__ieee754_sqrt+0x15e>
 800994a:	1c63      	adds	r3, r4, #1
 800994c:	f023 0401 	bic.w	r4, r3, #1
 8009950:	e7db      	b.n	800990a <__ieee754_sqrt+0x15e>
 8009952:	bf00      	nop
 8009954:	7ff00000 	.word	0x7ff00000
 8009958:	20000098 	.word	0x20000098
 800995c:	20000090 	.word	0x20000090

08009960 <_init>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	bf00      	nop
 8009964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009966:	bc08      	pop	{r3}
 8009968:	469e      	mov	lr, r3
 800996a:	4770      	bx	lr

0800996c <_fini>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	bf00      	nop
 8009970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009972:	bc08      	pop	{r3}
 8009974:	469e      	mov	lr, r3
 8009976:	4770      	bx	lr
